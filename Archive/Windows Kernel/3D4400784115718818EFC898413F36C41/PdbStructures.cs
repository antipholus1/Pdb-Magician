using System;

namespace LiveForensics.Symbols
{
	#region HEADER
	public class CatalogueInformation
	{
		 public Guid Guid { get { return new Guid("3D440078-4115-7188-18EF-C898413F36C4"); } }
		 public uint Age { get { return 1; } }
		 public string MachineType { get { return @"Amd64"; } }
		 public string SymbolsFileName { get { return @"ntkrnlmp.pdb"; } }
		 public uint Signature { get { return 4111912310; } }
		 public string Contents { get { return @"[""LIST_ENTRY64"",""LIST_ENTRY32"",""_LIST_ENTRY"",""_SINGLE_LIST_ENTRY"",""_UNICODE_STRING"",""_STRING"",""_RTL_QUERY_REGISTRY_TABLE"",""_ANONYMOUS_TAG"",""_LARGE_INTEGER"",""_ULARGE_INTEGER"",""_RTL_BITMAP"",""_KFLOATING_SAVE"",""_EXT_SET_PARAMETERS_V0"",""_FAST_MUTEX"",""_KEVENT"",""_LOOKASIDE_LIST_EX"",""_SLIST_ENTRY"",""_SLIST_HEADER"",""_NPAGED_LOOKASIDE_LIST"",""_PAGED_LOOKASIDE_LIST"",""_WORK_QUEUE_ITEM"",""_EXT_DELETE_PARAMETERS"",""_MDL"",""_IRP"",""_SCSI_REQUEST_BLOCK"",""_GUID"",""_IO_STACK_LOCATION"",""_DEVICE_OBJECT"",""_KDPC"",""_EVENT_DATA_DESCRIPTOR"",""_EVENT_DESCRIPTOR"",""_RTL_SPLAY_LINKS"",""_RTL_DYNAMIC_HASH_TABLE_CONTEXT"",""_RTL_DYNAMIC_HASH_TABLE_ENUMERATOR"",""_RTL_DYNAMIC_HASH_TABLE"",""_LUID"",""_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG"",""_KPCR"",""_IO_DRIVER_CREATE_CONTEXT"",""_WHEA_ERROR_SOURCE_DESCRIPTOR"",""_WHEA_EVENT_LOG_ENTRY"",""_WHEA_EVENT_LOG_ENTRY_FLAGS"",""_WHEA_ERROR_PACKET_V2"",""_WHEA_ERROR_RECORD"",""_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR"",""_RTL_RB_TREE"",""_RTL_BALANCED_NODE"",""_RTL_AVL_TREE"",""_KPRCB"",""_EX_PUSH_LOCK"",""_HALP_ALLOC_CONTEXT"",""_MCUPDATE_INFO"",""_HARDWARE_PTE"",""_DEVPROPKEY"",""_WHEA_IPF_CMC_DESCRIPTOR"",""_WHEA_AER_ENDPOINT_DESCRIPTOR"",""_WHEA_AER_BRIDGE_DESCRIPTOR"",""_INTERFACE"",""_DEVICE_CAPABILITIES"",""_WHEA_XPF_PROCESSOR_ERROR_SECTION"",""_WHEA_XPF_CMC_DESCRIPTOR"",""_RTL_DYNAMIC_HASH_TABLE_ENTRY"",""_WHEA_GENERIC_ERROR_DESCRIPTOR_V2"",""_SECONDARY_INTERRUPT_LINE_STATE"",""_AER_ENDPOINT_DESCRIPTOR_FLAGS"",""_GENERAL_LOOKASIDE"",""_WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS"",""_IO_APIC_DATA"",""_WHEA_GENERIC_ERROR_DESCRIPTOR"",""_REGISTERED_INTERRUPT_CONTROLLER"",""_WHEA_PCI_SLOT_NUMBER"",""_WHEA_XPF_MCE_DESCRIPTOR"",""_FILE_OBJECT"",""_PROCLOCALSAPIC"",""_GENERAL_LOOKASIDE_POOL"",""_DISPATCHER_HEADER"",""_NAMED_PIPE_CREATE_PARAMETERS"",""_WAIT_CONTEXT_BLOCK"",""_KSPIN_LOCK_QUEUE"",""_GEN_ADDR"",""_WHEA_IPF_MCA_DESCRIPTOR"",""_WHEA_AER_ROOTPORT_DESCRIPTOR"",""_IO_COMPLETION_CONTEXT"",""_POWER_STATE"",""_DEVOBJ_EXTENSION"",""_AER_ROOTPORT_DESCRIPTOR_FLAGS"",""_KDEVICE_QUEUE"",""_KGDTENTRY64"",""_WHEA_REVISION"",""_KAPC"",""_WHEA_XPF_MCA_SECTION"",""_SYSTEM_POWER_STATE_CONTEXT"",""_IOSAPIC"",""_KIDTENTRY64"",""_XSAVE_AREA_HEADER"",""_KPROCESSOR_STATE"",""_KDEVICE_QUEUE_ENTRY"",""_SECTION_OBJECT_POINTERS"",""_ACPI_CACHED_TABLE"",""_WHEA_NOTIFICATION_DESCRIPTOR"",""_IO_APIC_REGISTERS"",""_IO_RESOURCE_REQUIREMENTS_LIST"",""_IO_SECURITY_CONTEXT"",""_KTSS64"",""_VPB"",""_MAILSLOT_CREATE_PARAMETERS"",""_NT_TIB"",""_POWER_SEQUENCE"",""_WHEA_ERROR_RECORD_HEADER"",""_EXCEPTION_REGISTRATION_RECORD"",""_FADT"",""_PROCLOCALAPIC"",""_AER_BRIDGE_DESCRIPTOR_FLAGS"",""_RSDT_32"",""_LOCAL_NMISOURCE"",""_CM_RESOURCE_LIST"",""_SECURITY_QUALITY_OF_SERVICE"",""_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS"",""_WHEA_EVENT_LOG_ENTRY_HEADER"",""_INTERRUPT_FUNCTION_TABLE"",""_WHEA_DEVICE_DRIVER_DESCRIPTOR"",""_PLATFORM_INTERRUPT"",""_ADAPTER_OBJECT"",""_RSDP"",""_WHEA_IPF_CPE_DESCRIPTOR"",""_XPF_MCE_FLAGS"",""_MCG_STATUS"",""_XSDT"",""_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS"",""_CONTEXT"",""_IOAPIC"",""_WHEA_ERROR_PACKET_FLAGS"",""_IO_STATUS_BLOCK"",""_M128A"",""_MCG_CAP"",""_WHEA_ERROR_SOURCE_CONFIGURATION_DD"",""_WHEA_ERROR_RECORD_HEADER_VALIDBITS"",""_INTERRUPT_LINE"",""_HALP_DMA_CONTROLLER"",""_HAL_INTEL_ENLIGHTENMENT_INFORMATION"",""_WHEA_XPF_MC_BANK_DESCRIPTOR"",""_DESCRIPTION_HEADER"",""_CONTROLLER_OBJECT"",""_SCATTER_GATHER_LIST"",""_HAL_HV_SVM_SYSTEM_CAPABILITIES"",""_WHEA_TIMESTAMP"",""_WHEA_XPF_NMI_DESCRIPTOR"",""_HALP_DMA_MASTER_ADAPTER_OBJECT"",""_TXN_PARAMETER_BLOCK"",""_HALP_DMA_CHANNEL"",""_WHEA_PERSISTENCE_INFO"",""_GROUP_AFFINITY"",""_DMA_ADAPTER"",""_INTERRUPT_TARGET"",""_FACS"",""_WHEA_AMD_EXTENDED_REGISTERS"",""_DMA_TRANSFER_CONTEXT"",""_SECONDARY_IC_LIST_ENTRY"",""_DRIVER_OBJECT"",""_HAL_HV_DMA_DOMAIN_INFO"",""_HAL_HV_SVM_DEVICE_CAPABILITIES"",""_XPF_MC_BANK_FLAGS"",""_IO_NMISOURCE"",""_DRIVER_EXTENSION"",""_ISA_VECTOR"",""_IO_RESOURCE_LIST"",""_KSPECIAL_REGISTERS"",""POHANDLE__"",""_INTERRUPT_LINE_STATE"",""_MCI_STATUS"",""_KAFFINITY_EX"",""_XSAVE_FORMAT"",""_WHEA_NOTIFICATION_FLAGS"",""_MCI_STATUS_INTEL_BITS"",""_WHEA_PROCESSOR_GENERIC_ERROR_SECTION"",""_MAPIC"",""_DMA_OPERATIONS"",""_IO_RESOURCE_DESCRIPTOR"",""_SCATTER_GATHER_ELEMENT"",""_KTB_FLUSH_VA"",""_ACCESS_STATE"",""_HALP_EMERGENCY_LA_QUEUE_ENTRY"",""_HALP_DMA_ADAPTER_OBJECT"",""_KDESCRIPTOR"",""_EXCEPTION_RECORD"",""_WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS"",""_WHEA_ERROR_RECORD_HEADER_FLAGS"",""_DMA_TRANSFER_INFO"",""_MCI_STATUS_BITS_COMMON"",""_DMA_TRANSFER_INFO_V2"",""_WHEA_RECOVERY_CONTEXT"",""_HALP_DMA_TRANSLATION_BUFFER"",""_SECONDARY_INTERRUPT_PROVIDER_INTERFACE"",""_HALP_DMA_DOMAIN_OBJECT"",""_CM_FULL_RESOURCE_DESCRIPTOR"",""_DMA_TRANSFER_INFO_V1"",""_FAST_IO_DISPATCH"",""_HALP_DMA_TRANSLATION_ENTRY"",""_ERESOURCE"",""_DMA_FUNCTION_TABLE"",""_EXT_IOMMU_DEVICE_ID"",""_FILE_BASIC_INFORMATION"",""_DMA_TRANSFER_CONTEXT_V1"",""_DMA_COMMON_BUFFER_VECTOR"",""_PRIVILEGE_SET"",""_INITIAL_PRIVILEGE_SET"",""_DMA_ADAPTER_INFO"",""_HALP_DMA_TRANSLATION_BUFFER_POSITION"",""_MCI_STATUS_AMD_BITS"",""_EXT_IOMMU_DEVICE_ID_ACPI"",""_LUID_AND_ATTRIBUTES"",""_EXT_IOMMU_DEVICE_ID_TEST"",""_FILE_NETWORK_OPEN_INFORMATION"",""_SECURITY_SUBJECT_CONTEXT"",""_OWNER_ENTRY"",""_DMA_ADAPTER_INFO_V1"",""_EXT_IOMMU_DEVICE_ID_GIC"",""_FILE_STANDARD_INFORMATION"",""_EXT_IOMMU_DEVICE_ID_PCI"",""_CM_PARTIAL_RESOURCE_LIST"",""_CM_PARTIAL_RESOURCE_DESCRIPTOR"",""_DMA_COMMON_BUFFER_ENTRY"",""_DMA_REQUEST_LINE_BINDING_DESCRIPTION"",""_DMA_SCATTER_GATHER_LIST"",""_PS_MITIGATION_OPTIONS_MAP"",""_PS_MITIGATION_AUDIT_OPTIONS_MAP"",""_KSYSTEM_TIME"",""_KUSER_SHARED_DATA"",""_TP_POOL"",""_TP_CLEANUP_GROUP"",""_ACTIVATION_CONTEXT"",""_TP_CALLBACK_INSTANCE"",""_TP_CALLBACK_ENVIRON_V3"",""_TEB"",""_IMAGE_NT_HEADERS64"",""_IMAGE_DOS_HEADER"",""_INVPCID_DESCRIPTOR"",""_SINGLE_LIST_ENTRY32"",""_PS_TRUSTLET_CREATE_ATTRIBUTES"",""_PS_TRUSTLET_ATTRIBUTE_DATA"",""_PS_TRUSTLET_ATTRIBUTE_HEADER"",""_PS_TRUSTLET_ATTRIBUTE_TYPE"",""_TRUSTLET_MAILBOX_KEY"",""_TRUSTLET_COLLABORATION_ID"",""_KSTACK_COUNT"",""_KPROCESS"",""_KTHREAD"",""_KSTACK_CONTROL"",""_QUAD"",""_PP_LOOKASIDE_LIST"",""_KNODE"",""_ENODE"",""_HANDLE_TABLE"",""_HANDLE_TABLE_ENTRY_INFO"",""_HANDLE_TABLE_ENTRY"",""_EX_FAST_REF"",""_AUX_ACCESS_DATA"",""_OBJECT_HANDLE_INFORMATION"",""_ETHREAD"",""_PAGEFAULT_HISTORY"",""_EPROCESS_QUOTA_BLOCK"",""_PO_PROCESS_ENERGY_CONTEXT"",""_PS_INTERLOCKED_TIMER_DELAY_VALUES"",""_EPROCESS"",""_EWOW64PROCESS"",""_JOB_ACCESS_STATE"",""_JOB_NOTIFICATION_INFORMATION"",""_JOB_CPU_RATE_CONTROL"",""_PSP_STORAGE"",""_JOB_NET_RATE_CONTROL"",""_EJOB"",""_IO_PRIORITY_INFO"",""_EVENT_RECORD"",""_PERFINFO_GROUPMASK"",""_EX_RUNDOWN_REF"",""_MM_PAGE_ACCESS_INFO_HEADER"",""_PROCESS_EXTENDED_ENERGY_VALUES"",""_FSRTL_ADVANCED_FCB_HEADER"",""_iobuf"",""_RTL_HASH_TABLE"",""_RTL_HASH_ENTRY"",""_RTL_HASH_TABLE_ITERATOR"",""_RTL_CHASH_TABLE"",""_RTL_CHASH_ENTRY"",""_tlgProvider_t"",""_EVENT_FILTER_DESCRIPTOR"",""_tlgProviderMetadata_t"",""__m64"",""__m128"",""wil_details_FeatureDescriptor"",""wil_details_FeatureStateCache"",""wil_details_FeatureReportingCache"",""wil_details_RecordUsageResult"",""wil_details_ReportedState"",""wil_details_RecordedState"",""FEATURE_LOGGED_TRAITS"",""FEATURE_ERROR"",""wil_details_StagingConfigFeature"",""wil_details_StagingConfig"",""wil_details_StagingConfigHeader"",""wil_details_StagingConfigUsageTrigger"",""wil_details_StagingConfigHeaderProperties"",""wil_FeatureState"",""_RTL_FEATURE_CONFIGURATION"",""__WIL__WNF_STATE_NAME"",""_WNF_STATE_NAME"",""_WNF_TYPE_ID"",""_wil_details_UsageSubscriptionData"",""wil_StagingConfig"",""_RTL_FEATURE_USAGE_REPORT"",""wil_details_FeatureTestState"",""_MMPTE"",""_EX_PUSH_LOCK_AUTO_EXPAND"",""_MI_CACHED_PTE"",""_KLOCK_QUEUE_HANDLE"",""_MMPFNLIST"",""_MMCLONE_DESCRIPTOR"",""_MMPFN"",""_SEGMENT"",""_CONTROL_AREA"",""_MI_CACHED_PTES"",""_MI_SYSTEM_PTE_TYPE"",""_MMVAD_SHORT"",""_MM_STORE_KEY"",""_MI_PARTITION"",""_EPARTITION"",""_HHIVE"",""_HV_GET_CELL_CONTEXT"",""_CM_KEY_CONTROL_BLOCK"",""tagSWITCH_CONTEXT"",""_CM_KEY_BODY"",""_CM_KEY_NODE"",""_CM_NAME_CONTROL_BLOCK"",""_CM_KEY_VALUE"",""_CMHIVE"",""_HIVE_LOAD_FAILURE"",""_CM_KCB_UOW"",""_CM_TRANS"",""_PCW_COUNTER_DESCRIPTOR"",""_PCW_REGISTRATION"",""_PCW_REGISTRATION_INFORMATION"",""_PCW_PROCESSOR_INFO"",""_PCW_INSTANCE"",""_PCW_DATA"",""_PCW_BUFFER"",""_SYNCH_COUNTERS"",""_ETW_PERF_COUNTERS"",""_ETW_SESSION_PERF_COUNTERS"",""_FILESYSTEM_DISK_COUNTERS"",""_THERMAL_ZONE_COUNTERS"",""_TEB32"",""_TEB64"",""_HV_X64_HYPERVISOR_FEATURES"",""_HV_PARTITION_PRIVILEGE_MASK"",""_KTIMER_TABLE"",""_KTIMER_TABLE_ENTRY"",""_XSTATE_SAVE"",""_XSAVE_AREA"",""_KEXCEPTION_FRAME"",""_KTRAP_FRAME"",""_KIST_BASE_FRAME"",""_KIST_LINK_FRAME"",""_DEVICE_NODE_IOMMU_EXTENSION"",""_DEVICE_NODE"",""_MCGEN_TRACE_CONTEXT"",""_SID"",""_PNP_DEVICE_COMPLETION_QUEUE"",""_KSEMAPHORE"",""_PNP_ASSIGN_RESOURCES_CONTEXT"",""_PNP_RESOURCE_REQUEST"",""_EXCEPTION_RECORD64"",""_EXCEPTION_RECORD32"",""_DBGKM_EXCEPTION64"",""_DBGKM_EXCEPTION32"",""_X86_KTRAP_FRAME"",""_X86_KTRAP_FRAME_BLUE"",""_DBGKD_LOAD_SYMBOLS64"",""_DBGKD_LOAD_SYMBOLS32"",""_DBGKD_READ_MEMORY64"",""_DBGKD_READ_MEMORY32"",""_DBGKD_WRITE_MEMORY64"",""_DBGKD_WRITE_MEMORY32"",""_DBGKD_WRITE_BREAKPOINT64"",""_DBGKD_WRITE_BREAKPOINT32"",""_DBGKD_READ_WRITE_IO64"",""_DBGKD_READ_WRITE_IO32"",""_DBGKD_READ_WRITE_IO_EXTENDED64"",""_DBGKD_READ_WRITE_IO_EXTENDED32"",""_DBGKD_SET_SPECIAL_CALL32"",""_DBGKD_SET_SPECIAL_CALL64"",""_DBGKD_SET_INTERNAL_BREAKPOINT32"",""_DBGKD_SET_INTERNAL_BREAKPOINT64"",""_DBGKD_GET_INTERNAL_BREAKPOINT64"",""_DBGKD_GET_INTERNAL_BREAKPOINT32"",""_DBGKD_MANIPULATE_STATE64"",""_DBGKD_MANIPULATE_STATE32"",""_DBGKD_READ_WRITE_MSR"",""_DBGKD_BREAKPOINTEX"",""_DBGKD_SEARCH_MEMORY"",""_DBGKD_RESTORE_BREAKPOINT"",""_DBGKD_CONTINUE"",""_DBGKD_CONTINUE2"",""_DEVICE_MANAGE_DATA_SET_ATTRIBUTES"",""_DEVICE_DATA_SET_RANGE"",""_DEVICE_DSM_DEFINITION"",""_DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT"",""_PEP_ACPI_RESOURCE"",""_PEP_ACPI_IO_MEMORY_RESOURCE"",""_PEP_ACPI_INTERRUPT_RESOURCE"",""_PEP_ACPI_GPIO_RESOURCE"",""_PEP_ACPI_SPB_I2C_RESOURCE"",""_PEP_ACPI_SPB_UART_RESOURCE"",""_PEP_ACPI_SPB_SPI_RESOURCE"",""_PEP_ACPI_EXTENDED_ADDRESS"",""_PPM_PLATFORM_STATES"",""_CPU_INFO"",""_POP_PPM_PROFILE"",""_PPM_ENGINE_SETTINGS"",""_EXP_LICENSE_STATE"",""_ESERVERSILO_GLOBALS"",""_SILO_USER_SHARED_DATA"",""_POP_FX_COMPONENT_FLAGS"",""_POP_FX_PERF_FLAGS"",""_POP_FX_DEVICE_STATUS"",""_POP_RW_LOCK"",""_VOLUME_CACHE_MAP"",""_SHARED_CACHE_MAP"",""_VACB"",""_CC_PARTITION"",""_WORK_QUEUE_ENTRY"",""_DEFERRED_WRITE"",""_CC_EXTERNAL_CACHE_INFO"",""VACB_LEVEL_ALLOCATION_LIST"",""_VACB_LEVEL_REFERENCE"",""_LOG_HANDLE_CONTEXT"",""_MBCB"",""_BITMAP_RANGE"",""_SHARED_CACHE_MAP_LIST_CURSOR"",""_LAZY_WRITER"",""_CACHE_UNINITIALIZE_EVENT"",""_HEAP_SUBALLOCATOR_CALLBACKS"",""_SEGMENT_HEAP_EXTRA"",""_RTL_CSPARSE_BITMAP"",""_RTL_SPARSE_ARRAY"",""_HEAP_VAMGR_ALLOCATOR"",""_HEAP_VAMGR_VASPACE"",""_HEAP_VAMGR_RANGE"",""_RTLP_HP_HEAP_MANAGER"",""_RTLP_HP_ALLOC_TRACKER"",""_RTL_STACKDB_CONTEXT"",""_HEAP_LFH_FAST_REF"",""_HEAP_LFH_SUBSEGMENT_OWNER"",""_HEAP_LFH_CONTEXT"",""_HEAP_LFH_BUCKET"",""_HEAP_LFH_ONDEMAND_POINTER"",""_HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS"",""_HEAP_LFH_SUBSEGMENT"",""_HEAP_LFH_UNUSED_BYTES_INFO"",""_RTLP_HP_QUEUE_LOCK_HANDLE"",""_HEAP_VS_CONTEXT"",""_HEAP_VS_CHUNK_HEADER"",""_HEAP_VS_CHUNK_HEADER_SIZE"",""_HEAP_VS_CHUNK_FREE_HEADER"",""_HEAP_VS_SUBSEGMENT"",""_HEAP_VS_UNUSED_BYTES_INFO"",""_HEAP_PAGE_RANGE_DESCRIPTOR"",""_HEAP_PAGE_SEGMENT"",""_HEAP_SEG_CONTEXT"",""_HEAP_RUNTIME_MEMORY_STATS"",""_HEAP_DESCRIPTOR_KEY"",""RTL_HP_ENV_HANDLE"",""_SEGMENT_HEAP"",""_RTL_DYNAMIC_LOOKASIDE"",""_RTL_LOOKASIDE"",""_HEAP_LIST_LOOKUP"",""_HEAP"",""_HEAP_LOCK"",""_HEAP_ENTRY"",""_HEAP_SEGMENT"",""_HEAP_VIRTUAL_ALLOC_ENTRY"",""_HEAP_FREE_ENTRY"",""_RTLP_HP_PADDING_HEADER"",""_HEAP_LARGE_ALLOC_DATA"",""_PORT_MESSAGE"",""_ALPC_MESSAGE_ATTRIBUTES"",""_ALPC_HANDLE_ENTRY"",""_BLOB_TYPE"",""_BLOB"",""_KALPC_SECTION"",""_KALPC_REGION"",""_KALPC_VIEW"",""_ALPC_COMMUNICATION_INFO"",""_CALLBACK_OBJECT"",""_ALPC_PORT"",""_ALPC_COMPLETION_LIST"",""_OBJECT_ATTRIBUTES"",""_OBJECT_TYPE"",""_PALPC_PORT_REFERENCE_WAIT_BLOCK"",""_PORT_MESSAGE32"",""_KALPC_MESSAGE"",""_KALPC_RESERVE"",""_ALPC_DISPATCH_CONTEXT"",""_REMOTE_PORT_VIEW"",""_KALPC_HANDLE_DATA"",""_KALPC_MESSAGE_ATTRIBUTES"",""_KALPC_SECURITY_DATA"",""_ALPC_WORK_ON_BEHALF_TICKET"",""_KALPC_DIRECT_EVENT"",""_IO_MINI_COMPLETION_PACKET_USER"",""_IOP_IRP_EXTENSION"",""_FILE_SEGMENT_ELEMENT"",""_RELATIVE_SYMLINK_INFO"",""_ECP_LIST"",""_IOP_FILE_OBJECT_EXTENSION"",""_OPEN_PACKET"",""_ETW_SYSTEMTIME"",""_TIME_FIELDS"",""_TRACE_LOGFILE_HEADER"",""_ETW_BUFFER_QUEUE"",""_WMI_BUFFER_HEADER"",""_ETW_STACK_CACHE"",""_EX_TIMER"",""_ETW_SOFT_RESTART_CONTEXT"",""_ETW_EVENT_CALLBACK_CONTEXT"",""_WMI_LOGGER_CONTEXT"",""_HAL_PMC_COUNTERS"",""_ETW_PMC_SUPPORT"",""_ETW_LBR_SUPPORT"",""_ETW_IPT_SUPPORT"",""_EX_WNF_SUBSCRIPTION"",""_ETW_SILODRIVERSTATE"",""_ETW_LOGGER_HANDLE"",""_CI_NGEN_PATHS"",""_SEP_SILOSTATE"",""_TOKEN"",""_SEP_LOGON_SESSION_REFERENCES"",""_OBJECT_HEADER"",""_OBJECT_HEADER_QUOTA_INFO"",""_OBJECT_HEADER_PROCESS_INFO"",""_OBJECT_HEADER_HANDLE_INFO"",""_OBJECT_HEADER_NAME_INFO"",""_OBJECT_HEADER_CREATOR_INFO"",""_OBJECT_HEADER_AUDIT_INFO"",""_OBJECT_HEADER_EXTENDED_INFO"",""_OBJECT_FOOTER"",""_OB_EXTENDED_USER_INFO"",""_HANDLE_REVOCATION_INFO"",""_OBP_LOOKUP_CONTEXT"",""_OBJECT_DIRECTORY"",""_OBP_SILODRIVERSTATE"",""_WHEAP_INFO_BLOCK"",""_WHEAP_ERROR_SOURCE"",""_WHEAP_ERROR_RECORD_WRAPPER"",""_WNF_NODE_HEADER"",""_WNF_LOCK"",""_WNF_STATE_NAME_STRUCT"",""_WNF_SCOPE_INSTANCE"",""_WNF_NAME_INSTANCE"",""_WNF_SUBSCRIPTION"",""_WNF_PROCESS_CONTEXT"",""_WNF_SILODRIVERSTATE"",""_PCW_CALLBACK_INFORMATION"",""_KSTATIC_AFFINITY_BLOCK"",""_WNF_DISPATCHER"",""_MMSECTION_FLAGS"",""_PEP_ACPI_SPB_RESOURCE"",""_DBGKD_GET_VERSION32"",""_HANDLE_TABLE_FREE_LIST"",""_VF_KE_CRITICAL_REGION_TRACE"",""_KDPC_DATA"",""_DBGKD_QUERY_SPECIAL_CALLS"",""_PLATFORM_IDLE_ACCOUNTING"",""_ACTIVATION_CONTEXT_STACK32"",""_IMAGE_ROM_OPTIONAL_HEADER"",""_MM_SESSION_SPACE"",""_OBJECT_NAMESPACE_LOOKUPTABLE"",""_CMP_VOLUME_CONTEXT"",""_OBJECT_TYPE_INITIALIZER"",""_KLOCK_ENTRY"",""_KTHREAD_COUNTERS"",""_HEAP_TAG_ENTRY"",""_DBGKD_ANY_CONTROL_SET"",""_MMVAD_FLAGS"",""_HEAP_COUNTERS"",""_HEAP_PSEUDO_TAG_ENTRY"",""_POP_IRP_WORKER_ENTRY"",""_POP_IRP_DATA"",""_CLIENT_ID"",""_PROCESS_DISK_COUNTERS"",""_POOL_TRACKER_TABLE"",""_KLOCK_ENTRY_BOOST_BITMAP"",""_CMP_VOLUME_MANAGER"",""_DBGKD_GET_SET_BUS_DATA"",""_DBGKP_ERROR_PORT"",""_DBGK_SILOSTATE"",""_STACK_TABLE"",""_PPM_IDLE_STATES"",""_MMVAD_FLAGS1"",""_MM_PRIVATE_VAD_FLAGS"",""_EVENT_HEADER_EXTENDED_DATA_ITEM"",""_ETW_HASH_BUCKET"",""_VI_DEADLOCK_RESOURCE"",""_RTL_HEAP_MEMORY_LIMIT_DATA"",""_SEP_TOKEN_DIAG_TRACK_ENTRY"",""_EX_PUSH_LOCK_AUTO_EXPAND_STATE"",""_DUMMY_FILE_OBJECT"",""_PPM_POLICY_SETTINGS_MASK"",""_KSCHEDULING_GROUP"",""_CM_INTENT_LOCK"",""_AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION"",""_TEB_ACTIVE_FRAME_CONTEXT"",""_TEB_ACTIVE_FRAME"",""_JOBOBJECT_ENERGY_TRACKING_STATE"",""_LOCK_HEADER"",""_SEP_CACHED_HANDLES_ENTRY"",""_PROCESSOR_PROFILE_CONTROL_AREA"",""_KHETERO_PROCESSOR_SET"",""_CM_NAME_HASH"",""_MMSESSION"",""_CC_ASYNC_READ_CONTEXT"",""_CLIENT_ID64"",""_DIRTY_PAGE_STATISTICS"",""_EPROCESS_VALUES"",""_ETW_PARTITION_CONTEXT"",""_SK_CRASH_MINIDUMP"",""_SID_AND_ATTRIBUTES"",""_SK_CRASH_STACK_FRAME"",""_DEVICE_MAP"",""_RTL_BITMAP_EX"",""_MMPTE_SUBSECTION"",""_TRIAGE_9F_PNP"",""_CM_KEY_SECURITY_CACHE_ENTRY"",""_POP_CURRENT_BROADCAST"",""_PHYSICAL_MEMORY_DESCRIPTOR"",""_MMPTE_HARDWARE"",""_MM_SESSION_SPACE_FLAGS"",""_OBJECT_HANDLE_COUNT_DATABASE"",""_JOB_RATE_CONTROL_HEADER"",""_OBJECT_NAME_INFORMATION"",""_PROCESSOR_NUMBER"",""_DBGKD_SET_CONTEXT"",""_GDI_TEB_BATCH64"",""_HEAP_TUNING_PARAMETERS"",""_LPCP_MESSAGE"",""_PCW_MASK_INFORMATION"",""_PO_DIRECTED_DRIPS_STATE"",""_DBGKD_WRITE_CUSTOM_BREAKPOINT"",""_DBGKD_QUERY_MEMORY"",""_OBJECT_REF_INFO"",""_KQOS_GROUPING_SETS"",""_MI_PARTITION_STORES"",""_PS_PROPERTY_SET"",""_TRIAGE_EX_WORK_QUEUE"",""_PROCESSOR_IDLE_CONSTRAINTS"",""_ALPC_PORT_ATTRIBUTES"",""_THREAD_ENERGY_VALUES"",""_WHEAP_WORK_QUEUE"",""_RTL_RUN_ONCE"",""_CM_PATH_HASH"",""_RTL_HP_VS_CONFIG"",""_EXHANDLE"",""_COUNTER_READING"",""_SECURITY_DESCRIPTOR"",""_PNP_DEVICE_EVENT_LIST"",""_PO_DEVICE_NOTIFY"",""_DUAL"",""_MI_VAD_EVENT_BLOCK"",""_SUBSECTION"",""_KUMS_CONTEXT_HEADER"",""_REQUEST_MAILBOX"",""_ACTIVATION_CONTEXT_STACK"",""CMP_OFFSET_ARRAY"",""_FAST_ERESOURCE"",""_KEXECUTE_OPTIONS"",""_TRIAGE_PNP_DEVICE_COMPLETION_QUEUE"",""_HEAP_STOP_ON_VALUES"",""_SEP_RM_LSA_CONNECTION_STATE"",""_MM_GRAPHICS_VAD_FLAGS"",""_KTIMER_TABLE_STATE"",""_CM_KCB_LAYER_INFO"",""_CM_RM"",""_MMWORKING_SET_EXPANSION_HEAD"",""_MM_PAGED_POOL_INFO"",""_PPM_IDLE_STATE"",""_CLIENT_ID32"",""_EX_HEAP_SESSION_STATE"",""_ARMCE_DBGKD_CONTROL_SET"",""_GDI_TEB_BATCH32"",""_VF_TARGET_VERIFIED_DRIVER_DATA"",""_SEP_LUID_TO_INDEX_MAP_ENTRY"",""_MI_IMAGE_SECURITY_REFERENCE"",""_MEMORY_ALLOCATION_DESCRIPTOR"",""_SYSTEM_POWER_POLICY"",""_OBP_SYSTEM_DOS_DEVICE_STATE"",""_DELAY_ACK_FO"",""_WNF_SCOPE_MAP"",""_CM_KEY_REFERENCE"",""_PEBS_DS_SAVE_AREA"",""_OB_HANDLE_REVOCATION_BLOCK"",""_DIRTY_PAGE_THRESHOLDS"",""_LOCK_TRACKER"",""_WNF_STATE_NAME_REGISTRATION"",""_MMSECTION_FLAGS2"",""_HANDLE_TRACE_DEBUG_INFO"",""_ALPC_HANDLE_TABLE"",""HAL_PRIVATE_DISPATCH"",""_PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS"",""_KSECURE_FAULT_INFORMATION"",""_WNF_STATE_DATA"",""_KREQUEST_PACKET"",""_PS_PROCESS_WAKE_INFORMATION"",""_HBASE_BLOCK"",""_PROCESS_ENERGY_VALUES"",""_MMCLONE_HEADER"",""_MI_SYSTEM_INFORMATION"",""_CMSI_RW_LOCK"",""_ETW_SILO_TRACING_BLOCK"",""_MI_VISIBLE_PARTITION"",""_WHEAP_ERROR_SOURCE_TABLE"",""_ETW_DECODE_CONTROL_ENTRY"",""_HCELL"",""_HMAP_DIRECTORY"",""PROCESSOR_IDLESTATE_POLICY"",""_LOGGED_STREAM_CALLBACK_V1"",""_VF_AVL_TREE"",""_IMAGE_FILE_HEADER"",""_CACHE_MANAGER_CALLBACKS"",""_MMSUPPORT_FULL"",""_JOBOBJECT_WAKE_FILTER"",""_MI_PROCESS_STATE"",""_MMSUPPORT_AGGREGATION"",""_IO_TIMER"",""_EXCEPTION_POINTERS"",""_PRIVATE_CACHE_MAP"",""_ETW_GUID_ENTRY"",""_ARBITER_INSTANCE"",""_SECURITY_CLIENT_CONTEXT"",""_VF_POOL_TRACE"",""_RTLP_HP_HEAP_GLOBALS"",""_MI_SYSTEM_IMAGE_STATE"",""_MMPFNENTRY1"",""_VI_FAULT_TRACE"",""_MI_FLAGS"",""_ACL"",""_HEAP_VS_DELAY_FREE_CONTEXT"",""_PENDING_RELATIONS_LIST_ENTRY"",""_PS_DYNAMIC_ENFORCED_ADDRESS_RANGES"",""_AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION"",""SYSTEM_POWER_CAPABILITIES"",""_KWAIT_CHAIN"",""_ALPC_COMPLETION_PACKET_LOOKASIDE"",""_VF_DRIVER_IO_CALLBACKS"",""_CM_UOW_SET_VALUE_KEY_DATA"",""_MI_PARTITION_STATE"",""_MI_ENCLAVE_STATE"",""_POP_THERMAL_ZONE"",""_CM_DIRTY_VECTOR_LOG"",""_PCI_BUSMASTER_DESCRIPTOR"",""_HVP_VIEW_MAP"",""_TRIAGE_PNP_DEVICE_COMPLETION_REQUEST"",""_HIVE_WRITE_WAIT_QUEUE"",""_BUS_EXTENSION_LIST"",""_HAL_LOG_REGISTER_CONTEXT"",""_DEVICE_OBJECT_LIST_ENTRY"",""_HBIN"",""_PS_PROTECTION"",""_MMPFNENTRY3"",""_SEP_SID_VALUES_BLOCK"",""_MM_PAGE_ACCESS_INFO"",""_NT_TIB64"",""_EX_RUNDOWN_REF_CACHE_AWARE"",""_MI_SESSION_DRIVER_UNLOAD"",""_MM_PAGE_ACCESS_INFO_FLAGS"",""_MM_SHARED_VAD_FLAGS"",""_CM_TRANS_PTR"",""_CM_WORKITEM"",""_CM_KEY_HASH"",""_KGATE"",""_flags"",""_AMD64_DBGKD_CONTROL_SET"",""_PS_IO_CONTROL_ENTRY"",""_MI_HUGE_PFN"",""_RTL_HP_LFH_CONFIG"",""_CM_UOW_SET_VALUE_LIST_DATA"",""_VF_TRACKER_STAMP"",""_HEAP_LFH_AFFINITY_SLOT"",""_VI_DEADLOCK_THREAD"",""_ARBITER_RETEST_ALLOCATION_PARAMETERS"",""_KPRCBFLAG"",""_MI_SUBSECTION_ENTRY1"",""_POP_ACTION_TRIGGER"",""_RTL_ATOM_TABLE"",""_KTIMER2"",""_ALPC_PROCESS_CONTEXT"",""__WIL__WNF_USER_SUBSCRIPTION"",""_MI_SESSION_STATE"",""_XSTATE_CONFIGURATION"",""_OBJECT_SYMBOLIC_LINK"",""_MI_SECTION_STATE"",""_RTL_ATOM_TABLE_ENTRY"",""_WHEAP_ERROR_RECORD_WRAPPER_FLAGS"",""_CM_UOW_KEY_STATE_MODIFICATION"",""_MI_CONTROL_AREA_WAIT_BLOCK"",""_RTL_CRITICAL_SECTION"",""_PI_RESOURCE_ARBITER_ENTRY"",""_ETW_PERFECT_HASH_FUNCTION"",""_ETW_FILTER_HEADER"",""_MMPTE_SOFTWARE"",""_MM_DRIVER_VERIFIER_DATA"",""_HEAP_SEGMENT_MGR_COMMIT_STATE"",""_SID_IDENTIFIER_AUTHORITY"",""_ACTIVATION_CONTEXT_DATA"",""_ASSEMBLY_STORAGE_MAP"",""_PEB"",""_RTL_HP_SEG_ALLOC_POLICY"",""_VF_SUSPECT_DRIVER_ENTRY"",""_VI_VERIFIER_ISSUE"",""_ARBITER_ALLOCATION_STATE"",""_PHYSICAL_MEMORY_RUN"",""_ETW_SYSTEM_LOGGER_SETTINGS"",""_MI_SUB64K_FREE_RANGES"",""_MMINPAGE_SUPPORT"",""_EVENT_FILTER_HEADER"",""_CM_DIRTY_VECTOR_LOG_ENTRY"",""_CMP_DISCARD_AND_REPLACE_KCB_CONTEXT"",""_PNP_DEVICE_ACTION_ENTRY"",""_PPM_COORDINATED_SYNCHRONIZATION"",""_PPM_PLATFORM_STATE"",""_PEB_LDR_DATA"",""_MI_PARTITION_PAGE_LISTS"",""_MI_DECAY_TIMER_LINK"",""_HEAP_LFH_SUBSEGMENT_STATS"",""_HIDDEN_PROCESSOR_POWER_INTERFACE"",""_CACHE_DESCRIPTOR"",""__WIL__WNF_TYPE_ID"",""_MI_PROTOTYPE_PTES_NODE"",""_ETW_COUNTERS"",""_ARM_DBGKD_CONTROL_SET"",""_PCW_COUNTER_INFORMATION"",""_WNF_DELIVERY_DESCRIPTOR"",""_MI_PAGE_COMBINING_SUPPORT"",""_SEP_LOWBOX_NUMBER_ENTRY"",""_PPM_SELECTION_MENU"",""_TraceLoggingMetadata_t"",""_INTERRUPT_VECTOR_DATA"",""_INTERRUPT_HT_INTR_INFO"",""_CHILD_LIST"",""_EVENT_HEADER"",""_KINTERRUPT"",""_IO_WORKITEM"",""_DISALLOWED_GUIDS"",""_MMWSL_INSTANCE"",""_PI_BUS_EXTENSION"",""_WHEA_MEMORY_ERROR_SECTION"",""_EX_POOL_HEAP_MANAGER_STATE"",""_SK_CRASH_MODULE"",""_KAPC_STATE"",""_PEP_ACPI_RESOURCE_FLAGS"",""_ETW_REF_CLOCK"",""_IO_ADAPTER_CRYPTO_PARAMETERS"",""_HEAP_VAMGR_CTX"",""_TOKEN_SOURCE"",""_DEBUG_DEVICE_DESCRIPTOR"",""_THERMAL_INFORMATION_EX"",""_LOGGED_STREAM_CALLBACK_V2"",""_KPRIQUEUE"",""_IOP_IRP_EXTENSION_STATUS"",""_CM_KEY_SECURITY_CACHE"",""_RTL_SRWLOCK"",""_EX_WORK_QUEUE"",""_KSCB"",""_KLDR_DATA_TABLE_ENTRY"",""_VF_TRACKER"",""_MI_SYSTEM_TRIM_STATE"",""_RTLP_HP_METADATA_HEAP_CTX"",""_RTL_RETPOLINE_ROUTINES"",""_KMUTANT"",""_MI_ACTIVE_PFN"",""_TRACE_ENABLE_INFO"",""_OBJECT_REF_STACK_INFO"",""_ETW_FILTER_STRING_TOKEN"",""_MM_SYSTEM_PAGE_COUNTS"",""_KTMNOTIFICATION_PACKET"",""_KENLISTMENT"",""_THERMAL_POLICY"",""_FILE_GET_QUOTA_INFORMATION"",""_MI_ACCESS_LOG_STATE"",""_HMAP_TABLE"",""_VF_TARGET_DRIVER"",""_ENERGY_STATE_DURATION"",""_VI_VERIFIER_POOL_HEADER"",""_MI_REVERSE_VIEW_MAP"",""_MI_SYSTEM_PTE_STATE"",""_MI_PARTITION_CORE"",""_MMSUPPORT_INSTANCE"",""_KWAIT_BLOCK"",""_PPM_SELECTION_MENU_ENTRY"",""_HV_GET_BIN_CONTEXT"",""_INVERTED_FUNCTION_TABLE"",""_LFH_RANDOM_DATA"",""_POP_FX_PLUGIN"",""_MMPTE_PROTOTYPE"",""_MI_PAGEFILE_TRACES"",""_KSHARED_READY_QUEUE"",""_HAL_LBR_ENTRY"",""_ETW_REG_ENTRY"",""_TERMINATION_PORT"",""_HAL_DP_REPLACE_PARAMETERS"",""_MI_COMBINE_WORKITEM"",""_STRING32"",""_MI_SYSTEM_VA_STATE"",""_GDI_TEB_BATCH"",""_MMSUPPORT_SHARED"",""_ETW_SYSTEM_LOGGER"",""_ALPC_COMPLETION_LIST_STATE"",""_ALPC_COMPLETION_LIST_HEADER"",""_VI_POOL_ENTRY"",""_CM_INDEX_HINT_BLOCK"",""_PNP_REPLACE_PROCESSOR_LIST"",""_MI_ULTRA_VA_CONTEXT"",""_ETW_HW_TRACE_EXT_INTERFACE"",""_PS_CLIENT_SECURITY_CONTEXT"",""_ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY"",""_DBGKD_GET_CONTEXT"",""_STRING64"",""_HEAP_STOP_ON_TAG"",""_ASYNC_READ_THREAD_STATS"",""_X86_DBGKD_CONTROL_SET"",""_PO_IRP_MANAGER"",""_KWAIT_STATUS_REGISTER"",""_MI_DLL_OVERFLOW_AREA"",""_MMCLONE_BLOCK"",""_MACHINE_CHECK_CONTEXT"",""_PS_TRUSTLET_TKSESSION_ID"",""_SECTION"",""_FAST_OWNER_ENTRY"",""_HEAP_LFH_SUBSEGMENT_STAT"",""_PNP_DEVICE_EVENT_ENTRY"",""_HEAP_GLOBAL_APPCOMPAT_FLAGS"",""_VI_POOL_ENTRY_INUSE"",""_PO_DIAG_STACK_RECORD"",""_PROCESS_ENERGY_VALUES_EXTENSION"",""_MI_LDW_WORK_CONTEXT"",""_MI_PAGE_COMBINE_STATISTICS"",""_MI_DEBUGGER_STATE"",""_KLOCK_ENTRY_LOCK_STATE"",""_RTL_RANGE"",""_ETIMER"",""_MI_SHUTDOWN_STATE"",""_VI_TRACK_IRQL"",""_ETW_PRIV_HANDLE_DEMUX_TABLE"",""_ARM64_DBGKD_CONTROL_SET"",""_CM_KEY_HASH_TABLE_ENTRY"",""_PERIODIC_CAPTURE_STATE_GUIDS"",""_HEAP_FREE_ENTRY_EXTRA"",""_SE_AUDIT_PROCESS_CREATION_INFO"",""_ACTIVATION_CONTEXT_STACK64"",""DOCK_INTERFACE"",""DEBUG_MEMORY_REQUIREMENTS"",""DEBUG_DEVICE_ADDRESS"",""PROCESSOR_IDLESTATE_INFO"",""SYSTEM_POWER_LEVEL"",""POWER_ACTION_POLICY"",""BATTERY_REPORTING_SCALE"",""_PPM_IDLE_SYNCHRONIZATION_STATE"",""_PROCESSOR_POWER_STATE"",""_MI_PARTITION_SEGMENTS"",""_WHEA_ERROR_STATUS"",""_BUS_HANDLER"",""_MI_AVAILABLE_PAGE_WAIT_STATES"",""_MMPTE_TIMESTAMP"",""_KRESOURCEMANAGER"",""_ARBITER_QUERY_ARBITRATE_PARAMETERS"",""_POP_FX_DEVICE"",""_CELL_DATA"",""_IOV_IRP_TRACE"",""_CM_PARSE_DEBUG_INFO"",""_MI_CLONE_BLOCK_FLAGS"",""FEATURE_STATE_CHANGE_SUBSCRIPTION__"",""_PS_JOB_WAKE_INFORMATION"",""_MMINPAGE_FLAGS"",""_IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR"",""_PPM_CONCURRENCY_ACCOUNTING"",""_RTL_HP_SUB_ALLOCATOR_CONFIGS"",""_SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR"",""_MI_ULTRA_MDL_NODE"",""_HEAP_ENTRY_EXTRA"",""_MI_SECTION_WOW_STATE"",""_VF_AVL_TABLE"",""_PEBS_DS_SAVE_AREA64"",""_LEAP_SECOND_DATA"",""_DEVICE_OBJECT_POWER_EXTENSION"",""_OBJECT_DIRECTORY_ENTRY"",""_CM_UOW_SET_SD_DATA"",""_PNP_DEVICE_COMPLETION_REQUEST"",""_ETW_STACK_TRACE_BLOCK"",""_EVENT_FILTER_LEVEL_KW"",""_WRITE_BEHIND_THROUGHPUT"",""_THREAD_PERFORMANCE_DATA"",""_SEP_TOKEN_PRIVILEGES"",""_MMPAGE_FILE_EXPANSION"",""_NT_TIB32"",""_KDPC_LIST"",""_LPCP_PORT_OBJECT"",""_ETW_FILTER_PID"",""_IOV_FORCED_PENDING_TRACE"",""_ARBITER_QUERY_CONFLICT_PARAMETERS"",""_POP_THERMAL_TELEMETRY_TRACKER"",""_HEAP_LFH_SUBSEGMENT_DELAY_FREE"",""_POP_FX_LOG_ENTRY"",""wil_details_StagingConfigWnfStateName"",""RTLP_HP_LFH_PERF_FLAGS"",""_MMPAGING_FILE"",""_OBJECT_HANDLE_COUNT_ENTRY"",""_FREE_DISPLAY"",""_MAP_REGISTER_ENTRY"",""_PROCESSOR_IDLE_PREPARE_INFO"",""_PNP_REBALANCE_TRACE_CONTEXT"",""_IOP_IRP_STACK_PROFILER"",""_EX_HEAP_POOL_NODE"",""_HMAP_ENTRY"",""_POP_POWER_ACTION"",""_RTL_RANGE_LIST"",""_PROCESSOR_PLATFORM_STATE_RESIDENCIES"",""_RELATION_LIST"",""PEPHANDLE__"",""_ISR_THUNK"",""_COMPRESSED_DATA_INFO"",""_MI_ZERO_THREAD_CONTEXT"",""_MI_PARTITION_ZEROING"",""_KERNEL_STACK_SEGMENT"",""_POP_FX_DRIVER_CALLBACKS"",""_FAST_ERESOURCE_INTERNAL"",""_MMSUPPORT_FLAGS"",""_BLOB_COUNTERS"",""_MI_SYSTEM_CACHE_VIEW_ATTRIBUTES"",""_WAITING_IRP"",""_MI_DYNAMIC_BITMAP"",""_UNEXPECTED_INTERRUPT"",""_KTIMER_EXPIRATION_TRACE"",""_MMPTE_LIST"",""_VI_POOL_PAGE_HEADER"",""_PLATFORM_IDLE_STATE_ACCOUNTING"",""_PROC_FEEDBACK"",""_TIMELINE_BITMAP"",""_PROC_FEEDBACK_COUNTER"",""_DBGKD_SWITCH_PARTITION"",""_MI_DRIVER_VA"",""_LEARNING_MODE_DATA"",""_PEB64"",""_ETW_REALTIME_CONSUMER"",""_IA64_DBGKD_CONTROL_SET"",""tagSWITCH_CONTEXT_ATTRIBUTE"",""_POP_HIBER_CONTEXT"",""_SEP_CACHED_HANDLES_TABLE"",""_MI_HUGE_SYSTEM_VIEW_HEAD"",""_PPM_FFH_THROTTLE_STATE_INFO"",""_VI_DEADLOCK_NODE"",""_RTL_TIME_ZONE_INFORMATION"",""_VF_AVL_TREE_NODE"",""_MI_PARTITION_COMMIT"",""_TRIAGE_DEVICE_NODE"",""_DIAGNOSTIC_BUFFER"",""_MMEXTEND_INFO"",""_ARBITER_ALTERNATIVE"",""_DBGKD_GET_VERSION64"",""_POP_SHUTDOWN_BUG_CHECK"",""_OBJECT_CREATE_INFORMATION"",""_ETW_FILTER_STRING_TOKEN_ELEMENT"",""_VI_DEADLOCK_GLOBALS"",""_KTIMER"",""_IMAGE_SECURITY_CONTEXT"",""_ARBITER_LIST_ENTRY"",""_MI_PAGING_IO_STATE"",""_MI_SLAB_ALLOCATOR_ENTRY"",""_MI_SLAB_ALLOCATOR_CONTEXT"",""_MI_STANDBY_STATE"",""_MI_DECAY_TIMER_LINKAGE"",""_SECURITY_DESCRIPTOR_RELATIVE"",""_PRIVATE_CACHE_MAP_FLAGS"",""_KENTROPY_TIMING_STATE"",""_DBGKD_CONTEXT_EX"",""_PROCESSOR_IDLE_DEPENDENCY"",""_TRIAGE_9F_POWER"",""_MMMOD_WRITER_MDL_ENTRY"",""_MMINPAGE_SUPPORT_FLOW_THROUGH"",""_MI_COMBINE_STATE"",""_ETW_PAYLOAD_FILTER"",""_MI_PAGING_FILE_SPACE_BITMAPS"",""_HANDLE_TRACE_DB_ENTRY"",""_PTE_TRACKER"",""_HIVE_WAIT_PACKET"",""_POP_FX_WORK_POOL"",""_VF_AVL_TREE_NODE_EX"",""_VACB_ARRAY_HEADER"",""_CM_INDEX"",""_ETW_BUFFER_CONTEXT"",""_SID_AND_ATTRIBUTES_HASH"",""_PROC_PERF_CHECK_CONTEXT"",""_ACCESS_REASONS"",""_POP_FX_WORK_ORDER"",""_RTL_ATOM_TABLE_REFERENCE"",""_MI_PAGELIST_STATE"",""_CRITICAL_PROCESS_EXCEPTION_DATA"",""_CALL_PERFORMANCE_DATA"",""_IO_IRP_EXT_TRACK_OFFSET_HEADER"",""tagSWITCH_CONTEXT_DATA"",""_SESSION_LOWBOX_MAP"",""_POP_IO_INFO"",""_TOKEN_ACCESS_INFORMATION"",""_MIPFNBLINK"",""_OB_DUPLICATE_OBJECT_STATE"",""_PPM_COORDINATED_SELECTION"",""_KRESOURCEMANAGER_COMPLETION_BINDING"",""_IMAGE_OPTIONAL_HEADER64"",""_ETW_LAST_ENABLE_INFO"",""_IOMMU_DMA_DOMAIN"",""_DMA_IOMMU_INTERFACE"",""_POOL_TRACKER_BIG_PAGES"",""_HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS"",""PROCESSOR_PERFSTATE_POLICY"",""_PROC_PERF_HISTORY"",""_DEVICE_RELATIONS"",""_MMVAD_FLAGS2"",""_MMVAD"",""_SEP_AUDIT_POLICY"",""_CMSI_PROCESS_TUPLE"",""_HEAP_FAILURE_INFORMATION"",""_PROC_IDLE_ACCOUNTING"",""_UMS_CONTROL_BLOCK"",""_KTM"",""_PO_IRP_QUEUE"",""_KALPC_WORK_ON_BEHALF_DATA"",""_CM_NOTIFY_BLOCK"",""_TOKEN_CONTROL"",""_LDRP_LOAD_CONTEXT"",""_LDR_DATA_TABLE_ENTRY"",""_KTIMER2_COLLECTION"",""_MI_WSLE"",""_VF_WATCHDOG_IRP"",""_u"",""_MI_PARTITION_MODWRITES"",""_PPC_DBGKD_CONTROL_SET"",""_OB_EXTENDED_PARSE_PARAMETERS"",""_MMSUBSECTION_FLAGS"",""_MI_COMBINE_PAGE_LISTHEAD"",""_RTL_AVL_TABLE"",""_DBGKD_FILL_MEMORY"",""_GENERIC_MAPPING"",""_MI_EXTENT_DELETION_WAIT_BLOCK"",""_FAULT_INFORMATION"",""_RTL_CRITICAL_SECTION_DEBUG"",""_DEVICE_DESCRIPTION"",""_POP_FX_ACCOUNTING"",""_KSCHEDULING_GROUP_POLICY"",""_AWEINFO"",""_MI_PHYSICAL_VIEW"",""_DOMAIN_CONFIGURATION"",""_POP_POLICY_DEVICE"",""_INVERTED_FUNCTION_TABLE_ENTRY"",""_MI_SECTION_IMAGE_INFORMATION"",""_PPM_SELECTION_STATISTICS"",""_POP_FX_DEVICE_DIRECTED_TRANSITION_STATE"",""_CM_KEY_SECURITY"",""_MI_FREE_LARGE_PAGE_LIST"",""_POP_FX_COMPONENT"",""_DYNAMIC_FUNCTION_TABLE"",""_ISRDPCSTATS"",""_SEGMENT_FLAGS"",""_XSTATE_CONTEXT"",""_IO_REMOVE_LOCK"",""_LOADER_PARAMETER_BLOCK"",""_OBJECT_DUMP_CONTROL"",""_IMAGE_SECTION_HEADER"",""_FAST_OWNER_ENTRY_INTERNAL"",""_MI_POOL_STATE"",""_IMAGE_RUNTIME_FUNCTION_ENTRY"",""_SECTION_IMAGE_INFORMATION"",""_KSECONDARY_IDT_ENTRY"",""_PPM_SELECTION_DEPENDENCY"",""_AGGREGATED_PAYLOAD_FILTER"",""_WNF_SCOPE_MAP_ENTRY"",""_ARBITER_ORDERING_LIST"",""_MI_HARDWARE_STATE"",""_PPM_VETO_ACCOUNTING"",""_EX_PARTITION"",""_CLS_LSN"",""_SYSPTES_HEADER"",""_MI_ERROR_STATE"",""_PROC_PERF_DOMAIN"",""_MI_COMMON_PAGE_STATE"",""_RTL_BALANCED_LINKS"",""_HEAP_EXTENDED_ENTRY"",""_SUPPORTED_RANGES"",""_ETW_WMITRACE_WORK"",""_MAPPED_FILE_SEGMENT"",""_MMPTE_TRANSITION"",""_DEVICE_OBJECT_LIST"",""_DEBUG_TRANSPORT_DATA"",""_CM_KEY_INDEX"",""_POP_COOLING_EXTENSION"",""_KTMOBJECT_NAMESPACE_LINK"",""_POOL_HEADER"",""_POP_POWER_SETTING_VALUES"",""_PROC_PERF_HISTORY_ENTRY"",""_ARBITER_BOOT_ALLOCATION_PARAMETERS"",""_MMADDRESS_LIST"",""_POP_FX_IDLE_STATE"",""_HAL_IOMMU_DISPATCH"",""_MI_ZERO_COST_COUNTS"",""_POP_FX_WORK_ORDER_WATCHDOG_INFO"",""_ARBITER_INTERFACE"",""_ARBITER_PARAMETERS"",""_HEAP_UNPACKED_ENTRY"",""_HEAP_UCR_DESCRIPTOR"",""_ETW_PROVIDER_TRAITS"",""_ETW_QUEUE_ENTRY"",""_MI_PARTITION_FLAGS"",""_PERFINFO_PPM_STATE_SELECTION"",""_INTERRUPT_CONNECTION_DATA"",""_INTERRUPT_REMAPPING_INFO"",""_NON_PAGED_DEBUG_INFO"",""_ARBITER_ADD_RESERVED_PARAMETERS"",""_MMMOD_WRITER_LISTHEAD"",""_NONOPAQUE_OPLOCK"",""_RTLP_RANGE_LIST_ENTRY"",""_ARBITER_CONFLICT_INFO"",""_OBJECT_REF_TRACE"",""_POP_FX_PROVIDER"",""_ETW_FILTER_EVENT_NAME_DATA"",""_MI_VISIBLE_STATE"",""_CM_COMPONENT_HASH"",""_RH_OP_CONTEXT"",""_MSUBSECTION"",""_PROC_PERF_CHECK"",""_MI_LARGEPAGE_VAD_INFO"",""_MI_HARD_FAULT_STATE"",""_MODWRITER_FLAGS"",""_IMAGE_DATA_DIRECTORY"",""_PEB32"",""_POP_DEVICE_POWER_PROFILE"",""_POP_DEVICE_SYS_STATE"",""_HAL_NODE_RANGE"",""_THERMAL_INFORMATION"",""_XSTATE_FEATURE"",""_HIVE_LIST_ENTRY"",""_PO_DEVICE_NOTIFY_ORDER"",""_PPM_VETO_ENTRY"",""_ARBITER_TEST_ALLOCATION_PARAMETERS"",""_MI_BAD_MEMORY_EVENT_ENTRY"",""_HAL_CLOCK_TIMER_CONFIGURATION"",""_ETW_DEBUGID_TRACKING_ENTRY"",""_KWAIT_CHAIN_ENTRY"",""_PROC_IDLE_SNAP"",""_TOKEN_PRIVILEGES"",""_IMAGE_DEBUG_DIRECTORY"",""_CONFIGURATION_COMPONENT_DATA"",""_SEP_LOWBOX_NUMBER_MAPPING"",""_MMDEREFERENCE_SEGMENT_HEADER"",""_OBJECT_HEADER_PADDING_INFO"",""_KQUEUE"",""_MI_NODE_INFORMATION"",""_PROC_PERF_LOAD"",""_TRIAGE_POP_FX_DEVICE"",""_KENLISTMENT_HISTORY"",""_LPCP_PORT_QUEUE"",""_PF_KERNEL_GLOBALS"",""_DOMAIN_CONFIGURATION_ARM64"",""_CALL_HASH_ENTRY"",""_RTL_ACTIVATION_CONTEXT_STACK_FRAME"",""_DIAGNOSTIC_CONTEXT"",""_MI_SYSTEM_NODE_INFORMATION"",""_PROC_PERF_QOS_CLASS_POLICY"",""_POP_FX_WORK_POOL_ITEM"",""_FAULT_INFORMATION_ARM64"",""_MI_NODE_NUMBER_ZERO_BASED"",""_MI_TRIAGE_DUMP_DATA"",""_MI_FORCED_COMMITS"",""_VERIFIER_SHARED_EXPORT_THUNK"",""_VF_TARGET_ALL_SHARED_EXPORT_THUNKS"",""_FAULT_INFORMATION_X64"",""_PERF_CONTROL_STATE_SELECTION"",""_POP_COMPONENT_POWER_PROFILE"",""_MI_REBUILD_LARGE_PAGE_TIMER"",""_MI_IO_PAGE_STATE"",""_ETW_REPLY_QUEUE"",""_LOADER_PARAMETER_EXTENSION"",""_NLS_DATA_BLOCK"",""_CM_BIG_DATA"",""_MI_CROSS_PARTITION_CHARGES"",""_MI_PER_SESSION_PROTOS"",""_TOKEN_MANDATORY_POLICY"",""_PEBS_DS_SAVE_AREA32"",""_MI_RESERVATION_CLUSTER_INFO"",""_MI_MODWRITE_DATA"",""_MACHINE_FRAME"",""_PROC_IDLE_POLICY"",""_MI_RESAVAIL_FAILURES"",""_LOADER_FEATURE_CONFIGURATION_INFORMATION"",""_HAL_UNMASKED_INTERRUPT_INFORMATION"",""_KTRANSACTION"",""_FAKE_HEAP_ENTRY"",""_TOKEN_AUDIT_POLICY"",""_MI_PROBE_RAISE_TRACKER"",""_KTMOBJECT_NAMESPACE"",""_LOADER_BUGCHECK_PARAMETERS"",""PO_MEMORY_IMAGE"",""_POP_FX_DRIPS_WATCHDOG_CONTEXT"",""_SUPPORTED_RANGE"",""_LDR_DDAG_NODE"",""_MI_PAGE_COLORS"",""_NUMA_MEMORY_RANGE"",""_DUMP_STACK_CONTEXT"",""_PNP_WATCHDOG"",""_ARC_DISK_INFORMATION"",""_POP_FX_DEPENDENT"",""_DEVICE_FAULT_CONFIGURATION"",""_MI_PAGEFILE_BITMAPS_CACHE_ENTRY"",""_RTL_UMS_CONTEXT"",""_MI_RESUME_WORKITEM"",""_INPUT_MAPPING_ELEMENT"",""_PLUGPLAY_EVENT_BLOCK"",""_VSM_PERFORMANCE_DATA"",""_WDT_HANDLE"",""_CACHED_KSTACK_LIST"",""_I386_LOADER_BLOCK"",""_PROC_IDLE_STATE_BUCKET"",""_ARBITER_ORDERING"",""_MI_PTE_CHAIN_HEAD"",""_LOADER_RESET_REASON"",""_ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS"",""_HAL_CHANNEL_MEMORY_RANGES"",""_LOADER_HIVE_RECOVERY_INFO"",""_FIRMWARE_INFORMATION_LOADER_BLOCK"",""_POP_TRIGGER_WAIT"",""_PROC_PERF_CONSTRAINT"",""_MI_ALIGNED_SLIST"",""_PROC_IDLE_STATE_ACCOUNTING"",""_HEADLESS_LOADER_BLOCK"",""_MI_WRITE_CALIBRATION"",""_WHEA_MEMORY_ERROR_SECTION_VALIDBITS"",""_IO_REMOVE_LOCK_COMMON_BLOCK"",""_PEP_CRASHDUMP_INFORMATION"",""_FAULT_INFORMATION_X64_FLAGS"",""_MMSECURE_FLAGS"",""_RTL_USER_PROCESS_PARAMETERS"",""_MI_IO_CACHE_STATS"",""_IOMMU_SVM_CAPABILITIES"",""_DUMP_INITIALIZATION_CONTEXT"",""_CM_FAST_LEAF_HINT"",""_THERMAL_COOLING_INTERFACE"",""_PEP_WORK_INFORMATION"",""_VF_ADDRESS_RANGE"",""_POP_FX_PERF_INFO"",""_CVDD"",""_MI_ACCESS_VIOLATION_RANGE"",""_ACPI_METHOD_ARGUMENT_V1"",""_PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE"",""_MMPAGE_FILE_EXPANSION_FLAGS"",""_MMPFNLIST_SHORT"",""_MI_WRITE_MODES"",""_MI_RESTRICTED_MODWRITES"",""_OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2"",""_MI_VAD_SEQUENTIAL_INFO"",""_POP_FX_ACTIVE_TIME_ACCOUNTING"",""_PEP_WORK_ACPI_NOTIFY"",""_MI_LARGE_PAGE_LISTS_CHANGING"",""_TRIAGE_POP_IRP_DATA"",""_MI_SYSTEM_VA_ASSIGNMENT"",""_PROCESSOR_PLATFORM_STATE_RESIDENCY"",""_POP_PER_PROCESSOR_CONTEXT"",""_ETW_APC_ENTRY"",""_CONFIGURATION_COMPONENT"",""_LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION"",""_PROC_PERF_CHECK_SNAP"",""_HAL_UNMASKED_INTERRUPT_FLAGS"",""_KTRANSACTION_HISTORY"",""_PO_POWER_PLANE_PROFILE"",""_EVENT_PAYLOAD_PREDICATE"",""_ARM_LOADER_BLOCK"",""_PNP_RESOURCE_CONFLICT_TRACE_CONTEXT"",""_ISRDPCSTATS_SEQUENCE"",""_PEP_WORK_COMPLETE_PERF_STATE"",""_LOADER_PERFORMANCE_DATA"",""_MI_FREE_LARGE_PAGES"",""_RTL_DRIVE_LETTER_CURDIR"",""_EFI_FIRMWARE_INFORMATION"",""_PEP_WORK_IDLE_STATE"",""_POP_POWER_PLANE"",""_PO_HIBER_PERF"",""_IO_CLIENT_EXTENSION"",""_SMBIOS3_TABLE_HEADER"",""_LOADER_PARAMETER_CI_EXTENSION"",""_PCAT_FIRMWARE_INFORMATION"",""_LDRP_CSLIST"",""_VIRTUAL_EFI_RUNTIME_SERVICES"",""_MI_STORE_INPAGE_COMPLETE_FLAGS"",""_EX_WORK_QUEUE_MANAGER"",""_LOADER_PARAMETER_HYPERVISOR_EXTENSION"",""_DEVICE_FLAGS"",""_PO_NOTIFY_ORDER_LEVEL"",""_PROFILE_PARAMETER_BLOCK"",""_PEP_WORK_POWER_CONTROL"",""_PEP_WORK_DEVICE_POWER"",""_FAULT_INFORMATION_ARM64_FLAGS"",""_ETWP_NOTIFICATION_HEADER"",""_MI_EXTRA_IMAGE_INFORMATION"",""_NETWORK_LOADER_BLOCK"",""_BOOT_ENTROPY_LDR_RESULT"",""_FS_FILTER_CALLBACKS"",""_LPCP_NONPAGED_PORT_QUEUE"",""_POP_FX_PERF_SET"",""_PO_FX_PERF_STATE_CHANGE"",""_PEP_WORK_COMPLETE_IDLE_STATE"",""_LDR_SERVICE_TAG_RECORD"",""_PEP_WORK_ACTIVE_COMPLETE"",""_FS_FILTER_CALLBACK_DATA"",""_PO_FX_COMPONENT_PERF_SET"",""_NB10"",""_CURDIR"",""_BOOT_ENTROPY_SOURCE_LDR_RESULT"",""_PO_FX_PERF_STATE"",""_FS_FILTER_PARAMETERS"",""_RSDS"",""_PEP_WORK_DEVICE_IDLE"",""_FS_FILTER_SECTION_SYNC_OUTPUT""])"; } }
		 public string Created { get { return "07-03-2021T12:03:26"; } }
	}
	#endregion
	#region LIST_ENTRY64
 
	public class LIST_ENTRY64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public LIST_ENTRY64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""LIST_ENTRY64"": [ 16, {
				 ""Flink"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Blink"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Flink { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Blink { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region LIST_ENTRY32
 
	public class LIST_ENTRY32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public LIST_ENTRY32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""LIST_ENTRY32"": [ 8, {
				 ""Flink"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Blink"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Flink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Blink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _LIST_ENTRY
 
	public class _LIST_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LIST_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LIST_ENTRY"": [ 16, {
				 ""Flink"": [ 0, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""Blink"": [ 8, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Flink { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Blink { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _SINGLE_LIST_ENTRY
 
	public class _SINGLE_LIST_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SINGLE_LIST_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SINGLE_LIST_ENTRY"": [ 8, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SINGLE_LIST_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _UNICODE_STRING
 
	public class _UNICODE_STRING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _UNICODE_STRING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_UNICODE_STRING"": [ 16, {
				 ""Length"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MaximumLength"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Buffer"": [ 8, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Length { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 MaximumLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 Buffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _STRING
 
	public class _STRING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _STRING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_STRING"": [ 16, {
				 ""Length"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MaximumLength"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Buffer"": [ 8, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Length { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 MaximumLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 Buffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _RTL_QUERY_REGISTRY_TABLE
 
	public class _RTL_QUERY_REGISTRY_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_QUERY_REGISTRY_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_QUERY_REGISTRY_TABLE"": [ 56, {
				 ""QueryRoutine"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Flags"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Name"": [ 16, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""EntryContext"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DefaultType"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""DefaultData"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DefaultLength"": [ 48, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 QueryRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 Name { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 EntryContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 DefaultType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 DefaultData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt32 DefaultLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _ANONYMOUS_TAG
 
	public class _ANONYMOUS_TAG
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ANONYMOUS_TAG(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ANONYMOUS_TAG"": [ 8, {
				 ""LowPart"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HighPart"": [ 4, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 LowPart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 HighPart { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _LARGE_INTEGER
 
	public class _LARGE_INTEGER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LARGE_INTEGER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LARGE_INTEGER"": [ 8, {
				 ""LowPart"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HighPart"": [ 4, [ ""Int32"", ""null"" ]],
				 ""u"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""QuadPart"": [ 0, [ ""Int64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 LowPart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 HighPart { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int64 QuadPart { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _ULARGE_INTEGER
 
	public class _ULARGE_INTEGER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ULARGE_INTEGER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ULARGE_INTEGER"": [ 8, {
				 ""LowPart"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HighPart"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""u"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""QuadPart"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 LowPart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 HighPart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 QuadPart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _RTL_BITMAP
 
	public class _RTL_BITMAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_BITMAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_BITMAP"": [ 16, {
				 ""SizeOfBitMap"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Buffer"": [ 8, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SizeOfBitMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 Buffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _KFLOATING_SAVE
 
	public class _KFLOATING_SAVE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KFLOATING_SAVE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KFLOATING_SAVE"": [ 4, {
				 ""Dummy"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Dummy { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _EXT_SET_PARAMETERS_V0
 
	public class _EXT_SET_PARAMETERS_V0
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXT_SET_PARAMETERS_V0(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXT_SET_PARAMETERS_V0"": [ 16, {
				 ""Version"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""NoWakeTolerance"": [ 8, [ ""Int64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public Int64 NoWakeTolerance { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _FAST_MUTEX
 
	public class _FAST_MUTEX
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FAST_MUTEX(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FAST_MUTEX"": [ 56, {
				 ""Count"": [ 0, [ ""Int32"", ""null"" ]],
				 ""Owner"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Contention"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Event"": [ 24, [ ""_KEVENT"", ""null"" ]],
				 ""OldIrql"": [ 48, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 Count { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 Owner { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 Contention { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 OldIrql { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _KEVENT
 
	public class _KEVENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KEVENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KEVENT"": [ 24, {
				 ""Header"": [ 0, [ ""_DISPATCHER_HEADER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _DISPATCHER_HEADER Header
		{
			get
			{
				_DISPATCHER_HEADER returnValue = new _DISPATCHER_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _LOOKASIDE_LIST_EX
 
	public class _LOOKASIDE_LIST_EX
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LOOKASIDE_LIST_EX(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LOOKASIDE_LIST_EX"": [ 96, {
				 ""L"": [ 0, [ ""_GENERAL_LOOKASIDE_POOL"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _GENERAL_LOOKASIDE_POOL L
		{
			get
			{
				_GENERAL_LOOKASIDE_POOL returnValue = new _GENERAL_LOOKASIDE_POOL(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SLIST_ENTRY
 
	public class _SLIST_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SLIST_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SLIST_ENTRY"": [ 16, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SLIST_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _SLIST_HEADER
 
	public class _SLIST_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SLIST_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SLIST_HEADER"": [ 16, {
				 ""Alignment"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Region"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""HeaderX64"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Alignment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Region { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _ANONYMOUS_TAG HeaderX64
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _NPAGED_LOOKASIDE_LIST
 
	public class _NPAGED_LOOKASIDE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _NPAGED_LOOKASIDE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_NPAGED_LOOKASIDE_LIST"": [ 128, {
				 ""L"": [ 0, [ ""_GENERAL_LOOKASIDE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _GENERAL_LOOKASIDE L
		{
			get
			{
				_GENERAL_LOOKASIDE returnValue = new _GENERAL_LOOKASIDE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PAGED_LOOKASIDE_LIST
 
	public class _PAGED_LOOKASIDE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PAGED_LOOKASIDE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PAGED_LOOKASIDE_LIST"": [ 128, {
				 ""L"": [ 0, [ ""_GENERAL_LOOKASIDE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _GENERAL_LOOKASIDE L
		{
			get
			{
				_GENERAL_LOOKASIDE returnValue = new _GENERAL_LOOKASIDE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WORK_QUEUE_ITEM
 
	public class _WORK_QUEUE_ITEM
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WORK_QUEUE_ITEM(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WORK_QUEUE_ITEM"": [ 32, {
				 ""List"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""WorkerRoutine"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Parameter"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY List
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 WorkerRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Parameter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _EXT_DELETE_PARAMETERS
 
	public class _EXT_DELETE_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXT_DELETE_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXT_DELETE_PARAMETERS"": [ 24, {
				 ""Version"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DeleteCallback"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeleteContext"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 DeleteCallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 DeleteContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _MDL
 
	public class _MDL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MDL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MDL"": [ 48, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""Size"": [ 8, [ ""Int16"", ""null"" ]],
				 ""MdlFlags"": [ 10, [ ""Int16"", ""null"" ]],
				 ""Process"": [ 16, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""MappedSystemVa"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StartVa"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ByteCount"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""ByteOffset"": [ 44, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Int16 Size { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 8); } }
		public Int16 MdlFlags { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 10); } }
		public UInt64 Process { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 MappedSystemVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 StartVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt32 ByteCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 ByteOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
	}
	#endregion
	#region _IRP
 
	public class _IRP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IRP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 208; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IRP"": [ 208, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""MdlAddress"": [ 8, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""Flags"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""AssociatedIrp"": [ 24, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""ThreadListEntry"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""IoStatus"": [ 48, [ ""_IO_STATUS_BLOCK"", ""null"" ]],
				 ""RequestorMode"": [ 64, [ ""Char"", ""null"" ]],
				 ""PendingReturned"": [ 65, [ ""Byte"", ""null"" ]],
				 ""StackCount"": [ 66, [ ""Char"", ""null"" ]],
				 ""CurrentLocation"": [ 67, [ ""Char"", ""null"" ]],
				 ""Cancel"": [ 68, [ ""Byte"", ""null"" ]],
				 ""CancelIrql"": [ 69, [ ""Byte"", ""null"" ]],
				 ""ApcEnvironment"": [ 70, [ ""Char"", ""null"" ]],
				 ""AllocationFlags"": [ 71, [ ""Byte"", ""null"" ]],
				 ""UserIosb"": [ 72, [ ""Pointer"", ""{\""target\"":\""_IO_STATUS_BLOCK\""}"" ]],
				 ""UserEvent"": [ 80, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""Overlay"": [ 88, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""CancelRoutine"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UserBuffer"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Tail"": [ 120, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 MdlAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _ANONYMOUS_TAG AssociatedIrp
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LIST_ENTRY ThreadListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _IO_STATUS_BLOCK IoStatus
		{
			get
			{
				_IO_STATUS_BLOCK returnValue = new _IO_STATUS_BLOCK(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public Char RequestorMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 64); } }
		public Byte PendingReturned{ get { return _StructureData[_BufferOffset +65]; } }
		public Char StackCount { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 66); } }
		public Char CurrentLocation { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 67); } }
		public Byte Cancel{ get { return _StructureData[_BufferOffset +68]; } }
		public Byte CancelIrql{ get { return _StructureData[_BufferOffset +69]; } }
		public Char ApcEnvironment { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 70); } }
		public Byte AllocationFlags{ get { return _StructureData[_BufferOffset +71]; } }
		public UInt64 UserIosb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 UserEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public _ANONYMOUS_TAG Overlay
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public UInt64 CancelRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 UserBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public _ANONYMOUS_TAG Tail
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SCSI_REQUEST_BLOCK
 
	public class _SCSI_REQUEST_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SCSI_REQUEST_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SCSI_REQUEST_BLOCK"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _GUID
 
	public class _GUID
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _GUID(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_GUID"": [ 16, {
				 ""Data1"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Data2"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Data3"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""Data4"": [ 8, [ ""Array"", ""{\""count\"":8,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Data1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16 Data2 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Data3 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public Byte[] Data4
		{
			get
			{
				Byte[] returnValue = new Byte[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 8];
				return returnValue;
			}
		}
	}
	#endregion
	#region _IO_STACK_LOCATION
 
	public class _IO_STACK_LOCATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_STACK_LOCATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_STACK_LOCATION"": [ 72, {
				 ""MajorFunction"": [ 0, [ ""Byte"", ""null"" ]],
				 ""MinorFunction"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Control"": [ 3, [ ""Byte"", ""null"" ]],
				 ""Parameters"": [ 8, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""DeviceObject"": [ 40, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""FileObject"": [ 48, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""CompletionRoutine"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Context"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte MajorFunction{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte MinorFunction{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Control{ get { return _StructureData[_BufferOffset +3]; } }
		public _ANONYMOUS_TAG Parameters
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 FileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 CompletionRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _DEVICE_OBJECT
 
	public class _DEVICE_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 336; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_OBJECT"": [ 336, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""ReferenceCount"": [ 4, [ ""Int32"", ""null"" ]],
				 ""DriverObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""_DRIVER_OBJECT\""}"" ]],
				 ""NextDevice"": [ 16, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""AttachedDevice"": [ 24, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""CurrentIrp"": [ 32, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""Timer"": [ 40, [ ""Pointer"", ""{\""target\"":\""_IO_TIMER\""}"" ]],
				 ""Flags"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""Characteristics"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""Vpb"": [ 56, [ ""Pointer"", ""{\""target\"":\""_VPB\""}"" ]],
				 ""DeviceExtension"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeviceType"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""StackSize"": [ 76, [ ""Char"", ""null"" ]],
				 ""Queue"": [ 80, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""AlignmentRequirement"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""DeviceQueue"": [ 160, [ ""_KDEVICE_QUEUE"", ""null"" ]],
				 ""Dpc"": [ 200, [ ""_KDPC"", ""null"" ]],
				 ""ActiveThreadCount"": [ 264, [ ""UInt32"", ""null"" ]],
				 ""SecurityDescriptor"": [ 272, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeviceLock"": [ 280, [ ""_KEVENT"", ""null"" ]],
				 ""SectorSize"": [ 304, [ ""UInt16"", ""null"" ]],
				 ""Spare1"": [ 306, [ ""UInt16"", ""null"" ]],
				 ""DeviceObjectExtension"": [ 312, [ ""Pointer"", ""{\""target\"":\""_DEVOBJ_EXTENSION\""}"" ]],
				 ""Reserved"": [ 320, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public Int32 ReferenceCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 DriverObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 NextDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 AttachedDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 CurrentIrp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 Timer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 Characteristics { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt64 Vpb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 DeviceExtension { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt32 DeviceType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public Char StackSize { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 76); } }
		public _ANONYMOUS_TAG Queue
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt32 AlignmentRequirement { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public _KDEVICE_QUEUE DeviceQueue
		{
			get
			{
				_KDEVICE_QUEUE returnValue = new _KDEVICE_QUEUE(_StructureData, _BufferOffset + 160);
				return returnValue;
			}
		}
		public _KDPC Dpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 200);
				return returnValue;
			}
		}
		public UInt32 ActiveThreadCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 264); } }
		public UInt64 SecurityDescriptor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public _KEVENT DeviceLock
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 280);
				return returnValue;
			}
		}
		public UInt16 SectorSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 304); } }
		public UInt16 Spare1 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 306); } }
		public UInt64 DeviceObjectExtension { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 312); } }
		public UInt64 Reserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 320); } }
	}
	#endregion
	#region _KDPC
 
	public class _KDPC
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KDPC(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KDPC"": [ 64, {
				 ""TargetInfoAsUlong"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Importance"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Number"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""DpcListEntry"": [ 8, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""ProcessorHistory"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""DeferredRoutine"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeferredContext"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SystemArgument1"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SystemArgument2"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DpcData"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 TargetInfoAsUlong { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte Type{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Importance{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt16 Number { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public _SINGLE_LIST_ENTRY DpcListEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 ProcessorHistory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 DeferredRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 DeferredContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 SystemArgument1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 SystemArgument2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 DpcData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
	}
	#endregion
	#region _EVENT_DATA_DESCRIPTOR
 
	public class _EVENT_DATA_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EVENT_DATA_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EVENT_DATA_DESCRIPTOR"": [ 16, {
				 ""Ptr"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Size"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Type"": [ 12, [ ""Byte"", ""null"" ]],
				 ""Reserved1"": [ 13, [ ""Byte"", ""null"" ]],
				 ""Reserved2"": [ 14, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Ptr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public Byte Type{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte Reserved1{ get { return _StructureData[_BufferOffset +13]; } }
		public UInt16 Reserved2 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 14); } }
	}
	#endregion
	#region _EVENT_DESCRIPTOR
 
	public class _EVENT_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EVENT_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EVENT_DESCRIPTOR"": [ 16, {
				 ""Id"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Version"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Channel"": [ 3, [ ""Byte"", ""null"" ]],
				 ""Level"": [ 4, [ ""Byte"", ""null"" ]],
				 ""Opcode"": [ 5, [ ""Byte"", ""null"" ]],
				 ""Task"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""Keyword"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Id { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Version{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Channel{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte Level{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte Opcode{ get { return _StructureData[_BufferOffset +5]; } }
		public UInt16 Task { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt64 Keyword { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _RTL_SPLAY_LINKS
 
	public class _RTL_SPLAY_LINKS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_SPLAY_LINKS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_SPLAY_LINKS"": [ 24, {
				 ""Parent"": [ 0, [ ""Pointer"", ""{\""target\"":\""_RTL_SPLAY_LINKS\""}"" ]],
				 ""LeftChild"": [ 8, [ ""Pointer"", ""{\""target\"":\""_RTL_SPLAY_LINKS\""}"" ]],
				 ""RightChild"": [ 16, [ ""Pointer"", ""{\""target\"":\""_RTL_SPLAY_LINKS\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Parent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 LeftChild { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 RightChild { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _RTL_DYNAMIC_HASH_TABLE_CONTEXT
 
	public class _RTL_DYNAMIC_HASH_TABLE_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_DYNAMIC_HASH_TABLE_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_DYNAMIC_HASH_TABLE_CONTEXT"": [ 24, {
				 ""ChainHead"": [ 0, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""PrevLinkage"": [ 8, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""Signature"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ChainHead { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 PrevLinkage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Signature { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR
 
	public class _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_DYNAMIC_HASH_TABLE_ENUMERATOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_DYNAMIC_HASH_TABLE_ENUMERATOR"": [ 40, {
				 ""HashEntry"": [ 0, [ ""_RTL_DYNAMIC_HASH_TABLE_ENTRY"", ""null"" ]],
				 ""CurEntry"": [ 0, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""ChainHead"": [ 24, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""BucketIndex"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry
		{
			get
			{
				_RTL_DYNAMIC_HASH_TABLE_ENTRY returnValue = new _RTL_DYNAMIC_HASH_TABLE_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 CurEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ChainHead { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 BucketIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _RTL_DYNAMIC_HASH_TABLE
 
	public class _RTL_DYNAMIC_HASH_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_DYNAMIC_HASH_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_DYNAMIC_HASH_TABLE"": [ 40, {
				 ""Flags"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Shift"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""TableSize"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Pivot"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""DivisorMask"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""NumEntries"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""NonEmptyBuckets"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""NumEnumerators"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""Directory"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Shift { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 TableSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Pivot { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 DivisorMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 NumEntries { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 NonEmptyBuckets { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 NumEnumerators { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt64 Directory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _LUID
 
	public class _LUID
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LUID(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LUID"": [ 8, {
				 ""LowPart"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HighPart"": [ 4, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 LowPart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 HighPart { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
 
	public class _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG"": [ 16, {
				 ""Size"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TriggerId"": [ 8, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 TriggerId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _KPCR
 
	public class _KPCR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KPCR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 376; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KPCR"": [ 376, {
				 ""NtTib"": [ 0, [ ""_NT_TIB"", ""null"" ]],
				 ""GdtBase"": [ 0, [ ""Pointer"", ""{\""target\"":\""_KGDTENTRY64\""}"" ]],
				 ""TssBase"": [ 8, [ ""Pointer"", ""{\""target\"":\""_KTSS64\""}"" ]],
				 ""UserRsp"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""Self"": [ 24, [ ""Pointer"", ""{\""target\"":\""_KPCR\""}"" ]],
				 ""CurrentPrcb"": [ 32, [ ""Pointer"", ""{\""target\"":\""_KPRCB\""}"" ]],
				 ""LockArray"": [ 40, [ ""Pointer"", ""{\""target\"":\""_KSPIN_LOCK_QUEUE\""}"" ]],
				 ""Used_Self"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IdtBase"": [ 56, [ ""Pointer"", ""{\""target\"":\""_KIDTENTRY64\""}"" ]],
				 ""Unused"": [ 64, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""Irql"": [ 80, [ ""Byte"", ""null"" ]],
				 ""SecondLevelCacheAssociativity"": [ 81, [ ""Byte"", ""null"" ]],
				 ""ObsoleteNumber"": [ 82, [ ""Byte"", ""null"" ]],
				 ""Fill0"": [ 83, [ ""Byte"", ""null"" ]],
				 ""Unused0"": [ 84, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""MajorVersion"": [ 96, [ ""UInt16"", ""null"" ]],
				 ""MinorVersion"": [ 98, [ ""UInt16"", ""null"" ]],
				 ""StallScaleFactor"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""Unused1"": [ 104, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""KernelReserved"": [ 128, [ ""Array"", ""{\""count\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""SecondLevelCacheSize"": [ 188, [ ""UInt32"", ""null"" ]],
				 ""HalReserved"": [ 192, [ ""Array"", ""{\""count\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""Unused2"": [ 256, [ ""UInt32"", ""null"" ]],
				 ""KdVersionBlock"": [ 264, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Unused3"": [ 272, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PcrAlign1"": [ 280, [ ""Array"", ""{\""count\"":24,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _NT_TIB NtTib
		{
			get
			{
				_NT_TIB returnValue = new _NT_TIB(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 GdtBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 TssBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 UserRsp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Self { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 CurrentPrcb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 LockArray { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 Used_Self { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 IdtBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64[] Unused
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 64);
				return returnValue;
			}
		}
		public Byte Irql{ get { return _StructureData[_BufferOffset +80]; } }
		public Byte SecondLevelCacheAssociativity{ get { return _StructureData[_BufferOffset +81]; } }
		public Byte ObsoleteNumber{ get { return _StructureData[_BufferOffset +82]; } }
		public Byte Fill0{ get { return _StructureData[_BufferOffset +83]; } }
		public UInt32[] Unused0
		{
			get
			{
				UInt32[] returnValue = new UInt32[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 84);
				return returnValue;
			}
		}
		public UInt16 MajorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 96); } }
		public UInt16 MinorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 98); } }
		public UInt32 StallScaleFactor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt64[] Unused1
		{
			get
			{
				UInt64[] returnValue = new UInt64[3];
				int size = 8;
				for(int i=0; i<3; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt32[] KernelReserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[15];
				for(int i=0; i<15; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt32 SecondLevelCacheSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public UInt32[] HalReserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 192);
				return returnValue;
			}
		}
		public UInt32 Unused2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 256); } }
		public UInt64 KdVersionBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 264); } }
		public UInt64 Unused3 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public UInt32[] PcrAlign1
		{
			get
			{
				UInt32[] returnValue = new UInt32[24];
				for(int i=0; i<24; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 280);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IO_DRIVER_CREATE_CONTEXT
 
	public class _IO_DRIVER_CREATE_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_DRIVER_CREATE_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_DRIVER_CREATE_CONTEXT"": [ 40, {
				 ""Size"": [ 0, [ ""Int16"", ""null"" ]],
				 ""ExtraCreateParameter"": [ 8, [ ""Pointer"", ""{\""target\"":\""_ECP_LIST\""}"" ]],
				 ""DeviceObjectHint"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TxnParameters"": [ 24, [ ""Pointer"", ""{\""target\"":\""_TXN_PARAMETER_BLOCK\""}"" ]],
				 ""SiloContext"": [ 32, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 Size { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public UInt64 ExtraCreateParameter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 DeviceObjectHint { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 TxnParameters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 SiloContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _WHEA_ERROR_SOURCE_DESCRIPTOR
 
	public class _WHEA_ERROR_SOURCE_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_ERROR_SOURCE_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 972; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_ERROR_SOURCE_DESCRIPTOR"": [ 972, {
				 ""Length"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Version"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Type"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_WHEA_ERROR_SOURCE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""State"": [ 12, [ ""Enumeration"", ""{\""enum_name\"":\""_WHEA_ERROR_SOURCE_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""MaxRawDataLength"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""NumRecordsToPreallocate"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""MaxSectionsPerRecord"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""ErrorSourceId"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""PlatformErrorSourceId"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Info"": [ 40, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _WHEA_ERROR_SOURCE_TYPE Type { get { return (_WHEA_ERROR_SOURCE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _WHEA_ERROR_SOURCE_STATE State { get { return (_WHEA_ERROR_SOURCE_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 MaxRawDataLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 NumRecordsToPreallocate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 MaxSectionsPerRecord { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 ErrorSourceId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 PlatformErrorSourceId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public _ANONYMOUS_TAG Info
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEA_EVENT_LOG_ENTRY
 
	public class _WHEA_EVENT_LOG_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_EVENT_LOG_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_EVENT_LOG_ENTRY"": [ 32, {
				 ""Header"": [ 0, [ ""_WHEA_EVENT_LOG_ENTRY_HEADER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _WHEA_EVENT_LOG_ENTRY_HEADER Header
		{
			get
			{
				_WHEA_EVENT_LOG_ENTRY_HEADER returnValue = new _WHEA_EVENT_LOG_ENTRY_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEA_EVENT_LOG_ENTRY_FLAGS
 
	public class _WHEA_EVENT_LOG_ENTRY_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_EVENT_LOG_ENTRY_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_EVENT_LOG_ENTRY_FLAGS"": [ 4, {
				 ""Reserved1"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""LogInternalEtw"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""LogBlackbox"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""LogSel"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""RawSel"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""NoFormat"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""Driver"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved2"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""AsULONG"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Reserved1
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 LogInternalEtw
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 LogBlackbox
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 LogSel
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 RawSel
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 NoFormat
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 Driver
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved2
		{
			get
			{
				// start: 7  end: 32  Mask: 11111111111111111111111110000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967168) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 AsULONG { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _WHEA_ERROR_PACKET_V2
 
	public class _WHEA_ERROR_PACKET_V2
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_ERROR_PACKET_V2(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_ERROR_PACKET_V2"": [ 80, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Version"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Length"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 12, [ ""_WHEA_ERROR_PACKET_FLAGS"", ""null"" ]],
				 ""ErrorType"": [ 16, [ ""Enumeration"", ""{\""enum_name\"":\""_WHEA_ERROR_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ErrorSeverity"": [ 20, [ ""Enumeration"", ""{\""enum_name\"":\""_WHEA_ERROR_SEVERITY\"",\""target\"":\""UInt32\""}"" ]],
				 ""ErrorSourceId"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""ErrorSourceType"": [ 28, [ ""Enumeration"", ""{\""enum_name\"":\""_WHEA_ERROR_SOURCE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""NotifyType"": [ 32, [ ""_GUID"", ""null"" ]],
				 ""Context"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""DataFormat"": [ 56, [ ""Enumeration"", ""{\""enum_name\"":\""_WHEA_ERROR_PACKET_DATA_FORMAT\"",\""target\"":\""UInt32\""}"" ]],
				 ""Reserved1"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""DataOffset"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""DataLength"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""PshedDataOffset"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""PshedDataLength"": [ 76, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _WHEA_ERROR_PACKET_FLAGS Flags
		{
			get
			{
				_WHEA_ERROR_PACKET_FLAGS returnValue = new _WHEA_ERROR_PACKET_FLAGS(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public _WHEA_ERROR_TYPE ErrorType { get { return (_WHEA_ERROR_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _WHEA_ERROR_SEVERITY ErrorSeverity { get { return (_WHEA_ERROR_SEVERITY)BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 ErrorSourceId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _WHEA_ERROR_SOURCE_TYPE ErrorSourceType { get { return (_WHEA_ERROR_SOURCE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public _GUID NotifyType
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _WHEA_ERROR_PACKET_DATA_FORMAT DataFormat { get { return (_WHEA_ERROR_PACKET_DATA_FORMAT)BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 Reserved1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 DataOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 DataLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 PshedDataOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 PshedDataLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
	}
	#endregion
	#region _WHEA_ERROR_RECORD
 
	public class _WHEA_ERROR_RECORD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_ERROR_RECORD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 200; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_ERROR_RECORD"": [ 200, {
				 ""Header"": [ 0, [ ""_WHEA_ERROR_RECORD_HEADER"", ""null"" ]],
				 ""SectionDescriptor"": [ 128, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public _WHEA_ERROR_RECORD_HEADER Header
		{
			get
			{
				_WHEA_ERROR_RECORD_HEADER returnValue = new _WHEA_ERROR_RECORD_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR[] SectionDescriptor
		{
			get
			{
				_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR[] returnValue = new _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR(_StructureData, (i * size) + _BufferOffset + 128);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR
 
	public class _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR"": [ 72, {
				 ""SectionOffset"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SectionLength"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Revision"": [ 8, [ ""_WHEA_REVISION"", ""null"" ]],
				 ""ValidBits"": [ 10, [ ""_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS"", ""null"" ]],
				 ""Reserved"": [ 11, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 12, [ ""_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS"", ""null"" ]],
				 ""SectionType"": [ 16, [ ""_GUID"", ""null"" ]],
				 ""FRUId"": [ 32, [ ""_GUID"", ""null"" ]],
				 ""SectionSeverity"": [ 48, [ ""Enumeration"", ""{\""enum_name\"":\""_WHEA_ERROR_SEVERITY\"",\""target\"":\""UInt32\""}"" ]],
				 ""FRUText"": [ 52, [ ""Array"", ""{\""count\"":20,\""target\"":\""Char\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SectionOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SectionLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _WHEA_REVISION Revision
		{
			get
			{
				_WHEA_REVISION returnValue = new _WHEA_REVISION(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS ValidBits
		{
			get
			{
				_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS returnValue = new _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS(_StructureData, _BufferOffset + 10);
				return returnValue;
			}
		}
		public Byte Reserved{ get { return _StructureData[_BufferOffset +11]; } }
		public _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS Flags
		{
			get
			{
				_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS returnValue = new _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public _GUID SectionType
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _GUID FRUId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _WHEA_ERROR_SEVERITY SectionSeverity { get { return (_WHEA_ERROR_SEVERITY)BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public Char[] FRUText
		{
			get
			{
				Char[] returnValue = new Char[20];
				for(int i=0; i<20; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 52);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_RB_TREE
 
	public class _RTL_RB_TREE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_RB_TREE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_RB_TREE"": [ 16, {
				 ""Root"": [ 0, [ ""Pointer"", ""{\""target\"":\""_RTL_BALANCED_NODE\""}"" ]],
				 ""Encoded"": [ 8, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Min"": [ 8, [ ""Pointer"", ""{\""target\"":\""_RTL_BALANCED_NODE\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Root { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Byte Encoded
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 8];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public UInt64 Min { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _RTL_BALANCED_NODE
 
	public class _RTL_BALANCED_NODE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_BALANCED_NODE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_BALANCED_NODE"": [ 24, {
				 ""Children"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_RTL_BALANCED_NODE\""}}"" ]],
				 ""Left"": [ 0, [ ""Pointer"", ""{\""target\"":\""_RTL_BALANCED_NODE\""}"" ]],
				 ""Right"": [ 8, [ ""Pointer"", ""{\""target\"":\""_RTL_BALANCED_NODE\""}"" ]],
				 ""Red"": [ 16, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Balance"": [ 16, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""ParentValue"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BALANCED_NODE[] Children
		{
			get
			{
				_RTL_BALANCED_NODE[] returnValue = new _RTL_BALANCED_NODE[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _RTL_BALANCED_NODE(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Left { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Right { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public Byte Red
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 16];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Balance
		{
			get
			{
				// start: 0  end: 2  Mask: 0000000000000011
				Byte value = _StructureData[_BufferOffset + 16];
				var value2 = (value & 3) >> 0;
				return (Byte)value2;
			}
		}
		public UInt64 ParentValue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _RTL_AVL_TREE
 
	public class _RTL_AVL_TREE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_AVL_TREE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_AVL_TREE"": [ 8, {
				 ""Root"": [ 0, [ ""Pointer"", ""{\""target\"":\""_RTL_BALANCED_NODE\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Root { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _KPRCB
 
	public class _KPRCB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KPRCB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1792; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KPRCB"": [ 1792, {
				 ""MxCsr"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""LegacyNumber"": [ 4, [ ""Byte"", ""null"" ]],
				 ""ReservedMustBeZero"": [ 5, [ ""Byte"", ""null"" ]],
				 ""InterruptRequest"": [ 6, [ ""Byte"", ""null"" ]],
				 ""IdleHalt"": [ 7, [ ""Byte"", ""null"" ]],
				 ""CurrentThread"": [ 8, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""NextThread"": [ 16, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""IdleThread"": [ 24, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""NestingLevel"": [ 32, [ ""Byte"", ""null"" ]],
				 ""ClockOwner"": [ 33, [ ""Byte"", ""null"" ]],
				 ""PendingTickFlags"": [ 34, [ ""Byte"", ""null"" ]],
				 ""PendingTick"": [ 34, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""PendingBackupTick"": [ 34, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""IdleState"": [ 35, [ ""Byte"", ""null"" ]],
				 ""Number"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""RspBase"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""PrcbLock"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""PriorityState"": [ 56, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""CpuType"": [ 64, [ ""Char"", ""null"" ]],
				 ""CpuID"": [ 65, [ ""Char"", ""null"" ]],
				 ""CpuStep"": [ 66, [ ""UInt16"", ""null"" ]],
				 ""CpuStepping"": [ 66, [ ""Byte"", ""null"" ]],
				 ""CpuModel"": [ 67, [ ""Byte"", ""null"" ]],
				 ""MHz"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""HalReserved"": [ 72, [ ""Array"", ""{\""count\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""MinorVersion"": [ 136, [ ""UInt16"", ""null"" ]],
				 ""MajorVersion"": [ 138, [ ""UInt16"", ""null"" ]],
				 ""BuildType"": [ 140, [ ""Byte"", ""null"" ]],
				 ""CpuVendor"": [ 141, [ ""Byte"", ""null"" ]],
				 ""CoresPerPhysicalProcessor"": [ 142, [ ""Byte"", ""null"" ]],
				 ""LogicalProcessorsPerCore"": [ 143, [ ""Byte"", ""null"" ]],
				 ""TscFrequency"": [ 144, [ ""UInt64"", ""null"" ]],
				 ""PrcbPad04"": [ 152, [ ""Array"", ""{\""count\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""ParentNode"": [ 192, [ ""Pointer"", ""{\""target\"":\""_KNODE\""}"" ]],
				 ""GroupSetMember"": [ 200, [ ""UInt64"", ""null"" ]],
				 ""Group"": [ 208, [ ""Byte"", ""null"" ]],
				 ""GroupIndex"": [ 209, [ ""Byte"", ""null"" ]],
				 ""PrcbPad05"": [ 210, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""InitialApicId"": [ 212, [ ""UInt32"", ""null"" ]],
				 ""ScbOffset"": [ 216, [ ""UInt32"", ""null"" ]],
				 ""ApicMask"": [ 220, [ ""UInt32"", ""null"" ]],
				 ""AcpiReserved"": [ 224, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CFlushSize"": [ 232, [ ""UInt32"", ""null"" ]],
				 ""PrcbPad11"": [ 240, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""ProcessorState"": [ 256, [ ""_KPROCESSOR_STATE"", ""null"" ]],
				 ""ExtendedSupervisorState"": [ 1728, [ ""Pointer"", ""{\""target\"":\""_XSAVE_AREA_HEADER\""}"" ]],
				 ""ProcessorSignature"": [ 1736, [ ""UInt32"", ""null"" ]],
				 ""ProcessorFlags"": [ 1740, [ ""UInt32"", ""null"" ]],
				 ""PrcbPad12a"": [ 1744, [ ""UInt64"", ""null"" ]],
				 ""PrcbPad12"": [ 1752, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 MxCsr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte LegacyNumber{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte ReservedMustBeZero{ get { return _StructureData[_BufferOffset +5]; } }
		public Byte InterruptRequest{ get { return _StructureData[_BufferOffset +6]; } }
		public Byte IdleHalt{ get { return _StructureData[_BufferOffset +7]; } }
		public UInt64 CurrentThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 NextThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 IdleThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public Byte NestingLevel{ get { return _StructureData[_BufferOffset +32]; } }
		public Byte ClockOwner{ get { return _StructureData[_BufferOffset +33]; } }
		public Byte PendingTickFlags{ get { return _StructureData[_BufferOffset +34]; } }
		public Byte PendingTick
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 34];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte PendingBackupTick
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 34];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte IdleState{ get { return _StructureData[_BufferOffset +35]; } }
		public UInt32 Number { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt64 RspBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 PrcbLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 PriorityState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public Char CpuType { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 64); } }
		public Char CpuID { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 65); } }
		public UInt16 CpuStep { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 66); } }
		public Byte CpuStepping{ get { return _StructureData[_BufferOffset +66]; } }
		public Byte CpuModel{ get { return _StructureData[_BufferOffset +67]; } }
		public UInt32 MHz { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt64[] HalReserved
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 72);
				return returnValue;
			}
		}
		public UInt16 MinorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 136); } }
		public UInt16 MajorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 138); } }
		public Byte BuildType{ get { return _StructureData[_BufferOffset +140]; } }
		public Byte CpuVendor{ get { return _StructureData[_BufferOffset +141]; } }
		public Byte CoresPerPhysicalProcessor{ get { return _StructureData[_BufferOffset +142]; } }
		public Byte LogicalProcessorsPerCore{ get { return _StructureData[_BufferOffset +143]; } }
		public UInt64 TscFrequency { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64[] PrcbPad04
		{
			get
			{
				UInt64[] returnValue = new UInt64[5];
				for(int i=0; i<5; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 152);
				return returnValue;
			}
		}
		public UInt64 ParentNode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt64 GroupSetMember { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public Byte Group{ get { return _StructureData[_BufferOffset +208]; } }
		public Byte GroupIndex{ get { return _StructureData[_BufferOffset +209]; } }
		public Byte[] PrcbPad05
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 210];
				return returnValue;
			}
		}
		public UInt32 InitialApicId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 212); } }
		public UInt32 ScbOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 216); } }
		public UInt32 ApicMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 220); } }
		public UInt64 AcpiReserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt32 CFlushSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 232); } }
		public UInt64[] PrcbPad11
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 240);
				return returnValue;
			}
		}
		public _KPROCESSOR_STATE ProcessorState
		{
			get
			{
				_KPROCESSOR_STATE returnValue = new _KPROCESSOR_STATE(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
		public UInt64 ExtendedSupervisorState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1728); } }
		public UInt32 ProcessorSignature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1736); } }
		public UInt32 ProcessorFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1740); } }
		public UInt64 PrcbPad12a { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1744); } }
		public UInt64[] PrcbPad12
		{
			get
			{
				UInt64[] returnValue = new UInt64[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 1752);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EX_PUSH_LOCK
 
	public class _EX_PUSH_LOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_PUSH_LOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_PUSH_LOCK"": [ 8, {
				 ""Locked"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Waiting"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""Waking"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""MultipleShared"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""Shared"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""Value"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Ptr"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Locked
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Waiting
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 Waking
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 MultipleShared
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt64)value2;
			}
		}
		public UInt64 Shared
		{
			get
			{
				// start: 4  end: 64  Mask: 1111111111111111111111111111111111111111111111111111111111110000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744073709551600) >> 4;
				return (UInt64)value2;
			}
		}
		public UInt64 Value { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Ptr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _HALP_ALLOC_CONTEXT
 
	public class _HALP_ALLOC_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HALP_ALLOC_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HALP_ALLOC_CONTEXT"": [ 24, {
				 ""BufferList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Lock"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY BufferList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _MCUPDATE_INFO
 
	public class _MCUPDATE_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MCUPDATE_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MCUPDATE_INFO"": [ 48, {
				 ""List"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Status"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Id"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""VendorScratch"": [ 32, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY List
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Status { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 Id { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64[] VendorScratch
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HARDWARE_PTE
 
	public class _HARDWARE_PTE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HARDWARE_PTE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HARDWARE_PTE"": [ 8, {
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Write"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""Owner"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""WriteThrough"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""CacheDisable"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""Accessed"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""Dirty"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt64\""}"" ]],
				 ""LargePage"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt64\""}"" ]],
				 ""Global"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""CopyOnWrite"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt64\""}"" ]],
				 ""Prototype"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""reserved0"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""PageFrameNumber"": [ 0, [ ""BitField"", ""{\""end_bit\"":48,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""reserved1"": [ 0, [ ""BitField"", ""{\""end_bit\"":52,\""start_bit\"":48,\""target\"":\""UInt64\""}"" ]],
				 ""SoftwareWsIndex"": [ 0, [ ""BitField"", ""{\""end_bit\"":63,\""start_bit\"":52,\""target\"":\""UInt64\""}"" ]],
				 ""NoExecute"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":63,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Valid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Write
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 Owner
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 WriteThrough
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt64)value2;
			}
		}
		public UInt64 CacheDisable
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt64)value2;
			}
		}
		public UInt64 Accessed
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt64)value2;
			}
		}
		public UInt64 Dirty
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt64)value2;
			}
		}
		public UInt64 LargePage
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt64)value2;
			}
		}
		public UInt64 Global
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt64)value2;
			}
		}
		public UInt64 CopyOnWrite
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt64)value2;
			}
		}
		public UInt64 Prototype
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 reserved0
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 PageFrameNumber
		{
			get
			{
				// start: 12  end: 48  Mask: 111111111111111111111111111111111111000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 281474976706560) >> 12;
				return (UInt64)value2;
			}
		}
		public UInt64 reserved1
		{
			get
			{
				// start: 48  end: 52  Mask: 1111000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4222124650659840) >> 48;
				return (UInt64)value2;
			}
		}
		public UInt64 SoftwareWsIndex
		{
			get
			{
				// start: 52  end: 63  Mask: 111111111110000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 9218868437227405312) >> 52;
				return (UInt64)value2;
			}
		}
		public UInt64 NoExecute
		{
			get
			{
				// start: 63  end: 64  Mask: 1000000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 9223372036854775808) >> 63;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _DEVPROPKEY
 
	public class _DEVPROPKEY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVPROPKEY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVPROPKEY"": [ 20, {
				 ""fmtid"": [ 0, [ ""_GUID"", ""null"" ]],
				 ""pid"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _GUID fmtid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 pid { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _WHEA_IPF_CMC_DESCRIPTOR
 
	public class _WHEA_IPF_CMC_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_IPF_CMC_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_IPF_CMC_DESCRIPTOR"": [ 4, {
				 ""Type"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Enabled"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 3, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Type { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Enabled{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +3]; } }
	}
	#endregion
	#region _WHEA_AER_ENDPOINT_DESCRIPTOR
 
	public class _WHEA_AER_ENDPOINT_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_AER_ENDPOINT_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_AER_ENDPOINT_DESCRIPTOR"": [ 32, {
				 ""Type"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Enabled"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 3, [ ""Byte"", ""null"" ]],
				 ""BusNumber"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Slot"": [ 8, [ ""_WHEA_PCI_SLOT_NUMBER"", ""null"" ]],
				 ""DeviceControl"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 14, [ ""_AER_ENDPOINT_DESCRIPTOR_FLAGS"", ""null"" ]],
				 ""UncorrectableErrorMask"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""UncorrectableErrorSeverity"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""CorrectableErrorMask"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""AdvancedCapsAndControl"": [ 28, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Type { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Enabled{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _WHEA_PCI_SLOT_NUMBER Slot
		{
			get
			{
				_WHEA_PCI_SLOT_NUMBER returnValue = new _WHEA_PCI_SLOT_NUMBER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt16 DeviceControl { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public _AER_ENDPOINT_DESCRIPTOR_FLAGS Flags
		{
			get
			{
				_AER_ENDPOINT_DESCRIPTOR_FLAGS returnValue = new _AER_ENDPOINT_DESCRIPTOR_FLAGS(_StructureData, _BufferOffset + 14);
				return returnValue;
			}
		}
		public UInt32 UncorrectableErrorMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 UncorrectableErrorSeverity { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 CorrectableErrorMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 AdvancedCapsAndControl { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _WHEA_AER_BRIDGE_DESCRIPTOR
 
	public class _WHEA_AER_BRIDGE_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_AER_BRIDGE_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 44; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_AER_BRIDGE_DESCRIPTOR"": [ 44, {
				 ""Type"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Enabled"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 3, [ ""Byte"", ""null"" ]],
				 ""BusNumber"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Slot"": [ 8, [ ""_WHEA_PCI_SLOT_NUMBER"", ""null"" ]],
				 ""DeviceControl"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 14, [ ""_AER_BRIDGE_DESCRIPTOR_FLAGS"", ""null"" ]],
				 ""UncorrectableErrorMask"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""UncorrectableErrorSeverity"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""CorrectableErrorMask"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""AdvancedCapsAndControl"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""SecondaryUncorrectableErrorMask"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""SecondaryUncorrectableErrorSev"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""SecondaryCapsAndControl"": [ 40, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Type { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Enabled{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _WHEA_PCI_SLOT_NUMBER Slot
		{
			get
			{
				_WHEA_PCI_SLOT_NUMBER returnValue = new _WHEA_PCI_SLOT_NUMBER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt16 DeviceControl { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public _AER_BRIDGE_DESCRIPTOR_FLAGS Flags
		{
			get
			{
				_AER_BRIDGE_DESCRIPTOR_FLAGS returnValue = new _AER_BRIDGE_DESCRIPTOR_FLAGS(_StructureData, _BufferOffset + 14);
				return returnValue;
			}
		}
		public UInt32 UncorrectableErrorMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 UncorrectableErrorSeverity { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 CorrectableErrorMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 AdvancedCapsAndControl { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 SecondaryUncorrectableErrorMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 SecondaryUncorrectableErrorSev { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 SecondaryCapsAndControl { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _INTERFACE
 
	public class _INTERFACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _INTERFACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_INTERFACE"": [ 32, {
				 ""Size"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Version"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Context"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InterfaceReference"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InterfaceDereference"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 InterfaceReference { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 InterfaceDereference { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _DEVICE_CAPABILITIES
 
	public class _DEVICE_CAPABILITIES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_CAPABILITIES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_CAPABILITIES"": [ 64, {
				 ""Size"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Version"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""DeviceD1"": [ 4, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""DeviceD2"": [ 4, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""LockSupported"": [ 4, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""EjectSupported"": [ 4, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""Removable"": [ 4, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""DockDevice"": [ 4, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""UniqueID"": [ 4, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""SilentInstall"": [ 4, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""RawDeviceOK"": [ 4, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""SurpriseRemovalOK"": [ 4, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""WakeFromD0"": [ 4, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""WakeFromD1"": [ 4, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""WakeFromD2"": [ 4, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""WakeFromD3"": [ 4, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""HardwareDisabled"": [ 4, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""NonDynamic"": [ 4, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""WarmEjectSupported"": [ 4, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""NoDisplayInUI"": [ 4, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved1"": [ 4, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""WakeFromInterrupt"": [ 4, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""SecureDevice"": [ 4, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""ChildOfVgaEnabledBridge"": [ 4, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""DecodeIoOnBoot"": [ 4, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 4, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]],
				 ""Address"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""UINumber"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""DeviceState"": [ 16, [ ""Array"", ""{\""size\"":0,\""target\"":\""Enumeration\"",\""target_args\"":{\""enum_name\"":\""_DEVICE_POWER_STATE\"",\""target\"":\""UInt32\""}}"" ]],
				 ""SystemWake"": [ 44, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""DeviceWake"": [ 48, [ ""Enumeration"", ""{\""enum_name\"":\""_DEVICE_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""D1Latency"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""D2Latency"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""D3Latency"": [ 60, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 DeviceD1
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 DeviceD2
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 LockSupported
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 EjectSupported
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 Removable
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 DockDevice
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 UniqueID
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 SilentInstall
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 RawDeviceOK
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 SurpriseRemovalOK
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 WakeFromD0
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 WakeFromD1
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 WakeFromD2
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 WakeFromD3
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 HardwareDisabled
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 NonDynamic
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 WarmEjectSupported
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 NoDisplayInUI
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved1
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 262144) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 WakeFromInterrupt
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 SecureDevice
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 ChildOfVgaEnabledBridge
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 DecodeIoOnBoot
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 23  end: 32  Mask: 11111111100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4286578688) >> 23;
				return (UInt32)value2;
			}
		}
		public UInt32 Address { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 UINumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _DEVICE_POWER_STATE[] DeviceState
		{
			get
			{
				_DEVICE_POWER_STATE[] returnValue = new _DEVICE_POWER_STATE[7];
				int size = 0;
				for(int i=0; i<7; i++ )
					returnValue[i] = (_DEVICE_POWER_STATE)BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public _SYSTEM_POWER_STATE SystemWake { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public _DEVICE_POWER_STATE DeviceWake { get { return (_DEVICE_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 D1Latency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 D2Latency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 D3Latency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
	}
	#endregion
	#region _WHEA_XPF_PROCESSOR_ERROR_SECTION
 
	public class _WHEA_XPF_PROCESSOR_ERROR_SECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_XPF_PROCESSOR_ERROR_SECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 65; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_XPF_PROCESSOR_ERROR_SECTION"": [ 65, {
				 ""ValidBits"": [ 0, [ ""_WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS"", ""null"" ]],
				 ""LocalAPICId"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""CpuId"": [ 16, [ ""Array"", ""{\""count\"":48,\""target\"":\""Byte\""}"" ]],
				 ""VariableInfo"": [ 64, [ ""Array"", ""{\""count\"":1,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS ValidBits
		{
			get
			{
				_WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS returnValue = new _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 LocalAPICId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public Byte[] CpuId
		{
			get
			{
				Byte[] returnValue = new Byte[48];
				for(int i=0; i<48; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 16];
				return returnValue;
			}
		}
		public Byte[] VariableInfo
		{
			get
			{
				Byte[] returnValue = new Byte[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 64];
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEA_XPF_CMC_DESCRIPTOR
 
	public class _WHEA_XPF_CMC_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_XPF_CMC_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 932; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_XPF_CMC_DESCRIPTOR"": [ 932, {
				 ""Type"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Enabled"": [ 2, [ ""Byte"", ""null"" ]],
				 ""NumberOfBanks"": [ 3, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Notify"": [ 8, [ ""_WHEA_NOTIFICATION_DESCRIPTOR"", ""null"" ]],
				 ""Banks"": [ 36, [ ""Array"", ""{\""count\"":32,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Type { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Enabled{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte NumberOfBanks{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _WHEA_NOTIFICATION_DESCRIPTOR Notify
		{
			get
			{
				_WHEA_NOTIFICATION_DESCRIPTOR returnValue = new _WHEA_NOTIFICATION_DESCRIPTOR(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _WHEA_XPF_MC_BANK_DESCRIPTOR[] Banks
		{
			get
			{
				_WHEA_XPF_MC_BANK_DESCRIPTOR[] returnValue = new _WHEA_XPF_MC_BANK_DESCRIPTOR[32];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<32; i++ )
					returnValue[i] = new _WHEA_XPF_MC_BANK_DESCRIPTOR(_StructureData, (i * size) + _BufferOffset + 36);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_DYNAMIC_HASH_TABLE_ENTRY
 
	public class _RTL_DYNAMIC_HASH_TABLE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_DYNAMIC_HASH_TABLE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_DYNAMIC_HASH_TABLE_ENTRY"": [ 24, {
				 ""Linkage"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Signature"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Linkage
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Signature { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _WHEA_GENERIC_ERROR_DESCRIPTOR_V2
 
	public class _WHEA_GENERIC_ERROR_DESCRIPTOR_V2
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_GENERIC_ERROR_DESCRIPTOR_V2(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_GENERIC_ERROR_DESCRIPTOR_V2"": [ 80, {
				 ""Type"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Reserved"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Enabled"": [ 3, [ ""Byte"", ""null"" ]],
				 ""ErrStatusBlockLength"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""RelatedErrorSourceId"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ErrStatusAddressSpaceID"": [ 12, [ ""Byte"", ""null"" ]],
				 ""ErrStatusAddressBitWidth"": [ 13, [ ""Byte"", ""null"" ]],
				 ""ErrStatusAddressBitOffset"": [ 14, [ ""Byte"", ""null"" ]],
				 ""ErrStatusAddressAccessSize"": [ 15, [ ""Byte"", ""null"" ]],
				 ""ErrStatusAddress"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Notify"": [ 24, [ ""_WHEA_NOTIFICATION_DESCRIPTOR"", ""null"" ]],
				 ""ReadAckAddressSpaceID"": [ 52, [ ""Byte"", ""null"" ]],
				 ""ReadAckAddressBitWidth"": [ 53, [ ""Byte"", ""null"" ]],
				 ""ReadAckAddressBitOffset"": [ 54, [ ""Byte"", ""null"" ]],
				 ""ReadAckAddressAccessSize"": [ 55, [ ""Byte"", ""null"" ]],
				 ""ReadAckAddress"": [ 56, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ReadAckPreserveMask"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""ReadAckWriteMask"": [ 72, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Type { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Enabled{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 ErrStatusBlockLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 RelatedErrorSourceId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte ErrStatusAddressSpaceID{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte ErrStatusAddressBitWidth{ get { return _StructureData[_BufferOffset +13]; } }
		public Byte ErrStatusAddressBitOffset{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte ErrStatusAddressAccessSize{ get { return _StructureData[_BufferOffset +15]; } }
		public _LARGE_INTEGER ErrStatusAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _WHEA_NOTIFICATION_DESCRIPTOR Notify
		{
			get
			{
				_WHEA_NOTIFICATION_DESCRIPTOR returnValue = new _WHEA_NOTIFICATION_DESCRIPTOR(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public Byte ReadAckAddressSpaceID{ get { return _StructureData[_BufferOffset +52]; } }
		public Byte ReadAckAddressBitWidth{ get { return _StructureData[_BufferOffset +53]; } }
		public Byte ReadAckAddressBitOffset{ get { return _StructureData[_BufferOffset +54]; } }
		public Byte ReadAckAddressAccessSize{ get { return _StructureData[_BufferOffset +55]; } }
		public _LARGE_INTEGER ReadAckAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt64 ReadAckPreserveMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 ReadAckWriteMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
	}
	#endregion
	#region _SECONDARY_INTERRUPT_LINE_STATE
 
	public class _SECONDARY_INTERRUPT_LINE_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECONDARY_INTERRUPT_LINE_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECONDARY_INTERRUPT_LINE_STATE"": [ 16, {
				 ""Polarity"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_POLARITY\"",\""target\"":\""UInt32\""}"" ]],
				 ""Mode"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_MODE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Vector"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Unmasked"": [ 12, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KINTERRUPT_POLARITY Polarity { get { return (_KINTERRUPT_POLARITY)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _KINTERRUPT_MODE Mode { get { return (_KINTERRUPT_MODE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Vector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte Unmasked{ get { return _StructureData[_BufferOffset +12]; } }
	}
	#endregion
	#region _AER_ENDPOINT_DESCRIPTOR_FLAGS
 
	public class _AER_ENDPOINT_DESCRIPTOR_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _AER_ENDPOINT_DESCRIPTOR_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_AER_ENDPOINT_DESCRIPTOR_FLAGS"": [ 2, {
				 ""UncorrectableErrorMaskRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""UncorrectableErrorSeverityRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""CorrectableErrorMaskRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt16\""}"" ]],
				 ""AdvancedCapsAndControlRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt16\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":4,\""target\"":\""UInt16\""}"" ]],
				 ""AsUSHORT"": [ 0, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 UncorrectableErrorMaskRW
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 UncorrectableErrorSeverityRW
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt16)value2;
			}
		}
		public UInt16 CorrectableErrorMaskRW
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt16)value2;
			}
		}
		public UInt16 AdvancedCapsAndControlRW
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt16)value2;
			}
		}
		public UInt16 Reserved
		{
			get
			{
				// start: 4  end: 16  Mask: 1111111111110000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65520) >> 4;
				return (UInt16)value2;
			}
		}
		public UInt16 AsUSHORT { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _GENERAL_LOOKASIDE
 
	public class _GENERAL_LOOKASIDE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _GENERAL_LOOKASIDE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_GENERAL_LOOKASIDE"": [ 128, {
				 ""ListHead"": [ 0, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""SingleListHead"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""Depth"": [ 16, [ ""UInt16"", ""null"" ]],
				 ""MaximumDepth"": [ 18, [ ""UInt16"", ""null"" ]],
				 ""TotalAllocates"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""AllocateMisses"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""AllocateHits"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""TotalFrees"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""FreeMisses"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""FreeHits"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Type"": [ 36, [ ""Enumeration"", ""{\""enum_name\"":\""_POOL_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Tag"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""Size"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""AllocateEx"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Allocate"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FreeEx"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Free"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ListEntry"": [ 64, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LastTotalAllocates"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""LastAllocateMisses"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""LastAllocateHits"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""Future"": [ 88, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _SLIST_HEADER ListHead
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY SingleListHead
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt16 Depth { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 16); } }
		public UInt16 MaximumDepth { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 18); } }
		public UInt32 TotalAllocates { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 AllocateMisses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 AllocateHits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 TotalFrees { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 FreeMisses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 FreeHits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public _POOL_TYPE Type { get { return (_POOL_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 Tag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt64 AllocateEx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Allocate { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 FreeEx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 Free { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt32 LastTotalAllocates { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 LastAllocateMisses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 LastAllocateHits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32[] Future
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 88);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS
 
	public class _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_XPF_PROCESSOR_ERROR_SECTION_VALIDBITS"": [ 8, {
				 ""LocalAPICId"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""CpuId"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""ProcInfoCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""ContextInfoCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":14,\""target\"":\""UInt64\""}"" ]],
				 ""ValidBits"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 LocalAPICId
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 CpuId
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 ProcInfoCount
		{
			get
			{
				// start: 2  end: 8  Mask: 0000000011111100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 252) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 ContextInfoCount
		{
			get
			{
				// start: 8  end: 14  Mask: 0011111100000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16128) >> 8;
				return (UInt64)value2;
			}
		}
		public UInt64 Reserved
		{
			get
			{
				// start: 14  end: 64  Mask: 1111111111111111111111111111111111111111111111111100000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744073709535232) >> 14;
				return (UInt64)value2;
			}
		}
		public UInt64 ValidBits { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _IO_APIC_DATA
 
	public class _IO_APIC_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_APIC_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_APIC_DATA"": [ 48, {
				 ""PhysicalAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Identifier"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""BaseAddress"": [ 16, [ ""Pointer"", ""{\""target\"":\""_IO_APIC_REGISTERS\""}"" ]],
				 ""Version"": [ 24, [ ""Byte"", ""null"" ]],
				 ""PinCount"": [ 25, [ ""Byte"", ""null"" ]],
				 ""Initialized"": [ 26, [ ""Byte"", ""null"" ]],
				 ""InitializedFirstLocalUnit"": [ 27, [ ""Byte"", ""null"" ]],
				 ""GsiBase"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""CmciRegister"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""DeferredErrorRegister"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""IoUnitMissing"": [ 40, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PhysicalAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Identifier { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 BaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Byte Version{ get { return _StructureData[_BufferOffset +24]; } }
		public Byte PinCount{ get { return _StructureData[_BufferOffset +25]; } }
		public Byte Initialized{ get { return _StructureData[_BufferOffset +26]; } }
		public Byte InitializedFirstLocalUnit{ get { return _StructureData[_BufferOffset +27]; } }
		public UInt32 GsiBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 CmciRegister { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 DeferredErrorRegister { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public Byte IoUnitMissing{ get { return _StructureData[_BufferOffset +40]; } }
	}
	#endregion
	#region _WHEA_GENERIC_ERROR_DESCRIPTOR
 
	public class _WHEA_GENERIC_ERROR_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_GENERIC_ERROR_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 52; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_GENERIC_ERROR_DESCRIPTOR"": [ 52, {
				 ""Type"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Reserved"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Enabled"": [ 3, [ ""Byte"", ""null"" ]],
				 ""ErrStatusBlockLength"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""RelatedErrorSourceId"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ErrStatusAddressSpaceID"": [ 12, [ ""Byte"", ""null"" ]],
				 ""ErrStatusAddressBitWidth"": [ 13, [ ""Byte"", ""null"" ]],
				 ""ErrStatusAddressBitOffset"": [ 14, [ ""Byte"", ""null"" ]],
				 ""ErrStatusAddressAccessSize"": [ 15, [ ""Byte"", ""null"" ]],
				 ""ErrStatusAddress"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Notify"": [ 24, [ ""_WHEA_NOTIFICATION_DESCRIPTOR"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Type { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Enabled{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 ErrStatusBlockLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 RelatedErrorSourceId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte ErrStatusAddressSpaceID{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte ErrStatusAddressBitWidth{ get { return _StructureData[_BufferOffset +13]; } }
		public Byte ErrStatusAddressBitOffset{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte ErrStatusAddressAccessSize{ get { return _StructureData[_BufferOffset +15]; } }
		public _LARGE_INTEGER ErrStatusAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _WHEA_NOTIFICATION_DESCRIPTOR Notify
		{
			get
			{
				_WHEA_NOTIFICATION_DESCRIPTOR returnValue = new _WHEA_NOTIFICATION_DESCRIPTOR(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _REGISTERED_INTERRUPT_CONTROLLER
 
	public class _REGISTERED_INTERRUPT_CONTROLLER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _REGISTERED_INTERRUPT_CONTROLLER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 352; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_REGISTERED_INTERRUPT_CONTROLLER"": [ 352, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""InternalData"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InternalDataSize"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""FunctionTable"": [ 32, [ ""_INTERRUPT_FUNCTION_TABLE"", ""null"" ]],
				 ""KnownType"": [ 216, [ ""Enumeration"", ""{\""enum_name\"":\""_KNOWN_CONTROLLER_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Capabilities"": [ 220, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 224, [ ""UInt32"", ""null"" ]],
				 ""MaxPriority"": [ 228, [ ""UInt32"", ""null"" ]],
				 ""UnitId"": [ 232, [ ""UInt32"", ""null"" ]],
				 ""LinesHead"": [ 240, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""OutputLinesHead"": [ 256, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""MinLine"": [ 272, [ ""Int32"", ""null"" ]],
				 ""MaxLine"": [ 276, [ ""Int32"", ""null"" ]],
				 ""MaxClusterSize"": [ 280, [ ""UInt32"", ""null"" ]],
				 ""MaxClusters"": [ 284, [ ""UInt32"", ""null"" ]],
				 ""InterruptReplayDataSize"": [ 288, [ ""UInt32"", ""null"" ]],
				 ""Problem"": [ 292, [ ""Enumeration"", ""{\""enum_name\"":\""_INTERRUPT_PROBLEM\"",\""target\"":\""UInt32\""}"" ]],
				 ""ProblemStatus"": [ 296, [ ""Int32"", ""null"" ]],
				 ""ProblemSourceFile"": [ 304, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""ProblemSourceLine"": [ 312, [ ""UInt32"", ""null"" ]],
				 ""CustomProblem"": [ 316, [ ""UInt32"", ""null"" ]],
				 ""CustomProblemStatus"": [ 320, [ ""Int32"", ""null"" ]],
				 ""ResourceId"": [ 328, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""PowerHandle"": [ 344, [ ""Pointer"", ""{\""target\"":\""POHANDLE__\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 InternalData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 InternalDataSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _INTERRUPT_FUNCTION_TABLE FunctionTable
		{
			get
			{
				_INTERRUPT_FUNCTION_TABLE returnValue = new _INTERRUPT_FUNCTION_TABLE(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _KNOWN_CONTROLLER_TYPE KnownType { get { return (_KNOWN_CONTROLLER_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 216); } }
		public UInt32 Capabilities { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 220); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 224); } }
		public UInt32 MaxPriority { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 228); } }
		public UInt32 UnitId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 232); } }
		public _LIST_ENTRY LinesHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 240);
				return returnValue;
			}
		}
		public _LIST_ENTRY OutputLinesHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
		public Int32 MinLine { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 272); } }
		public Int32 MaxLine { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 276); } }
		public UInt32 MaxClusterSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 280); } }
		public UInt32 MaxClusters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 284); } }
		public UInt32 InterruptReplayDataSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 288); } }
		public _INTERRUPT_PROBLEM Problem { get { return (_INTERRUPT_PROBLEM)BitConverter.ToUInt32(_StructureData, _BufferOffset + 292); } }
		public Int32 ProblemStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 296); } }
		public UInt64 ProblemSourceFile { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 304); } }
		public UInt32 ProblemSourceLine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 312); } }
		public UInt32 CustomProblem { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 316); } }
		public Int32 CustomProblemStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 320); } }
		public _UNICODE_STRING ResourceId
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 328);
				return returnValue;
			}
		}
		public UInt64 PowerHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 344); } }
	}
	#endregion
	#region _WHEA_PCI_SLOT_NUMBER
 
	public class _WHEA_PCI_SLOT_NUMBER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_PCI_SLOT_NUMBER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_PCI_SLOT_NUMBER"": [ 4, {
				 ""u"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEA_XPF_MCE_DESCRIPTOR
 
	public class _WHEA_XPF_MCE_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_XPF_MCE_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 920; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_XPF_MCE_DESCRIPTOR"": [ 920, {
				 ""Type"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Enabled"": [ 2, [ ""Byte"", ""null"" ]],
				 ""NumberOfBanks"": [ 3, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 4, [ ""_XPF_MCE_FLAGS"", ""null"" ]],
				 ""MCG_Capability"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""MCG_GlobalControl"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""Banks"": [ 24, [ ""Array"", ""{\""count\"":32,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Type { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Enabled{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte NumberOfBanks{ get { return _StructureData[_BufferOffset +3]; } }
		public _XPF_MCE_FLAGS Flags
		{
			get
			{
				_XPF_MCE_FLAGS returnValue = new _XPF_MCE_FLAGS(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt64 MCG_Capability { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 MCG_GlobalControl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _WHEA_XPF_MC_BANK_DESCRIPTOR[] Banks
		{
			get
			{
				_WHEA_XPF_MC_BANK_DESCRIPTOR[] returnValue = new _WHEA_XPF_MC_BANK_DESCRIPTOR[32];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<32; i++ )
					returnValue[i] = new _WHEA_XPF_MC_BANK_DESCRIPTOR(_StructureData, (i * size) + _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _FILE_OBJECT
 
	public class _FILE_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FILE_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 216; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FILE_OBJECT"": [ 216, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""Int16"", ""null"" ]],
				 ""DeviceObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""Vpb"": [ 16, [ ""Pointer"", ""{\""target\"":\""_VPB\""}"" ]],
				 ""FsContext"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FsContext2"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SectionObjectPointer"": [ 40, [ ""Pointer"", ""{\""target\"":\""_SECTION_OBJECT_POINTERS\""}"" ]],
				 ""PrivateCacheMap"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FinalStatus"": [ 56, [ ""Int32"", ""null"" ]],
				 ""RelatedFileObject"": [ 64, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""LockOperation"": [ 72, [ ""Byte"", ""null"" ]],
				 ""DeletePending"": [ 73, [ ""Byte"", ""null"" ]],
				 ""ReadAccess"": [ 74, [ ""Byte"", ""null"" ]],
				 ""WriteAccess"": [ 75, [ ""Byte"", ""null"" ]],
				 ""DeleteAccess"": [ 76, [ ""Byte"", ""null"" ]],
				 ""SharedRead"": [ 77, [ ""Byte"", ""null"" ]],
				 ""SharedWrite"": [ 78, [ ""Byte"", ""null"" ]],
				 ""SharedDelete"": [ 79, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""FileName"": [ 88, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""CurrentByteOffset"": [ 104, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Waiters"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""Busy"": [ 116, [ ""UInt32"", ""null"" ]],
				 ""LastLock"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Lock"": [ 128, [ ""_KEVENT"", ""null"" ]],
				 ""Event"": [ 152, [ ""_KEVENT"", ""null"" ]],
				 ""CompletionContext"": [ 176, [ ""Pointer"", ""{\""target\"":\""_IO_COMPLETION_CONTEXT\""}"" ]],
				 ""IrpListLock"": [ 184, [ ""UInt64"", ""null"" ]],
				 ""IrpList"": [ 192, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FileObjectExtension"": [ 208, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 Size { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Vpb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 FsContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 FsContext2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 SectionObjectPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 PrivateCacheMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public Int32 FinalStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 56); } }
		public UInt64 RelatedFileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public Byte LockOperation{ get { return _StructureData[_BufferOffset +72]; } }
		public Byte DeletePending{ get { return _StructureData[_BufferOffset +73]; } }
		public Byte ReadAccess{ get { return _StructureData[_BufferOffset +74]; } }
		public Byte WriteAccess{ get { return _StructureData[_BufferOffset +75]; } }
		public Byte DeleteAccess{ get { return _StructureData[_BufferOffset +76]; } }
		public Byte SharedRead{ get { return _StructureData[_BufferOffset +77]; } }
		public Byte SharedWrite{ get { return _StructureData[_BufferOffset +78]; } }
		public Byte SharedDelete{ get { return _StructureData[_BufferOffset +79]; } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public _UNICODE_STRING FileName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public _LARGE_INTEGER CurrentByteOffset
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt32 Waiters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public UInt32 Busy { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 116); } }
		public UInt64 LastLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public _KEVENT Lock
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 152);
				return returnValue;
			}
		}
		public UInt64 CompletionContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 IrpListLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public _LIST_ENTRY IrpList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public UInt64 FileObjectExtension { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
	}
	#endregion
	#region _PROCLOCALSAPIC
 
	public class _PROCLOCALSAPIC
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCLOCALSAPIC(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 17; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCLOCALSAPIC"": [ 17, {
				 ""Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Length"": [ 1, [ ""Byte"", ""null"" ]],
				 ""ACPIProcessorID"": [ 2, [ ""Byte"", ""null"" ]],
				 ""APICID"": [ 3, [ ""Byte"", ""null"" ]],
				 ""APICEID"": [ 4, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 5, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""Flags"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ACPIProcessorUIDInteger"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""ACPIProcessorUIDString"": [ 16, [ ""Array"", ""{\""count\"":1,\""target\"":\""Char\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte Type{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Length{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte ACPIProcessorID{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte APICID{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte APICEID{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte[] Reserved
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 5];
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ACPIProcessorUIDInteger { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public Char[] ACPIProcessorUIDString
		{
			get
			{
				Char[] returnValue = new Char[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _GENERAL_LOOKASIDE_POOL
 
	public class _GENERAL_LOOKASIDE_POOL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _GENERAL_LOOKASIDE_POOL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_GENERAL_LOOKASIDE_POOL"": [ 96, {
				 ""ListHead"": [ 0, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""SingleListHead"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""Depth"": [ 16, [ ""UInt16"", ""null"" ]],
				 ""MaximumDepth"": [ 18, [ ""UInt16"", ""null"" ]],
				 ""TotalAllocates"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""AllocateMisses"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""AllocateHits"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""TotalFrees"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""FreeMisses"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""FreeHits"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Type"": [ 36, [ ""Enumeration"", ""{\""enum_name\"":\""_POOL_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Tag"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""Size"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""AllocateEx"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Allocate"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FreeEx"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Free"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ListEntry"": [ 64, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LastTotalAllocates"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""LastAllocateMisses"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""LastAllocateHits"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""Future"": [ 88, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _SLIST_HEADER ListHead
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY SingleListHead
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt16 Depth { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 16); } }
		public UInt16 MaximumDepth { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 18); } }
		public UInt32 TotalAllocates { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 AllocateMisses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 AllocateHits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 TotalFrees { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 FreeMisses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 FreeHits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public _POOL_TYPE Type { get { return (_POOL_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 Tag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt64 AllocateEx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Allocate { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 FreeEx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 Free { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt32 LastTotalAllocates { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 LastAllocateMisses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 LastAllocateHits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32[] Future
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 88);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DISPATCHER_HEADER
 
	public class _DISPATCHER_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DISPATCHER_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DISPATCHER_HEADER"": [ 24, {
				 ""Lock"": [ 0, [ ""Int32"", ""null"" ]],
				 ""LockNV"": [ 0, [ ""Int32"", ""null"" ]],
				 ""Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Signalling"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Size"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Reserved1"": [ 3, [ ""Byte"", ""null"" ]],
				 ""TimerType"": [ 0, [ ""Byte"", ""null"" ]],
				 ""TimerControlFlags"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Absolute"": [ 1, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Wake"": [ 1, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""EncodedTolerableDelay"": [ 1, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""Hand"": [ 2, [ ""Byte"", ""null"" ]],
				 ""TimerMiscFlags"": [ 3, [ ""Byte"", ""null"" ]],
				 ""Index"": [ 3, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Inserted"": [ 3, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""Expired"": [ 3, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""Byte\""}"" ]],
				 ""Timer2Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Timer2Flags"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Timer2Inserted"": [ 1, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Timer2Expiring"": [ 1, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""Timer2CancelPending"": [ 1, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""Timer2SetPending"": [ 1, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""Timer2Running"": [ 1, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""Timer2Disabled"": [ 1, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""Timer2ReservedFlags"": [ 1, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""Timer2ComponentId"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Timer2RelativeId"": [ 3, [ ""Byte"", ""null"" ]],
				 ""QueueType"": [ 0, [ ""Byte"", ""null"" ]],
				 ""QueueControlFlags"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Abandoned"": [ 1, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""DisableIncrement"": [ 1, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""QueueReservedControlFlags"": [ 1, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""QueueSize"": [ 2, [ ""Byte"", ""null"" ]],
				 ""QueueReserved"": [ 3, [ ""Byte"", ""null"" ]],
				 ""ThreadType"": [ 0, [ ""Byte"", ""null"" ]],
				 ""ThreadReserved"": [ 1, [ ""Byte"", ""null"" ]],
				 ""ThreadControlFlags"": [ 2, [ ""Byte"", ""null"" ]],
				 ""CycleProfiling"": [ 2, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""CounterProfiling"": [ 2, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""GroupScheduling"": [ 2, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""AffinitySet"": [ 2, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""Tagged"": [ 2, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""EnergyProfiling"": [ 2, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""SchedulerAssist"": [ 2, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""ThreadReservedControlFlags"": [ 2, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""Byte\""}"" ]],
				 ""DebugActive"": [ 3, [ ""Byte"", ""null"" ]],
				 ""ActiveDR7"": [ 3, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Instrumented"": [ 3, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""Minimal"": [ 3, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""Reserved4"": [ 3, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""AltSyscall"": [ 3, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""UmsScheduled"": [ 3, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""UmsPrimary"": [ 3, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""Byte\""}"" ]],
				 ""MutantType"": [ 0, [ ""Byte"", ""null"" ]],
				 ""MutantSize"": [ 1, [ ""Byte"", ""null"" ]],
				 ""DpcActive"": [ 2, [ ""Byte"", ""null"" ]],
				 ""MutantReserved"": [ 3, [ ""Byte"", ""null"" ]],
				 ""SignalState"": [ 4, [ ""Int32"", ""null"" ]],
				 ""WaitListHead"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 Lock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 LockNV { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public Byte Type{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Signalling{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte Size{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Reserved1{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte TimerType{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte TimerControlFlags{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte Absolute
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Wake
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte EncodedTolerableDelay
		{
			get
			{
				// start: 2  end: 8  Mask: 0000000011111100
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 252) >> 2;
				return (Byte)value2;
			}
		}
		public Byte Hand{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte TimerMiscFlags{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte Index
		{
			get
			{
				// start: 0  end: 6  Mask: 0000000000111111
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 63) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Inserted
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 64) >> 6;
				return (Byte)value2;
			}
		}
		public Byte Expired
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 128) >> 7;
				return (Byte)value2;
			}
		}
		public Byte Timer2Type{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Timer2Flags{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte Timer2Inserted
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Timer2Expiring
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte Timer2CancelPending
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte Timer2SetPending
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte Timer2Running
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte Timer2Disabled
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte Timer2ReservedFlags
		{
			get
			{
				// start: 6  end: 8  Mask: 0000000011000000
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 192) >> 6;
				return (Byte)value2;
			}
		}
		public Byte Timer2ComponentId{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Timer2RelativeId{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte QueueType{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte QueueControlFlags{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte Abandoned
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte DisableIncrement
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte QueueReservedControlFlags
		{
			get
			{
				// start: 2  end: 8  Mask: 0000000011111100
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 252) >> 2;
				return (Byte)value2;
			}
		}
		public Byte QueueSize{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte QueueReserved{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte ThreadType{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte ThreadReserved{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte ThreadControlFlags{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte CycleProfiling
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte CounterProfiling
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte GroupScheduling
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte AffinitySet
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte Tagged
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte EnergyProfiling
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte SchedulerAssist
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 64) >> 6;
				return (Byte)value2;
			}
		}
		public Byte ThreadReservedControlFlags
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 128) >> 7;
				return (Byte)value2;
			}
		}
		public Byte DebugActive{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte ActiveDR7
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Instrumented
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte Minimal
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte Reserved4
		{
			get
			{
				// start: 3  end: 5  Mask: 0000000000011000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 24) >> 3;
				return (Byte)value2;
			}
		}
		public Byte AltSyscall
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte UmsScheduled
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 64) >> 6;
				return (Byte)value2;
			}
		}
		public Byte UmsPrimary
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 128) >> 7;
				return (Byte)value2;
			}
		}
		public Byte MutantType{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte MutantSize{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte DpcActive{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte MutantReserved{ get { return _StructureData[_BufferOffset +3]; } }
		public Int32 SignalState { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public _LIST_ENTRY WaitListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _NAMED_PIPE_CREATE_PARAMETERS
 
	public class _NAMED_PIPE_CREATE_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _NAMED_PIPE_CREATE_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_NAMED_PIPE_CREATE_PARAMETERS"": [ 40, {
				 ""NamedPipeType"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ReadMode"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""CompletionMode"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""MaximumInstances"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""InboundQuota"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""OutboundQuota"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""DefaultTimeout"": [ 24, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""TimeoutSpecified"": [ 32, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 NamedPipeType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ReadMode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 CompletionMode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 MaximumInstances { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 InboundQuota { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 OutboundQuota { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _LARGE_INTEGER DefaultTimeout
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public Byte TimeoutSpecified{ get { return _StructureData[_BufferOffset +32]; } }
	}
	#endregion
	#region _WAIT_CONTEXT_BLOCK
 
	public class _WAIT_CONTEXT_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WAIT_CONTEXT_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WAIT_CONTEXT_BLOCK"": [ 72, {
				 ""WaitQueueEntry"": [ 0, [ ""_KDEVICE_QUEUE_ENTRY"", ""null"" ]],
				 ""DmaWaitEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""NumberOfChannels"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""SyncCallback"": [ 20, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""DmaContext"": [ 20, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""ZeroMapRegisters"": [ 20, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 20, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""NumberOfRemapPages"": [ 20, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""DeviceRoutine"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeviceContext"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberOfMapRegisters"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""DeviceObject"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CurrentIrp"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BufferChainingDpc"": [ 64, [ ""Pointer"", ""{\""target\"":\""_KDPC\""}"" ]] }]
				 }
				)";
			}
		}
		public _KDEVICE_QUEUE_ENTRY WaitQueueEntry
		{
			get
			{
				_KDEVICE_QUEUE_ENTRY returnValue = new _KDEVICE_QUEUE_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY DmaWaitEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 NumberOfChannels { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 SyncCallback
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 20);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 DmaContext
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 20);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 ZeroMapRegisters
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 20);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 3  end: 12  Mask: 0000111111111000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 20);
				var value2 = (value & 4088) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 NumberOfRemapPages
		{
			get
			{
				// start: 12  end: 32  Mask: 11111111111111111111000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 20);
				var value2 = (value & 4294963200) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt64 DeviceRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 DeviceContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt32 NumberOfMapRegisters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 CurrentIrp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 BufferChainingDpc { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _KSPIN_LOCK_QUEUE
 
	public class _KSPIN_LOCK_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KSPIN_LOCK_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KSPIN_LOCK_QUEUE"": [ 16, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_KSPIN_LOCK_QUEUE\""}"" ]],
				 ""Lock"": [ 8, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _GEN_ADDR
 
	public class _GEN_ADDR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _GEN_ADDR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_GEN_ADDR"": [ 12, {
				 ""AddressSpaceID"": [ 0, [ ""Byte"", ""null"" ]],
				 ""BitWidth"": [ 1, [ ""Byte"", ""null"" ]],
				 ""BitOffset"": [ 2, [ ""Byte"", ""null"" ]],
				 ""AccessSize"": [ 3, [ ""Byte"", ""null"" ]],
				 ""Address"": [ 4, [ ""_LARGE_INTEGER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte AddressSpaceID{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte BitWidth{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte BitOffset{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte AccessSize{ get { return _StructureData[_BufferOffset +3]; } }
		public _LARGE_INTEGER Address
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEA_IPF_MCA_DESCRIPTOR
 
	public class _WHEA_IPF_MCA_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_IPF_MCA_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_IPF_MCA_DESCRIPTOR"": [ 4, {
				 ""Type"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Enabled"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 3, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Type { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Enabled{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +3]; } }
	}
	#endregion
	#region _WHEA_AER_ROOTPORT_DESCRIPTOR
 
	public class _WHEA_AER_ROOTPORT_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_AER_ROOTPORT_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 36; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_AER_ROOTPORT_DESCRIPTOR"": [ 36, {
				 ""Type"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Enabled"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 3, [ ""Byte"", ""null"" ]],
				 ""BusNumber"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Slot"": [ 8, [ ""_WHEA_PCI_SLOT_NUMBER"", ""null"" ]],
				 ""DeviceControl"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 14, [ ""_AER_ROOTPORT_DESCRIPTOR_FLAGS"", ""null"" ]],
				 ""UncorrectableErrorMask"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""UncorrectableErrorSeverity"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""CorrectableErrorMask"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""AdvancedCapsAndControl"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""RootErrorCommand"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Type { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Enabled{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _WHEA_PCI_SLOT_NUMBER Slot
		{
			get
			{
				_WHEA_PCI_SLOT_NUMBER returnValue = new _WHEA_PCI_SLOT_NUMBER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt16 DeviceControl { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public _AER_ROOTPORT_DESCRIPTOR_FLAGS Flags
		{
			get
			{
				_AER_ROOTPORT_DESCRIPTOR_FLAGS returnValue = new _AER_ROOTPORT_DESCRIPTOR_FLAGS(_StructureData, _BufferOffset + 14);
				return returnValue;
			}
		}
		public UInt32 UncorrectableErrorMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 UncorrectableErrorSeverity { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 CorrectableErrorMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 AdvancedCapsAndControl { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 RootErrorCommand { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _IO_COMPLETION_CONTEXT
 
	public class _IO_COMPLETION_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_COMPLETION_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_COMPLETION_CONTEXT"": [ 16, {
				 ""Port"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Key"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Port { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Key { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _POWER_STATE
 
	public class _POWER_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POWER_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POWER_STATE"": [ 4, {
				 ""SystemState"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""DeviceState"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_DEVICE_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _SYSTEM_POWER_STATE SystemState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _DEVICE_POWER_STATE DeviceState { get { return (_DEVICE_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _DEVOBJ_EXTENSION
 
	public class _DEVOBJ_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVOBJ_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVOBJ_EXTENSION"": [ 112, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""DeviceObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""PowerFlags"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Dope"": [ 24, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT_POWER_EXTENSION\""}"" ]],
				 ""ExtensionFlags"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""DeviceNode"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AttachedTo"": [ 48, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""StartIoCount"": [ 56, [ ""Int32"", ""null"" ]],
				 ""StartIoKey"": [ 60, [ ""Int32"", ""null"" ]],
				 ""StartIoFlags"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""Vpb"": [ 72, [ ""Pointer"", ""{\""target\"":\""_VPB\""}"" ]],
				 ""DependencyNode"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InterruptContext"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InterruptCount"": [ 96, [ ""Int32"", ""null"" ]],
				 ""VerifierContext"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 PowerFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 Dope { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 ExtensionFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 DeviceNode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 AttachedTo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public Int32 StartIoCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 56); } }
		public Int32 StartIoKey { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 StartIoFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt64 Vpb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 DependencyNode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 InterruptContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public Int32 InterruptCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 96); } }
		public UInt64 VerifierContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
	}
	#endregion
	#region _AER_ROOTPORT_DESCRIPTOR_FLAGS
 
	public class _AER_ROOTPORT_DESCRIPTOR_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _AER_ROOTPORT_DESCRIPTOR_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_AER_ROOTPORT_DESCRIPTOR_FLAGS"": [ 2, {
				 ""UncorrectableErrorMaskRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""UncorrectableErrorSeverityRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""CorrectableErrorMaskRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt16\""}"" ]],
				 ""AdvancedCapsAndControlRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt16\""}"" ]],
				 ""RootErrorCommandRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt16\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":5,\""target\"":\""UInt16\""}"" ]],
				 ""AsUSHORT"": [ 0, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 UncorrectableErrorMaskRW
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 UncorrectableErrorSeverityRW
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt16)value2;
			}
		}
		public UInt16 CorrectableErrorMaskRW
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt16)value2;
			}
		}
		public UInt16 AdvancedCapsAndControlRW
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt16)value2;
			}
		}
		public UInt16 RootErrorCommandRW
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt16)value2;
			}
		}
		public UInt16 Reserved
		{
			get
			{
				// start: 5  end: 16  Mask: 1111111111100000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65504) >> 5;
				return (UInt16)value2;
			}
		}
		public UInt16 AsUSHORT { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _KDEVICE_QUEUE
 
	public class _KDEVICE_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KDEVICE_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KDEVICE_QUEUE"": [ 40, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""Int16"", ""null"" ]],
				 ""DeviceListHead"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Lock"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""Busy"": [ 32, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 32, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""Int64\""}"" ]],
				 ""Hint"": [ 32, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":8,\""target\"":\""Int64\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 Size { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public _LIST_ENTRY DeviceListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public Byte Busy{ get { return _StructureData[_BufferOffset +32]; } }
		public UInt64 Reserved
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 32);
				var value2 = (value & 255) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Hint
		{
			get
			{
				// start: 8  end: 64  Mask: 1111111111111111111111111111111111111111111111111111111100000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 32);
				var value2 = (value & 18446744073709551360) >> 8;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _KGDTENTRY64
 
	public class _KGDTENTRY64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KGDTENTRY64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KGDTENTRY64"": [ 16, {
				 ""LimitLow"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""BaseLow"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Bytes"": [ 4, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""Bits"": [ 4, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""BaseUpper"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""MustBeZero"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""DataLow"": [ 0, [ ""Int64"", ""null"" ]],
				 ""DataHigh"": [ 8, [ ""Int64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 LimitLow { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 BaseLow { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public _ANONYMOUS_TAG Bytes
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG Bits
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 BaseUpper { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 MustBeZero { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public Int64 DataLow { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 0); } }
		public Int64 DataHigh { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _WHEA_REVISION
 
	public class _WHEA_REVISION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_REVISION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_REVISION"": [ 2, {
				 ""MinorRevision"": [ 0, [ ""Byte"", ""null"" ]],
				 ""MajorRevision"": [ 1, [ ""Byte"", ""null"" ]],
				 ""AsUSHORT"": [ 0, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte MinorRevision{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte MajorRevision{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt16 AsUSHORT { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _KAPC
 
	public class _KAPC
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KAPC(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KAPC"": [ 88, {
				 ""Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""SpareByte0"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Size"": [ 2, [ ""Byte"", ""null"" ]],
				 ""SpareByte1"": [ 3, [ ""Byte"", ""null"" ]],
				 ""SpareLong0"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Thread"": [ 8, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""ApcListEntry"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Reserved"": [ 32, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""NormalContext"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SystemArgument1"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SystemArgument2"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ApcStateIndex"": [ 80, [ ""Char"", ""null"" ]],
				 ""ApcMode"": [ 81, [ ""Char"", ""null"" ]],
				 ""Inserted"": [ 82, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Type{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte SpareByte0{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte Size{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte SpareByte1{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 SpareLong0 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY ApcListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64[] Reserved
		{
			get
			{
				UInt64[] returnValue = new UInt64[3];
				int size = 8;
				for(int i=0; i<3; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 NormalContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 SystemArgument1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 SystemArgument2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public Char ApcStateIndex { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 80); } }
		public Char ApcMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 81); } }
		public Byte Inserted{ get { return _StructureData[_BufferOffset +82]; } }
	}
	#endregion
	#region _WHEA_XPF_MCA_SECTION
 
	public class _WHEA_XPF_MCA_SECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_XPF_MCA_SECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 272; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_XPF_MCA_SECTION"": [ 272, {
				 ""VersionNumber"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""CpuVendor"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_WHEA_CPU_VENDOR\"",\""target\"":\""UInt32\""}"" ]],
				 ""Timestamp"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ProcessorNumber"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""GlobalStatus"": [ 20, [ ""_MCG_STATUS"", ""null"" ]],
				 ""InstructionPointer"": [ 28, [ ""UInt64"", ""null"" ]],
				 ""BankNumber"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Status"": [ 40, [ ""_MCI_STATUS"", ""null"" ]],
				 ""Address"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""Misc"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""ExtendedRegisterCount"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""ApicId"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""ExtendedRegisters"": [ 72, [ ""Array"", ""{\""count\"":24,\""target\"":\""UInt64\""}"" ]],
				 ""AMDExtendedRegisters"": [ 72, [ ""_WHEA_AMD_EXTENDED_REGISTERS"", ""null"" ]],
				 ""GlobalCapability"": [ 264, [ ""_MCG_CAP"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 VersionNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _WHEA_CPU_VENDOR CpuVendor { get { return (_WHEA_CPU_VENDOR)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LARGE_INTEGER Timestamp
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 ProcessorNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _MCG_STATUS GlobalStatus
		{
			get
			{
				_MCG_STATUS returnValue = new _MCG_STATUS(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
		public UInt64 InstructionPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 28); } }
		public UInt32 BankNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public _MCI_STATUS Status
		{
			get
			{
				_MCI_STATUS returnValue = new _MCI_STATUS(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt64 Address { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Misc { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt32 ExtendedRegisterCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 ApicId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt64[] ExtendedRegisters
		{
			get
			{
				UInt64[] returnValue = new UInt64[24];
				for(int i=0; i<24; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 72);
				return returnValue;
			}
		}
		public _WHEA_AMD_EXTENDED_REGISTERS AMDExtendedRegisters
		{
			get
			{
				_WHEA_AMD_EXTENDED_REGISTERS returnValue = new _WHEA_AMD_EXTENDED_REGISTERS(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _MCG_CAP GlobalCapability
		{
			get
			{
				_MCG_CAP returnValue = new _MCG_CAP(_StructureData, _BufferOffset + 264);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SYSTEM_POWER_STATE_CONTEXT
 
	public class _SYSTEM_POWER_STATE_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SYSTEM_POWER_STATE_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SYSTEM_POWER_STATE_CONTEXT"": [ 4, {
				 ""Reserved1"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""TargetSystemState"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""EffectiveSystemState"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""CurrentSystemState"": [ 0, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""IgnoreHibernationPath"": [ 0, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""PseudoTransition"": [ 0, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""KernelSoftReboot"": [ 0, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""DirectedDripsTransition"": [ 0, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved2"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""ContextAsUlong"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Reserved1
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 255) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 TargetSystemState
		{
			get
			{
				// start: 8  end: 12  Mask: 0000111100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 3840) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 EffectiveSystemState
		{
			get
			{
				// start: 12  end: 16  Mask: 1111000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 61440) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 CurrentSystemState
		{
			get
			{
				// start: 16  end: 20  Mask: 11110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 983040) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 IgnoreHibernationPath
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 PseudoTransition
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 KernelSoftReboot
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 DirectedDripsTransition
		{
			get
			{
				// start: 23  end: 24  Mask: 100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8388608) >> 23;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved2
		{
			get
			{
				// start: 24  end: 32  Mask: 11111111000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4278190080) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 ContextAsUlong { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _IOSAPIC
 
	public class _IOSAPIC
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IOSAPIC(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IOSAPIC"": [ 16, {
				 ""Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Length"": [ 1, [ ""Byte"", ""null"" ]],
				 ""IOSAPICID"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 3, [ ""Byte"", ""null"" ]],
				 ""SystemVectorBase"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""IOSAPICAddress"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Type{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Length{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte IOSAPICID{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 SystemVectorBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 IOSAPICAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _KIDTENTRY64
 
	public class _KIDTENTRY64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KIDTENTRY64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KIDTENTRY64"": [ 16, {
				 ""OffsetLow"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Selector"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""IstIndex"": [ 4, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""Reserved0"": [ 4, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":3,\""target\"":\""UInt16\""}"" ]],
				 ""Type"": [ 4, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":8,\""target\"":\""UInt16\""}"" ]],
				 ""Dpl"": [ 4, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":13,\""target\"":\""UInt16\""}"" ]],
				 ""Present"": [ 4, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt16\""}"" ]],
				 ""OffsetMiddle"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""OffsetHigh"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Reserved1"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Alignment"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 OffsetLow { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Selector { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 IstIndex
		{
			get
			{
				// start: 0  end: 3  Mask: 0000000000000111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4);
				var value2 = (value & 7) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 Reserved0
		{
			get
			{
				// start: 3  end: 8  Mask: 0000000011111000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4);
				var value2 = (value & 248) >> 3;
				return (UInt16)value2;
			}
		}
		public UInt16 Type
		{
			get
			{
				// start: 8  end: 13  Mask: 0001111100000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4);
				var value2 = (value & 7936) >> 8;
				return (UInt16)value2;
			}
		}
		public UInt16 Dpl
		{
			get
			{
				// start: 13  end: 15  Mask: 0110000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4);
				var value2 = (value & 24576) >> 13;
				return (UInt16)value2;
			}
		}
		public UInt16 Present
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4);
				var value2 = (value & 32768) >> 15;
				return (UInt16)value2;
			}
		}
		public UInt16 OffsetMiddle { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt32 OffsetHigh { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Reserved1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 Alignment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _XSAVE_AREA_HEADER
 
	public class _XSAVE_AREA_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _XSAVE_AREA_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_XSAVE_AREA_HEADER"": [ 64, {
				 ""Mask"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""CompactionMask"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Reserved2"": [ 16, [ ""Array"", ""{\""count\"":6,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Mask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 CompactionMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64[] Reserved2
		{
			get
			{
				UInt64[] returnValue = new UInt64[6];
				for(int i=0; i<6; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KPROCESSOR_STATE
 
	public class _KPROCESSOR_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KPROCESSOR_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1472; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KPROCESSOR_STATE"": [ 1472, {
				 ""SpecialRegisters"": [ 0, [ ""_KSPECIAL_REGISTERS"", ""null"" ]],
				 ""ContextFrame"": [ 240, [ ""_CONTEXT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KSPECIAL_REGISTERS SpecialRegisters
		{
			get
			{
				_KSPECIAL_REGISTERS returnValue = new _KSPECIAL_REGISTERS(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _CONTEXT ContextFrame
		{
			get
			{
				_CONTEXT returnValue = new _CONTEXT(_StructureData, _BufferOffset + 240);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KDEVICE_QUEUE_ENTRY
 
	public class _KDEVICE_QUEUE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KDEVICE_QUEUE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KDEVICE_QUEUE_ENTRY"": [ 24, {
				 ""DeviceListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SortKey"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Inserted"": [ 20, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY DeviceListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 SortKey { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Byte Inserted{ get { return _StructureData[_BufferOffset +20]; } }
	}
	#endregion
	#region _SECTION_OBJECT_POINTERS
 
	public class _SECTION_OBJECT_POINTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECTION_OBJECT_POINTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECTION_OBJECT_POINTERS"": [ 24, {
				 ""DataSectionObject"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SharedCacheMap"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ImageSectionObject"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DataSectionObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 SharedCacheMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ImageSectionObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _ACPI_CACHED_TABLE
 
	public class _ACPI_CACHED_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ACPI_CACHED_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ACPI_CACHED_TABLE"": [ 64, {
				 ""Links"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PhysicalAddress"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Header"": [ 24, [ ""_DESCRIPTION_HEADER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Links
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LARGE_INTEGER PhysicalAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _DESCRIPTION_HEADER Header
		{
			get
			{
				_DESCRIPTION_HEADER returnValue = new _DESCRIPTION_HEADER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEA_NOTIFICATION_DESCRIPTOR
 
	public class _WHEA_NOTIFICATION_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_NOTIFICATION_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_NOTIFICATION_DESCRIPTOR"": [ 28, {
				 ""Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Length"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 2, [ ""_WHEA_NOTIFICATION_FLAGS"", ""null"" ]],
				 ""u"": [ 4, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Type{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Length{ get { return _StructureData[_BufferOffset +1]; } }
		public _WHEA_NOTIFICATION_FLAGS Flags
		{
			get
			{
				_WHEA_NOTIFICATION_FLAGS returnValue = new _WHEA_NOTIFICATION_FLAGS(_StructureData, _BufferOffset + 2);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IO_APIC_REGISTERS
 
	public class _IO_APIC_REGISTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_APIC_REGISTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 68; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_APIC_REGISTERS"": [ 68, {
				 ""RegisterIndex"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Reserved1"": [ 4, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""RegisterValue"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Reserved2"": [ 20, [ ""Array"", ""{\""count\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""EndOfInterrupt"": [ 64, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 RegisterIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32[] Reserved1
		{
			get
			{
				UInt32[] returnValue = new UInt32[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 RegisterValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32[] Reserved2
		{
			get
			{
				UInt32[] returnValue = new UInt32[11];
				for(int i=0; i<11; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 20);
				return returnValue;
			}
		}
		public UInt32 EndOfInterrupt { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _IO_RESOURCE_REQUIREMENTS_LIST
 
	public class _IO_RESOURCE_REQUIREMENTS_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_RESOURCE_REQUIREMENTS_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_RESOURCE_REQUIREMENTS_LIST"": [ 72, {
				 ""ListSize"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""InterfaceType"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_INTERFACE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""BusNumber"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SlotNumber"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 16, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""AlternativeLists"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""List"": [ 32, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ListSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _INTERFACE_TYPE InterfaceType { get { return (_INTERFACE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 SlotNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32[] Reserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 AlternativeLists { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public _IO_RESOURCE_LIST[] List
		{
			get
			{
				_IO_RESOURCE_LIST[] returnValue = new _IO_RESOURCE_LIST[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _IO_RESOURCE_LIST(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IO_SECURITY_CONTEXT
 
	public class _IO_SECURITY_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_SECURITY_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_SECURITY_CONTEXT"": [ 24, {
				 ""SecurityQos"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SECURITY_QUALITY_OF_SERVICE\""}"" ]],
				 ""AccessState"": [ 8, [ ""Pointer"", ""{\""target\"":\""_ACCESS_STATE\""}"" ]],
				 ""DesiredAccess"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""FullCreateOptions"": [ 20, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SecurityQos { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 AccessState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 DesiredAccess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 FullCreateOptions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _KTSS64
 
	public class _KTSS64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTSS64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 104; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTSS64"": [ 104, {
				 ""Reserved0"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Rsp0"": [ 4, [ ""UInt64"", ""null"" ]],
				 ""Rsp1"": [ 12, [ ""UInt64"", ""null"" ]],
				 ""Rsp2"": [ 20, [ ""UInt64"", ""null"" ]],
				 ""Ist"": [ 28, [ ""Array"", ""{\""count\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""Reserved1"": [ 92, [ ""UInt64"", ""null"" ]],
				 ""Reserved2"": [ 100, [ ""UInt16"", ""null"" ]],
				 ""IoMapBase"": [ 102, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Reserved0 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 Rsp0 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4); } }
		public UInt64 Rsp1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 12); } }
		public UInt64 Rsp2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 20); } }
		public UInt64[] Ist
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 28);
				return returnValue;
			}
		}
		public UInt64 Reserved1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 92); } }
		public UInt16 Reserved2 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 100); } }
		public UInt16 IoMapBase { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 102); } }
	}
	#endregion
	#region _VPB
 
	public class _VPB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VPB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VPB"": [ 96, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""Int16"", ""null"" ]],
				 ""Flags"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""VolumeLabelLength"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""DeviceObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""RealDevice"": [ 16, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""SerialNumber"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""ReferenceCount"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""VolumeLabel"": [ 32, [ ""Array"", ""{\""count\"":32,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 Size { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 VolumeLabelLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 RealDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 SerialNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 ReferenceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt16[] VolumeLabel
		{
			get
			{
				UInt16[] returnValue = new UInt16[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MAILSLOT_CREATE_PARAMETERS
 
	public class _MAILSLOT_CREATE_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MAILSLOT_CREATE_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MAILSLOT_CREATE_PARAMETERS"": [ 24, {
				 ""MailslotQuota"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""MaximumMessageSize"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ReadTimeout"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""TimeoutSpecified"": [ 16, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 MailslotQuota { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 MaximumMessageSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LARGE_INTEGER ReadTimeout
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public Byte TimeoutSpecified{ get { return _StructureData[_BufferOffset +16]; } }
	}
	#endregion
	#region _NT_TIB
 
	public class _NT_TIB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _NT_TIB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_NT_TIB"": [ 56, {
				 ""ExceptionList"": [ 0, [ ""Pointer"", ""{\""target\"":\""_EXCEPTION_REGISTRATION_RECORD\""}"" ]],
				 ""StackBase"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StackLimit"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SubSystemTib"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FiberData"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Version"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""ArbitraryUserPointer"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Self"": [ 48, [ ""Pointer"", ""{\""target\"":\""_NT_TIB\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ExceptionList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 StackBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 StackLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 SubSystemTib { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 FiberData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 ArbitraryUserPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 Self { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _POWER_SEQUENCE
 
	public class _POWER_SEQUENCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POWER_SEQUENCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POWER_SEQUENCE"": [ 12, {
				 ""SequenceD1"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SequenceD2"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""SequenceD3"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SequenceD1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SequenceD2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 SequenceD3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _WHEA_ERROR_RECORD_HEADER
 
	public class _WHEA_ERROR_RECORD_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_ERROR_RECORD_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_ERROR_RECORD_HEADER"": [ 128, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Revision"": [ 4, [ ""_WHEA_REVISION"", ""null"" ]],
				 ""SignatureEnd"": [ 6, [ ""UInt32"", ""null"" ]],
				 ""SectionCount"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""Severity"": [ 12, [ ""Enumeration"", ""{\""enum_name\"":\""_WHEA_ERROR_SEVERITY\"",\""target\"":\""UInt32\""}"" ]],
				 ""ValidBits"": [ 16, [ ""_WHEA_ERROR_RECORD_HEADER_VALIDBITS"", ""null"" ]],
				 ""Length"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Timestamp"": [ 24, [ ""_WHEA_TIMESTAMP"", ""null"" ]],
				 ""PlatformId"": [ 32, [ ""_GUID"", ""null"" ]],
				 ""PartitionId"": [ 48, [ ""_GUID"", ""null"" ]],
				 ""CreatorId"": [ 64, [ ""_GUID"", ""null"" ]],
				 ""NotifyType"": [ 80, [ ""_GUID"", ""null"" ]],
				 ""RecordId"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""Flags"": [ 104, [ ""_WHEA_ERROR_RECORD_HEADER_FLAGS"", ""null"" ]],
				 ""PersistenceInfo"": [ 108, [ ""_WHEA_PERSISTENCE_INFO"", ""null"" ]],
				 ""Reserved"": [ 116, [ ""Array"", ""{\""count\"":12,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _WHEA_REVISION Revision
		{
			get
			{
				_WHEA_REVISION returnValue = new _WHEA_REVISION(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 SignatureEnd { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 6); } }
		public UInt16 SectionCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public _WHEA_ERROR_SEVERITY Severity { get { return (_WHEA_ERROR_SEVERITY)BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _WHEA_ERROR_RECORD_HEADER_VALIDBITS ValidBits
		{
			get
			{
				_WHEA_ERROR_RECORD_HEADER_VALIDBITS returnValue = new _WHEA_ERROR_RECORD_HEADER_VALIDBITS(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _WHEA_TIMESTAMP Timestamp
		{
			get
			{
				_WHEA_TIMESTAMP returnValue = new _WHEA_TIMESTAMP(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _GUID PlatformId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _GUID PartitionId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _GUID CreatorId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _GUID NotifyType
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt64 RecordId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public _WHEA_ERROR_RECORD_HEADER_FLAGS Flags
		{
			get
			{
				_WHEA_ERROR_RECORD_HEADER_FLAGS returnValue = new _WHEA_ERROR_RECORD_HEADER_FLAGS(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public _WHEA_PERSISTENCE_INFO PersistenceInfo
		{
			get
			{
				_WHEA_PERSISTENCE_INFO returnValue = new _WHEA_PERSISTENCE_INFO(_StructureData, _BufferOffset + 108);
				return returnValue;
			}
		}
		public Byte[] Reserved
		{
			get
			{
				Byte[] returnValue = new Byte[12];
				for(int i=0; i<12; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 116];
				return returnValue;
			}
		}
	}
	#endregion
	#region _EXCEPTION_REGISTRATION_RECORD
 
	public class _EXCEPTION_REGISTRATION_RECORD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXCEPTION_REGISTRATION_RECORD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXCEPTION_REGISTRATION_RECORD"": [ 16, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_EXCEPTION_REGISTRATION_RECORD\""}"" ]],
				 ""Handler"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Handler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _FADT
 
	public class _FADT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FADT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 268; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FADT"": [ 268, {
				 ""Header"": [ 0, [ ""_DESCRIPTION_HEADER"", ""null"" ]],
				 ""facs"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""dsdt"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""int_model"": [ 44, [ ""Byte"", ""null"" ]],
				 ""pm_profile"": [ 45, [ ""Byte"", ""null"" ]],
				 ""sci_int_vector"": [ 46, [ ""UInt16"", ""null"" ]],
				 ""smi_cmd_io_port"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""acpi_on_value"": [ 52, [ ""Byte"", ""null"" ]],
				 ""acpi_off_value"": [ 53, [ ""Byte"", ""null"" ]],
				 ""s4bios_req"": [ 54, [ ""Byte"", ""null"" ]],
				 ""pstate_control"": [ 55, [ ""Byte"", ""null"" ]],
				 ""pm1a_evt_blk_io_port"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""pm1b_evt_blk_io_port"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""pm1a_ctrl_blk_io_port"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""pm1b_ctrl_blk_io_port"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""pm2_ctrl_blk_io_port"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""pm_tmr_blk_io_port"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""gp0_blk_io_port"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""gp1_blk_io_port"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""pm1_evt_len"": [ 88, [ ""Byte"", ""null"" ]],
				 ""pm1_ctrl_len"": [ 89, [ ""Byte"", ""null"" ]],
				 ""pm2_ctrl_len"": [ 90, [ ""Byte"", ""null"" ]],
				 ""pm_tmr_len"": [ 91, [ ""Byte"", ""null"" ]],
				 ""gp0_blk_len"": [ 92, [ ""Byte"", ""null"" ]],
				 ""gp1_blk_len"": [ 93, [ ""Byte"", ""null"" ]],
				 ""gp1_base"": [ 94, [ ""Byte"", ""null"" ]],
				 ""cstate_control"": [ 95, [ ""Byte"", ""null"" ]],
				 ""lvl2_latency"": [ 96, [ ""UInt16"", ""null"" ]],
				 ""lvl3_latency"": [ 98, [ ""UInt16"", ""null"" ]],
				 ""flush_size"": [ 100, [ ""UInt16"", ""null"" ]],
				 ""flush_stride"": [ 102, [ ""UInt16"", ""null"" ]],
				 ""duty_offset"": [ 104, [ ""Byte"", ""null"" ]],
				 ""duty_width"": [ 105, [ ""Byte"", ""null"" ]],
				 ""day_alarm_index"": [ 106, [ ""Byte"", ""null"" ]],
				 ""month_alarm_index"": [ 107, [ ""Byte"", ""null"" ]],
				 ""century_alarm_index"": [ 108, [ ""Byte"", ""null"" ]],
				 ""boot_arch"": [ 109, [ ""UInt16"", ""null"" ]],
				 ""reserved3"": [ 111, [ ""Array"", ""{\""count\"":1,\""target\"":\""Byte\""}"" ]],
				 ""flags"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""reset_reg"": [ 116, [ ""_GEN_ADDR"", ""null"" ]],
				 ""reset_val"": [ 128, [ ""Byte"", ""null"" ]],
				 ""arm_boot_arch"": [ 129, [ ""UInt16"", ""null"" ]],
				 ""minor_version_number"": [ 131, [ ""Byte"", ""null"" ]],
				 ""x_firmware_ctrl"": [ 132, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""x_dsdt"": [ 140, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""x_pm1a_evt_blk"": [ 148, [ ""_GEN_ADDR"", ""null"" ]],
				 ""x_pm1b_evt_blk"": [ 160, [ ""_GEN_ADDR"", ""null"" ]],
				 ""x_pm1a_ctrl_blk"": [ 172, [ ""_GEN_ADDR"", ""null"" ]],
				 ""x_pm1b_ctrl_blk"": [ 184, [ ""_GEN_ADDR"", ""null"" ]],
				 ""x_pm2_ctrl_blk"": [ 196, [ ""_GEN_ADDR"", ""null"" ]],
				 ""x_pm_tmr_blk"": [ 208, [ ""_GEN_ADDR"", ""null"" ]],
				 ""x_gp0_blk"": [ 220, [ ""_GEN_ADDR"", ""null"" ]],
				 ""x_gp1_blk"": [ 232, [ ""_GEN_ADDR"", ""null"" ]],
				 ""sleep_control_reg"": [ 244, [ ""_GEN_ADDR"", ""null"" ]],
				 ""sleep_status_reg"": [ 256, [ ""_GEN_ADDR"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _DESCRIPTION_HEADER Header
		{
			get
			{
				_DESCRIPTION_HEADER returnValue = new _DESCRIPTION_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 facs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 dsdt { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public Byte int_model{ get { return _StructureData[_BufferOffset +44]; } }
		public Byte pm_profile{ get { return _StructureData[_BufferOffset +45]; } }
		public UInt16 sci_int_vector { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 46); } }
		public UInt32 smi_cmd_io_port { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public Byte acpi_on_value{ get { return _StructureData[_BufferOffset +52]; } }
		public Byte acpi_off_value{ get { return _StructureData[_BufferOffset +53]; } }
		public Byte s4bios_req{ get { return _StructureData[_BufferOffset +54]; } }
		public Byte pstate_control{ get { return _StructureData[_BufferOffset +55]; } }
		public UInt32 pm1a_evt_blk_io_port { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 pm1b_evt_blk_io_port { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 pm1a_ctrl_blk_io_port { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 pm1b_ctrl_blk_io_port { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 pm2_ctrl_blk_io_port { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 pm_tmr_blk_io_port { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 gp0_blk_io_port { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 gp1_blk_io_port { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public Byte pm1_evt_len{ get { return _StructureData[_BufferOffset +88]; } }
		public Byte pm1_ctrl_len{ get { return _StructureData[_BufferOffset +89]; } }
		public Byte pm2_ctrl_len{ get { return _StructureData[_BufferOffset +90]; } }
		public Byte pm_tmr_len{ get { return _StructureData[_BufferOffset +91]; } }
		public Byte gp0_blk_len{ get { return _StructureData[_BufferOffset +92]; } }
		public Byte gp1_blk_len{ get { return _StructureData[_BufferOffset +93]; } }
		public Byte gp1_base{ get { return _StructureData[_BufferOffset +94]; } }
		public Byte cstate_control{ get { return _StructureData[_BufferOffset +95]; } }
		public UInt16 lvl2_latency { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 96); } }
		public UInt16 lvl3_latency { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 98); } }
		public UInt16 flush_size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 100); } }
		public UInt16 flush_stride { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 102); } }
		public Byte duty_offset{ get { return _StructureData[_BufferOffset +104]; } }
		public Byte duty_width{ get { return _StructureData[_BufferOffset +105]; } }
		public Byte day_alarm_index{ get { return _StructureData[_BufferOffset +106]; } }
		public Byte month_alarm_index{ get { return _StructureData[_BufferOffset +107]; } }
		public Byte century_alarm_index{ get { return _StructureData[_BufferOffset +108]; } }
		public UInt16 boot_arch { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 109); } }
		public Byte[] reserved3
		{
			get
			{
				Byte[] returnValue = new Byte[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 111];
				return returnValue;
			}
		}
		public UInt32 flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public _GEN_ADDR reset_reg
		{
			get
			{
				_GEN_ADDR returnValue = new _GEN_ADDR(_StructureData, _BufferOffset + 116);
				return returnValue;
			}
		}
		public Byte reset_val{ get { return _StructureData[_BufferOffset +128]; } }
		public UInt16 arm_boot_arch { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 129); } }
		public Byte minor_version_number{ get { return _StructureData[_BufferOffset +131]; } }
		public _LARGE_INTEGER x_firmware_ctrl
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 132);
				return returnValue;
			}
		}
		public _LARGE_INTEGER x_dsdt
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 140);
				return returnValue;
			}
		}
		public _GEN_ADDR x_pm1a_evt_blk
		{
			get
			{
				_GEN_ADDR returnValue = new _GEN_ADDR(_StructureData, _BufferOffset + 148);
				return returnValue;
			}
		}
		public _GEN_ADDR x_pm1b_evt_blk
		{
			get
			{
				_GEN_ADDR returnValue = new _GEN_ADDR(_StructureData, _BufferOffset + 160);
				return returnValue;
			}
		}
		public _GEN_ADDR x_pm1a_ctrl_blk
		{
			get
			{
				_GEN_ADDR returnValue = new _GEN_ADDR(_StructureData, _BufferOffset + 172);
				return returnValue;
			}
		}
		public _GEN_ADDR x_pm1b_ctrl_blk
		{
			get
			{
				_GEN_ADDR returnValue = new _GEN_ADDR(_StructureData, _BufferOffset + 184);
				return returnValue;
			}
		}
		public _GEN_ADDR x_pm2_ctrl_blk
		{
			get
			{
				_GEN_ADDR returnValue = new _GEN_ADDR(_StructureData, _BufferOffset + 196);
				return returnValue;
			}
		}
		public _GEN_ADDR x_pm_tmr_blk
		{
			get
			{
				_GEN_ADDR returnValue = new _GEN_ADDR(_StructureData, _BufferOffset + 208);
				return returnValue;
			}
		}
		public _GEN_ADDR x_gp0_blk
		{
			get
			{
				_GEN_ADDR returnValue = new _GEN_ADDR(_StructureData, _BufferOffset + 220);
				return returnValue;
			}
		}
		public _GEN_ADDR x_gp1_blk
		{
			get
			{
				_GEN_ADDR returnValue = new _GEN_ADDR(_StructureData, _BufferOffset + 232);
				return returnValue;
			}
		}
		public _GEN_ADDR sleep_control_reg
		{
			get
			{
				_GEN_ADDR returnValue = new _GEN_ADDR(_StructureData, _BufferOffset + 244);
				return returnValue;
			}
		}
		public _GEN_ADDR sleep_status_reg
		{
			get
			{
				_GEN_ADDR returnValue = new _GEN_ADDR(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PROCLOCALAPIC
 
	public class _PROCLOCALAPIC
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCLOCALAPIC(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCLOCALAPIC"": [ 8, {
				 ""Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Length"": [ 1, [ ""Byte"", ""null"" ]],
				 ""ACPIProcessorID"": [ 2, [ ""Byte"", ""null"" ]],
				 ""APICID"": [ 3, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Type{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Length{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte ACPIProcessorID{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte APICID{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _AER_BRIDGE_DESCRIPTOR_FLAGS
 
	public class _AER_BRIDGE_DESCRIPTOR_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _AER_BRIDGE_DESCRIPTOR_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_AER_BRIDGE_DESCRIPTOR_FLAGS"": [ 2, {
				 ""UncorrectableErrorMaskRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""UncorrectableErrorSeverityRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""CorrectableErrorMaskRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt16\""}"" ]],
				 ""AdvancedCapsAndControlRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt16\""}"" ]],
				 ""SecondaryUncorrectableErrorMaskRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt16\""}"" ]],
				 ""SecondaryUncorrectableErrorSevRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt16\""}"" ]],
				 ""SecondaryCapsAndControlRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt16\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":7,\""target\"":\""UInt16\""}"" ]],
				 ""AsUSHORT"": [ 0, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 UncorrectableErrorMaskRW
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 UncorrectableErrorSeverityRW
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt16)value2;
			}
		}
		public UInt16 CorrectableErrorMaskRW
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt16)value2;
			}
		}
		public UInt16 AdvancedCapsAndControlRW
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt16)value2;
			}
		}
		public UInt16 SecondaryUncorrectableErrorMaskRW
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt16)value2;
			}
		}
		public UInt16 SecondaryUncorrectableErrorSevRW
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt16)value2;
			}
		}
		public UInt16 SecondaryCapsAndControlRW
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt16)value2;
			}
		}
		public UInt16 Reserved
		{
			get
			{
				// start: 7  end: 16  Mask: 1111111110000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65408) >> 7;
				return (UInt16)value2;
			}
		}
		public UInt16 AsUSHORT { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _RSDT_32
 
	public class _RSDT_32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RSDT_32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RSDT_32"": [ 40, {
				 ""Header"": [ 0, [ ""_DESCRIPTION_HEADER"", ""null"" ]],
				 ""Tables"": [ 36, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _DESCRIPTION_HEADER Header
		{
			get
			{
				_DESCRIPTION_HEADER returnValue = new _DESCRIPTION_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32[] Tables
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 36);
				return returnValue;
			}
		}
	}
	#endregion
	#region _LOCAL_NMISOURCE
 
	public class _LOCAL_NMISOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LOCAL_NMISOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 6; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LOCAL_NMISOURCE"": [ 6, {
				 ""Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Length"": [ 1, [ ""Byte"", ""null"" ]],
				 ""ProcessorID"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 3, [ ""UInt16"", ""null"" ]],
				 ""LINTIN"": [ 5, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Type{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Length{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte ProcessorID{ get { return _StructureData[_BufferOffset +2]; } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 3); } }
		public Byte LINTIN{ get { return _StructureData[_BufferOffset +5]; } }
	}
	#endregion
	#region _CM_RESOURCE_LIST
 
	public class _CM_RESOURCE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_RESOURCE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_RESOURCE_LIST"": [ 40, {
				 ""Count"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""List"": [ 4, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _CM_FULL_RESOURCE_DESCRIPTOR[] List
		{
			get
			{
				_CM_FULL_RESOURCE_DESCRIPTOR[] returnValue = new _CM_FULL_RESOURCE_DESCRIPTOR[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _CM_FULL_RESOURCE_DESCRIPTOR(_StructureData, (i * size) + _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SECURITY_QUALITY_OF_SERVICE
 
	public class _SECURITY_QUALITY_OF_SERVICE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECURITY_QUALITY_OF_SERVICE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECURITY_QUALITY_OF_SERVICE"": [ 12, {
				 ""Length"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ImpersonationLevel"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_SECURITY_IMPERSONATION_LEVEL\"",\""target\"":\""UInt32\""}"" ]],
				 ""ContextTrackingMode"": [ 8, [ ""Byte"", ""null"" ]],
				 ""EffectiveOnly"": [ 9, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel { get { return (_SECURITY_IMPERSONATION_LEVEL)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public Byte ContextTrackingMode{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte EffectiveOnly{ get { return _StructureData[_BufferOffset +9]; } }
	}
	#endregion
	#region _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS
 
	public class _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_FLAGS"": [ 4, {
				 ""Primary"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ContainmentWarning"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""Reset"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ThresholdExceeded"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""ResourceNotAvailable"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""LatentError"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""Propagated"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""AsULONG"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Primary
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ContainmentWarning
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 Reset
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 ThresholdExceeded
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 ResourceNotAvailable
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 LatentError
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 Propagated
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 7  end: 32  Mask: 11111111111111111111111110000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967168) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 AsULONG { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _WHEA_EVENT_LOG_ENTRY_HEADER
 
	public class _WHEA_EVENT_LOG_ENTRY_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_EVENT_LOG_ENTRY_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_EVENT_LOG_ENTRY_HEADER"": [ 32, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Version"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Length"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Type"": [ 12, [ ""Enumeration"", ""{\""enum_name\"":\""_WHEA_EVENT_LOG_ENTRY_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""OwnerTag"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Id"": [ 20, [ ""Enumeration"", ""{\""enum_name\"":\""_WHEA_EVENT_LOG_ENTRY_ID\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 24, [ ""_WHEA_EVENT_LOG_ENTRY_FLAGS"", ""null"" ]],
				 ""PayloadLength"": [ 28, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _WHEA_EVENT_LOG_ENTRY_TYPE Type { get { return (_WHEA_EVENT_LOG_ENTRY_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 OwnerTag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _WHEA_EVENT_LOG_ENTRY_ID Id { get { return (_WHEA_EVENT_LOG_ENTRY_ID)BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _WHEA_EVENT_LOG_ENTRY_FLAGS Flags
		{
			get
			{
				_WHEA_EVENT_LOG_ENTRY_FLAGS returnValue = new _WHEA_EVENT_LOG_ENTRY_FLAGS(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 PayloadLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _INTERRUPT_FUNCTION_TABLE
 
	public class _INTERRUPT_FUNCTION_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _INTERRUPT_FUNCTION_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 184; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_INTERRUPT_FUNCTION_TABLE"": [ 184, {
				 ""InitializeLocalUnit"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InitializeIoUnit"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SetPriority"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetLocalUnitError"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ClearLocalUnitError"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetLogicalId"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SetLogicalId"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AcceptAndGetSource"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EndOfInterrupt"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastEndOfInterrupt"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SetLineState"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RequestInterrupt"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StartProcessor"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GenerateMessage"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ConvertId"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SaveLocalInterrupts"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReplayLocalInterrupts"": [ 128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeinitializeLocalUnit"": [ 136, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeinitializeIoUnit"": [ 144, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""QueryAndGetSource"": [ 152, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeactivateInterrupt"": [ 160, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DirectedEndOfInterrupt"": [ 168, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""QueryLocalUnitInfo"": [ 176, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 InitializeLocalUnit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 InitializeIoUnit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 SetPriority { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 GetLocalUnitError { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ClearLocalUnitError { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 GetLogicalId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 SetLogicalId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 AcceptAndGetSource { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 EndOfInterrupt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 FastEndOfInterrupt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 SetLineState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 RequestInterrupt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 StartProcessor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 GenerateMessage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 ConvertId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 SaveLocalInterrupts { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 ReplayLocalInterrupts { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 DeinitializeLocalUnit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 DeinitializeIoUnit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 QueryAndGetSource { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 DeactivateInterrupt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 DirectedEndOfInterrupt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 QueryLocalUnitInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
	}
	#endregion
	#region _WHEA_DEVICE_DRIVER_DESCRIPTOR
 
	public class _WHEA_DEVICE_DRIVER_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_DEVICE_DRIVER_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 116; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_DEVICE_DRIVER_DESCRIPTOR"": [ 116, {
				 ""Type"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Enabled"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 3, [ ""Byte"", ""null"" ]],
				 ""SourceGuid"": [ 4, [ ""_GUID"", ""null"" ]],
				 ""LogTag"": [ 20, [ ""UInt16"", ""null"" ]],
				 ""Reserved2"": [ 22, [ ""UInt16"", ""null"" ]],
				 ""PacketLength"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""PacketCount"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""PacketBuffer"": [ 32, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""Config"": [ 40, [ ""_WHEA_ERROR_SOURCE_CONFIGURATION_DD"", ""null"" ]],
				 ""CreatorId"": [ 64, [ ""_GUID"", ""null"" ]],
				 ""PartitionId"": [ 80, [ ""_GUID"", ""null"" ]],
				 ""MaxSectionDataLength"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""MaxSectionsPerRecord"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""PacketStateBuffer"": [ 104, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""OpenHandles"": [ 112, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Type { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Enabled{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +3]; } }
		public _GUID SourceGuid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt16 LogTag { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 20); } }
		public UInt16 Reserved2 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 22); } }
		public UInt32 PacketLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 PacketCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt64 PacketBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _WHEA_ERROR_SOURCE_CONFIGURATION_DD Config
		{
			get
			{
				_WHEA_ERROR_SOURCE_CONFIGURATION_DD returnValue = new _WHEA_ERROR_SOURCE_CONFIGURATION_DD(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _GUID CreatorId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _GUID PartitionId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt32 MaxSectionDataLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 MaxSectionsPerRecord { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt64 PacketStateBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public Int32 OpenHandles { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 112); } }
	}
	#endregion
	#region _PLATFORM_INTERRUPT
 
	public class _PLATFORM_INTERRUPT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PLATFORM_INTERRUPT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PLATFORM_INTERRUPT"": [ 16, {
				 ""Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Length"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""InterruptType"": [ 4, [ ""Byte"", ""null"" ]],
				 ""APICID"": [ 5, [ ""Byte"", ""null"" ]],
				 ""ACPIEID"": [ 6, [ ""Byte"", ""null"" ]],
				 ""IOSAPICVector"": [ 7, [ ""Byte"", ""null"" ]],
				 ""GlobalVector"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Type{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Length{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public Byte InterruptType{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte APICID{ get { return _StructureData[_BufferOffset +5]; } }
		public Byte ACPIEID{ get { return _StructureData[_BufferOffset +6]; } }
		public Byte IOSAPICVector{ get { return _StructureData[_BufferOffset +7]; } }
		public UInt32 GlobalVector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _ADAPTER_OBJECT
 
	public class _ADAPTER_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ADAPTER_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 640; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ADAPTER_OBJECT"": [ 640, {
				 ""AdapterObject"": [ 0, [ ""_HALP_DMA_ADAPTER_OBJECT"", ""null"" ]],
				 ""MasterAdapter"": [ 152, [ ""Pointer"", ""{\""target\"":\""_HALP_DMA_MASTER_ADAPTER_OBJECT\""}"" ]],
				 ""WaitQueueEntry"": [ 160, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ChannelWaitQueue"": [ 176, [ ""_KDEVICE_QUEUE"", ""null"" ]],
				 ""ResourceWaitLock"": [ 176, [ ""UInt64"", ""null"" ]],
				 ""ResourceWaitQueue"": [ 184, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ChannelResourceWaitQueue"": [ 200, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ResourceQueueBusy"": [ 216, [ ""Byte"", ""null"" ]],
				 ""MapRegistersPerChannel"": [ 224, [ ""UInt32"", ""null"" ]],
				 ""MapRegisterBase"": [ 232, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberOfMapRegisters"": [ 240, [ ""UInt32"", ""null"" ]],
				 ""MaxTransferLength"": [ 244, [ ""UInt32"", ""null"" ]],
				 ""CrashDumpRegisterBase"": [ 248, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""NumberOfCrashDumpRegisters"": [ 264, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""CrashDumpRegisterRefCount"": [ 272, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""AdapterCrashDumpList"": [ 280, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""MapRegisterMdl"": [ 296, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""MapRegisterMdlLock"": [ 304, [ ""UInt64"", ""null"" ]],
				 ""ExpiredLock"": [ 312, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""AllocationHandle"": [ 320, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VirtualAddress"": [ 328, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IsAllocationMdlBased"": [ 336, [ ""Byte"", ""null"" ]],
				 ""NoLocalPool"": [ 337, [ ""Byte"", ""null"" ]],
				 ""ExpiredFlag"": [ 338, [ ""Byte"", ""null"" ]],
				 ""CurrentWcb"": [ 344, [ ""Pointer"", ""{\""target\"":\""_WAIT_CONTEXT_BLOCK\""}"" ]],
				 ""CurrentTransferContext"": [ 352, [ ""Pointer"", ""{\""target\"":\""_DMA_TRANSFER_CONTEXT\""}"" ]],
				 ""DmaController"": [ 360, [ ""Pointer"", ""{\""target\"":\""_HALP_DMA_CONTROLLER\""}"" ]],
				 ""Controller"": [ 368, [ ""UInt32"", ""null"" ]],
				 ""ChannelNumber"": [ 372, [ ""UInt32"", ""null"" ]],
				 ""RequestLine"": [ 376, [ ""UInt32"", ""null"" ]],
				 ""RequestedChannelCount"": [ 380, [ ""UInt32"", ""null"" ]],
				 ""AllocatedChannelCount"": [ 384, [ ""UInt32"", ""null"" ]],
				 ""AllocatedChannels"": [ 388, [ ""Array"", ""{\""count\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""ChannelAdapter"": [ 424, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NeedsMapRegisters"": [ 432, [ ""Byte"", ""null"" ]],
				 ""MasterDevice"": [ 433, [ ""Byte"", ""null"" ]],
				 ""ScatterGather"": [ 434, [ ""Byte"", ""null"" ]],
				 ""AutoInitialize"": [ 435, [ ""Byte"", ""null"" ]],
				 ""IgnoreCount"": [ 436, [ ""Byte"", ""null"" ]],
				 ""CacheCoherent"": [ 437, [ ""Byte"", ""null"" ]],
				 ""Dma32BitAddresses"": [ 440, [ ""Byte"", ""null"" ]],
				 ""Dma64BitAddresses"": [ 441, [ ""Byte"", ""null"" ]],
				 ""DmaAddressWidth"": [ 440, [ ""UInt32"", ""null"" ]],
				 ""DmaPortWidth"": [ 444, [ ""Enumeration"", ""{\""enum_name\"":\""_DMA_WIDTH\"",\""target\"":\""UInt32\""}"" ]],
				 ""DeviceAddress"": [ 448, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""AdapterList"": [ 456, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""WorkItem"": [ 472, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""DomainPointer"": [ 504, [ ""Pointer"", ""{\""target\"":\""_HALP_DMA_DOMAIN_OBJECT\""}"" ]],
				 ""TranslationType"": [ 512, [ ""Enumeration"", ""{\""enum_name\"":\""_EXT_IOMMU_TRANSLATION_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""AdapterInUse"": [ 516, [ ""Byte"", ""null"" ]],
				 ""DeviceObject"": [ 520, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""DeviceId"": [ 528, [ ""Pointer"", ""{\""target\"":\""_EXT_IOMMU_DEVICE_ID\""}"" ]],
				 ""IommuDevice"": [ 536, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ScatterGatherMdl"": [ 544, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""LowMemoryLogicalAddressBase"": [ 552, [ ""UInt64"", ""null"" ]],
				 ""LowMemoryLogicalAddressQueueLock"": [ 560, [ ""UInt64"", ""null"" ]],
				 ""LowMemoryLogicalAddressQueue"": [ 568, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LowMemoryLogicalAddressQueueInUse"": [ 584, [ ""Byte"", ""null"" ]],
				 ""LowMemoryLogicalAddressQueueEntry"": [ 592, [ ""_HALP_EMERGENCY_LA_QUEUE_ENTRY"", ""null"" ]],
				 ""AllocationState"": [ 616, [ ""Enumeration"", ""{\""enum_name\"":\""_HALP_DMA_ADAPTER_ALLOCATION_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ScatterGatherBufferLength"": [ 620, [ ""UInt32"", ""null"" ]],
				 ""ScatterGatherBuffer"": [ 624, [ ""_SCATTER_GATHER_LIST"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _HALP_DMA_ADAPTER_OBJECT AdapterObject
		{
			get
			{
				_HALP_DMA_ADAPTER_OBJECT returnValue = new _HALP_DMA_ADAPTER_OBJECT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 MasterAdapter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public _LIST_ENTRY WaitQueueEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 160);
				return returnValue;
			}
		}
		public _KDEVICE_QUEUE ChannelWaitQueue
		{
			get
			{
				_KDEVICE_QUEUE returnValue = new _KDEVICE_QUEUE(_StructureData, _BufferOffset + 176);
				return returnValue;
			}
		}
		public UInt64 ResourceWaitLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public _LIST_ENTRY ResourceWaitQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 184);
				return returnValue;
			}
		}
		public _LIST_ENTRY ChannelResourceWaitQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 200);
				return returnValue;
			}
		}
		public Byte ResourceQueueBusy{ get { return _StructureData[_BufferOffset +216]; } }
		public UInt32 MapRegistersPerChannel { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 224); } }
		public UInt64 MapRegisterBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt32 NumberOfMapRegisters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 240); } }
		public UInt32 MaxTransferLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 244); } }
		public UInt64[] CrashDumpRegisterBase
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				int size = 8;
				for(int i=0; i<2; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 248);
				return returnValue;
			}
		}
		public UInt32[] NumberOfCrashDumpRegisters
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 264);
				return returnValue;
			}
		}
		public UInt32[] CrashDumpRegisterRefCount
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 272);
				return returnValue;
			}
		}
		public _LIST_ENTRY AdapterCrashDumpList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 280);
				return returnValue;
			}
		}
		public UInt64 MapRegisterMdl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 296); } }
		public UInt64 MapRegisterMdlLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 304); } }
		public _EX_PUSH_LOCK ExpiredLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 312);
				return returnValue;
			}
		}
		public UInt64 AllocationHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 320); } }
		public UInt64 VirtualAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 328); } }
		public Byte IsAllocationMdlBased{ get { return _StructureData[_BufferOffset +336]; } }
		public Byte NoLocalPool{ get { return _StructureData[_BufferOffset +337]; } }
		public Byte ExpiredFlag{ get { return _StructureData[_BufferOffset +338]; } }
		public UInt64 CurrentWcb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 344); } }
		public UInt64 CurrentTransferContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 352); } }
		public UInt64 DmaController { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 360); } }
		public UInt32 Controller { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 368); } }
		public UInt32 ChannelNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 372); } }
		public UInt32 RequestLine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 376); } }
		public UInt32 RequestedChannelCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 380); } }
		public UInt32 AllocatedChannelCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 384); } }
		public UInt32[] AllocatedChannels
		{
			get
			{
				UInt32[] returnValue = new UInt32[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 388);
				return returnValue;
			}
		}
		public UInt64 ChannelAdapter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 424); } }
		public Byte NeedsMapRegisters{ get { return _StructureData[_BufferOffset +432]; } }
		public Byte MasterDevice{ get { return _StructureData[_BufferOffset +433]; } }
		public Byte ScatterGather{ get { return _StructureData[_BufferOffset +434]; } }
		public Byte AutoInitialize{ get { return _StructureData[_BufferOffset +435]; } }
		public Byte IgnoreCount{ get { return _StructureData[_BufferOffset +436]; } }
		public Byte CacheCoherent{ get { return _StructureData[_BufferOffset +437]; } }
		public Byte Dma32BitAddresses{ get { return _StructureData[_BufferOffset +440]; } }
		public Byte Dma64BitAddresses{ get { return _StructureData[_BufferOffset +441]; } }
		public UInt32 DmaAddressWidth { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 440); } }
		public _DMA_WIDTH DmaPortWidth { get { return (_DMA_WIDTH)BitConverter.ToUInt32(_StructureData, _BufferOffset + 444); } }
		public _LARGE_INTEGER DeviceAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 448);
				return returnValue;
			}
		}
		public _LIST_ENTRY AdapterList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 456);
				return returnValue;
			}
		}
		public _WORK_QUEUE_ITEM WorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 472);
				return returnValue;
			}
		}
		public UInt64 DomainPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 504); } }
		public _EXT_IOMMU_TRANSLATION_TYPE TranslationType { get { return (_EXT_IOMMU_TRANSLATION_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 512); } }
		public Byte AdapterInUse{ get { return _StructureData[_BufferOffset +516]; } }
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 520); } }
		public UInt64 DeviceId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 528); } }
		public UInt64 IommuDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 536); } }
		public UInt64 ScatterGatherMdl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 544); } }
		public UInt64 LowMemoryLogicalAddressBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 552); } }
		public UInt64 LowMemoryLogicalAddressQueueLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 560); } }
		public _LIST_ENTRY LowMemoryLogicalAddressQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 568);
				return returnValue;
			}
		}
		public Byte LowMemoryLogicalAddressQueueInUse{ get { return _StructureData[_BufferOffset +584]; } }
		public _HALP_EMERGENCY_LA_QUEUE_ENTRY LowMemoryLogicalAddressQueueEntry
		{
			get
			{
				_HALP_EMERGENCY_LA_QUEUE_ENTRY returnValue = new _HALP_EMERGENCY_LA_QUEUE_ENTRY(_StructureData, _BufferOffset + 592);
				return returnValue;
			}
		}
		public _HALP_DMA_ADAPTER_ALLOCATION_STATE AllocationState { get { return (_HALP_DMA_ADAPTER_ALLOCATION_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 616); } }
		public UInt32 ScatterGatherBufferLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 620); } }
		public _SCATTER_GATHER_LIST ScatterGatherBuffer
		{
			get
			{
				_SCATTER_GATHER_LIST returnValue = new _SCATTER_GATHER_LIST(_StructureData, _BufferOffset + 624);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RSDP
 
	public class _RSDP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RSDP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 36; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RSDP"": [ 36, {
				 ""Signature"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Checksum"": [ 8, [ ""Byte"", ""null"" ]],
				 ""OEMID"": [ 9, [ ""Array"", ""{\""count\"":6,\""target\"":\""Byte\""}"" ]],
				 ""Revision"": [ 15, [ ""Byte"", ""null"" ]],
				 ""RsdtAddress"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Length"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""XsdtAddress"": [ 24, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""XChecksum"": [ 32, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 33, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Signature { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Byte Checksum{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte[] OEMID
		{
			get
			{
				Byte[] returnValue = new Byte[6];
				for(int i=0; i<6; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 9];
				return returnValue;
			}
		}
		public Byte Revision{ get { return _StructureData[_BufferOffset +15]; } }
		public UInt32 RsdtAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _LARGE_INTEGER XsdtAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public Byte XChecksum{ get { return _StructureData[_BufferOffset +32]; } }
		public Byte[] Reserved
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 33];
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEA_IPF_CPE_DESCRIPTOR
 
	public class _WHEA_IPF_CPE_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_IPF_CPE_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_IPF_CPE_DESCRIPTOR"": [ 4, {
				 ""Type"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Enabled"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 3, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Type { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Enabled{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +3]; } }
	}
	#endregion
	#region _XPF_MCE_FLAGS
 
	public class _XPF_MCE_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _XPF_MCE_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_XPF_MCE_FLAGS"": [ 4, {
				 ""MCG_CapabilityRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""MCG_GlobalControlRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""AsULONG"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 MCG_CapabilityRW
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 MCG_GlobalControlRW
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 2  end: 32  Mask: 11111111111111111111111111111100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967292) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 AsULONG { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _MCG_STATUS
 
	public class _MCG_STATUS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MCG_STATUS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MCG_STATUS"": [ 8, {
				 ""RestartIpValid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ErrorIpValid"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""MachineCheckInProgress"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""LocalMceValid"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved1"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved2"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""QuadPart"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 RestartIpValid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ErrorIpValid
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 MachineCheckInProgress
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 LocalMceValid
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved1
		{
			get
			{
				// start: 4  end: 32  Mask: 11111111111111111111111111110000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967280) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 QuadPart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _XSDT
 
	public class _XSDT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _XSDT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 44; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_XSDT"": [ 44, {
				 ""Header"": [ 0, [ ""_DESCRIPTION_HEADER"", ""null"" ]],
				 ""Tables"": [ 36, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public _DESCRIPTION_HEADER Header
		{
			get
			{
				_DESCRIPTION_HEADER returnValue = new _DESCRIPTION_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LARGE_INTEGER[] Tables
		{
			get
			{
				_LARGE_INTEGER[] returnValue = new _LARGE_INTEGER[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _LARGE_INTEGER(_StructureData, (i * size) + _BufferOffset + 36);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS
 
	public class _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_ERROR_RECORD_SECTION_DESCRIPTOR_VALIDBITS"": [ 1, {
				 ""FRUId"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""FRUText"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""AsUCHAR"": [ 0, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte FRUId
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte FRUText
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte Reserved
		{
			get
			{
				// start: 2  end: 8  Mask: 0000000011111100
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 252) >> 2;
				return (Byte)value2;
			}
		}
		public Byte AsUCHAR{ get { return _StructureData[_BufferOffset +0]; } }
	}
	#endregion
	#region _CONTEXT
 
	public class _CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1232; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CONTEXT"": [ 1232, {
				 ""P1Home"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""P2Home"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""P3Home"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""P4Home"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""P5Home"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""P6Home"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""ContextFlags"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""MxCsr"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""SegCs"": [ 56, [ ""UInt16"", ""null"" ]],
				 ""SegDs"": [ 58, [ ""UInt16"", ""null"" ]],
				 ""SegEs"": [ 60, [ ""UInt16"", ""null"" ]],
				 ""SegFs"": [ 62, [ ""UInt16"", ""null"" ]],
				 ""SegGs"": [ 64, [ ""UInt16"", ""null"" ]],
				 ""SegSs"": [ 66, [ ""UInt16"", ""null"" ]],
				 ""EFlags"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""Dr0"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""Dr1"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""Dr2"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""Dr3"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""Dr6"": [ 104, [ ""UInt64"", ""null"" ]],
				 ""Dr7"": [ 112, [ ""UInt64"", ""null"" ]],
				 ""Rax"": [ 120, [ ""UInt64"", ""null"" ]],
				 ""Rcx"": [ 128, [ ""UInt64"", ""null"" ]],
				 ""Rdx"": [ 136, [ ""UInt64"", ""null"" ]],
				 ""Rbx"": [ 144, [ ""UInt64"", ""null"" ]],
				 ""Rsp"": [ 152, [ ""UInt64"", ""null"" ]],
				 ""Rbp"": [ 160, [ ""UInt64"", ""null"" ]],
				 ""Rsi"": [ 168, [ ""UInt64"", ""null"" ]],
				 ""Rdi"": [ 176, [ ""UInt64"", ""null"" ]],
				 ""R8"": [ 184, [ ""UInt64"", ""null"" ]],
				 ""R9"": [ 192, [ ""UInt64"", ""null"" ]],
				 ""R10"": [ 200, [ ""UInt64"", ""null"" ]],
				 ""R11"": [ 208, [ ""UInt64"", ""null"" ]],
				 ""R12"": [ 216, [ ""UInt64"", ""null"" ]],
				 ""R13"": [ 224, [ ""UInt64"", ""null"" ]],
				 ""R14"": [ 232, [ ""UInt64"", ""null"" ]],
				 ""R15"": [ 240, [ ""UInt64"", ""null"" ]],
				 ""Rip"": [ 248, [ ""UInt64"", ""null"" ]],
				 ""FltSave"": [ 256, [ ""_XSAVE_FORMAT"", ""null"" ]],
				 ""Header"": [ 256, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""Legacy"": [ 288, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""Xmm0"": [ 416, [ ""_M128A"", ""null"" ]],
				 ""Xmm1"": [ 432, [ ""_M128A"", ""null"" ]],
				 ""Xmm2"": [ 448, [ ""_M128A"", ""null"" ]],
				 ""Xmm3"": [ 464, [ ""_M128A"", ""null"" ]],
				 ""Xmm4"": [ 480, [ ""_M128A"", ""null"" ]],
				 ""Xmm5"": [ 496, [ ""_M128A"", ""null"" ]],
				 ""Xmm6"": [ 512, [ ""_M128A"", ""null"" ]],
				 ""Xmm7"": [ 528, [ ""_M128A"", ""null"" ]],
				 ""Xmm8"": [ 544, [ ""_M128A"", ""null"" ]],
				 ""Xmm9"": [ 560, [ ""_M128A"", ""null"" ]],
				 ""Xmm10"": [ 576, [ ""_M128A"", ""null"" ]],
				 ""Xmm11"": [ 592, [ ""_M128A"", ""null"" ]],
				 ""Xmm12"": [ 608, [ ""_M128A"", ""null"" ]],
				 ""Xmm13"": [ 624, [ ""_M128A"", ""null"" ]],
				 ""Xmm14"": [ 640, [ ""_M128A"", ""null"" ]],
				 ""Xmm15"": [ 656, [ ""_M128A"", ""null"" ]],
				 ""VectorRegister"": [ 768, [ ""Array"", ""{\""count\"":26,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""VectorControl"": [ 1184, [ ""UInt64"", ""null"" ]],
				 ""DebugControl"": [ 1192, [ ""UInt64"", ""null"" ]],
				 ""LastBranchToRip"": [ 1200, [ ""UInt64"", ""null"" ]],
				 ""LastBranchFromRip"": [ 1208, [ ""UInt64"", ""null"" ]],
				 ""LastExceptionToRip"": [ 1216, [ ""UInt64"", ""null"" ]],
				 ""LastExceptionFromRip"": [ 1224, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 P1Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 P2Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 P3Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 P4Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 P5Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 P6Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt32 ContextFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 MxCsr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt16 SegCs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 56); } }
		public UInt16 SegDs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 58); } }
		public UInt16 SegEs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 60); } }
		public UInt16 SegFs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 62); } }
		public UInt16 SegGs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 64); } }
		public UInt16 SegSs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 66); } }
		public UInt32 EFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt64 Dr0 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 Dr1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 Dr2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 Dr3 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 Dr6 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 Dr7 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 Rax { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 Rcx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 Rdx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 Rbx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 Rsp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 Rbp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 Rsi { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 Rdi { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 R8 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public UInt64 R9 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt64 R10 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 R11 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 R12 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 R13 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 R14 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 R15 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 Rip { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public _XSAVE_FORMAT FltSave
		{
			get
			{
				_XSAVE_FORMAT returnValue = new _XSAVE_FORMAT(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
		public _M128A[] Header
		{
			get
			{
				_M128A[] returnValue = new _M128A[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _M128A(_StructureData, (i * size) + _BufferOffset + 256);
				return returnValue;
			}
		}
		public _M128A[] Legacy
		{
			get
			{
				_M128A[] returnValue = new _M128A[8];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<8; i++ )
					returnValue[i] = new _M128A(_StructureData, (i * size) + _BufferOffset + 288);
				return returnValue;
			}
		}
		public _M128A Xmm0
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 416);
				return returnValue;
			}
		}
		public _M128A Xmm1
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 432);
				return returnValue;
			}
		}
		public _M128A Xmm2
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 448);
				return returnValue;
			}
		}
		public _M128A Xmm3
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 464);
				return returnValue;
			}
		}
		public _M128A Xmm4
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 480);
				return returnValue;
			}
		}
		public _M128A Xmm5
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 496);
				return returnValue;
			}
		}
		public _M128A Xmm6
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 512);
				return returnValue;
			}
		}
		public _M128A Xmm7
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 528);
				return returnValue;
			}
		}
		public _M128A Xmm8
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 544);
				return returnValue;
			}
		}
		public _M128A Xmm9
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 560);
				return returnValue;
			}
		}
		public _M128A Xmm10
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 576);
				return returnValue;
			}
		}
		public _M128A Xmm11
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 592);
				return returnValue;
			}
		}
		public _M128A Xmm12
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 608);
				return returnValue;
			}
		}
		public _M128A Xmm13
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 624);
				return returnValue;
			}
		}
		public _M128A Xmm14
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 640);
				return returnValue;
			}
		}
		public _M128A Xmm15
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 656);
				return returnValue;
			}
		}
		public _M128A[] VectorRegister
		{
			get
			{
				_M128A[] returnValue = new _M128A[26];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<26; i++ )
					returnValue[i] = new _M128A(_StructureData, (i * size) + _BufferOffset + 768);
				return returnValue;
			}
		}
		public UInt64 VectorControl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1184); } }
		public UInt64 DebugControl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1192); } }
		public UInt64 LastBranchToRip { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1200); } }
		public UInt64 LastBranchFromRip { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1208); } }
		public UInt64 LastExceptionToRip { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1216); } }
		public UInt64 LastExceptionFromRip { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1224); } }
	}
	#endregion
	#region _IOAPIC
 
	public class _IOAPIC
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IOAPIC(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IOAPIC"": [ 12, {
				 ""Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Length"": [ 1, [ ""Byte"", ""null"" ]],
				 ""IOAPICID"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 3, [ ""Byte"", ""null"" ]],
				 ""IOAPICAddress"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""SystemVectorBase"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Type{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Length{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte IOAPICID{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 IOAPICAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 SystemVectorBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _WHEA_ERROR_PACKET_FLAGS
 
	public class _WHEA_ERROR_PACKET_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_ERROR_PACKET_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_ERROR_PACKET_FLAGS"": [ 4, {
				 ""PreviousError"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""CriticalEvent"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""HypervisorError"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""Simulated"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""PlatformPfaControl"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""PlatformDirectedOffline"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""AddressTranslationRequired"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""AddressTranslationCompleted"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved2"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""AsULONG"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PreviousError
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 CriticalEvent
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 HypervisorError
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 Simulated
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 PlatformPfaControl
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 PlatformDirectedOffline
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 AddressTranslationRequired
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 AddressTranslationCompleted
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved2
		{
			get
			{
				// start: 8  end: 32  Mask: 11111111111111111111111100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967040) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 AsULONG { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _IO_STATUS_BLOCK
 
	public class _IO_STATUS_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_STATUS_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_STATUS_BLOCK"": [ 16, {
				 ""Status"": [ 0, [ ""Int32"", ""null"" ]],
				 ""Pointer"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Information"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 Pointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Information { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _M128A
 
	public class _M128A
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _M128A(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_M128A"": [ 16, {
				 ""Low"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""High"": [ 8, [ ""Int64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Low { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Int64 High { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _MCG_CAP
 
	public class _MCG_CAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MCG_CAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MCG_CAP"": [ 8, {
				 ""CountField"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""ControlMsrPresent"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""ExtendedMsrsPresent"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt64\""}"" ]],
				 ""SignalingExtensionPresent"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""ThresholdErrorStatusPresent"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""ExtendedRegisterCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":16,\""target\"":\""UInt64\""}"" ]],
				 ""SoftwareErrorRecoverySupported"": [ 0, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt64\""}"" ]],
				 ""EnhancedMachineCheckCapability"": [ 0, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":25,\""target\"":\""UInt64\""}"" ]],
				 ""ExtendedErrorLogging"": [ 0, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":26,\""target\"":\""UInt64\""}"" ]],
				 ""LocalMachineCheckException"": [ 0, [ ""BitField"", ""{\""end_bit\"":28,\""start_bit\"":27,\""target\"":\""UInt64\""}"" ]],
				 ""QuadPart"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 CountField
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 255) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 ControlMsrPresent
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt64)value2;
			}
		}
		public UInt64 ExtendedMsrsPresent
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt64)value2;
			}
		}
		public UInt64 SignalingExtensionPresent
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 ThresholdErrorStatusPresent
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 Reserved
		{
			get
			{
				// start: 12  end: 16  Mask: 1111000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 61440) >> 12;
				return (UInt64)value2;
			}
		}
		public UInt64 ExtendedRegisterCount
		{
			get
			{
				// start: 16  end: 24  Mask: 111111110000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16711680) >> 16;
				return (UInt64)value2;
			}
		}
		public UInt64 SoftwareErrorRecoverySupported
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16777216) >> 24;
				return (UInt64)value2;
			}
		}
		public UInt64 EnhancedMachineCheckCapability
		{
			get
			{
				// start: 25  end: 26  Mask: 10000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 33554432) >> 25;
				return (UInt64)value2;
			}
		}
		public UInt64 ExtendedErrorLogging
		{
			get
			{
				// start: 26  end: 27  Mask: 100000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 67108864) >> 26;
				return (UInt64)value2;
			}
		}
		public UInt64 LocalMachineCheckException
		{
			get
			{
				// start: 27  end: 28  Mask: 1000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 134217728) >> 27;
				return (UInt64)value2;
			}
		}
		public UInt64 QuadPart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _WHEA_ERROR_SOURCE_CONFIGURATION_DD
 
	public class _WHEA_ERROR_SOURCE_CONFIGURATION_DD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_ERROR_SOURCE_CONFIGURATION_DD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_ERROR_SOURCE_CONFIGURATION_DD"": [ 24, {
				 ""Initialize"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Uninitialize"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Correct"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Initialize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Uninitialize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Correct { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _WHEA_ERROR_RECORD_HEADER_VALIDBITS
 
	public class _WHEA_ERROR_RECORD_HEADER_VALIDBITS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_ERROR_RECORD_HEADER_VALIDBITS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_ERROR_RECORD_HEADER_VALIDBITS"": [ 4, {
				 ""PlatformId"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Timestamp"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""PartitionId"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""AsULONG"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PlatformId
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Timestamp
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 PartitionId
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 3  end: 32  Mask: 11111111111111111111111111111000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967288) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 AsULONG { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _INTERRUPT_LINE
 
	public class _INTERRUPT_LINE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _INTERRUPT_LINE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_INTERRUPT_LINE"": [ 8, {
				 ""UnitId"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Line"": [ 4, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 UnitId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 Line { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _HALP_DMA_CONTROLLER
 
	public class _HALP_DMA_CONTROLLER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HALP_DMA_CONTROLLER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 224; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HALP_DMA_CONTROLLER"": [ 224, {
				 ""Controllers"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""AdapterList"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ControllerId"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""MinimumRequestLine"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""MaximumRequestLine"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""ChannelCount"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""ScatterGatherLimit"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""Channels"": [ 56, [ ""Pointer"", ""{\""target\"":\""_HALP_DMA_CHANNEL\""}"" ]],
				 ""ExtensionData"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CacheCoherent"": [ 72, [ ""Byte"", ""null"" ]],
				 ""DmaAddressWidth"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""Operations"": [ 80, [ ""_DMA_FUNCTION_TABLE"", ""null"" ]],
				 ""SupportedPortWidths"": [ 160, [ ""UInt32"", ""null"" ]],
				 ""MinimumTransferUnit"": [ 164, [ ""UInt32"", ""null"" ]],
				 ""Lock"": [ 168, [ ""UInt64"", ""null"" ]],
				 ""Irql"": [ 176, [ ""Byte"", ""null"" ]],
				 ""GeneratesInterrupt"": [ 177, [ ""Byte"", ""null"" ]],
				 ""Gsi"": [ 180, [ ""Int32"", ""null"" ]],
				 ""InterruptPolarity"": [ 184, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_POLARITY\"",\""target\"":\""UInt32\""}"" ]],
				 ""InterruptMode"": [ 188, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_MODE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ResourceId"": [ 192, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""PowerHandle"": [ 208, [ ""Pointer"", ""{\""target\"":\""POHANDLE__\""}"" ]],
				 ""PowerActive"": [ 216, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Controllers
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY AdapterList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 ControllerId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 MinimumRequestLine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 MaximumRequestLine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 ChannelCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 ScatterGatherLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt64 Channels { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 ExtensionData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public Byte CacheCoherent{ get { return _StructureData[_BufferOffset +72]; } }
		public UInt32 DmaAddressWidth { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public _DMA_FUNCTION_TABLE Operations
		{
			get
			{
				_DMA_FUNCTION_TABLE returnValue = new _DMA_FUNCTION_TABLE(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt32 SupportedPortWidths { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 160); } }
		public UInt32 MinimumTransferUnit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public Byte Irql{ get { return _StructureData[_BufferOffset +176]; } }
		public Byte GeneratesInterrupt{ get { return _StructureData[_BufferOffset +177]; } }
		public Int32 Gsi { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 180); } }
		public _KINTERRUPT_POLARITY InterruptPolarity { get { return (_KINTERRUPT_POLARITY)BitConverter.ToUInt32(_StructureData, _BufferOffset + 184); } }
		public _KINTERRUPT_MODE InterruptMode { get { return (_KINTERRUPT_MODE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public _UNICODE_STRING ResourceId
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public UInt64 PowerHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public Byte PowerActive{ get { return _StructureData[_BufferOffset +216]; } }
	}
	#endregion
	#region _HAL_INTEL_ENLIGHTENMENT_INFORMATION
 
	public class _HAL_INTEL_ENLIGHTENMENT_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HAL_INTEL_ENLIGHTENMENT_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 496; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HAL_INTEL_ENLIGHTENMENT_INFORMATION"": [ 496, {
				 ""Enlightenments"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HypervisorConnected"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""EndOfInterrupt"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ApicWriteIcr"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Reserved0"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""SpinCountMask"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""LongSpinWait"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetReferenceTime"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SetSystemSleepProperty"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EnterSleepState"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NotifyDebugDeviceAvailable"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MapDeviceInterrupt"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UnmapDeviceInterrupt"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RetargetDeviceInterrupt"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SetHpetConfig"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NotifyHpetEnabled"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""QueryAssociatedProcessors"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReadMultipleMsr"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WriteMultipleMsr"": [ 128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReadCpuid"": [ 136, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LpWritebackInvalidate"": [ 144, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetMachineCheckContext"": [ 152, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SuspendPartition"": [ 160, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ResumePartition"": [ 168, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SetSystemMachineCheckProperty"": [ 176, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WheaErrorNotification"": [ 184, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetProcessorIndexFromVpIndex"": [ 192, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SyntheticClusterIpi"": [ 200, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VpStartEnabled"": [ 208, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StartVirtualProcessor"": [ 216, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetVpIndexFromApicId"": [ 224, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IumAccessPciDevice"": [ 232, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IumEfiRuntimeService"": [ 240, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SvmGetSystemCapabilities"": [ 248, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SvmGetDeviceCapabilities"": [ 256, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SvmCreatePasidSpace"": [ 264, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SvmSetPasidAddressSpace"": [ 272, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SvmFlushPasid"": [ 280, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SvmAttachPasidSpace"": [ 288, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SvmDetachPasidSpace"": [ 296, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SvmEnablePasid"": [ 304, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SvmDisablePasid"": [ 312, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SvmAcknowledgePageRequest"": [ 320, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SvmCreatePrQueue"": [ 328, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SvmDeletePrQueue"": [ 336, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SvmClearPrqStalled"": [ 344, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SvmSetDeviceEnabled"": [ 352, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HvDebuggerPowerHandler"": [ 360, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SetQpcBias"": [ 368, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetQpcBias"": [ 376, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RegisterDeviceId"": [ 384, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UnregisterDeviceId"": [ 392, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AllocateDeviceDomain"": [ 400, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AttachDeviceDomain"": [ 408, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DetachDeviceDomain"": [ 416, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeleteDeviceDomain"": [ 424, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MapDeviceLogicalRange"": [ 432, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UnmapDeviceLogicalRange"": [ 440, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MapDeviceSparsePages"": [ 448, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UnmapDeviceSparsePages"": [ 456, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetDmaGuardEnabled"": [ 464, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UpdateMicrocode"": [ 472, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetSintMessage"": [ 480, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SetRootFaultReportingReady"": [ 488, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Enlightenments { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 HypervisorConnected { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 EndOfInterrupt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ApicWriteIcr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 Reserved0 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 SpinCountMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt64 LongSpinWait { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 GetReferenceTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 SetSystemSleepProperty { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 EnterSleepState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 NotifyDebugDeviceAvailable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 MapDeviceInterrupt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 UnmapDeviceInterrupt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 RetargetDeviceInterrupt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 SetHpetConfig { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 NotifyHpetEnabled { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 QueryAssociatedProcessors { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 ReadMultipleMsr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 WriteMultipleMsr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 ReadCpuid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 LpWritebackInvalidate { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 GetMachineCheckContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 SuspendPartition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 ResumePartition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 SetSystemMachineCheckProperty { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 WheaErrorNotification { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public UInt64 GetProcessorIndexFromVpIndex { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt64 SyntheticClusterIpi { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 VpStartEnabled { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 StartVirtualProcessor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 GetVpIndexFromApicId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 IumAccessPciDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 IumEfiRuntimeService { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 SvmGetSystemCapabilities { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public UInt64 SvmGetDeviceCapabilities { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public UInt64 SvmCreatePasidSpace { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 264); } }
		public UInt64 SvmSetPasidAddressSpace { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public UInt64 SvmFlushPasid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 280); } }
		public UInt64 SvmAttachPasidSpace { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 288); } }
		public UInt64 SvmDetachPasidSpace { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 296); } }
		public UInt64 SvmEnablePasid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 304); } }
		public UInt64 SvmDisablePasid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 312); } }
		public UInt64 SvmAcknowledgePageRequest { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 320); } }
		public UInt64 SvmCreatePrQueue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 328); } }
		public UInt64 SvmDeletePrQueue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 336); } }
		public UInt64 SvmClearPrqStalled { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 344); } }
		public UInt64 SvmSetDeviceEnabled { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 352); } }
		public UInt64 HvDebuggerPowerHandler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 360); } }
		public UInt64 SetQpcBias { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 368); } }
		public UInt64 GetQpcBias { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 376); } }
		public UInt64 RegisterDeviceId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 384); } }
		public UInt64 UnregisterDeviceId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 392); } }
		public UInt64 AllocateDeviceDomain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 400); } }
		public UInt64 AttachDeviceDomain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 408); } }
		public UInt64 DetachDeviceDomain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 416); } }
		public UInt64 DeleteDeviceDomain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 424); } }
		public UInt64 MapDeviceLogicalRange { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 432); } }
		public UInt64 UnmapDeviceLogicalRange { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 440); } }
		public UInt64 MapDeviceSparsePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 448); } }
		public UInt64 UnmapDeviceSparsePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 456); } }
		public UInt64 GetDmaGuardEnabled { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 464); } }
		public UInt64 UpdateMicrocode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 472); } }
		public UInt64 GetSintMessage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 480); } }
		public UInt64 SetRootFaultReportingReady { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 488); } }
	}
	#endregion
	#region _WHEA_XPF_MC_BANK_DESCRIPTOR
 
	public class _WHEA_XPF_MC_BANK_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_XPF_MC_BANK_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_XPF_MC_BANK_DESCRIPTOR"": [ 28, {
				 ""BankNumber"": [ 0, [ ""Byte"", ""null"" ]],
				 ""ClearOnInitialization"": [ 1, [ ""Byte"", ""null"" ]],
				 ""StatusDataFormat"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 3, [ ""_XPF_MC_BANK_FLAGS"", ""null"" ]],
				 ""ControlMsr"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""StatusMsr"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""AddressMsr"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""MiscMsr"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ControlData"": [ 20, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte BankNumber{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte ClearOnInitialization{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte StatusDataFormat{ get { return _StructureData[_BufferOffset +2]; } }
		public _XPF_MC_BANK_FLAGS Flags
		{
			get
			{
				_XPF_MC_BANK_FLAGS returnValue = new _XPF_MC_BANK_FLAGS(_StructureData, _BufferOffset + 3);
				return returnValue;
			}
		}
		public UInt32 ControlMsr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 StatusMsr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 AddressMsr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 MiscMsr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 ControlData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _DESCRIPTION_HEADER
 
	public class _DESCRIPTION_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DESCRIPTION_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 36; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DESCRIPTION_HEADER"": [ 36, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Length"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Revision"": [ 8, [ ""Byte"", ""null"" ]],
				 ""Checksum"": [ 9, [ ""Byte"", ""null"" ]],
				 ""OEMID"": [ 10, [ ""Array"", ""{\""count\"":6,\""target\"":\""Char\""}"" ]],
				 ""OEMTableID"": [ 16, [ ""Array"", ""{\""count\"":8,\""target\"":\""Char\""}"" ]],
				 ""OEMRevision"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""CreatorID"": [ 28, [ ""Array"", ""{\""count\"":4,\""target\"":\""Char\""}"" ]],
				 ""CreatorRev"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public Byte Revision{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte Checksum{ get { return _StructureData[_BufferOffset +9]; } }
		public Char[] OEMID
		{
			get
			{
				Char[] returnValue = new Char[6];
				for(int i=0; i<6; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 10);
				return returnValue;
			}
		}
		public Char[] OEMTableID
		{
			get
			{
				Char[] returnValue = new Char[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 OEMRevision { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Char[] CreatorID
		{
			get
			{
				Char[] returnValue = new Char[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 28);
				return returnValue;
			}
		}
		public UInt32 CreatorRev { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _CONTROLLER_OBJECT
 
	public class _CONTROLLER_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CONTROLLER_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CONTROLLER_OBJECT"": [ 72, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""Int16"", ""null"" ]],
				 ""ControllerExtension"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeviceWaitQueue"": [ 16, [ ""_KDEVICE_QUEUE"", ""null"" ]],
				 ""Spare1"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""Spare2"": [ 64, [ ""_LARGE_INTEGER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 Size { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 ControllerExtension { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _KDEVICE_QUEUE DeviceWaitQueue
		{
			get
			{
				_KDEVICE_QUEUE returnValue = new _KDEVICE_QUEUE(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 Spare1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public _LARGE_INTEGER Spare2
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SCATTER_GATHER_LIST
 
	public class _SCATTER_GATHER_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SCATTER_GATHER_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SCATTER_GATHER_LIST"": [ 16, {
				 ""NumberOfElements"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Elements"": [ 16, [ ""Array"", ""{\""count\"":0,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 NumberOfElements { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 Reserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _SCATTER_GATHER_ELEMENT[] Elements
		{
			get
			{
				_SCATTER_GATHER_ELEMENT[] returnValue = new _SCATTER_GATHER_ELEMENT[0];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<0; i++ )
					returnValue[i] = new _SCATTER_GATHER_ELEMENT(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HAL_HV_SVM_SYSTEM_CAPABILITIES
 
	public class _HAL_HV_SVM_SYSTEM_CAPABILITIES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HAL_HV_SVM_SYSTEM_CAPABILITIES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HAL_HV_SVM_SYSTEM_CAPABILITIES"": [ 24, {
				 ""SvmSupported"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""GpaAlwaysValid"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""MaxPasidSpaceCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""MaxPasidSpacePasidCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""MaxPrqSize"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""IommuCount"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""MinIommuPasidCount"": [ 20, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SvmSupported
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 GpaAlwaysValid
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 MaxPasidSpaceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 MaxPasidSpacePasidCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 MaxPrqSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 IommuCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 MinIommuPasidCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _WHEA_TIMESTAMP
 
	public class _WHEA_TIMESTAMP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_TIMESTAMP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_TIMESTAMP"": [ 8, {
				 ""Seconds"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Minutes"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""Hours"": [ 0, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":16,\""target\"":\""UInt64\""}"" ]],
				 ""Precise"": [ 0, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt64\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":25,\""target\"":\""UInt64\""}"" ]],
				 ""Day"": [ 0, [ ""BitField"", ""{\""end_bit\"":40,\""start_bit\"":32,\""target\"":\""UInt64\""}"" ]],
				 ""Month"": [ 0, [ ""BitField"", ""{\""end_bit\"":48,\""start_bit\"":40,\""target\"":\""UInt64\""}"" ]],
				 ""Year"": [ 0, [ ""BitField"", ""{\""end_bit\"":56,\""start_bit\"":48,\""target\"":\""UInt64\""}"" ]],
				 ""Century"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":56,\""target\"":\""UInt64\""}"" ]],
				 ""AsLARGE_INTEGER"": [ 0, [ ""_LARGE_INTEGER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Seconds
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 255) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Minutes
		{
			get
			{
				// start: 8  end: 16  Mask: 1111111100000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65280) >> 8;
				return (UInt64)value2;
			}
		}
		public UInt64 Hours
		{
			get
			{
				// start: 16  end: 24  Mask: 111111110000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16711680) >> 16;
				return (UInt64)value2;
			}
		}
		public UInt64 Precise
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16777216) >> 24;
				return (UInt64)value2;
			}
		}
		public UInt64 Reserved
		{
			get
			{
				// start: 25  end: 32  Mask: 11111110000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4261412864) >> 25;
				return (UInt64)value2;
			}
		}
		public UInt64 Day
		{
			get
			{
				// start: 32  end: 40  Mask: 1111111100000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1095216660480) >> 32;
				return (UInt64)value2;
			}
		}
		public UInt64 Month
		{
			get
			{
				// start: 40  end: 48  Mask: 111111110000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 280375465082880) >> 40;
				return (UInt64)value2;
			}
		}
		public UInt64 Year
		{
			get
			{
				// start: 48  end: 56  Mask: 11111111000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 71776119061217280) >> 48;
				return (UInt64)value2;
			}
		}
		public UInt64 Century
		{
			get
			{
				// start: 56  end: 64  Mask: 1111111100000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18374686479671623680) >> 56;
				return (UInt64)value2;
			}
		}
		public _LARGE_INTEGER AsLARGE_INTEGER
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEA_XPF_NMI_DESCRIPTOR
 
	public class _WHEA_XPF_NMI_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_XPF_NMI_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 3; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_XPF_NMI_DESCRIPTOR"": [ 3, {
				 ""Type"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Enabled"": [ 2, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Type { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Enabled{ get { return _StructureData[_BufferOffset +2]; } }
	}
	#endregion
	#region _HALP_DMA_MASTER_ADAPTER_OBJECT
 
	public class _HALP_DMA_MASTER_ADAPTER_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HALP_DMA_MASTER_ADAPTER_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 216; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HALP_DMA_MASTER_ADAPTER_OBJECT"": [ 216, {
				 ""AdapterObject"": [ 0, [ ""_HALP_DMA_ADAPTER_OBJECT"", ""null"" ]],
				 ""ContiguousAdapterQueue"": [ 152, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ScatterAdapterQueue"": [ 168, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""MapBufferSize"": [ 184, [ ""UInt32"", ""null"" ]],
				 ""MapBufferPhysicalAddress"": [ 192, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ContiguousPageCount"": [ 200, [ ""UInt32"", ""null"" ]],
				 ""ContiguousPageLimit"": [ 204, [ ""UInt32"", ""null"" ]],
				 ""ScatterPageCount"": [ 208, [ ""UInt32"", ""null"" ]],
				 ""ScatterPageLimit"": [ 212, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _HALP_DMA_ADAPTER_OBJECT AdapterObject
		{
			get
			{
				_HALP_DMA_ADAPTER_OBJECT returnValue = new _HALP_DMA_ADAPTER_OBJECT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY ContiguousAdapterQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 152);
				return returnValue;
			}
		}
		public _LIST_ENTRY ScatterAdapterQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 168);
				return returnValue;
			}
		}
		public UInt32 MapBufferSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 184); } }
		public _LARGE_INTEGER MapBufferPhysicalAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public UInt32 ContiguousPageCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 200); } }
		public UInt32 ContiguousPageLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 204); } }
		public UInt32 ScatterPageCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 208); } }
		public UInt32 ScatterPageLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 212); } }
	}
	#endregion
	#region _TXN_PARAMETER_BLOCK
 
	public class _TXN_PARAMETER_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TXN_PARAMETER_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TXN_PARAMETER_BLOCK"": [ 16, {
				 ""Length"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""TxFsContext"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""TransactionObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Length { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 TxFsContext { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 TransactionObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _HALP_DMA_CHANNEL
 
	public class _HALP_DMA_CHANNEL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HALP_DMA_CHANNEL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HALP_DMA_CHANNEL"": [ 160, {
				 ""ChannelNumber"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Initialized"": [ 4, [ ""Byte"", ""null"" ]],
				 ""Busy"": [ 5, [ ""Byte"", ""null"" ]],
				 ""Complete"": [ 6, [ ""Byte"", ""null"" ]],
				 ""CurrentCompletionRoutine"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CurrentCompletionContext"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CurrentChildAdapter"": [ 24, [ ""Pointer"", ""{\""target\"":\""_ADAPTER_OBJECT\""}"" ]],
				 ""CurrentInterruptType"": [ 32, [ ""Enumeration"", ""{\""enum_name\"":\""_DMA_INTERRUPT_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Dpc"": [ 40, [ ""_KDPC"", ""null"" ]],
				 ""GeneratesInterrupt"": [ 104, [ ""Byte"", ""null"" ]],
				 ""Gsi"": [ 108, [ ""Int32"", ""null"" ]],
				 ""InterruptPolarity"": [ 112, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_POLARITY\"",\""target\"":\""UInt32\""}"" ]],
				 ""InterruptMode"": [ 116, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_MODE\"",\""target\"":\""UInt32\""}"" ]],
				 ""CommonBufferLength"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""CommonBufferVirtualAddress"": [ 128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CommonBufferLogicalAddress"": [ 136, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""AdapterQueue"": [ 144, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ChannelNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte Initialized{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte Busy{ get { return _StructureData[_BufferOffset +5]; } }
		public Byte Complete{ get { return _StructureData[_BufferOffset +6]; } }
		public UInt64 CurrentCompletionRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 CurrentCompletionContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 CurrentChildAdapter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _DMA_INTERRUPT_TYPE CurrentInterruptType { get { return (_DMA_INTERRUPT_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public _KDPC Dpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public Byte GeneratesInterrupt{ get { return _StructureData[_BufferOffset +104]; } }
		public Int32 Gsi { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 108); } }
		public _KINTERRUPT_POLARITY InterruptPolarity { get { return (_KINTERRUPT_POLARITY)BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public _KINTERRUPT_MODE InterruptMode { get { return (_KINTERRUPT_MODE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 116); } }
		public UInt32 CommonBufferLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt64 CommonBufferVirtualAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public _LARGE_INTEGER CommonBufferLogicalAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public _LIST_ENTRY AdapterQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 144);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEA_PERSISTENCE_INFO
 
	public class _WHEA_PERSISTENCE_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_PERSISTENCE_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_PERSISTENCE_INFO"": [ 8, {
				 ""Signature"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Length"": [ 0, [ ""BitField"", ""{\""end_bit\"":40,\""start_bit\"":16,\""target\"":\""UInt64\""}"" ]],
				 ""Identifier"": [ 0, [ ""BitField"", ""{\""end_bit\"":56,\""start_bit\"":40,\""target\"":\""UInt64\""}"" ]],
				 ""Attributes"": [ 0, [ ""BitField"", ""{\""end_bit\"":58,\""start_bit\"":56,\""target\"":\""UInt64\""}"" ]],
				 ""DoNotLog"": [ 0, [ ""BitField"", ""{\""end_bit\"":59,\""start_bit\"":58,\""target\"":\""UInt64\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":59,\""target\"":\""UInt64\""}"" ]],
				 ""AsULONGLONG"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Signature
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65535) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Length
		{
			get
			{
				// start: 16  end: 40  Mask: 1111111111111111111111110000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1099511562240) >> 16;
				return (UInt64)value2;
			}
		}
		public UInt64 Identifier
		{
			get
			{
				// start: 40  end: 56  Mask: 11111111111111110000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 72056494526300160) >> 40;
				return (UInt64)value2;
			}
		}
		public UInt64 Attributes
		{
			get
			{
				// start: 56  end: 58  Mask: 1100000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 216172782113783808) >> 56;
				return (UInt64)value2;
			}
		}
		public UInt64 DoNotLog
		{
			get
			{
				// start: 58  end: 59  Mask: 10000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 288230376151711744) >> 58;
				return (UInt64)value2;
			}
		}
		public UInt64 Reserved
		{
			get
			{
				// start: 59  end: 64  Mask: 1111100000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 17870283321406128128) >> 59;
				return (UInt64)value2;
			}
		}
		public UInt64 AsULONGLONG { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _GROUP_AFFINITY
 
	public class _GROUP_AFFINITY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _GROUP_AFFINITY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_GROUP_AFFINITY"": [ 16, {
				 ""Mask"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Group"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""Reserved"": [ 10, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Mask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt16 Group { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16[] Reserved
		{
			get
			{
				UInt16[] returnValue = new UInt16[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 10);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DMA_ADAPTER
 
	public class _DMA_ADAPTER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DMA_ADAPTER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DMA_ADAPTER"": [ 16, {
				 ""Version"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Size"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""DmaOperations"": [ 8, [ ""Pointer"", ""{\""target\"":\""_DMA_OPERATIONS\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 DmaOperations { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _INTERRUPT_TARGET
 
	public class _INTERRUPT_TARGET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _INTERRUPT_TARGET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_INTERRUPT_TARGET"": [ 24, {
				 ""Target"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_INTERRUPT_TARGET_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""PhysicalTarget"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""LogicalFlatTarget"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""RemapIndex"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ClusterId"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ClusterMask"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""HypervisorTarget"": [ 8, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _INTERRUPT_TARGET_TYPE Target { get { return (_INTERRUPT_TARGET_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 PhysicalTarget { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 LogicalFlatTarget { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 RemapIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ClusterId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ClusterMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _ANONYMOUS_TAG HypervisorTarget
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _FACS
 
	public class _FACS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FACS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FACS"": [ 64, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Length"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""HardwareSignature"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""pFirmwareWakingVector"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""GlobalLock"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""x_FirmwareWakingVector"": [ 24, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""version"": [ 32, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 33, [ ""Array"", ""{\""count\"":31,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 HardwareSignature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 pFirmwareWakingVector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 GlobalLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _LARGE_INTEGER x_FirmwareWakingVector
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public Byte version{ get { return _StructureData[_BufferOffset +32]; } }
		public Byte[] Reserved
		{
			get
			{
				Byte[] returnValue = new Byte[31];
				for(int i=0; i<31; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 33];
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEA_AMD_EXTENDED_REGISTERS
 
	public class _WHEA_AMD_EXTENDED_REGISTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_AMD_EXTENDED_REGISTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 192; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_AMD_EXTENDED_REGISTERS"": [ 192, {
				 ""IPID"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""SYND"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""CONFIG"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""DESTAT"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""DEADDR"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""MISC1"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""MISC2"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""MISC3"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""MISC4"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""RasCap"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""Reserved"": [ 80, [ ""Array"", ""{\""count\"":14,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 IPID { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 SYND { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 CONFIG { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 DESTAT { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 DEADDR { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 MISC1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 MISC2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 MISC3 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 MISC4 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 RasCap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64[] Reserved
		{
			get
			{
				UInt64[] returnValue = new UInt64[14];
				for(int i=0; i<14; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 80);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DMA_TRANSFER_CONTEXT
 
	public class _DMA_TRANSFER_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DMA_TRANSFER_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DMA_TRANSFER_CONTEXT"": [ 96, {
				 ""Version"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""V1"": [ 8, [ ""_DMA_TRANSFER_CONTEXT_V1"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _DMA_TRANSFER_CONTEXT_V1 V1
		{
			get
			{
				_DMA_TRANSFER_CONTEXT_V1 returnValue = new _DMA_TRANSFER_CONTEXT_V1(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SECONDARY_IC_LIST_ENTRY
 
	public class _SECONDARY_IC_LIST_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECONDARY_IC_LIST_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 176; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECONDARY_IC_LIST_ENTRY"": [ 176, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""GsivBase"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""GsivSize"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Interface"": [ 24, [ ""_SECONDARY_INTERRUPT_PROVIDER_INTERFACE"", ""null"" ]],
				 ""BusyCount"": [ 112, [ ""Int32"", ""null"" ]],
				 ""ExclusiveWaiterCount"": [ 116, [ ""Int32"", ""null"" ]],
				 ""NotificationEvent"": [ 120, [ ""_KEVENT"", ""null"" ]],
				 ""SignalListEntry"": [ 144, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""State"": [ 160, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 GsivBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 GsivSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _SECONDARY_INTERRUPT_PROVIDER_INTERFACE Interface
		{
			get
			{
				_SECONDARY_INTERRUPT_PROVIDER_INTERFACE returnValue = new _SECONDARY_INTERRUPT_PROVIDER_INTERFACE(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public Int32 BusyCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 112); } }
		public Int32 ExclusiveWaiterCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 116); } }
		public _KEVENT NotificationEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
		public _LIST_ENTRY SignalListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 144);
				return returnValue;
			}
		}
		public _SECONDARY_INTERRUPT_LINE_STATE[] State
		{
			get
			{
				_SECONDARY_INTERRUPT_LINE_STATE[] returnValue = new _SECONDARY_INTERRUPT_LINE_STATE[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _SECONDARY_INTERRUPT_LINE_STATE(_StructureData, (i * size) + _BufferOffset + 160);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DRIVER_OBJECT
 
	public class _DRIVER_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DRIVER_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 336; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DRIVER_OBJECT"": [ 336, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""Int16"", ""null"" ]],
				 ""DeviceObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""Flags"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""DriverStart"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DriverSize"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""DriverSection"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DriverExtension"": [ 48, [ ""Pointer"", ""{\""target\"":\""_DRIVER_EXTENSION\""}"" ]],
				 ""DriverName"": [ 56, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""HardwareDatabase"": [ 72, [ ""Pointer"", ""{\""target\"":\""_UNICODE_STRING\""}"" ]],
				 ""FastIoDispatch"": [ 80, [ ""Pointer"", ""{\""target\"":\""_FAST_IO_DISPATCH\""}"" ]],
				 ""DriverInit"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DriverStartIo"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DriverUnload"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MajorFunction"": [ 112, [ ""Array"", ""{\""count\"":28,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 Size { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 DriverStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 DriverSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 DriverSection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 DriverExtension { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _UNICODE_STRING DriverName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt64 HardwareDatabase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 FastIoDispatch { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 DriverInit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 DriverStartIo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 DriverUnload { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64[] MajorFunction
		{
			get
			{
				UInt64[] returnValue = new UInt64[28];
				int size = 8;
				for(int i=0; i<28; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 112);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HAL_HV_DMA_DOMAIN_INFO
 
	public class _HAL_HV_DMA_DOMAIN_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HAL_HV_DMA_DOMAIN_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HAL_HV_DMA_DOMAIN_INFO"": [ 8, {
				 ""DomainId"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""IsStage1"": [ 4, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DomainId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte IsStage1{ get { return _StructureData[_BufferOffset +4]; } }
	}
	#endregion
	#region _HAL_HV_SVM_DEVICE_CAPABILITIES
 
	public class _HAL_HV_SVM_DEVICE_CAPABILITIES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HAL_HV_SVM_DEVICE_CAPABILITIES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HAL_HV_SVM_DEVICE_CAPABILITIES"": [ 12, {
				 ""SvmSupported"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""PciExecute"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""NoExecute"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""OverflowPossible"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""PasidCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""IommuIndex"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SvmSupported
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 PciExecute
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 NoExecute
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 3  end: 31  Mask: 1111111111111111111111111111000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2147483640) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 OverflowPossible
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public UInt32 PasidCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 IommuIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _XPF_MC_BANK_FLAGS
 
	public class _XPF_MC_BANK_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _XPF_MC_BANK_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_XPF_MC_BANK_FLAGS"": [ 1, {
				 ""ClearOnInitializationRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""ControlDataRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""AsUCHAR"": [ 0, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte ClearOnInitializationRW
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte ControlDataRW
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte Reserved
		{
			get
			{
				// start: 2  end: 8  Mask: 0000000011111100
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 252) >> 2;
				return (Byte)value2;
			}
		}
		public Byte AsUCHAR{ get { return _StructureData[_BufferOffset +0]; } }
	}
	#endregion
	#region _IO_NMISOURCE
 
	public class _IO_NMISOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_NMISOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_NMISOURCE"": [ 8, {
				 ""Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Length"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""GlobalSystemInterruptVector"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Type{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Length{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 GlobalSystemInterruptVector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _DRIVER_EXTENSION
 
	public class _DRIVER_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DRIVER_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DRIVER_EXTENSION"": [ 40, {
				 ""DriverObject"": [ 0, [ ""Pointer"", ""{\""target\"":\""_DRIVER_OBJECT\""}"" ]],
				 ""AddDevice"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Count"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ServiceKeyName"": [ 24, [ ""_UNICODE_STRING"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DriverObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 AddDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _UNICODE_STRING ServiceKeyName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ISA_VECTOR
 
	public class _ISA_VECTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ISA_VECTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 10; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ISA_VECTOR"": [ 10, {
				 ""Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Length"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Bus"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Source"": [ 3, [ ""Byte"", ""null"" ]],
				 ""GlobalSystemInterruptVector"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 8, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Type{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Length{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte Bus{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Source{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 GlobalSystemInterruptVector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _IO_RESOURCE_LIST
 
	public class _IO_RESOURCE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_RESOURCE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_RESOURCE_LIST"": [ 40, {
				 ""Version"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Revision"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Count"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Descriptors"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Revision { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _IO_RESOURCE_DESCRIPTOR[] Descriptors
		{
			get
			{
				_IO_RESOURCE_DESCRIPTOR[] returnValue = new _IO_RESOURCE_DESCRIPTOR[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _IO_RESOURCE_DESCRIPTOR(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KSPECIAL_REGISTERS
 
	public class _KSPECIAL_REGISTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KSPECIAL_REGISTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 240; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KSPECIAL_REGISTERS"": [ 240, {
				 ""Cr0"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Cr2"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Cr3"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""Cr4"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""KernelDr0"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""KernelDr1"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""KernelDr2"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""KernelDr3"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""KernelDr6"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""KernelDr7"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""Gdtr"": [ 80, [ ""_KDESCRIPTOR"", ""null"" ]],
				 ""Idtr"": [ 96, [ ""_KDESCRIPTOR"", ""null"" ]],
				 ""Tr"": [ 112, [ ""UInt16"", ""null"" ]],
				 ""Ldtr"": [ 114, [ ""UInt16"", ""null"" ]],
				 ""MxCsr"": [ 116, [ ""UInt32"", ""null"" ]],
				 ""DebugControl"": [ 120, [ ""UInt64"", ""null"" ]],
				 ""LastBranchToRip"": [ 128, [ ""UInt64"", ""null"" ]],
				 ""LastBranchFromRip"": [ 136, [ ""UInt64"", ""null"" ]],
				 ""LastExceptionToRip"": [ 144, [ ""UInt64"", ""null"" ]],
				 ""LastExceptionFromRip"": [ 152, [ ""UInt64"", ""null"" ]],
				 ""Cr8"": [ 160, [ ""UInt64"", ""null"" ]],
				 ""MsrGsBase"": [ 168, [ ""UInt64"", ""null"" ]],
				 ""MsrGsSwap"": [ 176, [ ""UInt64"", ""null"" ]],
				 ""MsrStar"": [ 184, [ ""UInt64"", ""null"" ]],
				 ""MsrLStar"": [ 192, [ ""UInt64"", ""null"" ]],
				 ""MsrCStar"": [ 200, [ ""UInt64"", ""null"" ]],
				 ""MsrSyscallMask"": [ 208, [ ""UInt64"", ""null"" ]],
				 ""Xcr0"": [ 216, [ ""UInt64"", ""null"" ]],
				 ""MsrFsBase"": [ 224, [ ""UInt64"", ""null"" ]],
				 ""SpecialPadding0"": [ 232, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Cr0 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Cr2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Cr3 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Cr4 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 KernelDr0 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 KernelDr1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 KernelDr2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 KernelDr3 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 KernelDr6 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 KernelDr7 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public _KDESCRIPTOR Gdtr
		{
			get
			{
				_KDESCRIPTOR returnValue = new _KDESCRIPTOR(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public _KDESCRIPTOR Idtr
		{
			get
			{
				_KDESCRIPTOR returnValue = new _KDESCRIPTOR(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt16 Tr { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 112); } }
		public UInt16 Ldtr { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 114); } }
		public UInt32 MxCsr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 116); } }
		public UInt64 DebugControl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 LastBranchToRip { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 LastBranchFromRip { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 LastExceptionToRip { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 LastExceptionFromRip { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 Cr8 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 MsrGsBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 MsrGsSwap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 MsrStar { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public UInt64 MsrLStar { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt64 MsrCStar { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 MsrSyscallMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 Xcr0 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 MsrFsBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 SpecialPadding0 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
	}
	#endregion
	#region POHANDLE__
 
	public class POHANDLE__
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public POHANDLE__(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""POHANDLE__"": [ 4, {
				 ""unused"": [ 0, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 unused { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _INTERRUPT_LINE_STATE
 
	public class _INTERRUPT_LINE_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _INTERRUPT_LINE_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_INTERRUPT_LINE_STATE"": [ 56, {
				 ""Polarity"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_POLARITY\"",\""target\"":\""UInt32\""}"" ]],
				 ""EmulateActiveBoth"": [ 4, [ ""Byte"", ""null"" ]],
				 ""TriggerMode"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_MODE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Routing"": [ 16, [ ""_INTERRUPT_LINE"", ""null"" ]],
				 ""ProcessorTarget"": [ 24, [ ""_INTERRUPT_TARGET"", ""null"" ]],
				 ""Vector"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""Priority"": [ 52, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KINTERRUPT_POLARITY Polarity { get { return (_KINTERRUPT_POLARITY)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte EmulateActiveBoth{ get { return _StructureData[_BufferOffset +4]; } }
		public _KINTERRUPT_MODE TriggerMode { get { return (_KINTERRUPT_MODE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _INTERRUPT_LINE Routing
		{
			get
			{
				_INTERRUPT_LINE returnValue = new _INTERRUPT_LINE(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _INTERRUPT_TARGET ProcessorTarget
		{
			get
			{
				_INTERRUPT_TARGET returnValue = new _INTERRUPT_TARGET(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 Vector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 Priority { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
	}
	#endregion
	#region _MCI_STATUS
 
	public class _MCI_STATUS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MCI_STATUS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MCI_STATUS"": [ 8, {
				 ""CommonBits"": [ 0, [ ""_MCI_STATUS_BITS_COMMON"", ""null"" ]],
				 ""AmdBits"": [ 0, [ ""_MCI_STATUS_AMD_BITS"", ""null"" ]],
				 ""IntelBits"": [ 0, [ ""_MCI_STATUS_INTEL_BITS"", ""null"" ]],
				 ""QuadPart"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _MCI_STATUS_BITS_COMMON CommonBits
		{
			get
			{
				_MCI_STATUS_BITS_COMMON returnValue = new _MCI_STATUS_BITS_COMMON(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _MCI_STATUS_AMD_BITS AmdBits
		{
			get
			{
				_MCI_STATUS_AMD_BITS returnValue = new _MCI_STATUS_AMD_BITS(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _MCI_STATUS_INTEL_BITS IntelBits
		{
			get
			{
				_MCI_STATUS_INTEL_BITS returnValue = new _MCI_STATUS_INTEL_BITS(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 QuadPart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _KAFFINITY_EX
 
	public class _KAFFINITY_EX
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KAFFINITY_EX(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 168; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KAFFINITY_EX"": [ 168, {
				 ""Count"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Size"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Reserved"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Bitmap"": [ 8, [ ""Array"", ""{\""count\"":20,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Count { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64[] Bitmap
		{
			get
			{
				UInt64[] returnValue = new UInt64[20];
				for(int i=0; i<20; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _XSAVE_FORMAT
 
	public class _XSAVE_FORMAT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _XSAVE_FORMAT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 512; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_XSAVE_FORMAT"": [ 512, {
				 ""ControlWord"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""StatusWord"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""TagWord"": [ 4, [ ""Byte"", ""null"" ]],
				 ""Reserved1"": [ 5, [ ""Byte"", ""null"" ]],
				 ""ErrorOpcode"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""ErrorOffset"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ErrorSelector"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""Reserved2"": [ 14, [ ""UInt16"", ""null"" ]],
				 ""DataOffset"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""DataSelector"": [ 20, [ ""UInt16"", ""null"" ]],
				 ""Reserved3"": [ 22, [ ""UInt16"", ""null"" ]],
				 ""MxCsr"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""MxCsr_Mask"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""FloatRegisters"": [ 32, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""XmmRegisters"": [ 160, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""Reserved4"": [ 416, [ ""Array"", ""{\""count\"":96,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 ControlWord { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 StatusWord { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public Byte TagWord{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte Reserved1{ get { return _StructureData[_BufferOffset +5]; } }
		public UInt16 ErrorOpcode { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt32 ErrorOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt16 ErrorSelector { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public UInt16 Reserved2 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 14); } }
		public UInt32 DataOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt16 DataSelector { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 20); } }
		public UInt16 Reserved3 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 22); } }
		public UInt32 MxCsr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 MxCsr_Mask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public _M128A[] FloatRegisters
		{
			get
			{
				_M128A[] returnValue = new _M128A[8];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<8; i++ )
					returnValue[i] = new _M128A(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
		public _M128A[] XmmRegisters
		{
			get
			{
				_M128A[] returnValue = new _M128A[16];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<16; i++ )
					returnValue[i] = new _M128A(_StructureData, (i * size) + _BufferOffset + 160);
				return returnValue;
			}
		}
		public Byte[] Reserved4
		{
			get
			{
				Byte[] returnValue = new Byte[96];
				for(int i=0; i<96; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 416];
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEA_NOTIFICATION_FLAGS
 
	public class _WHEA_NOTIFICATION_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_NOTIFICATION_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_NOTIFICATION_FLAGS"": [ 2, {
				 ""PollIntervalRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""SwitchToPollingThresholdRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""SwitchToPollingWindowRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt16\""}"" ]],
				 ""ErrorThresholdRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt16\""}"" ]],
				 ""ErrorThresholdWindowRW"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt16\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":5,\""target\"":\""UInt16\""}"" ]],
				 ""AsUSHORT"": [ 0, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 PollIntervalRW
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 SwitchToPollingThresholdRW
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt16)value2;
			}
		}
		public UInt16 SwitchToPollingWindowRW
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt16)value2;
			}
		}
		public UInt16 ErrorThresholdRW
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt16)value2;
			}
		}
		public UInt16 ErrorThresholdWindowRW
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt16)value2;
			}
		}
		public UInt16 Reserved
		{
			get
			{
				// start: 5  end: 16  Mask: 1111111111100000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65504) >> 5;
				return (UInt16)value2;
			}
		}
		public UInt16 AsUSHORT { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _MCI_STATUS_INTEL_BITS
 
	public class _MCI_STATUS_INTEL_BITS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MCI_STATUS_INTEL_BITS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MCI_STATUS_INTEL_BITS"": [ 8, {
				 ""McaErrorCode"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""ModelErrorCode"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":16,\""target\"":\""UInt64\""}"" ]],
				 ""OtherInfo"": [ 0, [ ""BitField"", ""{\""end_bit\"":37,\""start_bit\"":32,\""target\"":\""UInt64\""}"" ]],
				 ""FirmwareUpdateError"": [ 0, [ ""BitField"", ""{\""end_bit\"":38,\""start_bit\"":37,\""target\"":\""UInt64\""}"" ]],
				 ""CorrectedErrorCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":53,\""start_bit\"":38,\""target\"":\""UInt64\""}"" ]],
				 ""ThresholdErrorStatus"": [ 0, [ ""BitField"", ""{\""end_bit\"":55,\""start_bit\"":53,\""target\"":\""UInt64\""}"" ]],
				 ""ActionRequired"": [ 0, [ ""BitField"", ""{\""end_bit\"":56,\""start_bit\"":55,\""target\"":\""UInt64\""}"" ]],
				 ""Signalling"": [ 0, [ ""BitField"", ""{\""end_bit\"":57,\""start_bit\"":56,\""target\"":\""UInt64\""}"" ]],
				 ""ContextCorrupt"": [ 0, [ ""BitField"", ""{\""end_bit\"":58,\""start_bit\"":57,\""target\"":\""UInt64\""}"" ]],
				 ""AddressValid"": [ 0, [ ""BitField"", ""{\""end_bit\"":59,\""start_bit\"":58,\""target\"":\""UInt64\""}"" ]],
				 ""MiscValid"": [ 0, [ ""BitField"", ""{\""end_bit\"":60,\""start_bit\"":59,\""target\"":\""UInt64\""}"" ]],
				 ""ErrorEnabled"": [ 0, [ ""BitField"", ""{\""end_bit\"":61,\""start_bit\"":60,\""target\"":\""UInt64\""}"" ]],
				 ""UncorrectedError"": [ 0, [ ""BitField"", ""{\""end_bit\"":62,\""start_bit\"":61,\""target\"":\""UInt64\""}"" ]],
				 ""StatusOverFlow"": [ 0, [ ""BitField"", ""{\""end_bit\"":63,\""start_bit\"":62,\""target\"":\""UInt64\""}"" ]],
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":63,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 McaErrorCode
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65535) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 ModelErrorCode
		{
			get
			{
				// start: 16  end: 32  Mask: 11111111111111110000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294901760) >> 16;
				return (UInt64)value2;
			}
		}
		public UInt64 OtherInfo
		{
			get
			{
				// start: 32  end: 37  Mask: 1111100000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 133143986176) >> 32;
				return (UInt64)value2;
			}
		}
		public UInt64 FirmwareUpdateError
		{
			get
			{
				// start: 37  end: 38  Mask: 10000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 137438953472) >> 37;
				return (UInt64)value2;
			}
		}
		public UInt64 CorrectedErrorCount
		{
			get
			{
				// start: 38  end: 53  Mask: 11111111111111100000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 9006924376834048) >> 38;
				return (UInt64)value2;
			}
		}
		public UInt64 ThresholdErrorStatus
		{
			get
			{
				// start: 53  end: 55  Mask: 1100000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 27021597764222976) >> 53;
				return (UInt64)value2;
			}
		}
		public UInt64 ActionRequired
		{
			get
			{
				// start: 55  end: 56  Mask: 10000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 36028797018963968) >> 55;
				return (UInt64)value2;
			}
		}
		public UInt64 Signalling
		{
			get
			{
				// start: 56  end: 57  Mask: 100000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 72057594037927936) >> 56;
				return (UInt64)value2;
			}
		}
		public UInt64 ContextCorrupt
		{
			get
			{
				// start: 57  end: 58  Mask: 1000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 144115188075855872) >> 57;
				return (UInt64)value2;
			}
		}
		public UInt64 AddressValid
		{
			get
			{
				// start: 58  end: 59  Mask: 10000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 288230376151711744) >> 58;
				return (UInt64)value2;
			}
		}
		public UInt64 MiscValid
		{
			get
			{
				// start: 59  end: 60  Mask: 100000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 576460752303423488) >> 59;
				return (UInt64)value2;
			}
		}
		public UInt64 ErrorEnabled
		{
			get
			{
				// start: 60  end: 61  Mask: 1000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1152921504606846976) >> 60;
				return (UInt64)value2;
			}
		}
		public UInt64 UncorrectedError
		{
			get
			{
				// start: 61  end: 62  Mask: 10000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2305843009213693952) >> 61;
				return (UInt64)value2;
			}
		}
		public UInt64 StatusOverFlow
		{
			get
			{
				// start: 62  end: 63  Mask: 100000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4611686018427387904) >> 62;
				return (UInt64)value2;
			}
		}
		public UInt64 Valid
		{
			get
			{
				// start: 63  end: 64  Mask: 1000000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 9223372036854775808) >> 63;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _WHEA_PROCESSOR_GENERIC_ERROR_SECTION
 
	public class _WHEA_PROCESSOR_GENERIC_ERROR_SECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_PROCESSOR_GENERIC_ERROR_SECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 192; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_PROCESSOR_GENERIC_ERROR_SECTION"": [ 192, {
				 ""ValidBits"": [ 0, [ ""_WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS"", ""null"" ]],
				 ""ProcessorType"": [ 8, [ ""Byte"", ""null"" ]],
				 ""InstructionSet"": [ 9, [ ""Byte"", ""null"" ]],
				 ""ErrorType"": [ 10, [ ""Byte"", ""null"" ]],
				 ""Operation"": [ 11, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 12, [ ""Byte"", ""null"" ]],
				 ""Level"": [ 13, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 14, [ ""UInt16"", ""null"" ]],
				 ""CPUVersion"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""CPUBrandString"": [ 24, [ ""Array"", ""{\""count\"":128,\""target\"":\""Byte\""}"" ]],
				 ""ProcessorId"": [ 152, [ ""UInt64"", ""null"" ]],
				 ""TargetAddress"": [ 160, [ ""UInt64"", ""null"" ]],
				 ""RequesterId"": [ 168, [ ""UInt64"", ""null"" ]],
				 ""ResponderId"": [ 176, [ ""UInt64"", ""null"" ]],
				 ""InstructionPointer"": [ 184, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS ValidBits
		{
			get
			{
				_WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS returnValue = new _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte ProcessorType{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte InstructionSet{ get { return _StructureData[_BufferOffset +9]; } }
		public Byte ErrorType{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte Operation{ get { return _StructureData[_BufferOffset +11]; } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte Level{ get { return _StructureData[_BufferOffset +13]; } }
		public UInt16 Reserved { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 14); } }
		public UInt64 CPUVersion { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Byte[] CPUBrandString
		{
			get
			{
				Byte[] returnValue = new Byte[128];
				for(int i=0; i<128; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 24];
				return returnValue;
			}
		}
		public UInt64 ProcessorId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 TargetAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 RequesterId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 ResponderId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 InstructionPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
	}
	#endregion
	#region _MAPIC
 
	public class _MAPIC
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MAPIC(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MAPIC"": [ 48, {
				 ""Header"": [ 0, [ ""_DESCRIPTION_HEADER"", ""null"" ]],
				 ""LocalAPICAddress"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""APICTables"": [ 44, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _DESCRIPTION_HEADER Header
		{
			get
			{
				_DESCRIPTION_HEADER returnValue = new _DESCRIPTION_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 LocalAPICAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32[] APICTables
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 44);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DMA_OPERATIONS
 
	public class _DMA_OPERATIONS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DMA_OPERATIONS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 312; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DMA_OPERATIONS"": [ 312, {
				 ""Size"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""PutDmaAdapter"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AllocateCommonBuffer"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FreeCommonBuffer"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AllocateAdapterChannel"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FlushAdapterBuffers"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FreeAdapterChannel"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FreeMapRegisters"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MapTransfer"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetDmaAlignment"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReadDmaCounter"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetScatterGatherList"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PutScatterGatherList"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CalculateScatterGatherList"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BuildScatterGatherList"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BuildMdlFromScatterGatherList"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetDmaAdapterInfo"": [ 128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetDmaTransferInfo"": [ 136, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InitializeDmaTransferContext"": [ 144, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AllocateCommonBufferEx"": [ 152, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AllocateAdapterChannelEx"": [ 160, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ConfigureAdapterChannel"": [ 168, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CancelAdapterChannel"": [ 176, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MapTransferEx"": [ 184, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetScatterGatherListEx"": [ 192, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BuildScatterGatherListEx"": [ 200, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FlushAdapterBuffersEx"": [ 208, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FreeAdapterObject"": [ 216, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CancelMappedTransfer"": [ 224, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AllocateDomainCommonBuffer"": [ 232, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FlushDmaBuffer"": [ 240, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""JoinDmaDomain"": [ 248, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LeaveDmaDomain"": [ 256, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetDmaDomain"": [ 264, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AllocateCommonBufferWithBounds"": [ 272, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AllocateCommonBufferVector"": [ 280, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetCommonBufferFromVectorByIndex"": [ 288, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FreeCommonBufferFromVector"": [ 296, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FreeCommonBufferVector"": [ 304, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 PutDmaAdapter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 AllocateCommonBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 FreeCommonBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 AllocateAdapterChannel { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 FlushAdapterBuffers { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 FreeAdapterChannel { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 FreeMapRegisters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 MapTransfer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 GetDmaAlignment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 ReadDmaCounter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 GetScatterGatherList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 PutScatterGatherList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 CalculateScatterGatherList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 BuildScatterGatherList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 BuildMdlFromScatterGatherList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 GetDmaAdapterInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 GetDmaTransferInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 InitializeDmaTransferContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 AllocateCommonBufferEx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 AllocateAdapterChannelEx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 ConfigureAdapterChannel { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 CancelAdapterChannel { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 MapTransferEx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public UInt64 GetScatterGatherListEx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt64 BuildScatterGatherListEx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 FlushAdapterBuffersEx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 FreeAdapterObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 CancelMappedTransfer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 AllocateDomainCommonBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 FlushDmaBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 JoinDmaDomain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public UInt64 LeaveDmaDomain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public UInt64 GetDmaDomain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 264); } }
		public UInt64 AllocateCommonBufferWithBounds { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public UInt64 AllocateCommonBufferVector { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 280); } }
		public UInt64 GetCommonBufferFromVectorByIndex { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 288); } }
		public UInt64 FreeCommonBufferFromVector { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 296); } }
		public UInt64 FreeCommonBufferVector { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 304); } }
	}
	#endregion
	#region _IO_RESOURCE_DESCRIPTOR
 
	public class _IO_RESOURCE_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_RESOURCE_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_RESOURCE_DESCRIPTOR"": [ 32, {
				 ""Option"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Type"": [ 1, [ ""Byte"", ""null"" ]],
				 ""ShareDisposition"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Spare1"": [ 3, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Spare2"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""u"": [ 8, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Option{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Type{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte ShareDisposition{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Spare1{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Spare2 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SCATTER_GATHER_ELEMENT
 
	public class _SCATTER_GATHER_ELEMENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SCATTER_GATHER_ELEMENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SCATTER_GATHER_ELEMENT"": [ 24, {
				 ""Address"": [ 0, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Length"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LARGE_INTEGER Address
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 Reserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _KTB_FLUSH_VA
 
	public class _KTB_FLUSH_VA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTB_FLUSH_VA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTB_FLUSH_VA"": [ 8, {
				 ""u1"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ACCESS_STATE
 
	public class _ACCESS_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ACCESS_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ACCESS_STATE"": [ 160, {
				 ""OperationID"": [ 0, [ ""_LUID"", ""null"" ]],
				 ""SecurityEvaluated"": [ 8, [ ""Byte"", ""null"" ]],
				 ""GenerateAudit"": [ 9, [ ""Byte"", ""null"" ]],
				 ""GenerateOnClose"": [ 10, [ ""Byte"", ""null"" ]],
				 ""PrivilegesAllocated"": [ 11, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""RemainingDesiredAccess"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""PreviouslyGrantedAccess"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""OriginalDesiredAccess"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""SubjectSecurityContext"": [ 32, [ ""_SECURITY_SUBJECT_CONTEXT"", ""null"" ]],
				 ""SecurityDescriptor"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AuxData"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Privileges"": [ 80, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""AuditPrivileges"": [ 124, [ ""Byte"", ""null"" ]],
				 ""ObjectName"": [ 128, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ObjectTypeName"": [ 144, [ ""_UNICODE_STRING"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LUID OperationID
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte SecurityEvaluated{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte GenerateAudit{ get { return _StructureData[_BufferOffset +9]; } }
		public Byte GenerateOnClose{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte PrivilegesAllocated{ get { return _StructureData[_BufferOffset +11]; } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 RemainingDesiredAccess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 PreviouslyGrantedAccess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 OriginalDesiredAccess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _SECURITY_SUBJECT_CONTEXT SubjectSecurityContext
		{
			get
			{
				_SECURITY_SUBJECT_CONTEXT returnValue = new _SECURITY_SUBJECT_CONTEXT(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 SecurityDescriptor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 AuxData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public _ANONYMOUS_TAG Privileges
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public Byte AuditPrivileges{ get { return _StructureData[_BufferOffset +124]; } }
		public _UNICODE_STRING ObjectName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public _UNICODE_STRING ObjectTypeName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 144);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HALP_EMERGENCY_LA_QUEUE_ENTRY
 
	public class _HALP_EMERGENCY_LA_QUEUE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HALP_EMERGENCY_LA_QUEUE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HALP_EMERGENCY_LA_QUEUE_ENTRY"": [ 24, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""EntryType"": [ 16, [ ""Enumeration"", ""{\""enum_name\"":\""_HALP_EMERGENCY_LA_QUEUE_TYPE\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _HALP_EMERGENCY_LA_QUEUE_TYPE EntryType { get { return (_HALP_EMERGENCY_LA_QUEUE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _HALP_DMA_ADAPTER_OBJECT
 
	public class _HALP_DMA_ADAPTER_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HALP_DMA_ADAPTER_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 152; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HALP_DMA_ADAPTER_OBJECT"": [ 152, {
				 ""DmaHeader"": [ 0, [ ""_DMA_ADAPTER"", ""null"" ]],
				 ""ContiguousMapRegisters"": [ 16, [ ""Pointer"", ""{\""target\"":\""_RTL_BITMAP\""}"" ]],
				 ""ScatterBufferListHead"": [ 24, [ ""Pointer"", ""{\""target\"":\""_HALP_DMA_TRANSLATION_ENTRY\""}"" ]],
				 ""NumberOfFreeScatterBuffers"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""ContiguousTranslations"": [ 40, [ ""Pointer"", ""{\""target\"":\""_HALP_DMA_TRANSLATION_BUFFER\""}"" ]],
				 ""ScatterTranslations"": [ 48, [ ""Pointer"", ""{\""target\"":\""_HALP_DMA_TRANSLATION_BUFFER\""}"" ]],
				 ""ContiguousTranslationEnd"": [ 56, [ ""_HALP_DMA_TRANSLATION_BUFFER_POSITION"", ""null"" ]],
				 ""ScatterTranslationEnd"": [ 72, [ ""_HALP_DMA_TRANSLATION_BUFFER_POSITION"", ""null"" ]],
				 ""CrashDump"": [ 88, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""SpinLock"": [ 120, [ ""UInt64"", ""null"" ]],
				 ""GrowLock"": [ 128, [ ""UInt64"", ""null"" ]],
				 ""MaximumPhysicalAddress"": [ 136, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""IsMasterAdapter"": [ 144, [ ""Byte"", ""null"" ]],
				 ""DmaCanCross64K"": [ 145, [ ""Byte"", ""null"" ]],
				 ""LibraryVersion"": [ 148, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _DMA_ADAPTER DmaHeader
		{
			get
			{
				_DMA_ADAPTER returnValue = new _DMA_ADAPTER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 ContiguousMapRegisters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 ScatterBufferListHead { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 NumberOfFreeScatterBuffers { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 ContiguousTranslations { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 ScatterTranslations { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _HALP_DMA_TRANSLATION_BUFFER_POSITION ContiguousTranslationEnd
		{
			get
			{
				_HALP_DMA_TRANSLATION_BUFFER_POSITION returnValue = new _HALP_DMA_TRANSLATION_BUFFER_POSITION(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _HALP_DMA_TRANSLATION_BUFFER_POSITION ScatterTranslationEnd
		{
			get
			{
				_HALP_DMA_TRANSLATION_BUFFER_POSITION returnValue = new _HALP_DMA_TRANSLATION_BUFFER_POSITION(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG CrashDump
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public UInt64 SpinLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 GrowLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public _LARGE_INTEGER MaximumPhysicalAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public Byte IsMasterAdapter{ get { return _StructureData[_BufferOffset +144]; } }
		public Byte DmaCanCross64K{ get { return _StructureData[_BufferOffset +145]; } }
		public UInt32 LibraryVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 148); } }
	}
	#endregion
	#region _KDESCRIPTOR
 
	public class _KDESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KDESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KDESCRIPTOR"": [ 16, {
				 ""Pad"": [ 0, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt16\""}"" ]],
				 ""Limit"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""Base"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16[] Pad
		{
			get
			{
				UInt16[] returnValue = new UInt16[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt16 Limit { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt64 Base { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _EXCEPTION_RECORD
 
	public class _EXCEPTION_RECORD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXCEPTION_RECORD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 152; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXCEPTION_RECORD"": [ 152, {
				 ""ExceptionCode"": [ 0, [ ""Int32"", ""null"" ]],
				 ""ExceptionFlags"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ExceptionRecord"": [ 8, [ ""Pointer"", ""{\""target\"":\""_EXCEPTION_RECORD\""}"" ]],
				 ""ExceptionAddress"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberParameters"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""ExceptionInformation"": [ 32, [ ""Array"", ""{\""count\"":15,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 ExceptionCode { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ExceptionFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 ExceptionRecord { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ExceptionAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 NumberParameters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt64[] ExceptionInformation
		{
			get
			{
				UInt64[] returnValue = new UInt64[15];
				for(int i=0; i<15; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS
 
	public class _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_PROCESSOR_GENERIC_ERROR_SECTION_VALIDBITS"": [ 8, {
				 ""ProcessorType"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""InstructionSet"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""ErrorType"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""Operation"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""Flags"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""Level"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""CPUVersion"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt64\""}"" ]],
				 ""CPUBrandString"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt64\""}"" ]],
				 ""ProcessorId"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""TargetAddress"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt64\""}"" ]],
				 ""RequesterId"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""ResponderId"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""InstructionPointer"": [ 0, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":13,\""target\"":\""UInt64\""}"" ]],
				 ""ValidBits"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ProcessorType
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 InstructionSet
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 ErrorType
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 Operation
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt64)value2;
			}
		}
		public UInt64 Flags
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt64)value2;
			}
		}
		public UInt64 Level
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt64)value2;
			}
		}
		public UInt64 CPUVersion
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt64)value2;
			}
		}
		public UInt64 CPUBrandString
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt64)value2;
			}
		}
		public UInt64 ProcessorId
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt64)value2;
			}
		}
		public UInt64 TargetAddress
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt64)value2;
			}
		}
		public UInt64 RequesterId
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 ResponderId
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 InstructionPointer
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4096) >> 12;
				return (UInt64)value2;
			}
		}
		public UInt64 Reserved
		{
			get
			{
				// start: 13  end: 64  Mask: 1111111111111111111111111111111111111111111111111110000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744073709543424) >> 13;
				return (UInt64)value2;
			}
		}
		public UInt64 ValidBits { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _WHEA_ERROR_RECORD_HEADER_FLAGS
 
	public class _WHEA_ERROR_RECORD_HEADER_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_ERROR_RECORD_HEADER_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_ERROR_RECORD_HEADER_FLAGS"": [ 4, {
				 ""Recovered"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""PreviousError"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""Simulated"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""DeviceDriver"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""CriticalEvent"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""PersistPfn"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""AsULONG"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Recovered
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 PreviousError
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 Simulated
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 DeviceDriver
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 CriticalEvent
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 PersistPfn
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 6  end: 32  Mask: 11111111111111111111111111000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967232) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 AsULONG { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _DMA_TRANSFER_INFO
 
	public class _DMA_TRANSFER_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DMA_TRANSFER_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DMA_TRANSFER_INFO"": [ 20, {
				 ""Version"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""V1"": [ 4, [ ""_DMA_TRANSFER_INFO_V1"", ""null"" ]],
				 ""V2"": [ 4, [ ""_DMA_TRANSFER_INFO_V2"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _DMA_TRANSFER_INFO_V1 V1
		{
			get
			{
				_DMA_TRANSFER_INFO_V1 returnValue = new _DMA_TRANSFER_INFO_V1(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public _DMA_TRANSFER_INFO_V2 V2
		{
			get
			{
				_DMA_TRANSFER_INFO_V2 returnValue = new _DMA_TRANSFER_INFO_V2(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MCI_STATUS_BITS_COMMON
 
	public class _MCI_STATUS_BITS_COMMON
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MCI_STATUS_BITS_COMMON(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MCI_STATUS_BITS_COMMON"": [ 8, {
				 ""McaErrorCode"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""ModelErrorCode"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":16,\""target\"":\""UInt64\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":57,\""start_bit\"":32,\""target\"":\""UInt64\""}"" ]],
				 ""ContextCorrupt"": [ 0, [ ""BitField"", ""{\""end_bit\"":58,\""start_bit\"":57,\""target\"":\""UInt64\""}"" ]],
				 ""AddressValid"": [ 0, [ ""BitField"", ""{\""end_bit\"":59,\""start_bit\"":58,\""target\"":\""UInt64\""}"" ]],
				 ""MiscValid"": [ 0, [ ""BitField"", ""{\""end_bit\"":60,\""start_bit\"":59,\""target\"":\""UInt64\""}"" ]],
				 ""ErrorEnabled"": [ 0, [ ""BitField"", ""{\""end_bit\"":61,\""start_bit\"":60,\""target\"":\""UInt64\""}"" ]],
				 ""UncorrectedError"": [ 0, [ ""BitField"", ""{\""end_bit\"":62,\""start_bit\"":61,\""target\"":\""UInt64\""}"" ]],
				 ""StatusOverFlow"": [ 0, [ ""BitField"", ""{\""end_bit\"":63,\""start_bit\"":62,\""target\"":\""UInt64\""}"" ]],
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":63,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 McaErrorCode
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65535) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 ModelErrorCode
		{
			get
			{
				// start: 16  end: 32  Mask: 11111111111111110000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294901760) >> 16;
				return (UInt64)value2;
			}
		}
		public UInt64 Reserved
		{
			get
			{
				// start: 32  end: 57  Mask: 111111111111111111111111100000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 144115183780888576) >> 32;
				return (UInt64)value2;
			}
		}
		public UInt64 ContextCorrupt
		{
			get
			{
				// start: 57  end: 58  Mask: 1000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 144115188075855872) >> 57;
				return (UInt64)value2;
			}
		}
		public UInt64 AddressValid
		{
			get
			{
				// start: 58  end: 59  Mask: 10000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 288230376151711744) >> 58;
				return (UInt64)value2;
			}
		}
		public UInt64 MiscValid
		{
			get
			{
				// start: 59  end: 60  Mask: 100000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 576460752303423488) >> 59;
				return (UInt64)value2;
			}
		}
		public UInt64 ErrorEnabled
		{
			get
			{
				// start: 60  end: 61  Mask: 1000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1152921504606846976) >> 60;
				return (UInt64)value2;
			}
		}
		public UInt64 UncorrectedError
		{
			get
			{
				// start: 61  end: 62  Mask: 10000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2305843009213693952) >> 61;
				return (UInt64)value2;
			}
		}
		public UInt64 StatusOverFlow
		{
			get
			{
				// start: 62  end: 63  Mask: 100000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4611686018427387904) >> 62;
				return (UInt64)value2;
			}
		}
		public UInt64 Valid
		{
			get
			{
				// start: 63  end: 64  Mask: 1000000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 9223372036854775808) >> 63;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _DMA_TRANSFER_INFO_V2
 
	public class _DMA_TRANSFER_INFO_V2
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DMA_TRANSFER_INFO_V2(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DMA_TRANSFER_INFO_V2"": [ 16, {
				 ""MapRegisterCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ScatterGatherElementCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ScatterGatherListSize"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""LogicalPageCount"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 MapRegisterCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ScatterGatherElementCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ScatterGatherListSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 LogicalPageCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _WHEA_RECOVERY_CONTEXT
 
	public class _WHEA_RECOVERY_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_RECOVERY_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_RECOVERY_CONTEXT"": [ 32, {
				 ""MemoryError"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""PmemError"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""PartitionId"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""VpIndex"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""ErrorType"": [ 28, [ ""Enumeration"", ""{\""enum_name\"":\""_WHEA_RECOVERY_CONTEXT_ERROR_TYPE\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG MemoryError
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG PmemError
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 PartitionId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 VpIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _WHEA_RECOVERY_CONTEXT_ERROR_TYPE ErrorType { get { return (_WHEA_RECOVERY_CONTEXT_ERROR_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _HALP_DMA_TRANSLATION_BUFFER
 
	public class _HALP_DMA_TRANSLATION_BUFFER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HALP_DMA_TRANSLATION_BUFFER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HALP_DMA_TRANSLATION_BUFFER"": [ 24, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_HALP_DMA_TRANSLATION_BUFFER\""}"" ]],
				 ""EntryCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Entries"": [ 16, [ ""Pointer"", ""{\""target\"":\""_HALP_DMA_TRANSLATION_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 EntryCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 Entries { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _SECONDARY_INTERRUPT_PROVIDER_INTERFACE
 
	public class _SECONDARY_INTERRUPT_PROVIDER_INTERFACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECONDARY_INTERRUPT_PROVIDER_INTERFACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECONDARY_INTERRUPT_PROVIDER_INTERFACE"": [ 88, {
				 ""Size"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Version"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Context"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GsivBase"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""GsivSize"": [ 20, [ ""UInt16"", ""null"" ]],
				 ""DriverObject"": [ 24, [ ""Pointer"", ""{\""target\"":\""_DRIVER_OBJECT\""}"" ]],
				 ""Reserved1"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Reserved2"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Reserved3"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Reserved4"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Reserved5"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Reserved6"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Reserved7"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 GsivBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt16 GsivSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 20); } }
		public UInt64 DriverObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 Reserved1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 Reserved2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 Reserved3 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Reserved4 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 Reserved5 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 Reserved6 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 Reserved7 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
	}
	#endregion
	#region _HALP_DMA_DOMAIN_OBJECT
 
	public class _HALP_DMA_DOMAIN_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HALP_DMA_DOMAIN_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 136; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HALP_DMA_DOMAIN_OBJECT"": [ 136, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""MaximumPhysicalAddress"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""BoundaryAddressMultiple"": [ 24, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""CacheCoherent"": [ 32, [ ""Byte"", ""null"" ]],
				 ""FirmwareReserved"": [ 33, [ ""Byte"", ""null"" ]],
				 ""IommuDomainPointer"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LaState"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LaStateLock"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""TranslationType"": [ 64, [ ""Enumeration"", ""{\""enum_name\"":\""_EXT_IOMMU_TRANSLATION_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""OwningAdapter"": [ 72, [ ""Pointer"", ""{\""target\"":\""_ADAPTER_OBJECT\""}"" ]],
				 ""CommonBufferRoot"": [ 80, [ ""_RTL_RB_TREE"", ""null"" ]],
				 ""CommonBufferTreeLock"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""VectorCommonBufferListHead"": [ 104, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""VectorCommonBufferLock"": [ 120, [ ""UInt64"", ""null"" ]],
				 ""DomainRefCount"": [ 128, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LARGE_INTEGER MaximumPhysicalAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LARGE_INTEGER BoundaryAddressMultiple
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public Byte CacheCoherent{ get { return _StructureData[_BufferOffset +32]; } }
		public Byte FirmwareReserved{ get { return _StructureData[_BufferOffset +33]; } }
		public UInt64 IommuDomainPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 LaState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 LaStateLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public _EXT_IOMMU_TRANSLATION_TYPE TranslationType { get { return (_EXT_IOMMU_TRANSLATION_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt64 OwningAdapter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public _RTL_RB_TREE CommonBufferRoot
		{
			get
			{
				_RTL_RB_TREE returnValue = new _RTL_RB_TREE(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt64 CommonBufferTreeLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public _LIST_ENTRY VectorCommonBufferListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt64 VectorCommonBufferLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt32 DomainRefCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
	}
	#endregion
	#region _CM_FULL_RESOURCE_DESCRIPTOR
 
	public class _CM_FULL_RESOURCE_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_FULL_RESOURCE_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 36; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_FULL_RESOURCE_DESCRIPTOR"": [ 36, {
				 ""InterfaceType"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_INTERFACE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""BusNumber"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""PartialResourceList"": [ 8, [ ""_CM_PARTIAL_RESOURCE_LIST"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _INTERFACE_TYPE InterfaceType { get { return (_INTERFACE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _CM_PARTIAL_RESOURCE_LIST PartialResourceList
		{
			get
			{
				_CM_PARTIAL_RESOURCE_LIST returnValue = new _CM_PARTIAL_RESOURCE_LIST(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DMA_TRANSFER_INFO_V1
 
	public class _DMA_TRANSFER_INFO_V1
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DMA_TRANSFER_INFO_V1(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DMA_TRANSFER_INFO_V1"": [ 12, {
				 ""MapRegisterCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ScatterGatherElementCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ScatterGatherListSize"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 MapRegisterCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ScatterGatherElementCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ScatterGatherListSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _FAST_IO_DISPATCH
 
	public class _FAST_IO_DISPATCH
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FAST_IO_DISPATCH(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 224; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FAST_IO_DISPATCH"": [ 224, {
				 ""SizeOfFastIoDispatch"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""FastIoCheckIfPossible"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoRead"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoWrite"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoQueryBasicInfo"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoQueryStandardInfo"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoLock"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoUnlockSingle"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoUnlockAll"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoUnlockAllByKey"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoDeviceControl"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AcquireFileForNtCreateSection"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReleaseFileForNtCreateSection"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoDetachDevice"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoQueryNetworkOpenInfo"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AcquireForModWrite"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MdlRead"": [ 128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MdlReadComplete"": [ 136, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PrepareMdlWrite"": [ 144, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MdlWriteComplete"": [ 152, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoReadCompressed"": [ 160, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoWriteCompressed"": [ 168, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MdlReadCompleteCompressed"": [ 176, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MdlWriteCompleteCompressed"": [ 184, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastIoQueryOpen"": [ 192, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReleaseForModWrite"": [ 200, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AcquireForCcFlush"": [ 208, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReleaseForCcFlush"": [ 216, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SizeOfFastIoDispatch { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 FastIoCheckIfPossible { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 FastIoRead { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 FastIoWrite { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 FastIoQueryBasicInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 FastIoQueryStandardInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 FastIoLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 FastIoUnlockSingle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 FastIoUnlockAll { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 FastIoUnlockAllByKey { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 FastIoDeviceControl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 AcquireFileForNtCreateSection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 ReleaseFileForNtCreateSection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 FastIoDetachDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 FastIoQueryNetworkOpenInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 AcquireForModWrite { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 MdlRead { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 MdlReadComplete { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 PrepareMdlWrite { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 MdlWriteComplete { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 FastIoReadCompressed { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 FastIoWriteCompressed { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 MdlReadCompleteCompressed { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 MdlWriteCompleteCompressed { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public UInt64 FastIoQueryOpen { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt64 ReleaseForModWrite { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 AcquireForCcFlush { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 ReleaseForCcFlush { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
	}
	#endregion
	#region _HALP_DMA_TRANSLATION_ENTRY
 
	public class _HALP_DMA_TRANSLATION_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HALP_DMA_TRANSLATION_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HALP_DMA_TRANSLATION_ENTRY"": [ 72, {
				 ""PhysicalAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Next"": [ 8, [ ""Pointer"", ""{\""target\"":\""_HALP_DMA_TRANSLATION_ENTRY\""}"" ]],
				 ""MappedLength"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""LogicalAddress"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""LogicalMappedLength"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""NextLogicalAddress"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""u"": [ 48, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""NextMapping"": [ 56, [ ""Pointer"", ""{\""target\"":\""_HALP_DMA_TRANSLATION_ENTRY\""}"" ]],
				 ""LogicalBounceBufferPremapped"": [ 64, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PhysicalAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 MappedLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 LogicalAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 LogicalMappedLength { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 NextLogicalAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt64 NextMapping { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public Byte LogicalBounceBufferPremapped{ get { return _StructureData[_BufferOffset +64]; } }
	}
	#endregion
	#region _ERESOURCE
 
	public class _ERESOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ERESOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 104; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ERESOURCE"": [ 104, {
				 ""SystemResourcesList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""OwnerTable"": [ 16, [ ""Pointer"", ""{\""target\"":\""_OWNER_ENTRY\""}"" ]],
				 ""ActiveCount"": [ 24, [ ""Int16"", ""null"" ]],
				 ""Flag"": [ 26, [ ""UInt16"", ""null"" ]],
				 ""ReservedLowFlags"": [ 26, [ ""Byte"", ""null"" ]],
				 ""WaiterPriority"": [ 27, [ ""Byte"", ""null"" ]],
				 ""SharedWaiters"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ExclusiveWaiters"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OwnerEntry"": [ 48, [ ""_OWNER_ENTRY"", ""null"" ]],
				 ""ActiveEntries"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""ContentionCount"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""NumberOfSharedWaiters"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""NumberOfExclusiveWaiters"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""Reserved2"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Address"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CreatorBackTraceIndex"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""SpinLock"": [ 96, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY SystemResourcesList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 OwnerTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Int16 ActiveCount { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 24); } }
		public UInt16 Flag { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 26); } }
		public Byte ReservedLowFlags{ get { return _StructureData[_BufferOffset +26]; } }
		public Byte WaiterPriority{ get { return _StructureData[_BufferOffset +27]; } }
		public UInt64 SharedWaiters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 ExclusiveWaiters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _OWNER_ENTRY OwnerEntry
		{
			get
			{
				_OWNER_ENTRY returnValue = new _OWNER_ENTRY(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 ActiveEntries { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 ContentionCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 NumberOfSharedWaiters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 NumberOfExclusiveWaiters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt64 Reserved2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 Address { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 CreatorBackTraceIndex { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 SpinLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
	}
	#endregion
	#region _DMA_FUNCTION_TABLE
 
	public class _DMA_FUNCTION_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DMA_FUNCTION_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DMA_FUNCTION_TABLE"": [ 80, {
				 ""InitializeController"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ValidateRequestLineBinding"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""QueryMaxFragments"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProgramChannel"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ConfigureChannel"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FlushChannel"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HandleInterrupt"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReadDmaCounter"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReportCommonBuffer"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CancelTransfer"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 InitializeController { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ValidateRequestLineBinding { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 QueryMaxFragments { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 ProgramChannel { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ConfigureChannel { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 FlushChannel { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 HandleInterrupt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 ReadDmaCounter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 ReportCommonBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 CancelTransfer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
	}
	#endregion
	#region _EXT_IOMMU_DEVICE_ID
 
	public class _EXT_IOMMU_DEVICE_ID
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXT_IOMMU_DEVICE_ID(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXT_IOMMU_DEVICE_ID"": [ 24, {
				 ""DeviceType"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_EXT_IOMMU_DEVICE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Pci"": [ 8, [ ""_EXT_IOMMU_DEVICE_ID_PCI"", ""null"" ]],
				 ""Acpi"": [ 8, [ ""_EXT_IOMMU_DEVICE_ID_ACPI"", ""null"" ]],
				 ""IoApicId"": [ 8, [ ""Byte"", ""null"" ]],
				 ""LogicalId"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Test"": [ 8, [ ""_EXT_IOMMU_DEVICE_ID_TEST"", ""null"" ]],
				 ""Gic"": [ 8, [ ""_EXT_IOMMU_DEVICE_ID_GIC"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _EXT_IOMMU_DEVICE_TYPE DeviceType { get { return (_EXT_IOMMU_DEVICE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _EXT_IOMMU_DEVICE_ID_PCI Pci
		{
			get
			{
				_EXT_IOMMU_DEVICE_ID_PCI returnValue = new _EXT_IOMMU_DEVICE_ID_PCI(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _EXT_IOMMU_DEVICE_ID_ACPI Acpi
		{
			get
			{
				_EXT_IOMMU_DEVICE_ID_ACPI returnValue = new _EXT_IOMMU_DEVICE_ID_ACPI(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public Byte IoApicId{ get { return _StructureData[_BufferOffset +8]; } }
		public UInt64 LogicalId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _EXT_IOMMU_DEVICE_ID_TEST Test
		{
			get
			{
				_EXT_IOMMU_DEVICE_ID_TEST returnValue = new _EXT_IOMMU_DEVICE_ID_TEST(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _EXT_IOMMU_DEVICE_ID_GIC Gic
		{
			get
			{
				_EXT_IOMMU_DEVICE_ID_GIC returnValue = new _EXT_IOMMU_DEVICE_ID_GIC(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _FILE_BASIC_INFORMATION
 
	public class _FILE_BASIC_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FILE_BASIC_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FILE_BASIC_INFORMATION"": [ 40, {
				 ""CreationTime"": [ 0, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""LastAccessTime"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""LastWriteTime"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ChangeTime"": [ 24, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""FileAttributes"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LARGE_INTEGER CreationTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LARGE_INTEGER LastAccessTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _LARGE_INTEGER LastWriteTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ChangeTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 FileAttributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _DMA_TRANSFER_CONTEXT_V1
 
	public class _DMA_TRANSFER_CONTEXT_V1
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DMA_TRANSFER_CONTEXT_V1(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DMA_TRANSFER_CONTEXT_V1"": [ 88, {
				 ""DmaState"": [ 0, [ ""Int32"", ""null"" ]],
				 ""TransferState"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Wcb"": [ 8, [ ""_WAIT_CONTEXT_BLOCK"", ""null"" ]],
				 ""HalWcb"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 DmaState { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 TransferState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _WAIT_CONTEXT_BLOCK Wcb
		{
			get
			{
				_WAIT_CONTEXT_BLOCK returnValue = new _WAIT_CONTEXT_BLOCK(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 HalWcb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
	}
	#endregion
	#region _DMA_COMMON_BUFFER_VECTOR
 
	public class _DMA_COMMON_BUFFER_VECTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DMA_COMMON_BUFFER_VECTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DMA_COMMON_BUFFER_VECTOR"": [ 72, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SizeOfEntries"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""NumberOfEntries"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Domain"": [ 32, [ ""Pointer"", ""{\""target\"":\""_HALP_DMA_DOMAIN_OBJECT\""}"" ]],
				 ""Mdl"": [ 40, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""BaseAddress"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BaseLogicalAddress"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""Entries"": [ 64, [ ""Pointer"", ""{\""target\"":\""_DMA_COMMON_BUFFER_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 SizeOfEntries { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 NumberOfEntries { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt64 Domain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 Mdl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 BaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 BaseLogicalAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 Entries { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _PRIVILEGE_SET
 
	public class _PRIVILEGE_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PRIVILEGE_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PRIVILEGE_SET"": [ 20, {
				 ""PrivilegeCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Control"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Privilege"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PrivilegeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Control { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LUID_AND_ATTRIBUTES[] Privilege
		{
			get
			{
				_LUID_AND_ATTRIBUTES[] returnValue = new _LUID_AND_ATTRIBUTES[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _LUID_AND_ATTRIBUTES(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _INITIAL_PRIVILEGE_SET
 
	public class _INITIAL_PRIVILEGE_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _INITIAL_PRIVILEGE_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 44; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_INITIAL_PRIVILEGE_SET"": [ 44, {
				 ""PrivilegeCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Control"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Privilege"": [ 8, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PrivilegeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Control { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LUID_AND_ATTRIBUTES[] Privilege
		{
			get
			{
				_LUID_AND_ATTRIBUTES[] returnValue = new _LUID_AND_ATTRIBUTES[3];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<3; i++ )
					returnValue[i] = new _LUID_AND_ATTRIBUTES(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DMA_ADAPTER_INFO
 
	public class _DMA_ADAPTER_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DMA_ADAPTER_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DMA_ADAPTER_INFO"": [ 24, {
				 ""Version"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""V1"": [ 4, [ ""_DMA_ADAPTER_INFO_V1"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _DMA_ADAPTER_INFO_V1 V1
		{
			get
			{
				_DMA_ADAPTER_INFO_V1 returnValue = new _DMA_ADAPTER_INFO_V1(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HALP_DMA_TRANSLATION_BUFFER_POSITION
 
	public class _HALP_DMA_TRANSLATION_BUFFER_POSITION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HALP_DMA_TRANSLATION_BUFFER_POSITION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HALP_DMA_TRANSLATION_BUFFER_POSITION"": [ 16, {
				 ""Buffer"": [ 0, [ ""Pointer"", ""{\""target\"":\""_HALP_DMA_TRANSLATION_BUFFER\""}"" ]],
				 ""Offset"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Buffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Offset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _MCI_STATUS_AMD_BITS
 
	public class _MCI_STATUS_AMD_BITS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MCI_STATUS_AMD_BITS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MCI_STATUS_AMD_BITS"": [ 8, {
				 ""McaErrorCode"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""ModelErrorCode"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":16,\""target\"":\""UInt64\""}"" ]],
				 ""ImplementationSpecific2"": [ 0, [ ""BitField"", ""{\""end_bit\"":43,\""start_bit\"":32,\""target\"":\""UInt64\""}"" ]],
				 ""Poison"": [ 0, [ ""BitField"", ""{\""end_bit\"":44,\""start_bit\"":43,\""target\"":\""UInt64\""}"" ]],
				 ""Deferred"": [ 0, [ ""BitField"", ""{\""end_bit\"":45,\""start_bit\"":44,\""target\"":\""UInt64\""}"" ]],
				 ""ImplementationSpecific1"": [ 0, [ ""BitField"", ""{\""end_bit\"":57,\""start_bit\"":45,\""target\"":\""UInt64\""}"" ]],
				 ""ContextCorrupt"": [ 0, [ ""BitField"", ""{\""end_bit\"":58,\""start_bit\"":57,\""target\"":\""UInt64\""}"" ]],
				 ""AddressValid"": [ 0, [ ""BitField"", ""{\""end_bit\"":59,\""start_bit\"":58,\""target\"":\""UInt64\""}"" ]],
				 ""MiscValid"": [ 0, [ ""BitField"", ""{\""end_bit\"":60,\""start_bit\"":59,\""target\"":\""UInt64\""}"" ]],
				 ""ErrorEnabled"": [ 0, [ ""BitField"", ""{\""end_bit\"":61,\""start_bit\"":60,\""target\"":\""UInt64\""}"" ]],
				 ""UncorrectedError"": [ 0, [ ""BitField"", ""{\""end_bit\"":62,\""start_bit\"":61,\""target\"":\""UInt64\""}"" ]],
				 ""StatusOverFlow"": [ 0, [ ""BitField"", ""{\""end_bit\"":63,\""start_bit\"":62,\""target\"":\""UInt64\""}"" ]],
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":63,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 McaErrorCode
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65535) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 ModelErrorCode
		{
			get
			{
				// start: 16  end: 32  Mask: 11111111111111110000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294901760) >> 16;
				return (UInt64)value2;
			}
		}
		public UInt64 ImplementationSpecific2
		{
			get
			{
				// start: 32  end: 43  Mask: 1111111111100000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8791798054912) >> 32;
				return (UInt64)value2;
			}
		}
		public UInt64 Poison
		{
			get
			{
				// start: 43  end: 44  Mask: 10000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8796093022208) >> 43;
				return (UInt64)value2;
			}
		}
		public UInt64 Deferred
		{
			get
			{
				// start: 44  end: 45  Mask: 100000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 17592186044416) >> 44;
				return (UInt64)value2;
			}
		}
		public UInt64 ImplementationSpecific1
		{
			get
			{
				// start: 45  end: 57  Mask: 111111111111000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 144080003703767040) >> 45;
				return (UInt64)value2;
			}
		}
		public UInt64 ContextCorrupt
		{
			get
			{
				// start: 57  end: 58  Mask: 1000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 144115188075855872) >> 57;
				return (UInt64)value2;
			}
		}
		public UInt64 AddressValid
		{
			get
			{
				// start: 58  end: 59  Mask: 10000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 288230376151711744) >> 58;
				return (UInt64)value2;
			}
		}
		public UInt64 MiscValid
		{
			get
			{
				// start: 59  end: 60  Mask: 100000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 576460752303423488) >> 59;
				return (UInt64)value2;
			}
		}
		public UInt64 ErrorEnabled
		{
			get
			{
				// start: 60  end: 61  Mask: 1000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1152921504606846976) >> 60;
				return (UInt64)value2;
			}
		}
		public UInt64 UncorrectedError
		{
			get
			{
				// start: 61  end: 62  Mask: 10000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2305843009213693952) >> 61;
				return (UInt64)value2;
			}
		}
		public UInt64 StatusOverFlow
		{
			get
			{
				// start: 62  end: 63  Mask: 100000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4611686018427387904) >> 62;
				return (UInt64)value2;
			}
		}
		public UInt64 Valid
		{
			get
			{
				// start: 63  end: 64  Mask: 1000000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 9223372036854775808) >> 63;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _EXT_IOMMU_DEVICE_ID_ACPI
 
	public class _EXT_IOMMU_DEVICE_ID_ACPI
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXT_IOMMU_DEVICE_ID_ACPI(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXT_IOMMU_DEVICE_ID_ACPI"": [ 8, {
				 ""ObjectName"": [ 0, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ObjectName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _LUID_AND_ATTRIBUTES
 
	public class _LUID_AND_ATTRIBUTES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LUID_AND_ATTRIBUTES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LUID_AND_ATTRIBUTES"": [ 12, {
				 ""Luid"": [ 0, [ ""_LUID"", ""null"" ]],
				 ""Attributes"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LUID Luid
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Attributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _EXT_IOMMU_DEVICE_ID_TEST
 
	public class _EXT_IOMMU_DEVICE_ID_TEST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXT_IOMMU_DEVICE_ID_TEST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXT_IOMMU_DEVICE_ID_TEST"": [ 8, {
				 ""UniqueId"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 UniqueId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _FILE_NETWORK_OPEN_INFORMATION
 
	public class _FILE_NETWORK_OPEN_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FILE_NETWORK_OPEN_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FILE_NETWORK_OPEN_INFORMATION"": [ 56, {
				 ""CreationTime"": [ 0, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""LastAccessTime"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""LastWriteTime"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ChangeTime"": [ 24, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""AllocationSize"": [ 32, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""EndOfFile"": [ 40, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""FileAttributes"": [ 48, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LARGE_INTEGER CreationTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LARGE_INTEGER LastAccessTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _LARGE_INTEGER LastWriteTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ChangeTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LARGE_INTEGER AllocationSize
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _LARGE_INTEGER EndOfFile
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt32 FileAttributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _SECURITY_SUBJECT_CONTEXT
 
	public class _SECURITY_SUBJECT_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECURITY_SUBJECT_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECURITY_SUBJECT_CONTEXT"": [ 32, {
				 ""ClientToken"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ImpersonationLevel"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_SECURITY_IMPERSONATION_LEVEL\"",\""target\"":\""UInt32\""}"" ]],
				 ""PrimaryToken"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProcessAuditId"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ClientToken { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel { get { return (_SECURITY_IMPERSONATION_LEVEL)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 PrimaryToken { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 ProcessAuditId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _OWNER_ENTRY
 
	public class _OWNER_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OWNER_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OWNER_ENTRY"": [ 16, {
				 ""OwnerThread"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""IoPriorityBoosted"": [ 8, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""OwnerReferenced"": [ 8, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""IoQoSPriorityBoosted"": [ 8, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""OwnerCount"": [ 8, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""TableSize"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 OwnerThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 IoPriorityBoosted
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 OwnerReferenced
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 IoQoSPriorityBoosted
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 OwnerCount
		{
			get
			{
				// start: 3  end: 32  Mask: 11111111111111111111111111111000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 4294967288) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 TableSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _DMA_ADAPTER_INFO_V1
 
	public class _DMA_ADAPTER_INFO_V1
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DMA_ADAPTER_INFO_V1(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DMA_ADAPTER_INFO_V1"": [ 20, {
				 ""ReadDmaCounterAvailable"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ScatterGatherLimit"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DmaAddressWidth"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""MinimumTransferUnit"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ReadDmaCounterAvailable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ScatterGatherLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DmaAddressWidth { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 MinimumTransferUnit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _EXT_IOMMU_DEVICE_ID_GIC
 
	public class _EXT_IOMMU_DEVICE_ID_GIC
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXT_IOMMU_DEVICE_ID_GIC(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXT_IOMMU_DEVICE_ID_GIC"": [ 4, {
				 ""LineNumber"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 LineNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _FILE_STANDARD_INFORMATION
 
	public class _FILE_STANDARD_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FILE_STANDARD_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FILE_STANDARD_INFORMATION"": [ 24, {
				 ""AllocationSize"": [ 0, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""EndOfFile"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""NumberOfLinks"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""DeletePending"": [ 20, [ ""Byte"", ""null"" ]],
				 ""Directory"": [ 21, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LARGE_INTEGER AllocationSize
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LARGE_INTEGER EndOfFile
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 NumberOfLinks { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Byte DeletePending{ get { return _StructureData[_BufferOffset +20]; } }
		public Byte Directory{ get { return _StructureData[_BufferOffset +21]; } }
	}
	#endregion
	#region _EXT_IOMMU_DEVICE_ID_PCI
 
	public class _EXT_IOMMU_DEVICE_ID_PCI
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXT_IOMMU_DEVICE_ID_PCI(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXT_IOMMU_DEVICE_ID_PCI"": [ 16, {
				 ""AsUINT64"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""PciSegmentNumber"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""PhantomFunctionBits"": [ 2, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""BusRange"": [ 2, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt16\""}"" ]],
				 ""Reserved"": [ 2, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":3,\""target\"":\""UInt16\""}"" ]],
				 ""StartBusNumber"": [ 2, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":8,\""target\"":\""UInt16\""}"" ]],
				 ""Bdf"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""SubordinateBus"": [ 4, [ ""Byte"", ""null"" ]],
				 ""SecondaryBus"": [ 5, [ ""Byte"", ""null"" ]],
				 ""DevicePathLength"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""DevicePath"": [ 8, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 AsUINT64 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt16 PciSegmentNumber { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 PhantomFunctionBits
		{
			get
			{
				// start: 0  end: 2  Mask: 0000000000000011
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 3) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 BusRange
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 4) >> 2;
				return (UInt16)value2;
			}
		}
		public UInt16 Reserved
		{
			get
			{
				// start: 3  end: 8  Mask: 0000000011111000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 248) >> 3;
				return (UInt16)value2;
			}
		}
		public UInt16 StartBusNumber
		{
			get
			{
				// start: 8  end: 16  Mask: 1111111100000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 65280) >> 8;
				return (UInt16)value2;
			}
		}
		public UInt16 Bdf { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public Byte SubordinateBus{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte SecondaryBus{ get { return _StructureData[_BufferOffset +5]; } }
		public UInt16 DevicePathLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt64 DevicePath { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _CM_PARTIAL_RESOURCE_LIST
 
	public class _CM_PARTIAL_RESOURCE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_PARTIAL_RESOURCE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_PARTIAL_RESOURCE_LIST"": [ 28, {
				 ""Version"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Revision"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Count"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""PartialDescriptors"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Revision { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _CM_PARTIAL_RESOURCE_DESCRIPTOR[] PartialDescriptors
		{
			get
			{
				_CM_PARTIAL_RESOURCE_DESCRIPTOR[] returnValue = new _CM_PARTIAL_RESOURCE_DESCRIPTOR[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _CM_PARTIAL_RESOURCE_DESCRIPTOR(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_PARTIAL_RESOURCE_DESCRIPTOR
 
	public class _CM_PARTIAL_RESOURCE_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_PARTIAL_RESOURCE_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_PARTIAL_RESOURCE_DESCRIPTOR"": [ 20, {
				 ""Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""ShareDisposition"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""u"": [ 4, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Type{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte ShareDisposition{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DMA_COMMON_BUFFER_ENTRY
 
	public class _DMA_COMMON_BUFFER_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DMA_COMMON_BUFFER_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DMA_COMMON_BUFFER_ENTRY"": [ 16, {
				 ""VirtualAddress"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LogicalAddress"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 VirtualAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _LARGE_INTEGER LogicalAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DMA_REQUEST_LINE_BINDING_DESCRIPTION
 
	public class _DMA_REQUEST_LINE_BINDING_DESCRIPTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DMA_REQUEST_LINE_BINDING_DESCRIPTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DMA_REQUEST_LINE_BINDING_DESCRIPTION"": [ 8, {
				 ""RequestLine"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ChannelNumber"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 RequestLine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ChannelNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _DMA_SCATTER_GATHER_LIST
 
	public class _DMA_SCATTER_GATHER_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DMA_SCATTER_GATHER_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DMA_SCATTER_GATHER_LIST"": [ 16, {
				 ""NumberOfElements"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Elements"": [ 16, [ ""Array"", ""{\""count\"":0,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 NumberOfElements { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 Reserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _SCATTER_GATHER_ELEMENT[] Elements
		{
			get
			{
				_SCATTER_GATHER_ELEMENT[] returnValue = new _SCATTER_GATHER_ELEMENT[0];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<0; i++ )
					returnValue[i] = new _SCATTER_GATHER_ELEMENT(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PS_MITIGATION_OPTIONS_MAP
 
	public class _PS_MITIGATION_OPTIONS_MAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_MITIGATION_OPTIONS_MAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_MITIGATION_OPTIONS_MAP"": [ 24, {
				 ""Map"": [ 0, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64[] Map
		{
			get
			{
				UInt64[] returnValue = new UInt64[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PS_MITIGATION_AUDIT_OPTIONS_MAP
 
	public class _PS_MITIGATION_AUDIT_OPTIONS_MAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_MITIGATION_AUDIT_OPTIONS_MAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_MITIGATION_AUDIT_OPTIONS_MAP"": [ 24, {
				 ""Map"": [ 0, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64[] Map
		{
			get
			{
				UInt64[] returnValue = new UInt64[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KSYSTEM_TIME
 
	public class _KSYSTEM_TIME
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KSYSTEM_TIME(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KSYSTEM_TIME"": [ 12, {
				 ""LowPart"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""High1Time"": [ 4, [ ""Int32"", ""null"" ]],
				 ""High2Time"": [ 8, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 LowPart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 High1Time { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public Int32 High2Time { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _KUSER_SHARED_DATA
 
	public class _KUSER_SHARED_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KUSER_SHARED_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1824; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KUSER_SHARED_DATA"": [ 1824, {
				 ""TickCountLowDeprecated"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TickCountMultiplier"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""InterruptTime"": [ 8, [ ""_KSYSTEM_TIME"", ""null"" ]],
				 ""SystemTime"": [ 20, [ ""_KSYSTEM_TIME"", ""null"" ]],
				 ""TimeZoneBias"": [ 32, [ ""_KSYSTEM_TIME"", ""null"" ]],
				 ""ImageNumberLow"": [ 44, [ ""UInt16"", ""null"" ]],
				 ""ImageNumberHigh"": [ 46, [ ""UInt16"", ""null"" ]],
				 ""NtSystemRoot"": [ 48, [ ""Array"", ""{\""count\"":260,\""target\"":\""UInt16\""}"" ]],
				 ""MaxStackTraceDepth"": [ 568, [ ""UInt32"", ""null"" ]],
				 ""CryptoExponent"": [ 572, [ ""UInt32"", ""null"" ]],
				 ""TimeZoneId"": [ 576, [ ""UInt32"", ""null"" ]],
				 ""LargePageMinimum"": [ 580, [ ""UInt32"", ""null"" ]],
				 ""AitSamplingValue"": [ 584, [ ""UInt32"", ""null"" ]],
				 ""AppCompatFlag"": [ 588, [ ""UInt32"", ""null"" ]],
				 ""RNGSeedVersion"": [ 592, [ ""UInt64"", ""null"" ]],
				 ""GlobalValidationRunlevel"": [ 600, [ ""UInt32"", ""null"" ]],
				 ""TimeZoneBiasStamp"": [ 604, [ ""Int32"", ""null"" ]],
				 ""NtBuildNumber"": [ 608, [ ""UInt32"", ""null"" ]],
				 ""NtProductType"": [ 612, [ ""Enumeration"", ""{\""enum_name\"":\""_NT_PRODUCT_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ProductTypeIsValid"": [ 616, [ ""Byte"", ""null"" ]],
				 ""Reserved0"": [ 617, [ ""Array"", ""{\""count\"":1,\""target\"":\""Byte\""}"" ]],
				 ""NativeProcessorArchitecture"": [ 618, [ ""UInt16"", ""null"" ]],
				 ""NtMajorVersion"": [ 620, [ ""UInt32"", ""null"" ]],
				 ""NtMinorVersion"": [ 624, [ ""UInt32"", ""null"" ]],
				 ""ProcessorFeatures"": [ 628, [ ""Array"", ""{\""count\"":64,\""target\"":\""Byte\""}"" ]],
				 ""Reserved1"": [ 692, [ ""UInt32"", ""null"" ]],
				 ""Reserved3"": [ 696, [ ""UInt32"", ""null"" ]],
				 ""TimeSlip"": [ 700, [ ""UInt32"", ""null"" ]],
				 ""AlternativeArchitecture"": [ 704, [ ""Enumeration"", ""{\""enum_name\"":\""_ALTERNATIVE_ARCHITECTURE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""BootId"": [ 708, [ ""UInt32"", ""null"" ]],
				 ""SystemExpirationDate"": [ 712, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""SuiteMask"": [ 720, [ ""UInt32"", ""null"" ]],
				 ""KdDebuggerEnabled"": [ 724, [ ""Byte"", ""null"" ]],
				 ""MitigationPolicies"": [ 725, [ ""Byte"", ""null"" ]],
				 ""NXSupportPolicy"": [ 725, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""SEHValidationPolicy"": [ 725, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""CurDirDevicesSkippedForDlls"": [ 725, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""Reserved"": [ 725, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""CyclesPerYield"": [ 726, [ ""UInt16"", ""null"" ]],
				 ""ActiveConsoleId"": [ 728, [ ""UInt32"", ""null"" ]],
				 ""DismountCount"": [ 732, [ ""UInt32"", ""null"" ]],
				 ""ComPlusPackage"": [ 736, [ ""UInt32"", ""null"" ]],
				 ""LastSystemRITEventTickCount"": [ 740, [ ""UInt32"", ""null"" ]],
				 ""NumberOfPhysicalPages"": [ 744, [ ""UInt32"", ""null"" ]],
				 ""SafeBootMode"": [ 748, [ ""Byte"", ""null"" ]],
				 ""VirtualizationFlags"": [ 749, [ ""Byte"", ""null"" ]],
				 ""Reserved12"": [ 750, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""SharedDataFlags"": [ 752, [ ""UInt32"", ""null"" ]],
				 ""DbgErrorPortPresent"": [ 752, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""DbgElevationEnabled"": [ 752, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""DbgVirtEnabled"": [ 752, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""DbgInstallerDetectEnabled"": [ 752, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""DbgLkgEnabled"": [ 752, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""DbgDynProcessorEnabled"": [ 752, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""DbgConsoleBrokerEnabled"": [ 752, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""DbgSecureBootEnabled"": [ 752, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""DbgMultiSessionSku"": [ 752, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""DbgMultiUsersInSessionSku"": [ 752, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""DbgStateSeparationEnabled"": [ 752, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""SpareBits"": [ 752, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""DataFlagsPad"": [ 756, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""TestRetInstruction"": [ 760, [ ""UInt64"", ""null"" ]],
				 ""QpcFrequency"": [ 768, [ ""Int64"", ""null"" ]],
				 ""SystemCall"": [ 776, [ ""UInt32"", ""null"" ]],
				 ""Reserved2"": [ 780, [ ""UInt32"", ""null"" ]],
				 ""SystemCallPad"": [ 784, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""TickCount"": [ 800, [ ""_KSYSTEM_TIME"", ""null"" ]],
				 ""TickCountQuad"": [ 800, [ ""UInt64"", ""null"" ]],
				 ""ReservedTickCountOverlay"": [ 800, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""TickCountPad"": [ 812, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""Cookie"": [ 816, [ ""UInt32"", ""null"" ]],
				 ""CookiePad"": [ 820, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""ConsoleSessionForegroundProcessId"": [ 824, [ ""Int64"", ""null"" ]],
				 ""TimeUpdateLock"": [ 832, [ ""UInt64"", ""null"" ]],
				 ""BaselineSystemTimeQpc"": [ 840, [ ""UInt64"", ""null"" ]],
				 ""BaselineInterruptTimeQpc"": [ 848, [ ""UInt64"", ""null"" ]],
				 ""QpcSystemTimeIncrement"": [ 856, [ ""UInt64"", ""null"" ]],
				 ""QpcInterruptTimeIncrement"": [ 864, [ ""UInt64"", ""null"" ]],
				 ""QpcSystemTimeIncrementShift"": [ 872, [ ""Byte"", ""null"" ]],
				 ""QpcInterruptTimeIncrementShift"": [ 873, [ ""Byte"", ""null"" ]],
				 ""UnparkedProcessorCount"": [ 874, [ ""UInt16"", ""null"" ]],
				 ""EnclaveFeatureMask"": [ 876, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""TelemetryCoverageRound"": [ 892, [ ""UInt32"", ""null"" ]],
				 ""UserModeGlobalLogger"": [ 896, [ ""Array"", ""{\""count\"":16,\""target\"":\""UInt16\""}"" ]],
				 ""ImageFileExecutionOptions"": [ 928, [ ""UInt32"", ""null"" ]],
				 ""LangGenerationCount"": [ 932, [ ""UInt32"", ""null"" ]],
				 ""Reserved4"": [ 936, [ ""UInt64"", ""null"" ]],
				 ""InterruptTimeBias"": [ 944, [ ""UInt64"", ""null"" ]],
				 ""QpcBias"": [ 952, [ ""UInt64"", ""null"" ]],
				 ""ActiveProcessorCount"": [ 960, [ ""UInt32"", ""null"" ]],
				 ""ActiveGroupCount"": [ 964, [ ""Byte"", ""null"" ]],
				 ""Reserved9"": [ 965, [ ""Byte"", ""null"" ]],
				 ""QpcData"": [ 966, [ ""UInt16"", ""null"" ]],
				 ""QpcBypassEnabled"": [ 966, [ ""Byte"", ""null"" ]],
				 ""QpcShift"": [ 967, [ ""Byte"", ""null"" ]],
				 ""TimeZoneBiasEffectiveStart"": [ 968, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""TimeZoneBiasEffectiveEnd"": [ 976, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""XState"": [ 984, [ ""_XSTATE_CONFIGURATION"", ""null"" ]],
				 ""FeatureConfigurationChangeStamp"": [ 1808, [ ""_KSYSTEM_TIME"", ""null"" ]],
				 ""Spare"": [ 1820, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 TickCountLowDeprecated { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 TickCountMultiplier { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _KSYSTEM_TIME InterruptTime
		{
			get
			{
				_KSYSTEM_TIME returnValue = new _KSYSTEM_TIME(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _KSYSTEM_TIME SystemTime
		{
			get
			{
				_KSYSTEM_TIME returnValue = new _KSYSTEM_TIME(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
		public _KSYSTEM_TIME TimeZoneBias
		{
			get
			{
				_KSYSTEM_TIME returnValue = new _KSYSTEM_TIME(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt16 ImageNumberLow { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 44); } }
		public UInt16 ImageNumberHigh { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 46); } }
		public UInt16[] NtSystemRoot
		{
			get
			{
				UInt16[] returnValue = new UInt16[260];
				for(int i=0; i<260; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 MaxStackTraceDepth { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 568); } }
		public UInt32 CryptoExponent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 572); } }
		public UInt32 TimeZoneId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 576); } }
		public UInt32 LargePageMinimum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 580); } }
		public UInt32 AitSamplingValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 584); } }
		public UInt32 AppCompatFlag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 588); } }
		public UInt64 RNGSeedVersion { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 592); } }
		public UInt32 GlobalValidationRunlevel { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 600); } }
		public Int32 TimeZoneBiasStamp { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 604); } }
		public UInt32 NtBuildNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 608); } }
		public _NT_PRODUCT_TYPE NtProductType { get { return (_NT_PRODUCT_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 612); } }
		public Byte ProductTypeIsValid{ get { return _StructureData[_BufferOffset +616]; } }
		public Byte[] Reserved0
		{
			get
			{
				Byte[] returnValue = new Byte[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 617];
				return returnValue;
			}
		}
		public UInt16 NativeProcessorArchitecture { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 618); } }
		public UInt32 NtMajorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 620); } }
		public UInt32 NtMinorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 624); } }
		public Byte[] ProcessorFeatures
		{
			get
			{
				Byte[] returnValue = new Byte[64];
				for(int i=0; i<64; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 628];
				return returnValue;
			}
		}
		public UInt32 Reserved1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 692); } }
		public UInt32 Reserved3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 696); } }
		public UInt32 TimeSlip { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 700); } }
		public _ALTERNATIVE_ARCHITECTURE_TYPE AlternativeArchitecture { get { return (_ALTERNATIVE_ARCHITECTURE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 704); } }
		public UInt32 BootId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 708); } }
		public _LARGE_INTEGER SystemExpirationDate
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 712);
				return returnValue;
			}
		}
		public UInt32 SuiteMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 720); } }
		public Byte KdDebuggerEnabled{ get { return _StructureData[_BufferOffset +724]; } }
		public Byte MitigationPolicies{ get { return _StructureData[_BufferOffset +725]; } }
		public Byte NXSupportPolicy
		{
			get
			{
				// start: 0  end: 2  Mask: 0000000000000011
				Byte value = _StructureData[_BufferOffset + 725];
				var value2 = (value & 3) >> 0;
				return (Byte)value2;
			}
		}
		public Byte SEHValidationPolicy
		{
			get
			{
				// start: 2  end: 4  Mask: 0000000000001100
				Byte value = _StructureData[_BufferOffset + 725];
				var value2 = (value & 12) >> 2;
				return (Byte)value2;
			}
		}
		public Byte CurDirDevicesSkippedForDlls
		{
			get
			{
				// start: 4  end: 6  Mask: 0000000000110000
				Byte value = _StructureData[_BufferOffset + 725];
				var value2 = (value & 48) >> 4;
				return (Byte)value2;
			}
		}
		public Byte Reserved
		{
			get
			{
				// start: 6  end: 8  Mask: 0000000011000000
				Byte value = _StructureData[_BufferOffset + 725];
				var value2 = (value & 192) >> 6;
				return (Byte)value2;
			}
		}
		public UInt16 CyclesPerYield { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 726); } }
		public UInt32 ActiveConsoleId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 728); } }
		public UInt32 DismountCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 732); } }
		public UInt32 ComPlusPackage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 736); } }
		public UInt32 LastSystemRITEventTickCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 740); } }
		public UInt32 NumberOfPhysicalPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 744); } }
		public Byte SafeBootMode{ get { return _StructureData[_BufferOffset +748]; } }
		public Byte VirtualizationFlags{ get { return _StructureData[_BufferOffset +749]; } }
		public Byte[] Reserved12
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 750];
				return returnValue;
			}
		}
		public UInt32 SharedDataFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 752); } }
		public UInt32 DbgErrorPortPresent
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 752);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgElevationEnabled
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 752);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgVirtEnabled
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 752);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgInstallerDetectEnabled
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 752);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgLkgEnabled
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 752);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgDynProcessorEnabled
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 752);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgConsoleBrokerEnabled
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 752);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgSecureBootEnabled
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 752);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgMultiSessionSku
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 752);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgMultiUsersInSessionSku
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 752);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgStateSeparationEnabled
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 752);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 SpareBits
		{
			get
			{
				// start: 11  end: 32  Mask: 11111111111111111111100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 752);
				var value2 = (value & 4294965248) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32[] DataFlagsPad
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 756);
				return returnValue;
			}
		}
		public UInt64 TestRetInstruction { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 760); } }
		public Int64 QpcFrequency { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 768); } }
		public UInt32 SystemCall { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 776); } }
		public UInt32 Reserved2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 780); } }
		public UInt64[] SystemCallPad
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 784);
				return returnValue;
			}
		}
		public _KSYSTEM_TIME TickCount
		{
			get
			{
				_KSYSTEM_TIME returnValue = new _KSYSTEM_TIME(_StructureData, _BufferOffset + 800);
				return returnValue;
			}
		}
		public UInt64 TickCountQuad { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 800); } }
		public UInt32[] ReservedTickCountOverlay
		{
			get
			{
				UInt32[] returnValue = new UInt32[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 800);
				return returnValue;
			}
		}
		public UInt32[] TickCountPad
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 812);
				return returnValue;
			}
		}
		public UInt32 Cookie { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 816); } }
		public UInt32[] CookiePad
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 820);
				return returnValue;
			}
		}
		public Int64 ConsoleSessionForegroundProcessId { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 824); } }
		public UInt64 TimeUpdateLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 832); } }
		public UInt64 BaselineSystemTimeQpc { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 840); } }
		public UInt64 BaselineInterruptTimeQpc { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 848); } }
		public UInt64 QpcSystemTimeIncrement { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 856); } }
		public UInt64 QpcInterruptTimeIncrement { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 864); } }
		public Byte QpcSystemTimeIncrementShift{ get { return _StructureData[_BufferOffset +872]; } }
		public Byte QpcInterruptTimeIncrementShift{ get { return _StructureData[_BufferOffset +873]; } }
		public UInt16 UnparkedProcessorCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 874); } }
		public UInt32[] EnclaveFeatureMask
		{
			get
			{
				UInt32[] returnValue = new UInt32[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 876);
				return returnValue;
			}
		}
		public UInt32 TelemetryCoverageRound { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 892); } }
		public UInt16[] UserModeGlobalLogger
		{
			get
			{
				UInt16[] returnValue = new UInt16[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 896);
				return returnValue;
			}
		}
		public UInt32 ImageFileExecutionOptions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 928); } }
		public UInt32 LangGenerationCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 932); } }
		public UInt64 Reserved4 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 936); } }
		public UInt64 InterruptTimeBias { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 944); } }
		public UInt64 QpcBias { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 952); } }
		public UInt32 ActiveProcessorCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 960); } }
		public Byte ActiveGroupCount{ get { return _StructureData[_BufferOffset +964]; } }
		public Byte Reserved9{ get { return _StructureData[_BufferOffset +965]; } }
		public UInt16 QpcData { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 966); } }
		public Byte QpcBypassEnabled{ get { return _StructureData[_BufferOffset +966]; } }
		public Byte QpcShift{ get { return _StructureData[_BufferOffset +967]; } }
		public _LARGE_INTEGER TimeZoneBiasEffectiveStart
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 968);
				return returnValue;
			}
		}
		public _LARGE_INTEGER TimeZoneBiasEffectiveEnd
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 976);
				return returnValue;
			}
		}
		public _XSTATE_CONFIGURATION XState
		{
			get
			{
				_XSTATE_CONFIGURATION returnValue = new _XSTATE_CONFIGURATION(_StructureData, _BufferOffset + 984);
				return returnValue;
			}
		}
		public _KSYSTEM_TIME FeatureConfigurationChangeStamp
		{
			get
			{
				_KSYSTEM_TIME returnValue = new _KSYSTEM_TIME(_StructureData, _BufferOffset + 1808);
				return returnValue;
			}
		}
		public UInt32 Spare { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1820); } }
	}
	#endregion
	#region _TP_POOL
 
	public class _TP_POOL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TP_POOL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TP_POOL"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _TP_CLEANUP_GROUP
 
	public class _TP_CLEANUP_GROUP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TP_CLEANUP_GROUP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TP_CLEANUP_GROUP"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _ACTIVATION_CONTEXT
 
	public class _ACTIVATION_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ACTIVATION_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ACTIVATION_CONTEXT"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _TP_CALLBACK_INSTANCE
 
	public class _TP_CALLBACK_INSTANCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TP_CALLBACK_INSTANCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TP_CALLBACK_INSTANCE"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _TP_CALLBACK_ENVIRON_V3
 
	public class _TP_CALLBACK_ENVIRON_V3
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TP_CALLBACK_ENVIRON_V3(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TP_CALLBACK_ENVIRON_V3"": [ 72, {
				 ""Version"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Pool"": [ 8, [ ""Pointer"", ""{\""target\"":\""_TP_POOL\""}"" ]],
				 ""CleanupGroup"": [ 16, [ ""Pointer"", ""{\""target\"":\""_TP_CLEANUP_GROUP\""}"" ]],
				 ""CleanupGroupCancelCallback"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RaceDll"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ActivationContext"": [ 40, [ ""Pointer"", ""{\""target\"":\""_ACTIVATION_CONTEXT\""}"" ]],
				 ""FinalizationCallback"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""u"": [ 56, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""CallbackPriority"": [ 60, [ ""Enumeration"", ""{\""enum_name\"":\""_TP_CALLBACK_PRIORITY\"",\""target\"":\""UInt32\""}"" ]],
				 ""Size"": [ 64, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 Pool { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 CleanupGroup { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 CleanupGroupCancelCallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 RaceDll { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 ActivationContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 FinalizationCallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _TP_CALLBACK_PRIORITY CallbackPriority { get { return (_TP_CALLBACK_PRIORITY)BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _TEB
 
	public class _TEB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TEB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 6200; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TEB"": [ 6200, {
				 ""NtTib"": [ 0, [ ""_NT_TIB"", ""null"" ]],
				 ""EnvironmentPointer"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ClientId"": [ 64, [ ""_CLIENT_ID"", ""null"" ]],
				 ""ActiveRpcHandle"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ThreadLocalStoragePointer"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProcessEnvironmentBlock"": [ 96, [ ""Pointer"", ""{\""target\"":\""_PEB\""}"" ]],
				 ""LastErrorValue"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""CountOfOwnedCriticalSections"": [ 108, [ ""UInt32"", ""null"" ]],
				 ""CsrClientThread"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Win32ThreadInfo"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""User32Reserved"": [ 128, [ ""Array"", ""{\""count\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""UserReserved"": [ 232, [ ""Array"", ""{\""count\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""WOW32Reserved"": [ 256, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CurrentLocale"": [ 264, [ ""UInt32"", ""null"" ]],
				 ""FpSoftwareStatusRegister"": [ 268, [ ""UInt32"", ""null"" ]],
				 ""ReservedForDebuggerInstrumentation"": [ 272, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""SystemReserved1"": [ 400, [ ""Array"", ""{\""count\"":30,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""PlaceholderCompatibilityMode"": [ 640, [ ""Char"", ""null"" ]],
				 ""PlaceholderHydrationAlwaysExplicit"": [ 641, [ ""Byte"", ""null"" ]],
				 ""PlaceholderReserved"": [ 642, [ ""Array"", ""{\""count\"":10,\""target\"":\""Char\""}"" ]],
				 ""ProxiedProcessId"": [ 652, [ ""UInt32"", ""null"" ]],
				 ""_ActivationStack"": [ 656, [ ""_ACTIVATION_CONTEXT_STACK"", ""null"" ]],
				 ""WorkingOnBehalfTicket"": [ 696, [ ""Array"", ""{\""count\"":8,\""target\"":\""Byte\""}"" ]],
				 ""ExceptionCode"": [ 704, [ ""Int32"", ""null"" ]],
				 ""Padding0"": [ 708, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""ActivationContextStackPointer"": [ 712, [ ""Pointer"", ""{\""target\"":\""_ACTIVATION_CONTEXT_STACK\""}"" ]],
				 ""InstrumentationCallbackSp"": [ 720, [ ""UInt64"", ""null"" ]],
				 ""InstrumentationCallbackPreviousPc"": [ 728, [ ""UInt64"", ""null"" ]],
				 ""InstrumentationCallbackPreviousSp"": [ 736, [ ""UInt64"", ""null"" ]],
				 ""TxFsContext"": [ 744, [ ""UInt32"", ""null"" ]],
				 ""InstrumentationCallbackDisabled"": [ 748, [ ""Byte"", ""null"" ]],
				 ""UnalignedLoadStoreExceptions"": [ 749, [ ""Byte"", ""null"" ]],
				 ""Padding1"": [ 750, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""GdiTebBatch"": [ 752, [ ""_GDI_TEB_BATCH"", ""null"" ]],
				 ""RealClientId"": [ 2008, [ ""_CLIENT_ID"", ""null"" ]],
				 ""GdiCachedProcessHandle"": [ 2024, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GdiClientPID"": [ 2032, [ ""UInt32"", ""null"" ]],
				 ""GdiClientTID"": [ 2036, [ ""UInt32"", ""null"" ]],
				 ""GdiThreadLocalInfo"": [ 2040, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Win32ClientInfo"": [ 2048, [ ""Array"", ""{\""count\"":62,\""target\"":\""UInt64\""}"" ]],
				 ""glDispatchTable"": [ 2544, [ ""Array"", ""{\""count\"":233,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""glReserved1"": [ 4408, [ ""Array"", ""{\""count\"":29,\""target\"":\""UInt64\""}"" ]],
				 ""glReserved2"": [ 4640, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""glSectionInfo"": [ 4648, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""glSection"": [ 4656, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""glTable"": [ 4664, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""glCurrentRC"": [ 4672, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""glContext"": [ 4680, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LastStatusValue"": [ 4688, [ ""UInt32"", ""null"" ]],
				 ""Padding2"": [ 4692, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""StaticUnicodeString"": [ 4696, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""StaticUnicodeBuffer"": [ 4712, [ ""Array"", ""{\""count\"":261,\""target\"":\""UInt16\""}"" ]],
				 ""Padding3"": [ 5234, [ ""Array"", ""{\""count\"":6,\""target\"":\""Byte\""}"" ]],
				 ""DeallocationStack"": [ 5240, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TlsSlots"": [ 5248, [ ""Array"", ""{\""count\"":64,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""TlsLinks"": [ 5760, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Vdm"": [ 5776, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReservedForNtRpc"": [ 5784, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DbgSsReserved"": [ 5792, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""HardErrorMode"": [ 5808, [ ""UInt32"", ""null"" ]],
				 ""Padding4"": [ 5812, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""Instrumentation"": [ 5816, [ ""Array"", ""{\""count\"":11,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""ActivityId"": [ 5904, [ ""_GUID"", ""null"" ]],
				 ""SubProcessTag"": [ 5920, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PerflibData"": [ 5928, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EtwTraceData"": [ 5936, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WinSockData"": [ 5944, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GdiBatchCount"": [ 5952, [ ""UInt32"", ""null"" ]],
				 ""CurrentIdealProcessor"": [ 5956, [ ""_PROCESSOR_NUMBER"", ""null"" ]],
				 ""IdealProcessorValue"": [ 5956, [ ""UInt32"", ""null"" ]],
				 ""ReservedPad0"": [ 5956, [ ""Byte"", ""null"" ]],
				 ""ReservedPad1"": [ 5957, [ ""Byte"", ""null"" ]],
				 ""ReservedPad2"": [ 5958, [ ""Byte"", ""null"" ]],
				 ""IdealProcessor"": [ 5959, [ ""Byte"", ""null"" ]],
				 ""GuaranteedStackBytes"": [ 5960, [ ""UInt32"", ""null"" ]],
				 ""Padding5"": [ 5964, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""ReservedForPerf"": [ 5968, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReservedForOle"": [ 5976, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WaitingOnLoaderLock"": [ 5984, [ ""UInt32"", ""null"" ]],
				 ""Padding6"": [ 5988, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""SavedPriorityState"": [ 5992, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReservedForCodeCoverage"": [ 6000, [ ""UInt64"", ""null"" ]],
				 ""ThreadPoolData"": [ 6008, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TlsExpansionSlots"": [ 6016, [ ""Pointer"", ""{\""target\"":\""void*\""}"" ]],
				 ""DeallocationBStore"": [ 6024, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BStoreLimit"": [ 6032, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MuiGeneration"": [ 6040, [ ""UInt32"", ""null"" ]],
				 ""IsImpersonating"": [ 6044, [ ""UInt32"", ""null"" ]],
				 ""NlsCache"": [ 6048, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""pShimData"": [ 6056, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HeapData"": [ 6064, [ ""UInt32"", ""null"" ]],
				 ""Padding7"": [ 6068, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""CurrentTransactionHandle"": [ 6072, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ActiveFrame"": [ 6080, [ ""Pointer"", ""{\""target\"":\""_TEB_ACTIVE_FRAME\""}"" ]],
				 ""FlsData"": [ 6088, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PreferredLanguages"": [ 6096, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UserPrefLanguages"": [ 6104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MergedPrefLanguages"": [ 6112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MuiImpersonation"": [ 6120, [ ""UInt32"", ""null"" ]],
				 ""CrossTebFlags"": [ 6124, [ ""UInt16"", ""null"" ]],
				 ""SpareCrossTebBits"": [ 6124, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""SameTebFlags"": [ 6126, [ ""UInt16"", ""null"" ]],
				 ""SafeThunkCall"": [ 6126, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""InDebugPrint"": [ 6126, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""HasFiberData"": [ 6126, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt16\""}"" ]],
				 ""SkipThreadAttach"": [ 6126, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt16\""}"" ]],
				 ""WerInShipAssertCode"": [ 6126, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt16\""}"" ]],
				 ""RanProcessInit"": [ 6126, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt16\""}"" ]],
				 ""ClonedThread"": [ 6126, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt16\""}"" ]],
				 ""SuppressDebugMsg"": [ 6126, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt16\""}"" ]],
				 ""DisableUserStackWalk"": [ 6126, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt16\""}"" ]],
				 ""RtlExceptionAttached"": [ 6126, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt16\""}"" ]],
				 ""InitialThread"": [ 6126, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt16\""}"" ]],
				 ""SessionAware"": [ 6126, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt16\""}"" ]],
				 ""LoadOwner"": [ 6126, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt16\""}"" ]],
				 ""LoaderWorker"": [ 6126, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt16\""}"" ]],
				 ""SkipLoaderInit"": [ 6126, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt16\""}"" ]],
				 ""SpareSameTebBits"": [ 6126, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt16\""}"" ]],
				 ""TxnScopeEnterCallback"": [ 6128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TxnScopeExitCallback"": [ 6136, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TxnScopeContext"": [ 6144, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LockCount"": [ 6152, [ ""UInt32"", ""null"" ]],
				 ""WowTebOffset"": [ 6156, [ ""Int32"", ""null"" ]],
				 ""ResourceRetValue"": [ 6160, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReservedForWdf"": [ 6168, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReservedForCrt"": [ 6176, [ ""UInt64"", ""null"" ]],
				 ""EffectiveContainerId"": [ 6184, [ ""_GUID"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _NT_TIB NtTib
		{
			get
			{
				_NT_TIB returnValue = new _NT_TIB(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 EnvironmentPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public _CLIENT_ID ClientId
		{
			get
			{
				_CLIENT_ID returnValue = new _CLIENT_ID(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt64 ActiveRpcHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 ThreadLocalStoragePointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 ProcessEnvironmentBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt32 LastErrorValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 CountOfOwnedCriticalSections { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public UInt64 CsrClientThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 Win32ThreadInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt32[] User32Reserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[26];
				for(int i=0; i<26; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt32[] UserReserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[5];
				for(int i=0; i<5; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 232);
				return returnValue;
			}
		}
		public UInt64 WOW32Reserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public UInt32 CurrentLocale { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 264); } }
		public UInt32 FpSoftwareStatusRegister { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 268); } }
		public UInt64[] ReservedForDebuggerInstrumentation
		{
			get
			{
				UInt64[] returnValue = new UInt64[16];
				int size = 8;
				for(int i=0; i<16; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 272);
				return returnValue;
			}
		}
		public UInt64[] SystemReserved1
		{
			get
			{
				UInt64[] returnValue = new UInt64[30];
				int size = 8;
				for(int i=0; i<30; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 400);
				return returnValue;
			}
		}
		public Char PlaceholderCompatibilityMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 640); } }
		public Byte PlaceholderHydrationAlwaysExplicit{ get { return _StructureData[_BufferOffset +641]; } }
		public Char[] PlaceholderReserved
		{
			get
			{
				Char[] returnValue = new Char[10];
				for(int i=0; i<10; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 642);
				return returnValue;
			}
		}
		public UInt32 ProxiedProcessId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 652); } }
		public _ACTIVATION_CONTEXT_STACK _ActivationStack
		{
			get
			{
				_ACTIVATION_CONTEXT_STACK returnValue = new _ACTIVATION_CONTEXT_STACK(_StructureData, _BufferOffset + 656);
				return returnValue;
			}
		}
		public Byte[] WorkingOnBehalfTicket
		{
			get
			{
				Byte[] returnValue = new Byte[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 696];
				return returnValue;
			}
		}
		public Int32 ExceptionCode { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 704); } }
		public Byte[] Padding0
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 708];
				return returnValue;
			}
		}
		public UInt64 ActivationContextStackPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 712); } }
		public UInt64 InstrumentationCallbackSp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 720); } }
		public UInt64 InstrumentationCallbackPreviousPc { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 728); } }
		public UInt64 InstrumentationCallbackPreviousSp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 736); } }
		public UInt32 TxFsContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 744); } }
		public Byte InstrumentationCallbackDisabled{ get { return _StructureData[_BufferOffset +748]; } }
		public Byte UnalignedLoadStoreExceptions{ get { return _StructureData[_BufferOffset +749]; } }
		public Byte[] Padding1
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 750];
				return returnValue;
			}
		}
		public _GDI_TEB_BATCH GdiTebBatch
		{
			get
			{
				_GDI_TEB_BATCH returnValue = new _GDI_TEB_BATCH(_StructureData, _BufferOffset + 752);
				return returnValue;
			}
		}
		public _CLIENT_ID RealClientId
		{
			get
			{
				_CLIENT_ID returnValue = new _CLIENT_ID(_StructureData, _BufferOffset + 2008);
				return returnValue;
			}
		}
		public UInt64 GdiCachedProcessHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2024); } }
		public UInt32 GdiClientPID { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2032); } }
		public UInt32 GdiClientTID { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2036); } }
		public UInt64 GdiThreadLocalInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2040); } }
		public UInt64[] Win32ClientInfo
		{
			get
			{
				UInt64[] returnValue = new UInt64[62];
				for(int i=0; i<62; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 2048);
				return returnValue;
			}
		}
		public UInt64[] glDispatchTable
		{
			get
			{
				UInt64[] returnValue = new UInt64[233];
				int size = 8;
				for(int i=0; i<233; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 2544);
				return returnValue;
			}
		}
		public UInt64[] glReserved1
		{
			get
			{
				UInt64[] returnValue = new UInt64[29];
				for(int i=0; i<29; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 4408);
				return returnValue;
			}
		}
		public UInt64 glReserved2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4640); } }
		public UInt64 glSectionInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4648); } }
		public UInt64 glSection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4656); } }
		public UInt64 glTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4664); } }
		public UInt64 glCurrentRC { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4672); } }
		public UInt64 glContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4680); } }
		public UInt32 LastStatusValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4688); } }
		public Byte[] Padding2
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 4692];
				return returnValue;
			}
		}
		public _UNICODE_STRING StaticUnicodeString
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 4696);
				return returnValue;
			}
		}
		public UInt16[] StaticUnicodeBuffer
		{
			get
			{
				UInt16[] returnValue = new UInt16[261];
				for(int i=0; i<261; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 4712);
				return returnValue;
			}
		}
		public Byte[] Padding3
		{
			get
			{
				Byte[] returnValue = new Byte[6];
				for(int i=0; i<6; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 5234];
				return returnValue;
			}
		}
		public UInt64 DeallocationStack { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5240); } }
		public UInt64[] TlsSlots
		{
			get
			{
				UInt64[] returnValue = new UInt64[64];
				int size = 8;
				for(int i=0; i<64; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 5248);
				return returnValue;
			}
		}
		public _LIST_ENTRY TlsLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 5760);
				return returnValue;
			}
		}
		public UInt64 Vdm { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5776); } }
		public UInt64 ReservedForNtRpc { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5784); } }
		public UInt64[] DbgSsReserved
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				int size = 8;
				for(int i=0; i<2; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 5792);
				return returnValue;
			}
		}
		public UInt32 HardErrorMode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 5808); } }
		public Byte[] Padding4
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 5812];
				return returnValue;
			}
		}
		public UInt64[] Instrumentation
		{
			get
			{
				UInt64[] returnValue = new UInt64[11];
				int size = 8;
				for(int i=0; i<11; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 5816);
				return returnValue;
			}
		}
		public _GUID ActivityId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 5904);
				return returnValue;
			}
		}
		public UInt64 SubProcessTag { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5920); } }
		public UInt64 PerflibData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5928); } }
		public UInt64 EtwTraceData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5936); } }
		public UInt64 WinSockData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5944); } }
		public UInt32 GdiBatchCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 5952); } }
		public _PROCESSOR_NUMBER CurrentIdealProcessor
		{
			get
			{
				_PROCESSOR_NUMBER returnValue = new _PROCESSOR_NUMBER(_StructureData, _BufferOffset + 5956);
				return returnValue;
			}
		}
		public UInt32 IdealProcessorValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 5956); } }
		public Byte ReservedPad0{ get { return _StructureData[_BufferOffset +5956]; } }
		public Byte ReservedPad1{ get { return _StructureData[_BufferOffset +5957]; } }
		public Byte ReservedPad2{ get { return _StructureData[_BufferOffset +5958]; } }
		public Byte IdealProcessor{ get { return _StructureData[_BufferOffset +5959]; } }
		public UInt32 GuaranteedStackBytes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 5960); } }
		public Byte[] Padding5
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 5964];
				return returnValue;
			}
		}
		public UInt64 ReservedForPerf { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5968); } }
		public UInt64 ReservedForOle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5976); } }
		public UInt32 WaitingOnLoaderLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 5984); } }
		public Byte[] Padding6
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 5988];
				return returnValue;
			}
		}
		public UInt64 SavedPriorityState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5992); } }
		public UInt64 ReservedForCodeCoverage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6000); } }
		public UInt64 ThreadPoolData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6008); } }
		public UInt64 TlsExpansionSlots { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6016); } }
		public UInt64 DeallocationBStore { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6024); } }
		public UInt64 BStoreLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6032); } }
		public UInt32 MuiGeneration { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 6040); } }
		public UInt32 IsImpersonating { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 6044); } }
		public UInt64 NlsCache { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6048); } }
		public UInt64 pShimData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6056); } }
		public UInt32 HeapData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 6064); } }
		public Byte[] Padding7
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 6068];
				return returnValue;
			}
		}
		public UInt64 CurrentTransactionHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6072); } }
		public UInt64 ActiveFrame { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6080); } }
		public UInt64 FlsData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6088); } }
		public UInt64 PreferredLanguages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6096); } }
		public UInt64 UserPrefLanguages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6104); } }
		public UInt64 MergedPrefLanguages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6112); } }
		public UInt32 MuiImpersonation { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 6120); } }
		public UInt16 CrossTebFlags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6124); } }
		public UInt16 SpareCrossTebBits
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6124);
				var value2 = (value & 65535) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 SameTebFlags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126); } }
		public UInt16 SafeThunkCall
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 InDebugPrint
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 2) >> 1;
				return (UInt16)value2;
			}
		}
		public UInt16 HasFiberData
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 4) >> 2;
				return (UInt16)value2;
			}
		}
		public UInt16 SkipThreadAttach
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 8) >> 3;
				return (UInt16)value2;
			}
		}
		public UInt16 WerInShipAssertCode
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 16) >> 4;
				return (UInt16)value2;
			}
		}
		public UInt16 RanProcessInit
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 32) >> 5;
				return (UInt16)value2;
			}
		}
		public UInt16 ClonedThread
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 64) >> 6;
				return (UInt16)value2;
			}
		}
		public UInt16 SuppressDebugMsg
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 128) >> 7;
				return (UInt16)value2;
			}
		}
		public UInt16 DisableUserStackWalk
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 256) >> 8;
				return (UInt16)value2;
			}
		}
		public UInt16 RtlExceptionAttached
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 512) >> 9;
				return (UInt16)value2;
			}
		}
		public UInt16 InitialThread
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 1024) >> 10;
				return (UInt16)value2;
			}
		}
		public UInt16 SessionAware
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 2048) >> 11;
				return (UInt16)value2;
			}
		}
		public UInt16 LoadOwner
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 4096) >> 12;
				return (UInt16)value2;
			}
		}
		public UInt16 LoaderWorker
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 8192) >> 13;
				return (UInt16)value2;
			}
		}
		public UInt16 SkipLoaderInit
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 16384) >> 14;
				return (UInt16)value2;
			}
		}
		public UInt16 SpareSameTebBits
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 32768) >> 15;
				return (UInt16)value2;
			}
		}
		public UInt64 TxnScopeEnterCallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6128); } }
		public UInt64 TxnScopeExitCallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6136); } }
		public UInt64 TxnScopeContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6144); } }
		public UInt32 LockCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 6152); } }
		public Int32 WowTebOffset { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 6156); } }
		public UInt64 ResourceRetValue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6160); } }
		public UInt64 ReservedForWdf { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6168); } }
		public UInt64 ReservedForCrt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6176); } }
		public _GUID EffectiveContainerId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 6184);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IMAGE_NT_HEADERS64
 
	public class _IMAGE_NT_HEADERS64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_NT_HEADERS64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 264; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_NT_HEADERS64"": [ 264, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""FileHeader"": [ 4, [ ""_IMAGE_FILE_HEADER"", ""null"" ]],
				 ""OptionalHeader"": [ 24, [ ""_IMAGE_OPTIONAL_HEADER64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _IMAGE_FILE_HEADER FileHeader
		{
			get
			{
				_IMAGE_FILE_HEADER returnValue = new _IMAGE_FILE_HEADER(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public _IMAGE_OPTIONAL_HEADER64 OptionalHeader
		{
			get
			{
				_IMAGE_OPTIONAL_HEADER64 returnValue = new _IMAGE_OPTIONAL_HEADER64(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IMAGE_DOS_HEADER
 
	public class _IMAGE_DOS_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_DOS_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_DOS_HEADER"": [ 64, {
				 ""e_magic"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""e_cblp"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""e_cp"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""e_crlc"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""e_cparhdr"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""e_minalloc"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""e_maxalloc"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""e_ss"": [ 14, [ ""UInt16"", ""null"" ]],
				 ""e_sp"": [ 16, [ ""UInt16"", ""null"" ]],
				 ""e_csum"": [ 18, [ ""UInt16"", ""null"" ]],
				 ""e_ip"": [ 20, [ ""UInt16"", ""null"" ]],
				 ""e_cs"": [ 22, [ ""UInt16"", ""null"" ]],
				 ""e_lfarlc"": [ 24, [ ""UInt16"", ""null"" ]],
				 ""e_ovno"": [ 26, [ ""UInt16"", ""null"" ]],
				 ""e_res"": [ 28, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt16\""}"" ]],
				 ""e_oemid"": [ 36, [ ""UInt16"", ""null"" ]],
				 ""e_oeminfo"": [ 38, [ ""UInt16"", ""null"" ]],
				 ""e_res2"": [ 40, [ ""Array"", ""{\""count\"":10,\""target\"":\""UInt16\""}"" ]],
				 ""e_lfanew"": [ 60, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 e_magic { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 e_cblp { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 e_cp { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 e_crlc { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt16 e_cparhdr { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 e_minalloc { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public UInt16 e_maxalloc { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public UInt16 e_ss { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 14); } }
		public UInt16 e_sp { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 16); } }
		public UInt16 e_csum { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 18); } }
		public UInt16 e_ip { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 20); } }
		public UInt16 e_cs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 22); } }
		public UInt16 e_lfarlc { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 24); } }
		public UInt16 e_ovno { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 26); } }
		public UInt16[] e_res
		{
			get
			{
				UInt16[] returnValue = new UInt16[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 28);
				return returnValue;
			}
		}
		public UInt16 e_oemid { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 36); } }
		public UInt16 e_oeminfo { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 38); } }
		public UInt16[] e_res2
		{
			get
			{
				UInt16[] returnValue = new UInt16[10];
				for(int i=0; i<10; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 40);
				return returnValue;
			}
		}
		public Int32 e_lfanew { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 60); } }
	}
	#endregion
	#region _INVPCID_DESCRIPTOR
 
	public class _INVPCID_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _INVPCID_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_INVPCID_DESCRIPTOR"": [ 16, {
				 ""IndividualAddress"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""SingleContext"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""AllContextAndGlobals"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""AllContext"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG IndividualAddress
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG SingleContext
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG AllContextAndGlobals
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG AllContext
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SINGLE_LIST_ENTRY32
 
	public class _SINGLE_LIST_ENTRY32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SINGLE_LIST_ENTRY32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SINGLE_LIST_ENTRY32"": [ 4, {
				 ""Next"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Next { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _PS_TRUSTLET_CREATE_ATTRIBUTES
 
	public class _PS_TRUSTLET_CREATE_ATTRIBUTES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_TRUSTLET_CREATE_ATTRIBUTES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_TRUSTLET_CREATE_ATTRIBUTES"": [ 24, {
				 ""TrustletIdentity"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Attributes"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 TrustletIdentity { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _PS_TRUSTLET_ATTRIBUTE_DATA[] Attributes
		{
			get
			{
				_PS_TRUSTLET_ATTRIBUTE_DATA[] returnValue = new _PS_TRUSTLET_ATTRIBUTE_DATA[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _PS_TRUSTLET_ATTRIBUTE_DATA(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PS_TRUSTLET_ATTRIBUTE_DATA
 
	public class _PS_TRUSTLET_ATTRIBUTE_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_TRUSTLET_ATTRIBUTE_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_TRUSTLET_ATTRIBUTE_DATA"": [ 16, {
				 ""Header"": [ 0, [ ""_PS_TRUSTLET_ATTRIBUTE_HEADER"", ""null"" ]],
				 ""Data"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public _PS_TRUSTLET_ATTRIBUTE_HEADER Header
		{
			get
			{
				_PS_TRUSTLET_ATTRIBUTE_HEADER returnValue = new _PS_TRUSTLET_ATTRIBUTE_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64[] Data
		{
			get
			{
				UInt64[] returnValue = new UInt64[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PS_TRUSTLET_ATTRIBUTE_HEADER
 
	public class _PS_TRUSTLET_ATTRIBUTE_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_TRUSTLET_ATTRIBUTE_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_TRUSTLET_ATTRIBUTE_HEADER"": [ 8, {
				 ""AttributeType"": [ 0, [ ""_PS_TRUSTLET_ATTRIBUTE_TYPE"", ""null"" ]],
				 ""InstanceNumber"": [ 4, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 4, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _PS_TRUSTLET_ATTRIBUTE_TYPE AttributeType
		{
			get
			{
				_PS_TRUSTLET_ATTRIBUTE_TYPE returnValue = new _PS_TRUSTLET_ATTRIBUTE_TYPE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 InstanceNumber
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 255) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 8  end: 32  Mask: 11111111111111111111111100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4294967040) >> 8;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _PS_TRUSTLET_ATTRIBUTE_TYPE
 
	public class _PS_TRUSTLET_ATTRIBUTE_TYPE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_TRUSTLET_ATTRIBUTE_TYPE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_TRUSTLET_ATTRIBUTE_TYPE"": [ 4, {
				 ""Version"": [ 0, [ ""Byte"", ""null"" ]],
				 ""DataCount"": [ 1, [ ""Byte"", ""null"" ]],
				 ""SemanticType"": [ 2, [ ""Byte"", ""null"" ]],
				 ""AccessRights"": [ 3, [ ""_PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS"", ""null"" ]],
				 ""AttributeType"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Version{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte DataCount{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte SemanticType{ get { return _StructureData[_BufferOffset +2]; } }
		public _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS AccessRights
		{
			get
			{
				_PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS returnValue = new _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS(_StructureData, _BufferOffset + 3);
				return returnValue;
			}
		}
		public UInt32 AttributeType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _TRUSTLET_MAILBOX_KEY
 
	public class _TRUSTLET_MAILBOX_KEY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TRUSTLET_MAILBOX_KEY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TRUSTLET_MAILBOX_KEY"": [ 16, {
				 ""SecretValue"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64[] SecretValue
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _TRUSTLET_COLLABORATION_ID
 
	public class _TRUSTLET_COLLABORATION_ID
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TRUSTLET_COLLABORATION_ID(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TRUSTLET_COLLABORATION_ID"": [ 16, {
				 ""Value"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64[] Value
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KSTACK_COUNT
 
	public class _KSTACK_COUNT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KSTACK_COUNT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KSTACK_COUNT"": [ 4, {
				 ""Value"": [ 0, [ ""Int32"", ""null"" ]],
				 ""State"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""StackCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 Value { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 State
		{
			get
			{
				// start: 0  end: 3  Mask: 0000000000000111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 7) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 StackCount
		{
			get
			{
				// start: 3  end: 32  Mask: 11111111111111111111111111111000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967288) >> 3;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _KPROCESS
 
	public class _KPROCESS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KPROCESS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1080; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KPROCESS"": [ 1080, {
				 ""Header"": [ 0, [ ""_DISPATCHER_HEADER"", ""null"" ]],
				 ""ProfileListHead"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DirectoryTableBase"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""ThreadListHead"": [ 48, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ProcessLock"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""ProcessTimerDelay"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""DeepFreezeStartTime"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""Affinity"": [ 80, [ ""_KAFFINITY_EX"", ""null"" ]],
				 ""AffinityPadding"": [ 248, [ ""Array"", ""{\""count\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""ReadyListHead"": [ 344, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SwapListEntry"": [ 360, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""ActiveProcessors"": [ 368, [ ""_KAFFINITY_EX"", ""null"" ]],
				 ""ActiveProcessorsPadding"": [ 536, [ ""Array"", ""{\""count\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""AutoAlignment"": [ 632, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""DisableBoost"": [ 632, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""DisableQuantum"": [ 632, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""DeepFreeze"": [ 632, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""TimerVirtualization"": [ 632, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""CheckStackExtents"": [ 632, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""CacheIsolationEnabled"": [ 632, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""PpmPolicy"": [ 632, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""VaSpaceDeleted"": [ 632, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""ReservedFlags"": [ 632, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessFlags"": [ 632, [ ""Int32"", ""null"" ]],
				 ""ActiveGroupsMask"": [ 636, [ ""UInt32"", ""null"" ]],
				 ""BasePriority"": [ 640, [ ""Char"", ""null"" ]],
				 ""QuantumReset"": [ 641, [ ""Char"", ""null"" ]],
				 ""Visited"": [ 642, [ ""Char"", ""null"" ]],
				 ""Flags"": [ 643, [ ""_KEXECUTE_OPTIONS"", ""null"" ]],
				 ""ThreadSeed"": [ 644, [ ""Array"", ""{\""count\"":20,\""target\"":\""UInt16\""}"" ]],
				 ""ThreadSeedPadding"": [ 684, [ ""Array"", ""{\""count\"":12,\""target\"":\""UInt16\""}"" ]],
				 ""IdealProcessor"": [ 708, [ ""Array"", ""{\""count\"":20,\""target\"":\""UInt16\""}"" ]],
				 ""IdealProcessorPadding"": [ 748, [ ""Array"", ""{\""count\"":12,\""target\"":\""UInt16\""}"" ]],
				 ""IdealNode"": [ 772, [ ""Array"", ""{\""count\"":20,\""target\"":\""UInt16\""}"" ]],
				 ""IdealNodePadding"": [ 812, [ ""Array"", ""{\""count\"":12,\""target\"":\""UInt16\""}"" ]],
				 ""IdealGlobalNode"": [ 836, [ ""UInt16"", ""null"" ]],
				 ""Spare1"": [ 838, [ ""UInt16"", ""null"" ]],
				 ""StackCount"": [ 840, [ ""_KSTACK_COUNT"", ""null"" ]],
				 ""ProcessListEntry"": [ 848, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CycleTime"": [ 864, [ ""UInt64"", ""null"" ]],
				 ""ContextSwitches"": [ 872, [ ""UInt64"", ""null"" ]],
				 ""SchedulingGroup"": [ 880, [ ""Pointer"", ""{\""target\"":\""_KSCHEDULING_GROUP\""}"" ]],
				 ""FreezeCount"": [ 888, [ ""UInt32"", ""null"" ]],
				 ""KernelTime"": [ 892, [ ""UInt32"", ""null"" ]],
				 ""UserTime"": [ 896, [ ""UInt32"", ""null"" ]],
				 ""ReadyTime"": [ 900, [ ""UInt32"", ""null"" ]],
				 ""UserDirectoryTableBase"": [ 904, [ ""UInt64"", ""null"" ]],
				 ""AddressPolicy"": [ 912, [ ""Byte"", ""null"" ]],
				 ""Spare2"": [ 913, [ ""Array"", ""{\""count\"":71,\""target\"":\""Byte\""}"" ]],
				 ""InstrumentationCallback"": [ 984, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SecureState"": [ 992, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""KernelWaitTime"": [ 1000, [ ""UInt64"", ""null"" ]],
				 ""UserWaitTime"": [ 1008, [ ""UInt64"", ""null"" ]],
				 ""EndPadding"": [ 1016, [ ""Array"", ""{\""count\"":8,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public _DISPATCHER_HEADER Header
		{
			get
			{
				_DISPATCHER_HEADER returnValue = new _DISPATCHER_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY ProfileListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 DirectoryTableBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _LIST_ENTRY ThreadListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 ProcessLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 ProcessTimerDelay { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt64 DeepFreezeStartTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public _KAFFINITY_EX Affinity
		{
			get
			{
				_KAFFINITY_EX returnValue = new _KAFFINITY_EX(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt64[] AffinityPadding
		{
			get
			{
				UInt64[] returnValue = new UInt64[12];
				for(int i=0; i<12; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 248);
				return returnValue;
			}
		}
		public _LIST_ENTRY ReadyListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 344);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY SwapListEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 360);
				return returnValue;
			}
		}
		public _KAFFINITY_EX ActiveProcessors
		{
			get
			{
				_KAFFINITY_EX returnValue = new _KAFFINITY_EX(_StructureData, _BufferOffset + 368);
				return returnValue;
			}
		}
		public UInt64[] ActiveProcessorsPadding
		{
			get
			{
				UInt64[] returnValue = new UInt64[12];
				for(int i=0; i<12; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 536);
				return returnValue;
			}
		}
		public UInt32 AutoAlignment
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 632);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 DisableBoost
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 632);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 DisableQuantum
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 632);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 DeepFreeze
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 632);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 TimerVirtualization
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 632);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 CheckStackExtents
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 632);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 CacheIsolationEnabled
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 632);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 PpmPolicy
		{
			get
			{
				// start: 7  end: 10  Mask: 0000001110000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 632);
				var value2 = (value & 896) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 VaSpaceDeleted
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 632);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 ReservedFlags
		{
			get
			{
				// start: 11  end: 32  Mask: 11111111111111111111100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 632);
				var value2 = (value & 4294965248) >> 11;
				return (UInt32)value2;
			}
		}
		public Int32 ProcessFlags { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 632); } }
		public UInt32 ActiveGroupsMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 636); } }
		public Char BasePriority { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 640); } }
		public Char QuantumReset { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 641); } }
		public Char Visited { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 642); } }
		public _KEXECUTE_OPTIONS Flags
		{
			get
			{
				_KEXECUTE_OPTIONS returnValue = new _KEXECUTE_OPTIONS(_StructureData, _BufferOffset + 643);
				return returnValue;
			}
		}
		public UInt16[] ThreadSeed
		{
			get
			{
				UInt16[] returnValue = new UInt16[20];
				for(int i=0; i<20; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 644);
				return returnValue;
			}
		}
		public UInt16[] ThreadSeedPadding
		{
			get
			{
				UInt16[] returnValue = new UInt16[12];
				for(int i=0; i<12; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 684);
				return returnValue;
			}
		}
		public UInt16[] IdealProcessor
		{
			get
			{
				UInt16[] returnValue = new UInt16[20];
				for(int i=0; i<20; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 708);
				return returnValue;
			}
		}
		public UInt16[] IdealProcessorPadding
		{
			get
			{
				UInt16[] returnValue = new UInt16[12];
				for(int i=0; i<12; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 748);
				return returnValue;
			}
		}
		public UInt16[] IdealNode
		{
			get
			{
				UInt16[] returnValue = new UInt16[20];
				for(int i=0; i<20; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 772);
				return returnValue;
			}
		}
		public UInt16[] IdealNodePadding
		{
			get
			{
				UInt16[] returnValue = new UInt16[12];
				for(int i=0; i<12; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 812);
				return returnValue;
			}
		}
		public UInt16 IdealGlobalNode { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 836); } }
		public UInt16 Spare1 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 838); } }
		public _KSTACK_COUNT StackCount
		{
			get
			{
				_KSTACK_COUNT returnValue = new _KSTACK_COUNT(_StructureData, _BufferOffset + 840);
				return returnValue;
			}
		}
		public _LIST_ENTRY ProcessListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 848);
				return returnValue;
			}
		}
		public UInt64 CycleTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 864); } }
		public UInt64 ContextSwitches { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 872); } }
		public UInt64 SchedulingGroup { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 880); } }
		public UInt32 FreezeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 888); } }
		public UInt32 KernelTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 892); } }
		public UInt32 UserTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 896); } }
		public UInt32 ReadyTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 900); } }
		public UInt64 UserDirectoryTableBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 904); } }
		public Byte AddressPolicy{ get { return _StructureData[_BufferOffset +912]; } }
		public Byte[] Spare2
		{
			get
			{
				Byte[] returnValue = new Byte[71];
				for(int i=0; i<71; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 913];
				return returnValue;
			}
		}
		public UInt64 InstrumentationCallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 984); } }
		public _ANONYMOUS_TAG SecureState
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 992);
				return returnValue;
			}
		}
		public UInt64 KernelWaitTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1000); } }
		public UInt64 UserWaitTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1008); } }
		public UInt64[] EndPadding
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 1016);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KTHREAD
 
	public class _KTHREAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTHREAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1072; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTHREAD"": [ 1072, {
				 ""Header"": [ 0, [ ""_DISPATCHER_HEADER"", ""null"" ]],
				 ""SListFaultAddress"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""QuantumTarget"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""InitialStack"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StackLimit"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StackBase"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ThreadLock"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""CycleTime"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""CurrentRunTime"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""ExpectedRunTime"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""KernelStack"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StateSaveArea"": [ 96, [ ""Pointer"", ""{\""target\"":\""_XSAVE_FORMAT\""}"" ]],
				 ""SchedulingGroup"": [ 104, [ ""Pointer"", ""{\""target\"":\""_KSCHEDULING_GROUP\""}"" ]],
				 ""WaitRegister"": [ 112, [ ""_KWAIT_STATUS_REGISTER"", ""null"" ]],
				 ""Running"": [ 113, [ ""Byte"", ""null"" ]],
				 ""Alerted"": [ 114, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""AutoBoostActive"": [ 116, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ReadyTransition"": [ 116, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""WaitNext"": [ 116, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""SystemAffinityActive"": [ 116, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""Alertable"": [ 116, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""UserStackWalkActive"": [ 116, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""ApcInterruptRequest"": [ 116, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""QuantumEndMigrate"": [ 116, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""UmsDirectedSwitchEnable"": [ 116, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""TimerActive"": [ 116, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""SystemThread"": [ 116, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessDetachActive"": [ 116, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""CalloutActive"": [ 116, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""ScbReadyQueue"": [ 116, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""ApcQueueable"": [ 116, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""ReservedStackInUse"": [ 116, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""UmsPerformingSyscall"": [ 116, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""TimerSuspended"": [ 116, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""SuspendedWaitMode"": [ 116, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""SuspendSchedulerApcWait"": [ 116, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""CetUserShadowStack"": [ 116, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""BypassProcessFreeze"": [ 116, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 116, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""MiscFlags"": [ 116, [ ""Int32"", ""null"" ]],
				 ""ThreadFlagsSpare"": [ 120, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""AutoAlignment"": [ 120, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""DisableBoost"": [ 120, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""AlertedByThreadId"": [ 120, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""QuantumDonation"": [ 120, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""EnableStackSwap"": [ 120, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""GuiThread"": [ 120, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""DisableQuantum"": [ 120, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""ChargeOnlySchedulingGroup"": [ 120, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""DeferPreemption"": [ 120, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""QueueDeferPreemption"": [ 120, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""ForceDeferSchedule"": [ 120, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""SharedReadyQueueAffinity"": [ 120, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""FreezeCount"": [ 120, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""TerminationApcRequest"": [ 120, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""AutoBoostEntriesExhausted"": [ 120, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""KernelStackResident"": [ 120, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""TerminateRequestReason"": [ 120, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessStackCountDecremented"": [ 120, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""RestrictedGuiThread"": [ 120, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""VpBackingThread"": [ 120, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""ThreadFlagsSpare2"": [ 120, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]],
				 ""EtwStackTraceApcInserted"": [ 120, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""ThreadFlags"": [ 120, [ ""Int32"", ""null"" ]],
				 ""Tag"": [ 124, [ ""Byte"", ""null"" ]],
				 ""SystemHeteroCpuPolicy"": [ 125, [ ""Byte"", ""null"" ]],
				 ""UserHeteroCpuPolicy"": [ 126, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""ExplicitSystemHeteroCpuPolicy"": [ 126, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""Byte\""}"" ]],
				 ""RunningNonRetpolineCode"": [ 127, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""SpecCtrlSpare"": [ 127, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""SpecCtrl"": [ 127, [ ""Byte"", ""null"" ]],
				 ""SystemCallNumber"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""ReadyTime"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""FirstArgument"": [ 136, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TrapFrame"": [ 144, [ ""Pointer"", ""{\""target\"":\""_KTRAP_FRAME\""}"" ]],
				 ""ApcState"": [ 152, [ ""_KAPC_STATE"", ""null"" ]],
				 ""ApcStateFill"": [ 152, [ ""Array"", ""{\""count\"":43,\""target\"":\""Byte\""}"" ]],
				 ""Priority"": [ 195, [ ""Char"", ""null"" ]],
				 ""UserIdealProcessor"": [ 196, [ ""UInt32"", ""null"" ]],
				 ""WaitStatus"": [ 200, [ ""Int64"", ""null"" ]],
				 ""WaitBlockList"": [ 208, [ ""Pointer"", ""{\""target\"":\""_KWAIT_BLOCK\""}"" ]],
				 ""WaitListEntry"": [ 216, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SwapListEntry"": [ 216, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""Queue"": [ 232, [ ""Pointer"", ""{\""target\"":\""_DISPATCHER_HEADER\""}"" ]],
				 ""Teb"": [ 240, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RelativeTimerBias"": [ 248, [ ""UInt64"", ""null"" ]],
				 ""Timer"": [ 256, [ ""_KTIMER"", ""null"" ]],
				 ""WaitBlock"": [ 320, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""WaitBlockFill4"": [ 320, [ ""Array"", ""{\""count\"":20,\""target\"":\""Byte\""}"" ]],
				 ""ContextSwitches"": [ 340, [ ""UInt32"", ""null"" ]],
				 ""WaitBlockFill5"": [ 320, [ ""Array"", ""{\""count\"":68,\""target\"":\""Byte\""}"" ]],
				 ""State"": [ 388, [ ""Byte"", ""null"" ]],
				 ""Spare13"": [ 389, [ ""Char"", ""null"" ]],
				 ""WaitIrql"": [ 390, [ ""Byte"", ""null"" ]],
				 ""WaitMode"": [ 391, [ ""Char"", ""null"" ]],
				 ""WaitBlockFill6"": [ 320, [ ""Array"", ""{\""count\"":116,\""target\"":\""Byte\""}"" ]],
				 ""WaitTime"": [ 436, [ ""UInt32"", ""null"" ]],
				 ""WaitBlockFill7"": [ 320, [ ""Array"", ""{\""count\"":164,\""target\"":\""Byte\""}"" ]],
				 ""KernelApcDisable"": [ 484, [ ""Int16"", ""null"" ]],
				 ""SpecialApcDisable"": [ 486, [ ""Int16"", ""null"" ]],
				 ""CombinedApcDisable"": [ 484, [ ""UInt32"", ""null"" ]],
				 ""WaitBlockFill8"": [ 320, [ ""Array"", ""{\""count\"":40,\""target\"":\""Byte\""}"" ]],
				 ""ThreadCounters"": [ 360, [ ""Pointer"", ""{\""target\"":\""_KTHREAD_COUNTERS\""}"" ]],
				 ""WaitBlockFill9"": [ 320, [ ""Array"", ""{\""count\"":88,\""target\"":\""Byte\""}"" ]],
				 ""XStateSave"": [ 408, [ ""Pointer"", ""{\""target\"":\""_XSTATE_SAVE\""}"" ]],
				 ""WaitBlockFill10"": [ 320, [ ""Array"", ""{\""count\"":136,\""target\"":\""Byte\""}"" ]],
				 ""Win32Thread"": [ 456, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WaitBlockFill11"": [ 320, [ ""Array"", ""{\""count\"":176,\""target\"":\""Byte\""}"" ]],
				 ""Ucb"": [ 496, [ ""Pointer"", ""{\""target\"":\""_UMS_CONTROL_BLOCK\""}"" ]],
				 ""Uch"": [ 504, [ ""Pointer"", ""{\""target\"":\""_KUMS_CONTEXT_HEADER\""}"" ]],
				 ""ThreadFlags2"": [ 512, [ ""Int32"", ""null"" ]],
				 ""BamQosLevel"": [ 512, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ThreadFlags2Reserved"": [ 512, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""Spare21"": [ 516, [ ""UInt32"", ""null"" ]],
				 ""QueueListEntry"": [ 520, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""NextProcessor"": [ 536, [ ""UInt32"", ""null"" ]],
				 ""NextProcessorNumber"": [ 536, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""SharedReadyQueue"": [ 536, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""QueuePriority"": [ 540, [ ""Int32"", ""null"" ]],
				 ""Process"": [ 544, [ ""Pointer"", ""{\""target\"":\""_KPROCESS\""}"" ]],
				 ""UserAffinity"": [ 552, [ ""_GROUP_AFFINITY"", ""null"" ]],
				 ""UserAffinityFill"": [ 552, [ ""Array"", ""{\""count\"":10,\""target\"":\""Byte\""}"" ]],
				 ""PreviousMode"": [ 562, [ ""Char"", ""null"" ]],
				 ""BasePriority"": [ 563, [ ""Char"", ""null"" ]],
				 ""PriorityDecrement"": [ 564, [ ""Char"", ""null"" ]],
				 ""ForegroundBoost"": [ 564, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""UnusualBoost"": [ 564, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""Preempted"": [ 565, [ ""Byte"", ""null"" ]],
				 ""AdjustReason"": [ 566, [ ""Byte"", ""null"" ]],
				 ""AdjustIncrement"": [ 567, [ ""Char"", ""null"" ]],
				 ""AffinityVersion"": [ 568, [ ""UInt64"", ""null"" ]],
				 ""Affinity"": [ 576, [ ""_GROUP_AFFINITY"", ""null"" ]],
				 ""AffinityFill"": [ 576, [ ""Array"", ""{\""count\"":10,\""target\"":\""Byte\""}"" ]],
				 ""ApcStateIndex"": [ 586, [ ""Byte"", ""null"" ]],
				 ""WaitBlockCount"": [ 587, [ ""Byte"", ""null"" ]],
				 ""IdealProcessor"": [ 588, [ ""UInt32"", ""null"" ]],
				 ""NpxState"": [ 592, [ ""UInt64"", ""null"" ]],
				 ""SavedApcState"": [ 600, [ ""_KAPC_STATE"", ""null"" ]],
				 ""SavedApcStateFill"": [ 600, [ ""Array"", ""{\""count\"":43,\""target\"":\""Byte\""}"" ]],
				 ""WaitReason"": [ 643, [ ""Byte"", ""null"" ]],
				 ""SuspendCount"": [ 644, [ ""Char"", ""null"" ]],
				 ""Saturation"": [ 645, [ ""Char"", ""null"" ]],
				 ""SListFaultCount"": [ 646, [ ""UInt16"", ""null"" ]],
				 ""SchedulerApc"": [ 648, [ ""_KAPC"", ""null"" ]],
				 ""SchedulerApcFill0"": [ 648, [ ""Array"", ""{\""count\"":1,\""target\"":\""Byte\""}"" ]],
				 ""ResourceIndex"": [ 649, [ ""Byte"", ""null"" ]],
				 ""SchedulerApcFill1"": [ 648, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""QuantumReset"": [ 651, [ ""Byte"", ""null"" ]],
				 ""SchedulerApcFill2"": [ 648, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""KernelTime"": [ 652, [ ""UInt32"", ""null"" ]],
				 ""SchedulerApcFill3"": [ 648, [ ""Array"", ""{\""count\"":64,\""target\"":\""Byte\""}"" ]],
				 ""WaitPrcb"": [ 712, [ ""Pointer"", ""{\""target\"":\""_KPRCB\""}"" ]],
				 ""SchedulerApcFill4"": [ 648, [ ""Array"", ""{\""count\"":72,\""target\"":\""Byte\""}"" ]],
				 ""LegoData"": [ 720, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SchedulerApcFill5"": [ 648, [ ""Array"", ""{\""count\"":83,\""target\"":\""Byte\""}"" ]],
				 ""CallbackNestingLevel"": [ 731, [ ""Byte"", ""null"" ]],
				 ""UserTime"": [ 732, [ ""UInt32"", ""null"" ]],
				 ""SuspendEvent"": [ 736, [ ""_KEVENT"", ""null"" ]],
				 ""ThreadListEntry"": [ 760, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""MutantListHead"": [ 776, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""AbEntrySummary"": [ 792, [ ""Byte"", ""null"" ]],
				 ""AbWaitEntryCount"": [ 793, [ ""Byte"", ""null"" ]],
				 ""AbAllocationRegionCount"": [ 794, [ ""Byte"", ""null"" ]],
				 ""SystemPriority"": [ 795, [ ""Char"", ""null"" ]],
				 ""SecureThreadCookie"": [ 796, [ ""UInt32"", ""null"" ]],
				 ""LockEntries"": [ 800, [ ""Pointer"", ""{\""target\"":\""_KLOCK_ENTRY\""}"" ]],
				 ""PropagateBoostsEntry"": [ 808, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""IoSelfBoostsEntry"": [ 816, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""PriorityFloorCounts"": [ 824, [ ""Array"", ""{\""count\"":16,\""target\"":\""Byte\""}"" ]],
				 ""PriorityFloorCountsReserved"": [ 840, [ ""Array"", ""{\""count\"":16,\""target\"":\""Byte\""}"" ]],
				 ""PriorityFloorSummary"": [ 856, [ ""UInt32"", ""null"" ]],
				 ""AbCompletedIoBoostCount"": [ 860, [ ""Int32"", ""null"" ]],
				 ""AbCompletedIoQoSBoostCount"": [ 864, [ ""Int32"", ""null"" ]],
				 ""KeReferenceCount"": [ 868, [ ""Int16"", ""null"" ]],
				 ""AbOrphanedEntrySummary"": [ 870, [ ""Byte"", ""null"" ]],
				 ""AbOwnedEntryCount"": [ 871, [ ""Byte"", ""null"" ]],
				 ""ForegroundLossTime"": [ 872, [ ""UInt32"", ""null"" ]],
				 ""GlobalForegroundListEntry"": [ 880, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ForegroundDpcStackListEntry"": [ 880, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""InGlobalForegroundList"": [ 888, [ ""UInt64"", ""null"" ]],
				 ""ReadOperationCount"": [ 896, [ ""Int64"", ""null"" ]],
				 ""WriteOperationCount"": [ 904, [ ""Int64"", ""null"" ]],
				 ""OtherOperationCount"": [ 912, [ ""Int64"", ""null"" ]],
				 ""ReadTransferCount"": [ 920, [ ""Int64"", ""null"" ]],
				 ""WriteTransferCount"": [ 928, [ ""Int64"", ""null"" ]],
				 ""OtherTransferCount"": [ 936, [ ""Int64"", ""null"" ]],
				 ""QueuedScb"": [ 944, [ ""Pointer"", ""{\""target\"":\""_KSCB\""}"" ]],
				 ""ThreadTimerDelay"": [ 952, [ ""UInt32"", ""null"" ]],
				 ""ThreadFlags3"": [ 956, [ ""Int32"", ""null"" ]],
				 ""ThreadFlags3Reserved"": [ 956, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""PpmPolicy"": [ 956, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""ThreadFlags3Reserved2"": [ 956, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""TracingPrivate"": [ 960, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""SchedulerAssist"": [ 968, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AbWaitObject"": [ 976, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReservedPreviousReadyTimeValue"": [ 984, [ ""UInt32"", ""null"" ]],
				 ""KernelWaitTime"": [ 992, [ ""UInt64"", ""null"" ]],
				 ""UserWaitTime"": [ 1000, [ ""UInt64"", ""null"" ]],
				 ""GlobalUpdateVpThreadPriorityListEntry"": [ 1008, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""UpdateVpThreadPriorityDpcStackListEntry"": [ 1008, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""InGlobalUpdateVpThreadPriorityList"": [ 1016, [ ""UInt64"", ""null"" ]],
				 ""SchedulerAssistPriorityFloor"": [ 1024, [ ""Int32"", ""null"" ]],
				 ""Spare28"": [ 1028, [ ""UInt32"", ""null"" ]],
				 ""EndPadding"": [ 1032, [ ""Array"", ""{\""count\"":5,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public _DISPATCHER_HEADER Header
		{
			get
			{
				_DISPATCHER_HEADER returnValue = new _DISPATCHER_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 SListFaultAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 QuantumTarget { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 InitialStack { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 StackLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 StackBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 ThreadLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 CycleTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt32 CurrentRunTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 ExpectedRunTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt64 KernelStack { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 StateSaveArea { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 SchedulingGroup { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public _KWAIT_STATUS_REGISTER WaitRegister
		{
			get
			{
				_KWAIT_STATUS_REGISTER returnValue = new _KWAIT_STATUS_REGISTER(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public Byte Running{ get { return _StructureData[_BufferOffset +113]; } }
		public Byte[] Alerted
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 114];
				return returnValue;
			}
		}
		public UInt32 AutoBoostActive
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ReadyTransition
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 WaitNext
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 SystemAffinityActive
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 Alertable
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 UserStackWalkActive
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 ApcInterruptRequest
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 QuantumEndMigrate
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 UmsDirectedSwitchEnable
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 TimerActive
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 SystemThread
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessDetachActive
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 CalloutActive
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 ScbReadyQueue
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 ApcQueueable
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 ReservedStackInUse
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 UmsPerformingSyscall
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 TimerSuspended
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 SuspendedWaitMode
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 262144) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 SuspendSchedulerApcWait
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 CetUserShadowStack
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 BypassProcessFreeze
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 22  end: 32  Mask: 11111111110000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 116);
				var value2 = (value & 4290772992) >> 22;
				return (UInt32)value2;
			}
		}
		public Int32 MiscFlags { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 116); } }
		public UInt32 ThreadFlagsSpare
		{
			get
			{
				// start: 0  end: 2  Mask: 0000000000000011
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 3) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 AutoAlignment
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 DisableBoost
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 AlertedByThreadId
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 QuantumDonation
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 EnableStackSwap
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 GuiThread
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 DisableQuantum
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 ChargeOnlySchedulingGroup
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 DeferPreemption
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 QueueDeferPreemption
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 ForceDeferSchedule
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 SharedReadyQueueAffinity
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 FreezeCount
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 TerminationApcRequest
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 AutoBoostEntriesExhausted
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 KernelStackResident
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 TerminateRequestReason
		{
			get
			{
				// start: 18  end: 20  Mask: 11000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 786432) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessStackCountDecremented
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 RestrictedGuiThread
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 VpBackingThread
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 ThreadFlagsSpare2
		{
			get
			{
				// start: 23  end: 24  Mask: 100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 8388608) >> 23;
				return (UInt32)value2;
			}
		}
		public UInt32 EtwStackTraceApcInserted
		{
			get
			{
				// start: 24  end: 32  Mask: 11111111000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 4278190080) >> 24;
				return (UInt32)value2;
			}
		}
		public Int32 ThreadFlags { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 120); } }
		public Byte Tag{ get { return _StructureData[_BufferOffset +124]; } }
		public Byte SystemHeteroCpuPolicy{ get { return _StructureData[_BufferOffset +125]; } }
		public Byte UserHeteroCpuPolicy
		{
			get
			{
				// start: 0  end: 7  Mask: 0000000001111111
				Byte value = _StructureData[_BufferOffset + 126];
				var value2 = (value & 127) >> 0;
				return (Byte)value2;
			}
		}
		public Byte ExplicitSystemHeteroCpuPolicy
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				Byte value = _StructureData[_BufferOffset + 126];
				var value2 = (value & 128) >> 7;
				return (Byte)value2;
			}
		}
		public Byte RunningNonRetpolineCode
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 127];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte SpecCtrlSpare
		{
			get
			{
				// start: 1  end: 8  Mask: 0000000011111110
				Byte value = _StructureData[_BufferOffset + 127];
				var value2 = (value & 254) >> 1;
				return (Byte)value2;
			}
		}
		public Byte SpecCtrl{ get { return _StructureData[_BufferOffset +127]; } }
		public UInt32 SystemCallNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 ReadyTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt64 FirstArgument { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 TrapFrame { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public _KAPC_STATE ApcState
		{
			get
			{
				_KAPC_STATE returnValue = new _KAPC_STATE(_StructureData, _BufferOffset + 152);
				return returnValue;
			}
		}
		public Byte[] ApcStateFill
		{
			get
			{
				Byte[] returnValue = new Byte[43];
				for(int i=0; i<43; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 152];
				return returnValue;
			}
		}
		public Char Priority { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 195); } }
		public UInt32 UserIdealProcessor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 196); } }
		public Int64 WaitStatus { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 WaitBlockList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public _LIST_ENTRY WaitListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 216);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY SwapListEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 216);
				return returnValue;
			}
		}
		public UInt64 Queue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 Teb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 RelativeTimerBias { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public _KTIMER Timer
		{
			get
			{
				_KTIMER returnValue = new _KTIMER(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
		public _KWAIT_BLOCK[] WaitBlock
		{
			get
			{
				_KWAIT_BLOCK[] returnValue = new _KWAIT_BLOCK[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new _KWAIT_BLOCK(_StructureData, (i * size) + _BufferOffset + 320);
				return returnValue;
			}
		}
		public Byte[] WaitBlockFill4
		{
			get
			{
				Byte[] returnValue = new Byte[20];
				for(int i=0; i<20; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 320];
				return returnValue;
			}
		}
		public UInt32 ContextSwitches { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 340); } }
		public Byte[] WaitBlockFill5
		{
			get
			{
				Byte[] returnValue = new Byte[68];
				for(int i=0; i<68; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 320];
				return returnValue;
			}
		}
		public Byte State{ get { return _StructureData[_BufferOffset +388]; } }
		public Char Spare13 { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 389); } }
		public Byte WaitIrql{ get { return _StructureData[_BufferOffset +390]; } }
		public Char WaitMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 391); } }
		public Byte[] WaitBlockFill6
		{
			get
			{
				Byte[] returnValue = new Byte[116];
				for(int i=0; i<116; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 320];
				return returnValue;
			}
		}
		public UInt32 WaitTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 436); } }
		public Byte[] WaitBlockFill7
		{
			get
			{
				Byte[] returnValue = new Byte[164];
				for(int i=0; i<164; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 320];
				return returnValue;
			}
		}
		public Int16 KernelApcDisable { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 484); } }
		public Int16 SpecialApcDisable { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 486); } }
		public UInt32 CombinedApcDisable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 484); } }
		public Byte[] WaitBlockFill8
		{
			get
			{
				Byte[] returnValue = new Byte[40];
				for(int i=0; i<40; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 320];
				return returnValue;
			}
		}
		public UInt64 ThreadCounters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 360); } }
		public Byte[] WaitBlockFill9
		{
			get
			{
				Byte[] returnValue = new Byte[88];
				for(int i=0; i<88; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 320];
				return returnValue;
			}
		}
		public UInt64 XStateSave { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 408); } }
		public Byte[] WaitBlockFill10
		{
			get
			{
				Byte[] returnValue = new Byte[136];
				for(int i=0; i<136; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 320];
				return returnValue;
			}
		}
		public UInt64 Win32Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 456); } }
		public Byte[] WaitBlockFill11
		{
			get
			{
				Byte[] returnValue = new Byte[176];
				for(int i=0; i<176; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 320];
				return returnValue;
			}
		}
		public UInt64 Ucb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 496); } }
		public UInt64 Uch { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 504); } }
		public Int32 ThreadFlags2 { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 512); } }
		public UInt32 BamQosLevel
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 512);
				var value2 = (value & 255) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ThreadFlags2Reserved
		{
			get
			{
				// start: 8  end: 32  Mask: 11111111111111111111111100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 512);
				var value2 = (value & 4294967040) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 Spare21 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 516); } }
		public _LIST_ENTRY QueueListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 520);
				return returnValue;
			}
		}
		public UInt32 NextProcessor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 536); } }
		public UInt32 NextProcessorNumber
		{
			get
			{
				// start: 0  end: 31  Mask: 1111111111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 536);
				var value2 = (value & 2147483647) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 SharedReadyQueue
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 536);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public Int32 QueuePriority { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 540); } }
		public UInt64 Process { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 544); } }
		public _GROUP_AFFINITY UserAffinity
		{
			get
			{
				_GROUP_AFFINITY returnValue = new _GROUP_AFFINITY(_StructureData, _BufferOffset + 552);
				return returnValue;
			}
		}
		public Byte[] UserAffinityFill
		{
			get
			{
				Byte[] returnValue = new Byte[10];
				for(int i=0; i<10; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 552];
				return returnValue;
			}
		}
		public Char PreviousMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 562); } }
		public Char BasePriority { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 563); } }
		public Char PriorityDecrement { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 564); } }
		public Byte ForegroundBoost
		{
			get
			{
				// start: 0  end: 4  Mask: 0000000000001111
				Byte value = _StructureData[_BufferOffset + 564];
				var value2 = (value & 15) >> 0;
				return (Byte)value2;
			}
		}
		public Byte UnusualBoost
		{
			get
			{
				// start: 4  end: 8  Mask: 0000000011110000
				Byte value = _StructureData[_BufferOffset + 564];
				var value2 = (value & 240) >> 4;
				return (Byte)value2;
			}
		}
		public Byte Preempted{ get { return _StructureData[_BufferOffset +565]; } }
		public Byte AdjustReason{ get { return _StructureData[_BufferOffset +566]; } }
		public Char AdjustIncrement { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 567); } }
		public UInt64 AffinityVersion { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 568); } }
		public _GROUP_AFFINITY Affinity
		{
			get
			{
				_GROUP_AFFINITY returnValue = new _GROUP_AFFINITY(_StructureData, _BufferOffset + 576);
				return returnValue;
			}
		}
		public Byte[] AffinityFill
		{
			get
			{
				Byte[] returnValue = new Byte[10];
				for(int i=0; i<10; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 576];
				return returnValue;
			}
		}
		public Byte ApcStateIndex{ get { return _StructureData[_BufferOffset +586]; } }
		public Byte WaitBlockCount{ get { return _StructureData[_BufferOffset +587]; } }
		public UInt32 IdealProcessor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 588); } }
		public UInt64 NpxState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 592); } }
		public _KAPC_STATE SavedApcState
		{
			get
			{
				_KAPC_STATE returnValue = new _KAPC_STATE(_StructureData, _BufferOffset + 600);
				return returnValue;
			}
		}
		public Byte[] SavedApcStateFill
		{
			get
			{
				Byte[] returnValue = new Byte[43];
				for(int i=0; i<43; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 600];
				return returnValue;
			}
		}
		public Byte WaitReason{ get { return _StructureData[_BufferOffset +643]; } }
		public Char SuspendCount { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 644); } }
		public Char Saturation { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 645); } }
		public UInt16 SListFaultCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 646); } }
		public _KAPC SchedulerApc
		{
			get
			{
				_KAPC returnValue = new _KAPC(_StructureData, _BufferOffset + 648);
				return returnValue;
			}
		}
		public Byte[] SchedulerApcFill0
		{
			get
			{
				Byte[] returnValue = new Byte[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 648];
				return returnValue;
			}
		}
		public Byte ResourceIndex{ get { return _StructureData[_BufferOffset +649]; } }
		public Byte[] SchedulerApcFill1
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 648];
				return returnValue;
			}
		}
		public Byte QuantumReset{ get { return _StructureData[_BufferOffset +651]; } }
		public Byte[] SchedulerApcFill2
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 648];
				return returnValue;
			}
		}
		public UInt32 KernelTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 652); } }
		public Byte[] SchedulerApcFill3
		{
			get
			{
				Byte[] returnValue = new Byte[64];
				for(int i=0; i<64; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 648];
				return returnValue;
			}
		}
		public UInt64 WaitPrcb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 712); } }
		public Byte[] SchedulerApcFill4
		{
			get
			{
				Byte[] returnValue = new Byte[72];
				for(int i=0; i<72; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 648];
				return returnValue;
			}
		}
		public UInt64 LegoData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 720); } }
		public Byte[] SchedulerApcFill5
		{
			get
			{
				Byte[] returnValue = new Byte[83];
				for(int i=0; i<83; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 648];
				return returnValue;
			}
		}
		public Byte CallbackNestingLevel{ get { return _StructureData[_BufferOffset +731]; } }
		public UInt32 UserTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 732); } }
		public _KEVENT SuspendEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 736);
				return returnValue;
			}
		}
		public _LIST_ENTRY ThreadListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 760);
				return returnValue;
			}
		}
		public _LIST_ENTRY MutantListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 776);
				return returnValue;
			}
		}
		public Byte AbEntrySummary{ get { return _StructureData[_BufferOffset +792]; } }
		public Byte AbWaitEntryCount{ get { return _StructureData[_BufferOffset +793]; } }
		public Byte AbAllocationRegionCount{ get { return _StructureData[_BufferOffset +794]; } }
		public Char SystemPriority { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 795); } }
		public UInt32 SecureThreadCookie { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 796); } }
		public UInt64 LockEntries { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 800); } }
		public _SINGLE_LIST_ENTRY PropagateBoostsEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 808);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY IoSelfBoostsEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 816);
				return returnValue;
			}
		}
		public Byte[] PriorityFloorCounts
		{
			get
			{
				Byte[] returnValue = new Byte[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 824];
				return returnValue;
			}
		}
		public Byte[] PriorityFloorCountsReserved
		{
			get
			{
				Byte[] returnValue = new Byte[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 840];
				return returnValue;
			}
		}
		public UInt32 PriorityFloorSummary { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 856); } }
		public Int32 AbCompletedIoBoostCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 860); } }
		public Int32 AbCompletedIoQoSBoostCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 864); } }
		public Int16 KeReferenceCount { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 868); } }
		public Byte AbOrphanedEntrySummary{ get { return _StructureData[_BufferOffset +870]; } }
		public Byte AbOwnedEntryCount{ get { return _StructureData[_BufferOffset +871]; } }
		public UInt32 ForegroundLossTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 872); } }
		public _LIST_ENTRY GlobalForegroundListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 880);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY ForegroundDpcStackListEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 880);
				return returnValue;
			}
		}
		public UInt64 InGlobalForegroundList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 888); } }
		public Int64 ReadOperationCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 896); } }
		public Int64 WriteOperationCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 904); } }
		public Int64 OtherOperationCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 912); } }
		public Int64 ReadTransferCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 920); } }
		public Int64 WriteTransferCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 928); } }
		public Int64 OtherTransferCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 936); } }
		public UInt64 QueuedScb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 944); } }
		public UInt32 ThreadTimerDelay { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 952); } }
		public Int32 ThreadFlags3 { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 956); } }
		public UInt32 ThreadFlags3Reserved
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 956);
				var value2 = (value & 255) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 PpmPolicy
		{
			get
			{
				// start: 8  end: 10  Mask: 0000001100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 956);
				var value2 = (value & 768) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 ThreadFlags3Reserved2
		{
			get
			{
				// start: 10  end: 32  Mask: 11111111111111111111110000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 956);
				var value2 = (value & 4294966272) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt64[] TracingPrivate
		{
			get
			{
				UInt64[] returnValue = new UInt64[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 960);
				return returnValue;
			}
		}
		public UInt64 SchedulerAssist { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 968); } }
		public UInt64 AbWaitObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 976); } }
		public UInt32 ReservedPreviousReadyTimeValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 984); } }
		public UInt64 KernelWaitTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 992); } }
		public UInt64 UserWaitTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1000); } }
		public _LIST_ENTRY GlobalUpdateVpThreadPriorityListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1008);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY UpdateVpThreadPriorityDpcStackListEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 1008);
				return returnValue;
			}
		}
		public UInt64 InGlobalUpdateVpThreadPriorityList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1016); } }
		public Int32 SchedulerAssistPriorityFloor { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 1024); } }
		public UInt32 Spare28 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1028); } }
		public UInt64[] EndPadding
		{
			get
			{
				UInt64[] returnValue = new UInt64[5];
				for(int i=0; i<5; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 1032);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KSTACK_CONTROL
 
	public class _KSTACK_CONTROL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KSTACK_CONTROL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KSTACK_CONTROL"": [ 48, {
				 ""StackBase"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""ActualLimit"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""StackExpansion"": [ 8, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Previous"": [ 16, [ ""_KERNEL_STACK_SEGMENT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 StackBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ActualLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 StackExpansion
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 8);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public _KERNEL_STACK_SEGMENT Previous
		{
			get
			{
				_KERNEL_STACK_SEGMENT returnValue = new _KERNEL_STACK_SEGMENT(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _QUAD
 
	public class _QUAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _QUAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_QUAD"": [ 8, {
				 ""UseThisFieldToCopy"": [ 0, [ ""Int64"", ""null"" ]],
				 ""DoNotUseThisField"": [ 0, [ ""Double"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int64 UseThisFieldToCopy { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 0); } }
		public Double DoNotUseThisField { get { return BitConverter.ToDouble(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _PP_LOOKASIDE_LIST
 
	public class _PP_LOOKASIDE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PP_LOOKASIDE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PP_LOOKASIDE_LIST"": [ 16, {
				 ""P"": [ 0, [ ""Pointer"", ""{\""target\"":\""_GENERAL_LOOKASIDE\""}"" ]],
				 ""L"": [ 8, [ ""Pointer"", ""{\""target\"":\""_GENERAL_LOOKASIDE\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 P { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 L { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _KNODE
 
	public class _KNODE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KNODE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 384; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KNODE"": [ 384, {
				 ""IdleNonParkedCpuSet"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""IdleSmtSet"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""NonPairedSmtSet"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""IdleCpuSet"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""DeepIdleSet"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""IdleConstrainedSet"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""NonParkedSet"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""SoftParkedSet"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""NonIsrTargetedSet"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""ParkLock"": [ 104, [ ""Int32"", ""null"" ]],
				 ""ThreadSeed"": [ 108, [ ""UInt16"", ""null"" ]],
				 ""ProcessSeed"": [ 110, [ ""UInt16"", ""null"" ]],
				 ""SiblingMask"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""Affinity"": [ 136, [ ""_GROUP_AFFINITY"", ""null"" ]],
				 ""AffinityFill"": [ 136, [ ""Array"", ""{\""count\"":10,\""target\"":\""Byte\""}"" ]],
				 ""NodeNumber"": [ 146, [ ""UInt16"", ""null"" ]],
				 ""PrimaryNodeNumber"": [ 148, [ ""UInt16"", ""null"" ]],
				 ""Spare0"": [ 150, [ ""UInt16"", ""null"" ]],
				 ""SharedReadyQueueMask"": [ 152, [ ""UInt64"", ""null"" ]],
				 ""StrideMask"": [ 160, [ ""UInt64"", ""null"" ]],
				 ""ProximityId"": [ 168, [ ""UInt32"", ""null"" ]],
				 ""Lowest"": [ 172, [ ""UInt32"", ""null"" ]],
				 ""Highest"": [ 176, [ ""UInt32"", ""null"" ]],
				 ""MaximumProcessors"": [ 180, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 181, [ ""_flags"", ""null"" ]],
				 ""Spare10"": [ 182, [ ""Byte"", ""null"" ]],
				 ""HeteroSets"": [ 184, [ ""Array"", ""{\""count\"":5,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""PpmConfiguredQosSets"": [ 304, [ ""Array"", ""{\""count\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""Spare11"": [ 344, [ ""UInt64"", ""null"" ]],
				 ""QosGroupingSets"": [ 352, [ ""_KQOS_GROUPING_SETS"", ""null"" ]],
				 ""QosPreemptibleSet"": [ 368, [ ""UInt64"", ""null"" ]],
				 ""LLCLeaders"": [ 376, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 IdleNonParkedCpuSet { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 IdleSmtSet { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 NonPairedSmtSet { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 IdleCpuSet { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 DeepIdleSet { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 IdleConstrainedSet { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 NonParkedSet { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 SoftParkedSet { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 NonIsrTargetedSet { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public Int32 ParkLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 104); } }
		public UInt16 ThreadSeed { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 108); } }
		public UInt16 ProcessSeed { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 110); } }
		public UInt32 SiblingMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public _GROUP_AFFINITY Affinity
		{
			get
			{
				_GROUP_AFFINITY returnValue = new _GROUP_AFFINITY(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public Byte[] AffinityFill
		{
			get
			{
				Byte[] returnValue = new Byte[10];
				for(int i=0; i<10; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 136];
				return returnValue;
			}
		}
		public UInt16 NodeNumber { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 146); } }
		public UInt16 PrimaryNodeNumber { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 148); } }
		public UInt16 Spare0 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 150); } }
		public UInt64 SharedReadyQueueMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 StrideMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt32 ProximityId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public UInt32 Lowest { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 172); } }
		public UInt32 Highest { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 176); } }
		public Byte MaximumProcessors{ get { return _StructureData[_BufferOffset +180]; } }
		public _flags Flags
		{
			get
			{
				_flags returnValue = new _flags(_StructureData, _BufferOffset + 181);
				return returnValue;
			}
		}
		public Byte Spare10{ get { return _StructureData[_BufferOffset +182]; } }
		public _KHETERO_PROCESSOR_SET[] HeteroSets
		{
			get
			{
				_KHETERO_PROCESSOR_SET[] returnValue = new _KHETERO_PROCESSOR_SET[5];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<5; i++ )
					returnValue[i] = new _KHETERO_PROCESSOR_SET(_StructureData, (i * size) + _BufferOffset + 184);
				return returnValue;
			}
		}
		public UInt64[] PpmConfiguredQosSets
		{
			get
			{
				UInt64[] returnValue = new UInt64[5];
				for(int i=0; i<5; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 304);
				return returnValue;
			}
		}
		public UInt64 Spare11 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 344); } }
		public _KQOS_GROUPING_SETS QosGroupingSets
		{
			get
			{
				_KQOS_GROUPING_SETS returnValue = new _KQOS_GROUPING_SETS(_StructureData, _BufferOffset + 352);
				return returnValue;
			}
		}
		public UInt64 QosPreemptibleSet { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 368); } }
		public UInt64 LLCLeaders { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 376); } }
	}
	#endregion
	#region _ENODE
 
	public class _ENODE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ENODE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 448; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ENODE"": [ 448, {
				 ""Ncb"": [ 0, [ ""_KNODE"", ""null"" ]],
				 ""HotAddProcessorWorkItem"": [ 384, [ ""_WORK_QUEUE_ITEM"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KNODE Ncb
		{
			get
			{
				_KNODE returnValue = new _KNODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _WORK_QUEUE_ITEM HotAddProcessorWorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 384);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HANDLE_TABLE
 
	public class _HANDLE_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HANDLE_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HANDLE_TABLE"": [ 128, {
				 ""NextHandleNeedingPool"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ExtraInfoPages"": [ 4, [ ""Int32"", ""null"" ]],
				 ""TableCode"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""QuotaProcess"": [ 16, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""HandleTableList"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""UniqueProcessId"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""StrictFIFO"": [ 44, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""EnableHandleExceptions"": [ 44, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""Rundown"": [ 44, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""Duplicated"": [ 44, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""RaiseUMExceptionOnInvalidHandleClose"": [ 44, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""HandleContentionEvent"": [ 48, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""HandleTableLock"": [ 56, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""FreeLists"": [ 64, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""ActualEntry"": [ 64, [ ""Array"", ""{\""count\"":32,\""target\"":\""Byte\""}"" ]],
				 ""DebugInfo"": [ 96, [ ""Pointer"", ""{\""target\"":\""_HANDLE_TRACE_DEBUG_INFO\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 NextHandleNeedingPool { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 ExtraInfoPages { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 TableCode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 QuotaProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _LIST_ENTRY HandleTableList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 UniqueProcessId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public Byte StrictFIFO
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 44];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte EnableHandleExceptions
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 44];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte Rundown
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 44];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte Duplicated
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 44];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte RaiseUMExceptionOnInvalidHandleClose
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 44];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public _EX_PUSH_LOCK HandleContentionEvent
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK HandleTableLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _HANDLE_TABLE_FREE_LIST[] FreeLists
		{
			get
			{
				_HANDLE_TABLE_FREE_LIST[] returnValue = new _HANDLE_TABLE_FREE_LIST[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _HANDLE_TABLE_FREE_LIST(_StructureData, (i * size) + _BufferOffset + 64);
				return returnValue;
			}
		}
		public Byte[] ActualEntry
		{
			get
			{
				Byte[] returnValue = new Byte[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 64];
				return returnValue;
			}
		}
		public UInt64 DebugInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
	}
	#endregion
	#region _HANDLE_TABLE_ENTRY_INFO
 
	public class _HANDLE_TABLE_ENTRY_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HANDLE_TABLE_ENTRY_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HANDLE_TABLE_ENTRY_INFO"": [ 8, {
				 ""AuditMask"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""MaxRelativeAccessMask"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 AuditMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 MaxRelativeAccessMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _HANDLE_TABLE_ENTRY
 
	public class _HANDLE_TABLE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HANDLE_TABLE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HANDLE_TABLE_ENTRY"": [ 16, {
				 ""VolatileLowValue"": [ 0, [ ""Int64"", ""null"" ]],
				 ""LowValue"": [ 0, [ ""Int64"", ""null"" ]],
				 ""InfoTable"": [ 0, [ ""Pointer"", ""{\""target\"":\""_HANDLE_TABLE_ENTRY_INFO\""}"" ]],
				 ""HighValue"": [ 8, [ ""Int64"", ""null"" ]],
				 ""NextFreeHandleEntry"": [ 8, [ ""Pointer"", ""{\""target\"":\""_HANDLE_TABLE_ENTRY\""}"" ]],
				 ""LeafHandleValue"": [ 8, [ ""_EXHANDLE"", ""null"" ]],
				 ""RefCountField"": [ 0, [ ""Int64"", ""null"" ]],
				 ""Unlocked"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""RefCnt"": [ 0, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""Attributes"": [ 0, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":17,\""target\"":\""UInt64\""}"" ]],
				 ""ObjectPointerBits"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":20,\""target\"":\""UInt64\""}"" ]],
				 ""GrantedAccessBits"": [ 8, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""NoRightsUpgrade"": [ 8, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":25,\""target\"":\""UInt32\""}"" ]],
				 ""Spare1"": [ 8, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""Spare2"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int64 VolatileLowValue { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 0); } }
		public Int64 LowValue { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 InfoTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Int64 HighValue { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 NextFreeHandleEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _EXHANDLE LeafHandleValue
		{
			get
			{
				_EXHANDLE returnValue = new _EXHANDLE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public Int64 RefCountField { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Unlocked
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 RefCnt
		{
			get
			{
				// start: 1  end: 17  Mask: 11111111111111110
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 131070) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 Attributes
		{
			get
			{
				// start: 17  end: 20  Mask: 11100000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 917504) >> 17;
				return (UInt64)value2;
			}
		}
		public UInt64 ObjectPointerBits
		{
			get
			{
				// start: 20  end: 64  Mask: 1111111111111111111111111111111111111111111100000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744073708503040) >> 20;
				return (UInt64)value2;
			}
		}
		public UInt32 GrantedAccessBits
		{
			get
			{
				// start: 0  end: 25  Mask: 1111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 33554431) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 NoRightsUpgrade
		{
			get
			{
				// start: 25  end: 26  Mask: 10000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 33554432) >> 25;
				return (UInt32)value2;
			}
		}
		public UInt32 Spare1
		{
			get
			{
				// start: 26  end: 32  Mask: 11111100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 4227858432) >> 26;
				return (UInt32)value2;
			}
		}
		public UInt32 Spare2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _EX_FAST_REF
 
	public class _EX_FAST_REF
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_FAST_REF(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_FAST_REF"": [ 8, {
				 ""Object"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RefCnt"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Value"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Object { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 RefCnt
		{
			get
			{
				// start: 0  end: 4  Mask: 0000000000001111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 15) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Value { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _AUX_ACCESS_DATA
 
	public class _AUX_ACCESS_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _AUX_ACCESS_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 224; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_AUX_ACCESS_DATA"": [ 224, {
				 ""PrivilegesUsed"": [ 0, [ ""Pointer"", ""{\""target\"":\""_PRIVILEGE_SET\""}"" ]],
				 ""GenericMapping"": [ 8, [ ""_GENERIC_MAPPING"", ""null"" ]],
				 ""AccessesToAudit"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""MaximumAuditMask"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""TransactionId"": [ 32, [ ""_GUID"", ""null"" ]],
				 ""NewSecurityDescriptor"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ExistingSecurityDescriptor"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ParentSecurityDescriptor"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeRefSecurityDescriptor"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SDLock"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AccessReasons"": [ 88, [ ""_ACCESS_REASONS"", ""null"" ]],
				 ""GenerateStagingEvents"": [ 216, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PrivilegesUsed { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _GENERIC_MAPPING GenericMapping
		{
			get
			{
				_GENERIC_MAPPING returnValue = new _GENERIC_MAPPING(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 AccessesToAudit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 MaximumAuditMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public _GUID TransactionId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 NewSecurityDescriptor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 ExistingSecurityDescriptor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 ParentSecurityDescriptor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 DeRefSecurityDescriptor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 SDLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public _ACCESS_REASONS AccessReasons
		{
			get
			{
				_ACCESS_REASONS returnValue = new _ACCESS_REASONS(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public Byte GenerateStagingEvents{ get { return _StructureData[_BufferOffset +216]; } }
	}
	#endregion
	#region _OBJECT_HANDLE_INFORMATION
 
	public class _OBJECT_HANDLE_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_HANDLE_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_HANDLE_INFORMATION"": [ 8, {
				 ""HandleAttributes"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""GrantedAccess"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 HandleAttributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 GrantedAccess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _ETHREAD
 
	public class _ETHREAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETHREAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2200; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETHREAD"": [ 2200, {
				 ""Tcb"": [ 0, [ ""_KTHREAD"", ""null"" ]],
				 ""CreateTime"": [ 1072, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ExitTime"": [ 1080, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""KeyedWaitChain"": [ 1080, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PostBlockList"": [ 1096, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ForwardLinkShadow"": [ 1096, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StartAddress"": [ 1104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TerminationPort"": [ 1112, [ ""Pointer"", ""{\""target\"":\""_TERMINATION_PORT\""}"" ]],
				 ""ReaperLink"": [ 1112, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""KeyedWaitValue"": [ 1112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ActiveTimerListLock"": [ 1120, [ ""UInt64"", ""null"" ]],
				 ""ActiveTimerListHead"": [ 1128, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Cid"": [ 1144, [ ""_CLIENT_ID"", ""null"" ]],
				 ""KeyedWaitSemaphore"": [ 1160, [ ""_KSEMAPHORE"", ""null"" ]],
				 ""AlpcWaitSemaphore"": [ 1160, [ ""_KSEMAPHORE"", ""null"" ]],
				 ""ClientSecurity"": [ 1192, [ ""_PS_CLIENT_SECURITY_CONTEXT"", ""null"" ]],
				 ""IrpList"": [ 1200, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""TopLevelIrp"": [ 1216, [ ""UInt64"", ""null"" ]],
				 ""DeviceToVerify"": [ 1224, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""Win32StartAddress"": [ 1232, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ChargeOnlySession"": [ 1240, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LegacyPowerObject"": [ 1248, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ThreadListEntry"": [ 1256, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""RundownProtect"": [ 1272, [ ""_EX_RUNDOWN_REF"", ""null"" ]],
				 ""ThreadLock"": [ 1280, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""ReadClusterSize"": [ 1288, [ ""UInt32"", ""null"" ]],
				 ""MmLockOrdering"": [ 1292, [ ""Int32"", ""null"" ]],
				 ""CrossThreadFlags"": [ 1296, [ ""UInt32"", ""null"" ]],
				 ""Terminated"": [ 1296, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ThreadInserted"": [ 1296, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""HideFromDebugger"": [ 1296, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ActiveImpersonationInfo"": [ 1296, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""HardErrorsAreDisabled"": [ 1296, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""BreakOnTermination"": [ 1296, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""SkipCreationMsg"": [ 1296, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""SkipTerminationMsg"": [ 1296, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""CopyTokenOnOpen"": [ 1296, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""ThreadIoPriority"": [ 1296, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""ThreadPagePriority"": [ 1296, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""RundownFail"": [ 1296, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""UmsForceQueueTermination"": [ 1296, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""IndirectCpuSets"": [ 1296, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""DisableDynamicCodeOptOut"": [ 1296, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""ExplicitCaseSensitivity"": [ 1296, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""PicoNotifyExit"": [ 1296, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""DbgWerUserReportActive"": [ 1296, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""ForcedSelfTrimActive"": [ 1296, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""SamplingCoverage"": [ 1296, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]],
				 ""ReservedCrossThreadFlags"": [ 1296, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""SameThreadPassiveFlags"": [ 1300, [ ""UInt32"", ""null"" ]],
				 ""ActiveExWorker"": [ 1300, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""MemoryMaker"": [ 1300, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""StoreLockThread"": [ 1300, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ClonedThread"": [ 1300, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""KeyedEventInUse"": [ 1300, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""SelfTerminate"": [ 1300, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""RespectIoPriority"": [ 1300, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""ActivePageLists"": [ 1300, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""SecureContext"": [ 1300, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""ZeroPageThread"": [ 1300, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""WorkloadClass"": [ 1300, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""ReservedSameThreadPassiveFlags"": [ 1300, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""SameThreadApcFlags"": [ 1304, [ ""UInt32"", ""null"" ]],
				 ""OwnsProcessAddressSpaceExclusive"": [ 1304, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""OwnsProcessAddressSpaceShared"": [ 1304, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""HardFaultBehavior"": [ 1304, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""StartAddressInvalid"": [ 1304, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""EtwCalloutActive"": [ 1304, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""SuppressSymbolLoad"": [ 1304, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""Prefetching"": [ 1304, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""OwnsVadExclusive"": [ 1304, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""Byte\""}"" ]],
				 ""SystemPagePriorityActive"": [ 1305, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""SystemPagePriority"": [ 1305, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""AllowUserWritesToExecutableMemory"": [ 1305, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""AllowKernelWritesToExecutableMemory"": [ 1305, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""OwnsVadShared"": [ 1305, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""CacheManagerActive"": [ 1308, [ ""Byte"", ""null"" ]],
				 ""DisablePageFaultClustering"": [ 1309, [ ""Byte"", ""null"" ]],
				 ""ActiveFaultCount"": [ 1310, [ ""Byte"", ""null"" ]],
				 ""LockOrderState"": [ 1311, [ ""Byte"", ""null"" ]],
				 ""PerformanceCountLowReserved"": [ 1312, [ ""UInt32"", ""null"" ]],
				 ""PerformanceCountHighReserved"": [ 1316, [ ""Int32"", ""null"" ]],
				 ""AlpcMessageId"": [ 1320, [ ""UInt64"", ""null"" ]],
				 ""AlpcMessage"": [ 1328, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AlpcReceiveAttributeSet"": [ 1328, [ ""UInt32"", ""null"" ]],
				 ""AlpcWaitListEntry"": [ 1336, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ExitStatus"": [ 1352, [ ""Int32"", ""null"" ]],
				 ""CacheManagerCount"": [ 1356, [ ""UInt32"", ""null"" ]],
				 ""IoBoostCount"": [ 1360, [ ""UInt32"", ""null"" ]],
				 ""IoQoSBoostCount"": [ 1364, [ ""UInt32"", ""null"" ]],
				 ""IoQoSThrottleCount"": [ 1368, [ ""UInt32"", ""null"" ]],
				 ""KernelStackReference"": [ 1372, [ ""UInt32"", ""null"" ]],
				 ""BoostList"": [ 1376, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeboostList"": [ 1392, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""BoostListLock"": [ 1408, [ ""UInt64"", ""null"" ]],
				 ""IrpListLock"": [ 1416, [ ""UInt64"", ""null"" ]],
				 ""ReservedForSynchTracking"": [ 1424, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CmCallbackListHead"": [ 1432, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""ActivityId"": [ 1440, [ ""Pointer"", ""{\""target\"":\""_GUID\""}"" ]],
				 ""SeLearningModeListHead"": [ 1448, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""VerifierContext"": [ 1456, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AdjustedClientToken"": [ 1464, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WorkOnBehalfThread"": [ 1472, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PropertySet"": [ 1480, [ ""_PS_PROPERTY_SET"", ""null"" ]],
				 ""PicoContext"": [ 1504, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UserFsBase"": [ 1512, [ ""UInt64"", ""null"" ]],
				 ""UserGsBase"": [ 1520, [ ""UInt64"", ""null"" ]],
				 ""EnergyValues"": [ 1528, [ ""Pointer"", ""{\""target\"":\""_THREAD_ENERGY_VALUES\""}"" ]],
				 ""SelectedCpuSets"": [ 1536, [ ""UInt64"", ""null"" ]],
				 ""SelectedCpuSetsIndirect"": [ 1536, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]],
				 ""Silo"": [ 1544, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]],
				 ""ThreadName"": [ 1552, [ ""Pointer"", ""{\""target\"":\""_UNICODE_STRING\""}"" ]],
				 ""SetContextState"": [ 1560, [ ""Pointer"", ""{\""target\"":\""_CONTEXT\""}"" ]],
				 ""LastExpectedRunTime"": [ 1568, [ ""UInt32"", ""null"" ]],
				 ""HeapData"": [ 1572, [ ""UInt32"", ""null"" ]],
				 ""OwnerEntryListHead"": [ 1576, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DisownedOwnerEntryListLock"": [ 1592, [ ""UInt64"", ""null"" ]],
				 ""DisownedOwnerEntryListHead"": [ 1600, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LockEntries"": [ 1616, [ ""Array"", ""{\""count\"":6,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""CmDbgInfo"": [ 2192, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _KTHREAD Tcb
		{
			get
			{
				_KTHREAD returnValue = new _KTHREAD(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LARGE_INTEGER CreateTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 1072);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ExitTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 1080);
				return returnValue;
			}
		}
		public _LIST_ENTRY KeyedWaitChain
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1080);
				return returnValue;
			}
		}
		public _LIST_ENTRY PostBlockList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1096);
				return returnValue;
			}
		}
		public UInt64 ForwardLinkShadow { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1096); } }
		public UInt64 StartAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1104); } }
		public UInt64 TerminationPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1112); } }
		public UInt64 ReaperLink { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1112); } }
		public UInt64 KeyedWaitValue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1112); } }
		public UInt64 ActiveTimerListLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1120); } }
		public _LIST_ENTRY ActiveTimerListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1128);
				return returnValue;
			}
		}
		public _CLIENT_ID Cid
		{
			get
			{
				_CLIENT_ID returnValue = new _CLIENT_ID(_StructureData, _BufferOffset + 1144);
				return returnValue;
			}
		}
		public _KSEMAPHORE KeyedWaitSemaphore
		{
			get
			{
				_KSEMAPHORE returnValue = new _KSEMAPHORE(_StructureData, _BufferOffset + 1160);
				return returnValue;
			}
		}
		public _KSEMAPHORE AlpcWaitSemaphore
		{
			get
			{
				_KSEMAPHORE returnValue = new _KSEMAPHORE(_StructureData, _BufferOffset + 1160);
				return returnValue;
			}
		}
		public _PS_CLIENT_SECURITY_CONTEXT ClientSecurity
		{
			get
			{
				_PS_CLIENT_SECURITY_CONTEXT returnValue = new _PS_CLIENT_SECURITY_CONTEXT(_StructureData, _BufferOffset + 1192);
				return returnValue;
			}
		}
		public _LIST_ENTRY IrpList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1200);
				return returnValue;
			}
		}
		public UInt64 TopLevelIrp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1216); } }
		public UInt64 DeviceToVerify { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1224); } }
		public UInt64 Win32StartAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1232); } }
		public UInt64 ChargeOnlySession { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1240); } }
		public UInt64 LegacyPowerObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1248); } }
		public _LIST_ENTRY ThreadListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1256);
				return returnValue;
			}
		}
		public _EX_RUNDOWN_REF RundownProtect
		{
			get
			{
				_EX_RUNDOWN_REF returnValue = new _EX_RUNDOWN_REF(_StructureData, _BufferOffset + 1272);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK ThreadLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 1280);
				return returnValue;
			}
		}
		public UInt32 ReadClusterSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1288); } }
		public Int32 MmLockOrdering { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 1292); } }
		public UInt32 CrossThreadFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296); } }
		public UInt32 Terminated
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ThreadInserted
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 HideFromDebugger
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 ActiveImpersonationInfo
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 HardErrorsAreDisabled
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 BreakOnTermination
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 SkipCreationMsg
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 SkipTerminationMsg
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 CopyTokenOnOpen
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 ThreadIoPriority
		{
			get
			{
				// start: 9  end: 12  Mask: 0000111000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 3584) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 ThreadPagePriority
		{
			get
			{
				// start: 12  end: 15  Mask: 0111000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 28672) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 RundownFail
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 UmsForceQueueTermination
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 IndirectCpuSets
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 DisableDynamicCodeOptOut
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 262144) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 ExplicitCaseSensitivity
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 PicoNotifyExit
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgWerUserReportActive
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 ForcedSelfTrimActive
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 SamplingCoverage
		{
			get
			{
				// start: 23  end: 24  Mask: 100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 8388608) >> 23;
				return (UInt32)value2;
			}
		}
		public UInt32 ReservedCrossThreadFlags
		{
			get
			{
				// start: 24  end: 32  Mask: 11111111000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296);
				var value2 = (value & 4278190080) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 SameThreadPassiveFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1300); } }
		public UInt32 ActiveExWorker
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1300);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 MemoryMaker
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1300);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 StoreLockThread
		{
			get
			{
				// start: 2  end: 4  Mask: 0000000000001100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1300);
				var value2 = (value & 12) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 ClonedThread
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1300);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 KeyedEventInUse
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1300);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 SelfTerminate
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1300);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 RespectIoPriority
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1300);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 ActivePageLists
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1300);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 SecureContext
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1300);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 ZeroPageThread
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1300);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 WorkloadClass
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1300);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 ReservedSameThreadPassiveFlags
		{
			get
			{
				// start: 12  end: 32  Mask: 11111111111111111111000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1300);
				var value2 = (value & 4294963200) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 SameThreadApcFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1304); } }
		public Byte OwnsProcessAddressSpaceExclusive
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 1304];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte OwnsProcessAddressSpaceShared
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 1304];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte HardFaultBehavior
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 1304];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte StartAddressInvalid
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 1304];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte EtwCalloutActive
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 1304];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte SuppressSymbolLoad
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 1304];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte Prefetching
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				Byte value = _StructureData[_BufferOffset + 1304];
				var value2 = (value & 64) >> 6;
				return (Byte)value2;
			}
		}
		public Byte OwnsVadExclusive
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				Byte value = _StructureData[_BufferOffset + 1304];
				var value2 = (value & 128) >> 7;
				return (Byte)value2;
			}
		}
		public Byte SystemPagePriorityActive
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 1305];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte SystemPagePriority
		{
			get
			{
				// start: 1  end: 4  Mask: 0000000000001110
				Byte value = _StructureData[_BufferOffset + 1305];
				var value2 = (value & 14) >> 1;
				return (Byte)value2;
			}
		}
		public Byte AllowUserWritesToExecutableMemory
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 1305];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte AllowKernelWritesToExecutableMemory
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 1305];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte OwnsVadShared
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				Byte value = _StructureData[_BufferOffset + 1305];
				var value2 = (value & 64) >> 6;
				return (Byte)value2;
			}
		}
		public Byte CacheManagerActive{ get { return _StructureData[_BufferOffset +1308]; } }
		public Byte DisablePageFaultClustering{ get { return _StructureData[_BufferOffset +1309]; } }
		public Byte ActiveFaultCount{ get { return _StructureData[_BufferOffset +1310]; } }
		public Byte LockOrderState{ get { return _StructureData[_BufferOffset +1311]; } }
		public UInt32 PerformanceCountLowReserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1312); } }
		public Int32 PerformanceCountHighReserved { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 1316); } }
		public UInt64 AlpcMessageId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1320); } }
		public UInt64 AlpcMessage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1328); } }
		public UInt32 AlpcReceiveAttributeSet { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1328); } }
		public _LIST_ENTRY AlpcWaitListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1336);
				return returnValue;
			}
		}
		public Int32 ExitStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 1352); } }
		public UInt32 CacheManagerCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1356); } }
		public UInt32 IoBoostCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1360); } }
		public UInt32 IoQoSBoostCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1364); } }
		public UInt32 IoQoSThrottleCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1368); } }
		public UInt32 KernelStackReference { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1372); } }
		public _LIST_ENTRY BoostList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1376);
				return returnValue;
			}
		}
		public _LIST_ENTRY DeboostList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1392);
				return returnValue;
			}
		}
		public UInt64 BoostListLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1408); } }
		public UInt64 IrpListLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1416); } }
		public UInt64 ReservedForSynchTracking { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1424); } }
		public _SINGLE_LIST_ENTRY CmCallbackListHead
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 1432);
				return returnValue;
			}
		}
		public UInt64 ActivityId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1440); } }
		public _SINGLE_LIST_ENTRY SeLearningModeListHead
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 1448);
				return returnValue;
			}
		}
		public UInt64 VerifierContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1456); } }
		public UInt64 AdjustedClientToken { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1464); } }
		public UInt64 WorkOnBehalfThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1472); } }
		public _PS_PROPERTY_SET PropertySet
		{
			get
			{
				_PS_PROPERTY_SET returnValue = new _PS_PROPERTY_SET(_StructureData, _BufferOffset + 1480);
				return returnValue;
			}
		}
		public UInt64 PicoContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1504); } }
		public UInt64 UserFsBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1512); } }
		public UInt64 UserGsBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1520); } }
		public UInt64 EnergyValues { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1528); } }
		public UInt64 SelectedCpuSets { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1536); } }
		public UInt64 SelectedCpuSetsIndirect { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1536); } }
		public UInt64 Silo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1544); } }
		public UInt64 ThreadName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1552); } }
		public UInt64 SetContextState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1560); } }
		public UInt32 LastExpectedRunTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1568); } }
		public UInt32 HeapData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1572); } }
		public _LIST_ENTRY OwnerEntryListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1576);
				return returnValue;
			}
		}
		public UInt64 DisownedOwnerEntryListLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1592); } }
		public _LIST_ENTRY DisownedOwnerEntryListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1600);
				return returnValue;
			}
		}
		public _KLOCK_ENTRY[] LockEntries
		{
			get
			{
				_KLOCK_ENTRY[] returnValue = new _KLOCK_ENTRY[6];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<6; i++ )
					returnValue[i] = new _KLOCK_ENTRY(_StructureData, (i * size) + _BufferOffset + 1616);
				return returnValue;
			}
		}
		public UInt64 CmDbgInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2192); } }
	}
	#endregion
	#region _PAGEFAULT_HISTORY
 
	public class _PAGEFAULT_HISTORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PAGEFAULT_HISTORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PAGEFAULT_HISTORY"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _EPROCESS_QUOTA_BLOCK
 
	public class _EPROCESS_QUOTA_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EPROCESS_QUOTA_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EPROCESS_QUOTA_BLOCK"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _PO_PROCESS_ENERGY_CONTEXT
 
	public class _PO_PROCESS_ENERGY_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_PROCESS_ENERGY_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_PROCESS_ENERGY_CONTEXT"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _PS_INTERLOCKED_TIMER_DELAY_VALUES
 
	public class _PS_INTERLOCKED_TIMER_DELAY_VALUES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_INTERLOCKED_TIMER_DELAY_VALUES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_INTERLOCKED_TIMER_DELAY_VALUES"": [ 8, {
				 ""DelayMs"": [ 0, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""CoalescingWindowMs"": [ 0, [ ""BitField"", ""{\""end_bit\"":60,\""start_bit\"":30,\""target\"":\""UInt64\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":61,\""start_bit\"":60,\""target\"":\""UInt64\""}"" ]],
				 ""NewTimerWheel"": [ 0, [ ""BitField"", ""{\""end_bit\"":62,\""start_bit\"":61,\""target\"":\""UInt64\""}"" ]],
				 ""Retry"": [ 0, [ ""BitField"", ""{\""end_bit\"":63,\""start_bit\"":62,\""target\"":\""UInt64\""}"" ]],
				 ""Locked"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":63,\""target\"":\""UInt64\""}"" ]],
				 ""All"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DelayMs
		{
			get
			{
				// start: 0  end: 30  Mask: 111111111111111111111111111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1073741823) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 CoalescingWindowMs
		{
			get
			{
				// start: 30  end: 60  Mask: 111111111111111111111111111111000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1152921503533105152) >> 30;
				return (UInt64)value2;
			}
		}
		public UInt64 Reserved
		{
			get
			{
				// start: 60  end: 61  Mask: 1000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1152921504606846976) >> 60;
				return (UInt64)value2;
			}
		}
		public UInt64 NewTimerWheel
		{
			get
			{
				// start: 61  end: 62  Mask: 10000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2305843009213693952) >> 61;
				return (UInt64)value2;
			}
		}
		public UInt64 Retry
		{
			get
			{
				// start: 62  end: 63  Mask: 100000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4611686018427387904) >> 62;
				return (UInt64)value2;
			}
		}
		public UInt64 Locked
		{
			get
			{
				// start: 63  end: 64  Mask: 1000000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 9223372036854775808) >> 63;
				return (UInt64)value2;
			}
		}
		public UInt64 All { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _EPROCESS
 
	public class _EPROCESS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EPROCESS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2624; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EPROCESS"": [ 2624, {
				 ""Pcb"": [ 0, [ ""_KPROCESS"", ""null"" ]],
				 ""ProcessLock"": [ 1080, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""UniqueProcessId"": [ 1088, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ActiveProcessLinks"": [ 1096, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""RundownProtect"": [ 1112, [ ""_EX_RUNDOWN_REF"", ""null"" ]],
				 ""Flags2"": [ 1120, [ ""UInt32"", ""null"" ]],
				 ""JobNotReallyActive"": [ 1120, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""AccountingFolded"": [ 1120, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""NewProcessReported"": [ 1120, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ExitProcessReported"": [ 1120, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""ReportCommitChanges"": [ 1120, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""LastReportMemory"": [ 1120, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""ForceWakeCharge"": [ 1120, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""CrossSessionCreate"": [ 1120, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""NeedsHandleRundown"": [ 1120, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""RefTraceEnabled"": [ 1120, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""PicoCreated"": [ 1120, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""EmptyJobEvaluated"": [ 1120, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""DefaultPagePriority"": [ 1120, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""PrimaryTokenFrozen"": [ 1120, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessVerifierTarget"": [ 1120, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""RestrictSetThreadContext"": [ 1120, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""AffinityPermanent"": [ 1120, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""AffinityUpdateEnable"": [ 1120, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""PropagateNode"": [ 1120, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""ExplicitAffinity"": [ 1120, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessExecutionState"": [ 1120, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""EnableReadVmLogging"": [ 1120, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""EnableWriteVmLogging"": [ 1120, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":25,\""target\"":\""UInt32\""}"" ]],
				 ""FatalAccessTerminationRequested"": [ 1120, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""DisableSystemAllowedCpuSet"": [ 1120, [ ""BitField"", ""{\""end_bit\"":28,\""start_bit\"":27,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessStateChangeRequest"": [ 1120, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":28,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessStateChangeInProgress"": [ 1120, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]],
				 ""InPrivate"": [ 1120, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 1124, [ ""UInt32"", ""null"" ]],
				 ""CreateReported"": [ 1124, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""NoDebugInherit"": [ 1124, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessExiting"": [ 1124, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessDelete"": [ 1124, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""ManageExecutableMemoryWrites"": [ 1124, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""VmDeleted"": [ 1124, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""OutswapEnabled"": [ 1124, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""Outswapped"": [ 1124, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""FailFastOnCommitFail"": [ 1124, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""Wow64VaSpace4Gb"": [ 1124, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""AddressSpaceInitialized"": [ 1124, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""SetTimerResolution"": [ 1124, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""BreakOnTermination"": [ 1124, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""DeprioritizeViews"": [ 1124, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""WriteWatch"": [ 1124, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessInSession"": [ 1124, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""OverrideAddressSpace"": [ 1124, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""HasAddressSpace"": [ 1124, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""LaunchPrefetched"": [ 1124, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""Background"": [ 1124, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""VmTopDown"": [ 1124, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""ImageNotifyDone"": [ 1124, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""PdeUpdateNeeded"": [ 1124, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]],
				 ""VdmAllowed"": [ 1124, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessRundown"": [ 1124, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":25,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessInserted"": [ 1124, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""DefaultIoPriority"": [ 1124, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":27,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessSelfDelete"": [ 1124, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]],
				 ""SetTimerResolutionLink"": [ 1124, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""CreateTime"": [ 1128, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ProcessQuotaUsage"": [ 1136, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""ProcessQuotaPeak"": [ 1152, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""PeakVirtualSize"": [ 1168, [ ""UInt64"", ""null"" ]],
				 ""VirtualSize"": [ 1176, [ ""UInt64"", ""null"" ]],
				 ""SessionProcessLinks"": [ 1184, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ExceptionPortData"": [ 1200, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ExceptionPortValue"": [ 1200, [ ""UInt64"", ""null"" ]],
				 ""ExceptionPortState"": [ 1200, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Token"": [ 1208, [ ""_EX_FAST_REF"", ""null"" ]],
				 ""MmReserved"": [ 1216, [ ""UInt64"", ""null"" ]],
				 ""AddressCreationLock"": [ 1224, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""PageTableCommitmentLock"": [ 1232, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""RotateInProgress"": [ 1240, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""ForkInProgress"": [ 1248, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""CommitChargeJob"": [ 1256, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]],
				 ""CloneRoot"": [ 1264, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""NumberOfPrivatePages"": [ 1272, [ ""UInt64"", ""null"" ]],
				 ""NumberOfLockedPages"": [ 1280, [ ""UInt64"", ""null"" ]],
				 ""Win32Process"": [ 1288, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Job"": [ 1296, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]],
				 ""SectionObject"": [ 1304, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SectionBaseAddress"": [ 1312, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Cookie"": [ 1320, [ ""UInt32"", ""null"" ]],
				 ""WorkingSetWatch"": [ 1328, [ ""Pointer"", ""{\""target\"":\""_PAGEFAULT_HISTORY\""}"" ]],
				 ""Win32WindowStation"": [ 1336, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InheritedFromUniqueProcessId"": [ 1344, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OwnerProcessId"": [ 1352, [ ""UInt64"", ""null"" ]],
				 ""Peb"": [ 1360, [ ""Pointer"", ""{\""target\"":\""_PEB\""}"" ]],
				 ""Session"": [ 1368, [ ""Pointer"", ""{\""target\"":\""_MM_SESSION_SPACE\""}"" ]],
				 ""Spare1"": [ 1376, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""QuotaBlock"": [ 1384, [ ""Pointer"", ""{\""target\"":\""_EPROCESS_QUOTA_BLOCK\""}"" ]],
				 ""ObjectTable"": [ 1392, [ ""Pointer"", ""{\""target\"":\""_HANDLE_TABLE\""}"" ]],
				 ""DebugPort"": [ 1400, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WoW64Process"": [ 1408, [ ""Pointer"", ""{\""target\"":\""_EWOW64PROCESS\""}"" ]],
				 ""DeviceMap"": [ 1416, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EtwDataSource"": [ 1424, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PageDirectoryPte"": [ 1432, [ ""UInt64"", ""null"" ]],
				 ""ImageFilePointer"": [ 1440, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""ImageFileName"": [ 1448, [ ""Array"", ""{\""count\"":15,\""target\"":\""Byte\""}"" ]],
				 ""PriorityClass"": [ 1463, [ ""Byte"", ""null"" ]],
				 ""SecurityPort"": [ 1464, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SeAuditProcessCreationInfo"": [ 1472, [ ""_SE_AUDIT_PROCESS_CREATION_INFO"", ""null"" ]],
				 ""JobLinks"": [ 1480, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""HighestUserAddress"": [ 1496, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ThreadListHead"": [ 1504, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ActiveThreads"": [ 1520, [ ""UInt32"", ""null"" ]],
				 ""ImagePathHash"": [ 1524, [ ""UInt32"", ""null"" ]],
				 ""DefaultHardErrorProcessing"": [ 1528, [ ""UInt32"", ""null"" ]],
				 ""LastThreadExitStatus"": [ 1532, [ ""Int32"", ""null"" ]],
				 ""PrefetchTrace"": [ 1536, [ ""_EX_FAST_REF"", ""null"" ]],
				 ""LockedPagesList"": [ 1544, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReadOperationCount"": [ 1552, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""WriteOperationCount"": [ 1560, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""OtherOperationCount"": [ 1568, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ReadTransferCount"": [ 1576, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""WriteTransferCount"": [ 1584, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""OtherTransferCount"": [ 1592, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""CommitChargeLimit"": [ 1600, [ ""UInt64"", ""null"" ]],
				 ""CommitCharge"": [ 1608, [ ""UInt64"", ""null"" ]],
				 ""CommitChargePeak"": [ 1616, [ ""UInt64"", ""null"" ]],
				 ""Vm"": [ 1664, [ ""_MMSUPPORT_FULL"", ""null"" ]],
				 ""MmProcessLinks"": [ 1984, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ModifiedPageCount"": [ 2000, [ ""UInt32"", ""null"" ]],
				 ""ExitStatus"": [ 2004, [ ""Int32"", ""null"" ]],
				 ""VadRoot"": [ 2008, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""VadHint"": [ 2016, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VadCount"": [ 2024, [ ""UInt64"", ""null"" ]],
				 ""VadPhysicalPages"": [ 2032, [ ""UInt64"", ""null"" ]],
				 ""VadPhysicalPagesLimit"": [ 2040, [ ""UInt64"", ""null"" ]],
				 ""AlpcContext"": [ 2048, [ ""_ALPC_PROCESS_CONTEXT"", ""null"" ]],
				 ""TimerResolutionLink"": [ 2080, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""TimerResolutionStackRecord"": [ 2096, [ ""Pointer"", ""{\""target\"":\""_PO_DIAG_STACK_RECORD\""}"" ]],
				 ""RequestedTimerResolution"": [ 2104, [ ""UInt32"", ""null"" ]],
				 ""SmallestTimerResolution"": [ 2108, [ ""UInt32"", ""null"" ]],
				 ""ExitTime"": [ 2112, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""InvertedFunctionTable"": [ 2120, [ ""Pointer"", ""{\""target\"":\""_INVERTED_FUNCTION_TABLE\""}"" ]],
				 ""InvertedFunctionTableLock"": [ 2128, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""ActiveThreadsHighWatermark"": [ 2136, [ ""UInt32"", ""null"" ]],
				 ""LargePrivateVadCount"": [ 2140, [ ""UInt32"", ""null"" ]],
				 ""ThreadListLock"": [ 2144, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""WnfContext"": [ 2152, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ServerSilo"": [ 2160, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]],
				 ""SignatureLevel"": [ 2168, [ ""Byte"", ""null"" ]],
				 ""SectionSignatureLevel"": [ 2169, [ ""Byte"", ""null"" ]],
				 ""Protection"": [ 2170, [ ""_PS_PROTECTION"", ""null"" ]],
				 ""HangCount"": [ 2171, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""GhostCount"": [ 2171, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""PrefilterException"": [ 2171, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""Flags3"": [ 2172, [ ""UInt32"", ""null"" ]],
				 ""Minimal"": [ 2172, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ReplacingPageRoot"": [ 2172, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""Crashed"": [ 2172, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""JobVadsAreTracked"": [ 2172, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""VadTrackingDisabled"": [ 2172, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""AuxiliaryProcess"": [ 2172, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""SubsystemProcess"": [ 2172, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""IndirectCpuSets"": [ 2172, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""RelinquishedCommit"": [ 2172, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""HighGraphicsPriority"": [ 2172, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""CommitFailLogged"": [ 2172, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""ReserveFailLogged"": [ 2172, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""SystemProcess"": [ 2172, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""HideImageBaseAddresses"": [ 2172, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""AddressPolicyFrozen"": [ 2172, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessFirstResume"": [ 2172, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""ForegroundExternal"": [ 2172, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""ForegroundSystem"": [ 2172, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""HighMemoryPriority"": [ 2172, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""EnableProcessSuspendResumeLogging"": [ 2172, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""EnableThreadSuspendResumeLogging"": [ 2172, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""SecurityDomainChanged"": [ 2172, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""SecurityFreezeComplete"": [ 2172, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""VmProcessorHost"": [ 2172, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]],
				 ""VmProcessorHostTransition"": [ 2172, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""AltSyscall"": [ 2172, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":25,\""target\"":\""UInt32\""}"" ]],
				 ""TimerResolutionIgnore"": [ 2172, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""DisallowUserTerminate"": [ 2172, [ ""BitField"", ""{\""end_bit\"":28,\""start_bit\"":27,\""target\"":\""UInt32\""}"" ]],
				 ""DeviceAsid"": [ 2176, [ ""Int32"", ""null"" ]],
				 ""SvmData"": [ 2184, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SvmProcessLock"": [ 2192, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""SvmLock"": [ 2200, [ ""UInt64"", ""null"" ]],
				 ""SvmProcessDeviceListHead"": [ 2208, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LastFreezeInterruptTime"": [ 2224, [ ""UInt64"", ""null"" ]],
				 ""DiskCounters"": [ 2232, [ ""Pointer"", ""{\""target\"":\""_PROCESS_DISK_COUNTERS\""}"" ]],
				 ""PicoContext"": [ 2240, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EnclaveTable"": [ 2248, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EnclaveNumber"": [ 2256, [ ""UInt64"", ""null"" ]],
				 ""EnclaveLock"": [ 2264, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""HighPriorityFaultsAllowed"": [ 2272, [ ""UInt32"", ""null"" ]],
				 ""EnergyContext"": [ 2280, [ ""Pointer"", ""{\""target\"":\""_PO_PROCESS_ENERGY_CONTEXT\""}"" ]],
				 ""VmContext"": [ 2288, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SequenceNumber"": [ 2296, [ ""UInt64"", ""null"" ]],
				 ""CreateInterruptTime"": [ 2304, [ ""UInt64"", ""null"" ]],
				 ""CreateUnbiasedInterruptTime"": [ 2312, [ ""UInt64"", ""null"" ]],
				 ""TotalUnbiasedFrozenTime"": [ 2320, [ ""UInt64"", ""null"" ]],
				 ""LastAppStateUpdateTime"": [ 2328, [ ""UInt64"", ""null"" ]],
				 ""LastAppStateUptime"": [ 2336, [ ""BitField"", ""{\""end_bit\"":61,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""LastAppState"": [ 2336, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":61,\""target\"":\""UInt64\""}"" ]],
				 ""SharedCommitCharge"": [ 2344, [ ""UInt64"", ""null"" ]],
				 ""SharedCommitLock"": [ 2352, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""SharedCommitLinks"": [ 2360, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""AllowedCpuSets"": [ 2376, [ ""UInt64"", ""null"" ]],
				 ""DefaultCpuSets"": [ 2384, [ ""UInt64"", ""null"" ]],
				 ""AllowedCpuSetsIndirect"": [ 2376, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]],
				 ""DefaultCpuSetsIndirect"": [ 2384, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]],
				 ""DiskIoAttribution"": [ 2392, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DxgProcess"": [ 2400, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Win32KFilterSet"": [ 2408, [ ""UInt32"", ""null"" ]],
				 ""ProcessTimerDelay"": [ 2416, [ ""_PS_INTERLOCKED_TIMER_DELAY_VALUES"", ""null"" ]],
				 ""KTimerSets"": [ 2424, [ ""UInt32"", ""null"" ]],
				 ""KTimer2Sets"": [ 2428, [ ""UInt32"", ""null"" ]],
				 ""ThreadTimerSets"": [ 2432, [ ""UInt32"", ""null"" ]],
				 ""VirtualTimerListLock"": [ 2440, [ ""UInt64"", ""null"" ]],
				 ""VirtualTimerListHead"": [ 2448, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""WakeChannel"": [ 2464, [ ""_WNF_STATE_NAME"", ""null"" ]],
				 ""WakeInfo"": [ 2464, [ ""_PS_PROCESS_WAKE_INFORMATION"", ""null"" ]],
				 ""MitigationFlags"": [ 2512, [ ""UInt32"", ""null"" ]],
				 ""MitigationFlagsValues"": [ 2512, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""MitigationFlags2"": [ 2516, [ ""UInt32"", ""null"" ]],
				 ""MitigationFlags2Values"": [ 2516, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""PartitionObject"": [ 2520, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SecurityDomain"": [ 2528, [ ""UInt64"", ""null"" ]],
				 ""ParentSecurityDomain"": [ 2536, [ ""UInt64"", ""null"" ]],
				 ""CoverageSamplerContext"": [ 2544, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MmHotPatchContext"": [ 2552, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DynamicEHContinuationTargetsTree"": [ 2560, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""DynamicEHContinuationTargetsLock"": [ 2568, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""DynamicEnforcedCetCompatibleRanges"": [ 2576, [ ""_PS_DYNAMIC_ENFORCED_ADDRESS_RANGES"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KPROCESS Pcb
		{
			get
			{
				_KPROCESS returnValue = new _KPROCESS(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK ProcessLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 1080);
				return returnValue;
			}
		}
		public UInt64 UniqueProcessId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1088); } }
		public _LIST_ENTRY ActiveProcessLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1096);
				return returnValue;
			}
		}
		public _EX_RUNDOWN_REF RundownProtect
		{
			get
			{
				_EX_RUNDOWN_REF returnValue = new _EX_RUNDOWN_REF(_StructureData, _BufferOffset + 1112);
				return returnValue;
			}
		}
		public UInt32 Flags2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120); } }
		public UInt32 JobNotReallyActive
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 AccountingFolded
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 NewProcessReported
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 ExitProcessReported
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 ReportCommitChanges
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 LastReportMemory
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 ForceWakeCharge
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 CrossSessionCreate
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 NeedsHandleRundown
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 RefTraceEnabled
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 PicoCreated
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 EmptyJobEvaluated
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 DefaultPagePriority
		{
			get
			{
				// start: 12  end: 15  Mask: 0111000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 28672) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 PrimaryTokenFrozen
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessVerifierTarget
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 RestrictSetThreadContext
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 AffinityPermanent
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 262144) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 AffinityUpdateEnable
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 PropagateNode
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 ExplicitAffinity
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessExecutionState
		{
			get
			{
				// start: 22  end: 24  Mask: 110000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 12582912) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 EnableReadVmLogging
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 16777216) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 EnableWriteVmLogging
		{
			get
			{
				// start: 25  end: 26  Mask: 10000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 33554432) >> 25;
				return (UInt32)value2;
			}
		}
		public UInt32 FatalAccessTerminationRequested
		{
			get
			{
				// start: 26  end: 27  Mask: 100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 67108864) >> 26;
				return (UInt32)value2;
			}
		}
		public UInt32 DisableSystemAllowedCpuSet
		{
			get
			{
				// start: 27  end: 28  Mask: 1000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 134217728) >> 27;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessStateChangeRequest
		{
			get
			{
				// start: 28  end: 30  Mask: 110000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 805306368) >> 28;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessStateChangeInProgress
		{
			get
			{
				// start: 30  end: 31  Mask: 1000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 1073741824) >> 30;
				return (UInt32)value2;
			}
		}
		public UInt32 InPrivate
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124); } }
		public UInt32 CreateReported
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 NoDebugInherit
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessExiting
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessDelete
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 ManageExecutableMemoryWrites
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 VmDeleted
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 OutswapEnabled
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 Outswapped
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 FailFastOnCommitFail
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 Wow64VaSpace4Gb
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 AddressSpaceInitialized
		{
			get
			{
				// start: 10  end: 12  Mask: 0000110000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 3072) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 SetTimerResolution
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 BreakOnTermination
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 DeprioritizeViews
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 WriteWatch
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessInSession
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 OverrideAddressSpace
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 HasAddressSpace
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 262144) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 LaunchPrefetched
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 Background
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 VmTopDown
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 ImageNotifyDone
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 PdeUpdateNeeded
		{
			get
			{
				// start: 23  end: 24  Mask: 100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 8388608) >> 23;
				return (UInt32)value2;
			}
		}
		public UInt32 VdmAllowed
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 16777216) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessRundown
		{
			get
			{
				// start: 25  end: 26  Mask: 10000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 33554432) >> 25;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessInserted
		{
			get
			{
				// start: 26  end: 27  Mask: 100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 67108864) >> 26;
				return (UInt32)value2;
			}
		}
		public UInt32 DefaultIoPriority
		{
			get
			{
				// start: 27  end: 30  Mask: 111000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 939524096) >> 27;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessSelfDelete
		{
			get
			{
				// start: 30  end: 31  Mask: 1000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 1073741824) >> 30;
				return (UInt32)value2;
			}
		}
		public UInt32 SetTimerResolutionLink
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public _LARGE_INTEGER CreateTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 1128);
				return returnValue;
			}
		}
		public UInt64[] ProcessQuotaUsage
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 1136);
				return returnValue;
			}
		}
		public UInt64[] ProcessQuotaPeak
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 1152);
				return returnValue;
			}
		}
		public UInt64 PeakVirtualSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1168); } }
		public UInt64 VirtualSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1176); } }
		public _LIST_ENTRY SessionProcessLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1184);
				return returnValue;
			}
		}
		public UInt64 ExceptionPortData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1200); } }
		public UInt64 ExceptionPortValue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1200); } }
		public UInt64 ExceptionPortState
		{
			get
			{
				// start: 0  end: 3  Mask: 0000000000000111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 1200);
				var value2 = (value & 7) >> 0;
				return (UInt64)value2;
			}
		}
		public _EX_FAST_REF Token
		{
			get
			{
				_EX_FAST_REF returnValue = new _EX_FAST_REF(_StructureData, _BufferOffset + 1208);
				return returnValue;
			}
		}
		public UInt64 MmReserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1216); } }
		public _EX_PUSH_LOCK AddressCreationLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 1224);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK PageTableCommitmentLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 1232);
				return returnValue;
			}
		}
		public UInt64 RotateInProgress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1240); } }
		public UInt64 ForkInProgress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1248); } }
		public UInt64 CommitChargeJob { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1256); } }
		public _RTL_AVL_TREE CloneRoot
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 1264);
				return returnValue;
			}
		}
		public UInt64 NumberOfPrivatePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1272); } }
		public UInt64 NumberOfLockedPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1280); } }
		public UInt64 Win32Process { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1288); } }
		public UInt64 Job { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1296); } }
		public UInt64 SectionObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1304); } }
		public UInt64 SectionBaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1312); } }
		public UInt32 Cookie { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320); } }
		public UInt64 WorkingSetWatch { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1328); } }
		public UInt64 Win32WindowStation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1336); } }
		public UInt64 InheritedFromUniqueProcessId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1344); } }
		public UInt64 OwnerProcessId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1352); } }
		public UInt64 Peb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1360); } }
		public UInt64 Session { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1368); } }
		public UInt64 Spare1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1376); } }
		public UInt64 QuotaBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1384); } }
		public UInt64 ObjectTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1392); } }
		public UInt64 DebugPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1400); } }
		public UInt64 WoW64Process { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1408); } }
		public UInt64 DeviceMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1416); } }
		public UInt64 EtwDataSource { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1424); } }
		public UInt64 PageDirectoryPte { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1432); } }
		public UInt64 ImageFilePointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1440); } }
		public Byte[] ImageFileName
		{
			get
			{
				Byte[] returnValue = new Byte[15];
				for(int i=0; i<15; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 1448];
				return returnValue;
			}
		}
		public Byte PriorityClass{ get { return _StructureData[_BufferOffset +1463]; } }
		public UInt64 SecurityPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1464); } }
		public _SE_AUDIT_PROCESS_CREATION_INFO SeAuditProcessCreationInfo
		{
			get
			{
				_SE_AUDIT_PROCESS_CREATION_INFO returnValue = new _SE_AUDIT_PROCESS_CREATION_INFO(_StructureData, _BufferOffset + 1472);
				return returnValue;
			}
		}
		public _LIST_ENTRY JobLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1480);
				return returnValue;
			}
		}
		public UInt64 HighestUserAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1496); } }
		public _LIST_ENTRY ThreadListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1504);
				return returnValue;
			}
		}
		public UInt32 ActiveThreads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1520); } }
		public UInt32 ImagePathHash { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1524); } }
		public UInt32 DefaultHardErrorProcessing { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1528); } }
		public Int32 LastThreadExitStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 1532); } }
		public _EX_FAST_REF PrefetchTrace
		{
			get
			{
				_EX_FAST_REF returnValue = new _EX_FAST_REF(_StructureData, _BufferOffset + 1536);
				return returnValue;
			}
		}
		public UInt64 LockedPagesList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1544); } }
		public _LARGE_INTEGER ReadOperationCount
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 1552);
				return returnValue;
			}
		}
		public _LARGE_INTEGER WriteOperationCount
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 1560);
				return returnValue;
			}
		}
		public _LARGE_INTEGER OtherOperationCount
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 1568);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ReadTransferCount
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 1576);
				return returnValue;
			}
		}
		public _LARGE_INTEGER WriteTransferCount
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 1584);
				return returnValue;
			}
		}
		public _LARGE_INTEGER OtherTransferCount
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 1592);
				return returnValue;
			}
		}
		public UInt64 CommitChargeLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1600); } }
		public UInt64 CommitCharge { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1608); } }
		public UInt64 CommitChargePeak { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1616); } }
		public _MMSUPPORT_FULL Vm
		{
			get
			{
				_MMSUPPORT_FULL returnValue = new _MMSUPPORT_FULL(_StructureData, _BufferOffset + 1664);
				return returnValue;
			}
		}
		public _LIST_ENTRY MmProcessLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1984);
				return returnValue;
			}
		}
		public UInt32 ModifiedPageCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2000); } }
		public Int32 ExitStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 2004); } }
		public _RTL_AVL_TREE VadRoot
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 2008);
				return returnValue;
			}
		}
		public UInt64 VadHint { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2016); } }
		public UInt64 VadCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2024); } }
		public UInt64 VadPhysicalPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2032); } }
		public UInt64 VadPhysicalPagesLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2040); } }
		public _ALPC_PROCESS_CONTEXT AlpcContext
		{
			get
			{
				_ALPC_PROCESS_CONTEXT returnValue = new _ALPC_PROCESS_CONTEXT(_StructureData, _BufferOffset + 2048);
				return returnValue;
			}
		}
		public _LIST_ENTRY TimerResolutionLink
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 2080);
				return returnValue;
			}
		}
		public UInt64 TimerResolutionStackRecord { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2096); } }
		public UInt32 RequestedTimerResolution { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2104); } }
		public UInt32 SmallestTimerResolution { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2108); } }
		public _LARGE_INTEGER ExitTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 2112);
				return returnValue;
			}
		}
		public UInt64 InvertedFunctionTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2120); } }
		public _EX_PUSH_LOCK InvertedFunctionTableLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 2128);
				return returnValue;
			}
		}
		public UInt32 ActiveThreadsHighWatermark { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2136); } }
		public UInt32 LargePrivateVadCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2140); } }
		public _EX_PUSH_LOCK ThreadListLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 2144);
				return returnValue;
			}
		}
		public UInt64 WnfContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2152); } }
		public UInt64 ServerSilo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2160); } }
		public Byte SignatureLevel{ get { return _StructureData[_BufferOffset +2168]; } }
		public Byte SectionSignatureLevel{ get { return _StructureData[_BufferOffset +2169]; } }
		public _PS_PROTECTION Protection
		{
			get
			{
				_PS_PROTECTION returnValue = new _PS_PROTECTION(_StructureData, _BufferOffset + 2170);
				return returnValue;
			}
		}
		public Byte HangCount
		{
			get
			{
				// start: 0  end: 3  Mask: 0000000000000111
				Byte value = _StructureData[_BufferOffset + 2171];
				var value2 = (value & 7) >> 0;
				return (Byte)value2;
			}
		}
		public Byte GhostCount
		{
			get
			{
				// start: 3  end: 6  Mask: 0000000000111000
				Byte value = _StructureData[_BufferOffset + 2171];
				var value2 = (value & 56) >> 3;
				return (Byte)value2;
			}
		}
		public Byte PrefilterException
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				Byte value = _StructureData[_BufferOffset + 2171];
				var value2 = (value & 64) >> 6;
				return (Byte)value2;
			}
		}
		public UInt32 Flags3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172); } }
		public UInt32 Minimal
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ReplacingPageRoot
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 Crashed
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 JobVadsAreTracked
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 VadTrackingDisabled
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 AuxiliaryProcess
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 SubsystemProcess
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 IndirectCpuSets
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 RelinquishedCommit
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 HighGraphicsPriority
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 CommitFailLogged
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 ReserveFailLogged
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 SystemProcess
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 HideImageBaseAddresses
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 AddressPolicyFrozen
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessFirstResume
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 ForegroundExternal
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 ForegroundSystem
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 HighMemoryPriority
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 262144) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 EnableProcessSuspendResumeLogging
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 EnableThreadSuspendResumeLogging
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 SecurityDomainChanged
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 SecurityFreezeComplete
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 VmProcessorHost
		{
			get
			{
				// start: 23  end: 24  Mask: 100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 8388608) >> 23;
				return (UInt32)value2;
			}
		}
		public UInt32 VmProcessorHostTransition
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 16777216) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 AltSyscall
		{
			get
			{
				// start: 25  end: 26  Mask: 10000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 33554432) >> 25;
				return (UInt32)value2;
			}
		}
		public UInt32 TimerResolutionIgnore
		{
			get
			{
				// start: 26  end: 27  Mask: 100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 67108864) >> 26;
				return (UInt32)value2;
			}
		}
		public UInt32 DisallowUserTerminate
		{
			get
			{
				// start: 27  end: 28  Mask: 1000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 2172);
				var value2 = (value & 134217728) >> 27;
				return (UInt32)value2;
			}
		}
		public Int32 DeviceAsid { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 2176); } }
		public UInt64 SvmData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2184); } }
		public _EX_PUSH_LOCK SvmProcessLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 2192);
				return returnValue;
			}
		}
		public UInt64 SvmLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2200); } }
		public _LIST_ENTRY SvmProcessDeviceListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 2208);
				return returnValue;
			}
		}
		public UInt64 LastFreezeInterruptTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2224); } }
		public UInt64 DiskCounters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2232); } }
		public UInt64 PicoContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2240); } }
		public UInt64 EnclaveTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2248); } }
		public UInt64 EnclaveNumber { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2256); } }
		public _EX_PUSH_LOCK EnclaveLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 2264);
				return returnValue;
			}
		}
		public UInt32 HighPriorityFaultsAllowed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2272); } }
		public UInt64 EnergyContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2280); } }
		public UInt64 VmContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2288); } }
		public UInt64 SequenceNumber { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2296); } }
		public UInt64 CreateInterruptTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2304); } }
		public UInt64 CreateUnbiasedInterruptTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2312); } }
		public UInt64 TotalUnbiasedFrozenTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2320); } }
		public UInt64 LastAppStateUpdateTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2328); } }
		public UInt64 LastAppStateUptime
		{
			get
			{
				// start: 0  end: 61  Mask: 1111111111111111111111111111111111111111111111111111111111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 2336);
				var value2 = (value & 2305843009213693951) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 LastAppState
		{
			get
			{
				// start: 61  end: 64  Mask: 1110000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 2336);
				var value2 = (value & 16140901064495857664) >> 61;
				return (UInt64)value2;
			}
		}
		public UInt64 SharedCommitCharge { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2344); } }
		public _EX_PUSH_LOCK SharedCommitLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 2352);
				return returnValue;
			}
		}
		public _LIST_ENTRY SharedCommitLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 2360);
				return returnValue;
			}
		}
		public UInt64 AllowedCpuSets { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2376); } }
		public UInt64 DefaultCpuSets { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2384); } }
		public UInt64 AllowedCpuSetsIndirect { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2376); } }
		public UInt64 DefaultCpuSetsIndirect { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2384); } }
		public UInt64 DiskIoAttribution { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2392); } }
		public UInt64 DxgProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2400); } }
		public UInt32 Win32KFilterSet { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2408); } }
		public _PS_INTERLOCKED_TIMER_DELAY_VALUES ProcessTimerDelay
		{
			get
			{
				_PS_INTERLOCKED_TIMER_DELAY_VALUES returnValue = new _PS_INTERLOCKED_TIMER_DELAY_VALUES(_StructureData, _BufferOffset + 2416);
				return returnValue;
			}
		}
		public UInt32 KTimerSets { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2424); } }
		public UInt32 KTimer2Sets { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2428); } }
		public UInt32 ThreadTimerSets { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2432); } }
		public UInt64 VirtualTimerListLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2440); } }
		public _LIST_ENTRY VirtualTimerListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 2448);
				return returnValue;
			}
		}
		public _WNF_STATE_NAME WakeChannel
		{
			get
			{
				_WNF_STATE_NAME returnValue = new _WNF_STATE_NAME(_StructureData, _BufferOffset + 2464);
				return returnValue;
			}
		}
		public _PS_PROCESS_WAKE_INFORMATION WakeInfo
		{
			get
			{
				_PS_PROCESS_WAKE_INFORMATION returnValue = new _PS_PROCESS_WAKE_INFORMATION(_StructureData, _BufferOffset + 2464);
				return returnValue;
			}
		}
		public UInt32 MitigationFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2512); } }
		public _ANONYMOUS_TAG MitigationFlagsValues
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 2512);
				return returnValue;
			}
		}
		public UInt32 MitigationFlags2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2516); } }
		public _ANONYMOUS_TAG MitigationFlags2Values
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 2516);
				return returnValue;
			}
		}
		public UInt64 PartitionObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2520); } }
		public UInt64 SecurityDomain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2528); } }
		public UInt64 ParentSecurityDomain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2536); } }
		public UInt64 CoverageSamplerContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2544); } }
		public UInt64 MmHotPatchContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2552); } }
		public _RTL_AVL_TREE DynamicEHContinuationTargetsTree
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 2560);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK DynamicEHContinuationTargetsLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 2568);
				return returnValue;
			}
		}
		public _PS_DYNAMIC_ENFORCED_ADDRESS_RANGES DynamicEnforcedCetCompatibleRanges
		{
			get
			{
				_PS_DYNAMIC_ENFORCED_ADDRESS_RANGES returnValue = new _PS_DYNAMIC_ENFORCED_ADDRESS_RANGES(_StructureData, _BufferOffset + 2576);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EWOW64PROCESS
 
	public class _EWOW64PROCESS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EWOW64PROCESS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EWOW64PROCESS"": [ 16, {
				 ""Peb"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Machine"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""NtdllType"": [ 12, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_DLL_TYPE\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Peb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt16 Machine { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public _SYSTEM_DLL_TYPE NtdllType { get { return (_SYSTEM_DLL_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _JOB_ACCESS_STATE
 
	public class _JOB_ACCESS_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _JOB_ACCESS_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_JOB_ACCESS_STATE"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _JOB_NOTIFICATION_INFORMATION
 
	public class _JOB_NOTIFICATION_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _JOB_NOTIFICATION_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_JOB_NOTIFICATION_INFORMATION"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _JOB_CPU_RATE_CONTROL
 
	public class _JOB_CPU_RATE_CONTROL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _JOB_CPU_RATE_CONTROL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_JOB_CPU_RATE_CONTROL"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _PSP_STORAGE
 
	public class _PSP_STORAGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PSP_STORAGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PSP_STORAGE"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _JOB_NET_RATE_CONTROL
 
	public class _JOB_NET_RATE_CONTROL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _JOB_NET_RATE_CONTROL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_JOB_NET_RATE_CONTROL"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _EJOB
 
	public class _EJOB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EJOB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1600; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EJOB"": [ 1600, {
				 ""Event"": [ 0, [ ""_KEVENT"", ""null"" ]],
				 ""JobLinks"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ProcessListHead"": [ 40, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""JobLock"": [ 56, [ ""_ERESOURCE"", ""null"" ]],
				 ""TotalUserTime"": [ 160, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""TotalKernelTime"": [ 168, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""TotalCycleTime"": [ 176, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ThisPeriodTotalUserTime"": [ 184, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ThisPeriodTotalKernelTime"": [ 192, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""TotalContextSwitches"": [ 200, [ ""UInt64"", ""null"" ]],
				 ""TotalPageFaultCount"": [ 208, [ ""UInt32"", ""null"" ]],
				 ""TotalProcesses"": [ 212, [ ""UInt32"", ""null"" ]],
				 ""ActiveProcesses"": [ 216, [ ""UInt32"", ""null"" ]],
				 ""TotalTerminatedProcesses"": [ 220, [ ""UInt32"", ""null"" ]],
				 ""PerProcessUserTimeLimit"": [ 224, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""PerJobUserTimeLimit"": [ 232, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""MinimumWorkingSetSize"": [ 240, [ ""UInt64"", ""null"" ]],
				 ""MaximumWorkingSetSize"": [ 248, [ ""UInt64"", ""null"" ]],
				 ""LimitFlags"": [ 256, [ ""UInt32"", ""null"" ]],
				 ""ActiveProcessLimit"": [ 260, [ ""UInt32"", ""null"" ]],
				 ""Affinity"": [ 264, [ ""_KAFFINITY_EX"", ""null"" ]],
				 ""AccessState"": [ 432, [ ""Pointer"", ""{\""target\"":\""_JOB_ACCESS_STATE\""}"" ]],
				 ""AccessStateQuotaReference"": [ 440, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UIRestrictionsClass"": [ 448, [ ""UInt32"", ""null"" ]],
				 ""EndOfJobTimeAction"": [ 452, [ ""UInt32"", ""null"" ]],
				 ""CompletionPort"": [ 456, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CompletionKey"": [ 464, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CompletionCount"": [ 472, [ ""UInt64"", ""null"" ]],
				 ""SessionId"": [ 480, [ ""UInt32"", ""null"" ]],
				 ""SchedulingClass"": [ 484, [ ""UInt32"", ""null"" ]],
				 ""ReadOperationCount"": [ 488, [ ""UInt64"", ""null"" ]],
				 ""WriteOperationCount"": [ 496, [ ""UInt64"", ""null"" ]],
				 ""OtherOperationCount"": [ 504, [ ""UInt64"", ""null"" ]],
				 ""ReadTransferCount"": [ 512, [ ""UInt64"", ""null"" ]],
				 ""WriteTransferCount"": [ 520, [ ""UInt64"", ""null"" ]],
				 ""OtherTransferCount"": [ 528, [ ""UInt64"", ""null"" ]],
				 ""DiskIoInfo"": [ 536, [ ""_PROCESS_DISK_COUNTERS"", ""null"" ]],
				 ""ProcessMemoryLimit"": [ 576, [ ""UInt64"", ""null"" ]],
				 ""JobMemoryLimit"": [ 584, [ ""UInt64"", ""null"" ]],
				 ""JobTotalMemoryLimit"": [ 592, [ ""UInt64"", ""null"" ]],
				 ""PeakProcessMemoryUsed"": [ 600, [ ""UInt64"", ""null"" ]],
				 ""PeakJobMemoryUsed"": [ 608, [ ""UInt64"", ""null"" ]],
				 ""EffectiveAffinity"": [ 616, [ ""_KAFFINITY_EX"", ""null"" ]],
				 ""EffectivePerProcessUserTimeLimit"": [ 784, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""EffectiveMinimumWorkingSetSize"": [ 792, [ ""UInt64"", ""null"" ]],
				 ""EffectiveMaximumWorkingSetSize"": [ 800, [ ""UInt64"", ""null"" ]],
				 ""EffectiveProcessMemoryLimit"": [ 808, [ ""UInt64"", ""null"" ]],
				 ""EffectiveProcessMemoryLimitJob"": [ 816, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]],
				 ""EffectivePerProcessUserTimeLimitJob"": [ 824, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]],
				 ""EffectiveNetIoRateLimitJob"": [ 832, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]],
				 ""EffectiveHeapAttributionJob"": [ 840, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]],
				 ""EffectiveLimitFlags"": [ 848, [ ""UInt32"", ""null"" ]],
				 ""EffectiveSchedulingClass"": [ 852, [ ""UInt32"", ""null"" ]],
				 ""EffectiveFreezeCount"": [ 856, [ ""UInt32"", ""null"" ]],
				 ""EffectiveBackgroundCount"": [ 860, [ ""UInt32"", ""null"" ]],
				 ""EffectiveSwapCount"": [ 864, [ ""UInt32"", ""null"" ]],
				 ""EffectiveNotificationLimitCount"": [ 868, [ ""UInt32"", ""null"" ]],
				 ""EffectivePriorityClass"": [ 872, [ ""Byte"", ""null"" ]],
				 ""PriorityClass"": [ 873, [ ""Byte"", ""null"" ]],
				 ""NestingDepth"": [ 874, [ ""Byte"", ""null"" ]],
				 ""Reserved1"": [ 875, [ ""Array"", ""{\""count\"":1,\""target\"":\""Byte\""}"" ]],
				 ""CompletionFilter"": [ 876, [ ""UInt32"", ""null"" ]],
				 ""WakeChannel"": [ 880, [ ""_WNF_STATE_NAME"", ""null"" ]],
				 ""WakeInfo"": [ 880, [ ""_PS_JOB_WAKE_INFORMATION"", ""null"" ]],
				 ""WakeFilter"": [ 952, [ ""_JOBOBJECT_WAKE_FILTER"", ""null"" ]],
				 ""LowEdgeLatchFilter"": [ 960, [ ""UInt32"", ""null"" ]],
				 ""NotificationLink"": [ 968, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]],
				 ""CurrentJobMemoryUsed"": [ 976, [ ""UInt64"", ""null"" ]],
				 ""NotificationInfo"": [ 984, [ ""Pointer"", ""{\""target\"":\""_JOB_NOTIFICATION_INFORMATION\""}"" ]],
				 ""NotificationInfoQuotaReference"": [ 992, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NotificationPacket"": [ 1000, [ ""Pointer"", ""{\""target\"":\""_IO_MINI_COMPLETION_PACKET_USER\""}"" ]],
				 ""CpuRateControl"": [ 1008, [ ""Pointer"", ""{\""target\"":\""_JOB_CPU_RATE_CONTROL\""}"" ]],
				 ""EffectiveSchedulingGroup"": [ 1016, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReadyTime"": [ 1024, [ ""UInt64"", ""null"" ]],
				 ""MemoryLimitsLock"": [ 1032, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""SiblingJobLinks"": [ 1040, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ChildJobListHead"": [ 1056, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ParentJob"": [ 1072, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]],
				 ""RootJob"": [ 1080, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]],
				 ""IteratorListHead"": [ 1088, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""AncestorCount"": [ 1104, [ ""UInt64"", ""null"" ]],
				 ""Ancestors"": [ 1112, [ ""Pointer"", ""{\""target\"":\""_EJOB*\""}"" ]],
				 ""SessionObject"": [ 1112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Accounting"": [ 1120, [ ""_EPROCESS_VALUES"", ""null"" ]],
				 ""ShadowActiveProcessCount"": [ 1224, [ ""UInt32"", ""null"" ]],
				 ""ActiveAuxiliaryProcessCount"": [ 1228, [ ""UInt32"", ""null"" ]],
				 ""SequenceNumber"": [ 1232, [ ""UInt32"", ""null"" ]],
				 ""JobId"": [ 1236, [ ""UInt32"", ""null"" ]],
				 ""ContainerId"": [ 1240, [ ""_GUID"", ""null"" ]],
				 ""ContainerTelemetryId"": [ 1256, [ ""_GUID"", ""null"" ]],
				 ""ServerSiloGlobals"": [ 1272, [ ""Pointer"", ""{\""target\"":\""_ESERVERSILO_GLOBALS\""}"" ]],
				 ""PropertySet"": [ 1280, [ ""_PS_PROPERTY_SET"", ""null"" ]],
				 ""Storage"": [ 1304, [ ""Pointer"", ""{\""target\"":\""_PSP_STORAGE\""}"" ]],
				 ""NetRateControl"": [ 1312, [ ""Pointer"", ""{\""target\"":\""_JOB_NET_RATE_CONTROL\""}"" ]],
				 ""JobFlags"": [ 1320, [ ""UInt32"", ""null"" ]],
				 ""CloseDone"": [ 1320, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""MultiGroup"": [ 1320, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""OutstandingNotification"": [ 1320, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""NotificationInProgress"": [ 1320, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""UILimits"": [ 1320, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""CpuRateControlActive"": [ 1320, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""OwnCpuRateControl"": [ 1320, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""Terminating"": [ 1320, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""WorkingSetLock"": [ 1320, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""JobFrozen"": [ 1320, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""Background"": [ 1320, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""WakeNotificationAllocated"": [ 1320, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""WakeNotificationEnabled"": [ 1320, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""WakeNotificationPending"": [ 1320, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""LimitNotificationRequired"": [ 1320, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""ZeroCountNotificationRequired"": [ 1320, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""CycleTimeNotificationRequired"": [ 1320, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""CycleTimeNotificationPending"": [ 1320, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""TimersVirtualized"": [ 1320, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""JobSwapped"": [ 1320, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""ViolationDetected"": [ 1320, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""EmptyJobNotified"": [ 1320, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""NoSystemCharge"": [ 1320, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""DropNoWakeCharges"": [ 1320, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]],
				 ""NoWakeChargePolicyDecided"": [ 1320, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""NetRateControlActive"": [ 1320, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":25,\""target\"":\""UInt32\""}"" ]],
				 ""OwnNetRateControl"": [ 1320, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""IoRateControlActive"": [ 1320, [ ""BitField"", ""{\""end_bit\"":28,\""start_bit\"":27,\""target\"":\""UInt32\""}"" ]],
				 ""OwnIoRateControl"": [ 1320, [ ""BitField"", ""{\""end_bit\"":29,\""start_bit\"":28,\""target\"":\""UInt32\""}"" ]],
				 ""DisallowNewProcesses"": [ 1320, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":29,\""target\"":\""UInt32\""}"" ]],
				 ""Silo"": [ 1320, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]],
				 ""ContainerTelemetryIdSet"": [ 1320, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""JobFlags2"": [ 1324, [ ""UInt32"", ""null"" ]],
				 ""ParentLocked"": [ 1324, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""EnableUsermodeSiloThreadImpersonation"": [ 1324, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""DisallowUsermodeSiloThreadImpersonation"": [ 1324, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""EnergyValues"": [ 1328, [ ""Pointer"", ""{\""target\"":\""_PROCESS_EXTENDED_ENERGY_VALUES\""}"" ]],
				 ""SharedCommitCharge"": [ 1336, [ ""UInt64"", ""null"" ]],
				 ""DiskIoAttributionUserRefCount"": [ 1344, [ ""UInt32"", ""null"" ]],
				 ""DiskIoAttributionRefCount"": [ 1348, [ ""UInt32"", ""null"" ]],
				 ""DiskIoAttributionContext"": [ 1352, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DiskIoAttributionOwnerJob"": [ 1352, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]],
				 ""IoRateControlHeader"": [ 1360, [ ""_JOB_RATE_CONTROL_HEADER"", ""null"" ]],
				 ""GlobalIoControl"": [ 1400, [ ""_PS_IO_CONTROL_ENTRY"", ""null"" ]],
				 ""IoControlStateLock"": [ 1456, [ ""Int32"", ""null"" ]],
				 ""VolumeIoControlTree"": [ 1464, [ ""_RTL_RB_TREE"", ""null"" ]],
				 ""IoRateOverQuotaHistory"": [ 1480, [ ""UInt64"", ""null"" ]],
				 ""IoRateCurrentGeneration"": [ 1488, [ ""UInt32"", ""null"" ]],
				 ""IoRateLastQueryGeneration"": [ 1492, [ ""UInt32"", ""null"" ]],
				 ""IoRateGenerationLength"": [ 1496, [ ""UInt32"", ""null"" ]],
				 ""IoRateOverQuotaNotifySequenceId"": [ 1500, [ ""UInt32"", ""null"" ]],
				 ""LastThrottledIoTime"": [ 1504, [ ""UInt64"", ""null"" ]],
				 ""IoControlLock"": [ 1512, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""SiloHardReferenceCount"": [ 1520, [ ""Int64"", ""null"" ]],
				 ""RundownWorkItem"": [ 1528, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""PartitionObject"": [ 1560, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PartitionOwnerJob"": [ 1568, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]],
				 ""EnergyTrackingState"": [ 1576, [ ""_JOBOBJECT_ENERGY_TRACKING_STATE"", ""null"" ]],
				 ""KernelWaitTime"": [ 1584, [ ""UInt64"", ""null"" ]],
				 ""UserWaitTime"": [ 1592, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY JobLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LIST_ENTRY ProcessListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _ERESOURCE JobLock
		{
			get
			{
				_ERESOURCE returnValue = new _ERESOURCE(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _LARGE_INTEGER TotalUserTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 160);
				return returnValue;
			}
		}
		public _LARGE_INTEGER TotalKernelTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 168);
				return returnValue;
			}
		}
		public _LARGE_INTEGER TotalCycleTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 176);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ThisPeriodTotalUserTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 184);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ThisPeriodTotalKernelTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public UInt64 TotalContextSwitches { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt32 TotalPageFaultCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 208); } }
		public UInt32 TotalProcesses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 212); } }
		public UInt32 ActiveProcesses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 216); } }
		public UInt32 TotalTerminatedProcesses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 220); } }
		public _LARGE_INTEGER PerProcessUserTimeLimit
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 224);
				return returnValue;
			}
		}
		public _LARGE_INTEGER PerJobUserTimeLimit
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 232);
				return returnValue;
			}
		}
		public UInt64 MinimumWorkingSetSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 MaximumWorkingSetSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public UInt32 LimitFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 256); } }
		public UInt32 ActiveProcessLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 260); } }
		public _KAFFINITY_EX Affinity
		{
			get
			{
				_KAFFINITY_EX returnValue = new _KAFFINITY_EX(_StructureData, _BufferOffset + 264);
				return returnValue;
			}
		}
		public UInt64 AccessState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 432); } }
		public UInt64 AccessStateQuotaReference { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 440); } }
		public UInt32 UIRestrictionsClass { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 448); } }
		public UInt32 EndOfJobTimeAction { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 452); } }
		public UInt64 CompletionPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 456); } }
		public UInt64 CompletionKey { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 464); } }
		public UInt64 CompletionCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 472); } }
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 480); } }
		public UInt32 SchedulingClass { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 484); } }
		public UInt64 ReadOperationCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 488); } }
		public UInt64 WriteOperationCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 496); } }
		public UInt64 OtherOperationCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 504); } }
		public UInt64 ReadTransferCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 512); } }
		public UInt64 WriteTransferCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 520); } }
		public UInt64 OtherTransferCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 528); } }
		public _PROCESS_DISK_COUNTERS DiskIoInfo
		{
			get
			{
				_PROCESS_DISK_COUNTERS returnValue = new _PROCESS_DISK_COUNTERS(_StructureData, _BufferOffset + 536);
				return returnValue;
			}
		}
		public UInt64 ProcessMemoryLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 576); } }
		public UInt64 JobMemoryLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 584); } }
		public UInt64 JobTotalMemoryLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 592); } }
		public UInt64 PeakProcessMemoryUsed { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 600); } }
		public UInt64 PeakJobMemoryUsed { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 608); } }
		public _KAFFINITY_EX EffectiveAffinity
		{
			get
			{
				_KAFFINITY_EX returnValue = new _KAFFINITY_EX(_StructureData, _BufferOffset + 616);
				return returnValue;
			}
		}
		public _LARGE_INTEGER EffectivePerProcessUserTimeLimit
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 784);
				return returnValue;
			}
		}
		public UInt64 EffectiveMinimumWorkingSetSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 792); } }
		public UInt64 EffectiveMaximumWorkingSetSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 800); } }
		public UInt64 EffectiveProcessMemoryLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 808); } }
		public UInt64 EffectiveProcessMemoryLimitJob { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 816); } }
		public UInt64 EffectivePerProcessUserTimeLimitJob { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 824); } }
		public UInt64 EffectiveNetIoRateLimitJob { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 832); } }
		public UInt64 EffectiveHeapAttributionJob { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 840); } }
		public UInt32 EffectiveLimitFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 848); } }
		public UInt32 EffectiveSchedulingClass { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 852); } }
		public UInt32 EffectiveFreezeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 856); } }
		public UInt32 EffectiveBackgroundCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 860); } }
		public UInt32 EffectiveSwapCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 864); } }
		public UInt32 EffectiveNotificationLimitCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 868); } }
		public Byte EffectivePriorityClass{ get { return _StructureData[_BufferOffset +872]; } }
		public Byte PriorityClass{ get { return _StructureData[_BufferOffset +873]; } }
		public Byte NestingDepth{ get { return _StructureData[_BufferOffset +874]; } }
		public Byte[] Reserved1
		{
			get
			{
				Byte[] returnValue = new Byte[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 875];
				return returnValue;
			}
		}
		public UInt32 CompletionFilter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 876); } }
		public _WNF_STATE_NAME WakeChannel
		{
			get
			{
				_WNF_STATE_NAME returnValue = new _WNF_STATE_NAME(_StructureData, _BufferOffset + 880);
				return returnValue;
			}
		}
		public _PS_JOB_WAKE_INFORMATION WakeInfo
		{
			get
			{
				_PS_JOB_WAKE_INFORMATION returnValue = new _PS_JOB_WAKE_INFORMATION(_StructureData, _BufferOffset + 880);
				return returnValue;
			}
		}
		public _JOBOBJECT_WAKE_FILTER WakeFilter
		{
			get
			{
				_JOBOBJECT_WAKE_FILTER returnValue = new _JOBOBJECT_WAKE_FILTER(_StructureData, _BufferOffset + 952);
				return returnValue;
			}
		}
		public UInt32 LowEdgeLatchFilter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 960); } }
		public UInt64 NotificationLink { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 968); } }
		public UInt64 CurrentJobMemoryUsed { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 976); } }
		public UInt64 NotificationInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 984); } }
		public UInt64 NotificationInfoQuotaReference { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 992); } }
		public UInt64 NotificationPacket { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1000); } }
		public UInt64 CpuRateControl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1008); } }
		public UInt64 EffectiveSchedulingGroup { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1016); } }
		public UInt64 ReadyTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1024); } }
		public _EX_PUSH_LOCK MemoryLimitsLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 1032);
				return returnValue;
			}
		}
		public _LIST_ENTRY SiblingJobLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1040);
				return returnValue;
			}
		}
		public _LIST_ENTRY ChildJobListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1056);
				return returnValue;
			}
		}
		public UInt64 ParentJob { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1072); } }
		public UInt64 RootJob { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1080); } }
		public _LIST_ENTRY IteratorListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1088);
				return returnValue;
			}
		}
		public UInt64 AncestorCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1104); } }
		public UInt64 Ancestors { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1112); } }
		public UInt64 SessionObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1112); } }
		public _EPROCESS_VALUES Accounting
		{
			get
			{
				_EPROCESS_VALUES returnValue = new _EPROCESS_VALUES(_StructureData, _BufferOffset + 1120);
				return returnValue;
			}
		}
		public UInt32 ShadowActiveProcessCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1224); } }
		public UInt32 ActiveAuxiliaryProcessCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1228); } }
		public UInt32 SequenceNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1232); } }
		public UInt32 JobId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1236); } }
		public _GUID ContainerId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 1240);
				return returnValue;
			}
		}
		public _GUID ContainerTelemetryId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 1256);
				return returnValue;
			}
		}
		public UInt64 ServerSiloGlobals { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1272); } }
		public _PS_PROPERTY_SET PropertySet
		{
			get
			{
				_PS_PROPERTY_SET returnValue = new _PS_PROPERTY_SET(_StructureData, _BufferOffset + 1280);
				return returnValue;
			}
		}
		public UInt64 Storage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1304); } }
		public UInt64 NetRateControl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1312); } }
		public UInt32 JobFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320); } }
		public UInt32 CloseDone
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 MultiGroup
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 OutstandingNotification
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 NotificationInProgress
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 UILimits
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 CpuRateControlActive
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 OwnCpuRateControl
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 Terminating
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 WorkingSetLock
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 JobFrozen
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 Background
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 WakeNotificationAllocated
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 WakeNotificationEnabled
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 WakeNotificationPending
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 LimitNotificationRequired
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 ZeroCountNotificationRequired
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 CycleTimeNotificationRequired
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 CycleTimeNotificationPending
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 TimersVirtualized
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 262144) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 JobSwapped
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 ViolationDetected
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 EmptyJobNotified
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 NoSystemCharge
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 DropNoWakeCharges
		{
			get
			{
				// start: 23  end: 24  Mask: 100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 8388608) >> 23;
				return (UInt32)value2;
			}
		}
		public UInt32 NoWakeChargePolicyDecided
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 16777216) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 NetRateControlActive
		{
			get
			{
				// start: 25  end: 26  Mask: 10000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 33554432) >> 25;
				return (UInt32)value2;
			}
		}
		public UInt32 OwnNetRateControl
		{
			get
			{
				// start: 26  end: 27  Mask: 100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 67108864) >> 26;
				return (UInt32)value2;
			}
		}
		public UInt32 IoRateControlActive
		{
			get
			{
				// start: 27  end: 28  Mask: 1000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 134217728) >> 27;
				return (UInt32)value2;
			}
		}
		public UInt32 OwnIoRateControl
		{
			get
			{
				// start: 28  end: 29  Mask: 10000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 268435456) >> 28;
				return (UInt32)value2;
			}
		}
		public UInt32 DisallowNewProcesses
		{
			get
			{
				// start: 29  end: 30  Mask: 100000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 536870912) >> 29;
				return (UInt32)value2;
			}
		}
		public UInt32 Silo
		{
			get
			{
				// start: 30  end: 31  Mask: 1000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 1073741824) >> 30;
				return (UInt32)value2;
			}
		}
		public UInt32 ContainerTelemetryIdSet
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1320);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public UInt32 JobFlags2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1324); } }
		public UInt32 ParentLocked
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1324);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 EnableUsermodeSiloThreadImpersonation
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1324);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 DisallowUsermodeSiloThreadImpersonation
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1324);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt64 EnergyValues { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1328); } }
		public UInt64 SharedCommitCharge { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1336); } }
		public UInt32 DiskIoAttributionUserRefCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1344); } }
		public UInt32 DiskIoAttributionRefCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1348); } }
		public UInt64 DiskIoAttributionContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1352); } }
		public UInt64 DiskIoAttributionOwnerJob { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1352); } }
		public _JOB_RATE_CONTROL_HEADER IoRateControlHeader
		{
			get
			{
				_JOB_RATE_CONTROL_HEADER returnValue = new _JOB_RATE_CONTROL_HEADER(_StructureData, _BufferOffset + 1360);
				return returnValue;
			}
		}
		public _PS_IO_CONTROL_ENTRY GlobalIoControl
		{
			get
			{
				_PS_IO_CONTROL_ENTRY returnValue = new _PS_IO_CONTROL_ENTRY(_StructureData, _BufferOffset + 1400);
				return returnValue;
			}
		}
		public Int32 IoControlStateLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 1456); } }
		public _RTL_RB_TREE VolumeIoControlTree
		{
			get
			{
				_RTL_RB_TREE returnValue = new _RTL_RB_TREE(_StructureData, _BufferOffset + 1464);
				return returnValue;
			}
		}
		public UInt64 IoRateOverQuotaHistory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1480); } }
		public UInt32 IoRateCurrentGeneration { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1488); } }
		public UInt32 IoRateLastQueryGeneration { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1492); } }
		public UInt32 IoRateGenerationLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1496); } }
		public UInt32 IoRateOverQuotaNotifySequenceId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1500); } }
		public UInt64 LastThrottledIoTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1504); } }
		public _EX_PUSH_LOCK IoControlLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 1512);
				return returnValue;
			}
		}
		public Int64 SiloHardReferenceCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 1520); } }
		public _WORK_QUEUE_ITEM RundownWorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 1528);
				return returnValue;
			}
		}
		public UInt64 PartitionObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1560); } }
		public UInt64 PartitionOwnerJob { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1568); } }
		public _JOBOBJECT_ENERGY_TRACKING_STATE EnergyTrackingState
		{
			get
			{
				_JOBOBJECT_ENERGY_TRACKING_STATE returnValue = new _JOBOBJECT_ENERGY_TRACKING_STATE(_StructureData, _BufferOffset + 1576);
				return returnValue;
			}
		}
		public UInt64 KernelWaitTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1584); } }
		public UInt64 UserWaitTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1592); } }
	}
	#endregion
	#region _IO_PRIORITY_INFO
 
	public class _IO_PRIORITY_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_PRIORITY_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_PRIORITY_INFO"": [ 16, {
				 ""Size"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ThreadPriority"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""PagePriority"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""IoPriority"": [ 12, [ ""Enumeration"", ""{\""enum_name\"":\""_IO_PRIORITY_HINT\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ThreadPriority { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 PagePriority { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _IO_PRIORITY_HINT IoPriority { get { return (_IO_PRIORITY_HINT)BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _EVENT_RECORD
 
	public class _EVENT_RECORD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EVENT_RECORD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EVENT_RECORD"": [ 112, {
				 ""EventHeader"": [ 0, [ ""_EVENT_HEADER"", ""null"" ]],
				 ""BufferContext"": [ 80, [ ""_ETW_BUFFER_CONTEXT"", ""null"" ]],
				 ""ExtendedDataCount"": [ 84, [ ""UInt16"", ""null"" ]],
				 ""UserDataLength"": [ 86, [ ""UInt16"", ""null"" ]],
				 ""ExtendedData"": [ 88, [ ""Pointer"", ""{\""target\"":\""_EVENT_HEADER_EXTENDED_DATA_ITEM\""}"" ]],
				 ""UserData"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UserContext"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _EVENT_HEADER EventHeader
		{
			get
			{
				_EVENT_HEADER returnValue = new _EVENT_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ETW_BUFFER_CONTEXT BufferContext
		{
			get
			{
				_ETW_BUFFER_CONTEXT returnValue = new _ETW_BUFFER_CONTEXT(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt16 ExtendedDataCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 84); } }
		public UInt16 UserDataLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 86); } }
		public UInt64 ExtendedData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 UserData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 UserContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
	}
	#endregion
	#region _PERFINFO_GROUPMASK
 
	public class _PERFINFO_GROUPMASK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PERFINFO_GROUPMASK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PERFINFO_GROUPMASK"": [ 32, {
				 ""Masks"": [ 0, [ ""Array"", ""{\""count\"":8,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32[] Masks
		{
			get
			{
				UInt32[] returnValue = new UInt32[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EX_RUNDOWN_REF
 
	public class _EX_RUNDOWN_REF
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_RUNDOWN_REF(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_RUNDOWN_REF"": [ 8, {
				 ""Count"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Ptr"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Count { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Ptr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _MM_PAGE_ACCESS_INFO_HEADER
 
	public class _MM_PAGE_ACCESS_INFO_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MM_PAGE_ACCESS_INFO_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MM_PAGE_ACCESS_INFO_HEADER"": [ 72, {
				 ""Link"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""Type"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_MM_PAGE_ACCESS_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""EmptySequenceNumber"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""CurrentFileIndex"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""CreateTime"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""EmptyTime"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""TempEntry"": [ 24, [ ""Pointer"", ""{\""target\"":\""_MM_PAGE_ACCESS_INFO\""}"" ]],
				 ""PageEntry"": [ 32, [ ""Pointer"", ""{\""target\"":\""_MM_PAGE_ACCESS_INFO\""}"" ]],
				 ""FileEntry"": [ 40, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]],
				 ""FirstFileEntry"": [ 48, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]],
				 ""Process"": [ 56, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""SessionId"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""PageFrameEntry"": [ 32, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]],
				 ""LastPageFrameEntry"": [ 40, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public _SINGLE_LIST_ENTRY Link
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _MM_PAGE_ACCESS_TYPE Type { get { return (_MM_PAGE_ACCESS_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 EmptySequenceNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 CurrentFileIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 CreateTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 EmptyTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 TempEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 PageEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 FileEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 FirstFileEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Process { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt64 PageFrameEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 LastPageFrameEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _PROCESS_EXTENDED_ENERGY_VALUES
 
	public class _PROCESS_EXTENDED_ENERGY_VALUES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCESS_EXTENDED_ENERGY_VALUES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 432; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCESS_EXTENDED_ENERGY_VALUES"": [ 432, {
				 ""Base"": [ 0, [ ""_PROCESS_ENERGY_VALUES"", ""null"" ]],
				 ""Extension"": [ 272, [ ""_PROCESS_ENERGY_VALUES_EXTENSION"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _PROCESS_ENERGY_VALUES Base
		{
			get
			{
				_PROCESS_ENERGY_VALUES returnValue = new _PROCESS_ENERGY_VALUES(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _PROCESS_ENERGY_VALUES_EXTENSION Extension
		{
			get
			{
				_PROCESS_ENERGY_VALUES_EXTENSION returnValue = new _PROCESS_ENERGY_VALUES_EXTENSION(_StructureData, _BufferOffset + 272);
				return returnValue;
			}
		}
	}
	#endregion
	#region _FSRTL_ADVANCED_FCB_HEADER
 
	public class _FSRTL_ADVANCED_FCB_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FSRTL_ADVANCED_FCB_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 104; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FSRTL_ADVANCED_FCB_HEADER"": [ 104, {
				 ""NodeTypeCode"": [ 0, [ ""Int16"", ""null"" ]],
				 ""NodeByteSize"": [ 2, [ ""Int16"", ""null"" ]],
				 ""Flags"": [ 4, [ ""Byte"", ""null"" ]],
				 ""IsFastIoPossible"": [ 5, [ ""Byte"", ""null"" ]],
				 ""Flags2"": [ 6, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 7, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Version"": [ 7, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""Resource"": [ 8, [ ""Pointer"", ""{\""target\"":\""_ERESOURCE\""}"" ]],
				 ""PagingIoResource"": [ 16, [ ""Pointer"", ""{\""target\"":\""_ERESOURCE\""}"" ]],
				 ""AllocationSize"": [ 24, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""FileSize"": [ 32, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ValidDataLength"": [ 40, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""FastMutex"": [ 48, [ ""Pointer"", ""{\""target\"":\""_FAST_MUTEX\""}"" ]],
				 ""FilterContexts"": [ 56, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PushLock"": [ 72, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""FileContextSupportPointer"": [ 80, [ ""Pointer"", ""{\""target\"":\""void*\""}"" ]],
				 ""Oplock"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReservedForRemote"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReservedContext"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 NodeTypeCode { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 NodeByteSize { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte IsFastIoPossible{ get { return _StructureData[_BufferOffset +5]; } }
		public Byte Flags2{ get { return _StructureData[_BufferOffset +6]; } }
		public Byte Reserved
		{
			get
			{
				// start: 0  end: 4  Mask: 0000000000001111
				Byte value = _StructureData[_BufferOffset + 7];
				var value2 = (value & 15) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Version
		{
			get
			{
				// start: 4  end: 8  Mask: 0000000011110000
				Byte value = _StructureData[_BufferOffset + 7];
				var value2 = (value & 240) >> 4;
				return (Byte)value2;
			}
		}
		public UInt64 Resource { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 PagingIoResource { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _LARGE_INTEGER AllocationSize
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LARGE_INTEGER FileSize
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ValidDataLength
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt64 FastMutex { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _LIST_ENTRY FilterContexts
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK PushLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public UInt64 FileContextSupportPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 Oplock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 ReservedForRemote { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 ReservedContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
	}
	#endregion
	#region _iobuf
 
	public class _iobuf
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _iobuf(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_iobuf"": [ 48, {
				 ""_ptr"": [ 0, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""_cnt"": [ 8, [ ""Int32"", ""null"" ]],
				 ""_base"": [ 16, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""_flag"": [ 24, [ ""Int32"", ""null"" ]],
				 ""_file"": [ 28, [ ""Int32"", ""null"" ]],
				 ""_charbuf"": [ 32, [ ""Int32"", ""null"" ]],
				 ""_bufsiz"": [ 36, [ ""Int32"", ""null"" ]],
				 ""_tmpfname"": [ 40, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 _ptr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Int32 _cnt { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 _base { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Int32 _flag { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 24); } }
		public Int32 _file { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 28); } }
		public Int32 _charbuf { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 32); } }
		public Int32 _bufsiz { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 36); } }
		public UInt64 _tmpfname { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _RTL_HASH_TABLE
 
	public class _RTL_HASH_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_HASH_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_HASH_TABLE"": [ 16, {
				 ""EntryCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""MaskBitCount"": [ 4, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""BucketCount"": [ 4, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""Buckets"": [ 8, [ ""Pointer"", ""{\""target\"":\""_SINGLE_LIST_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 EntryCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 MaskBitCount
		{
			get
			{
				// start: 0  end: 5  Mask: 0000000000011111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 31) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 BucketCount
		{
			get
			{
				// start: 5  end: 32  Mask: 11111111111111111111111111100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4294967264) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt64 Buckets { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _RTL_HASH_ENTRY
 
	public class _RTL_HASH_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_HASH_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_HASH_ENTRY"": [ 16, {
				 ""BucketLink"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""Key"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SINGLE_LIST_ENTRY BucketLink
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Key { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _RTL_HASH_TABLE_ITERATOR
 
	public class _RTL_HASH_TABLE_ITERATOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_HASH_TABLE_ITERATOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_HASH_TABLE_ITERATOR"": [ 24, {
				 ""Hash"": [ 0, [ ""Pointer"", ""{\""target\"":\""_RTL_HASH_TABLE\""}"" ]],
				 ""HashEntry"": [ 8, [ ""Pointer"", ""{\""target\"":\""_RTL_HASH_ENTRY\""}"" ]],
				 ""Bucket"": [ 16, [ ""Pointer"", ""{\""target\"":\""_SINGLE_LIST_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Hash { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 HashEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Bucket { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _RTL_CHASH_TABLE
 
	public class _RTL_CHASH_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_CHASH_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_CHASH_TABLE"": [ 24, {
				 ""Table"": [ 0, [ ""Pointer"", ""{\""target\"":\""_RTL_CHASH_ENTRY\""}"" ]],
				 ""EntrySizeShift"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""EntryMax"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""EntryCount"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Table { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 EntrySizeShift { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 EntryMax { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 EntryCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _RTL_CHASH_ENTRY
 
	public class _RTL_CHASH_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_CHASH_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_CHASH_ENTRY"": [ 8, {
				 ""Key"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Key { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _tlgProvider_t
 
	public class _tlgProvider_t
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _tlgProvider_t(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_tlgProvider_t"": [ 56, {
				 ""LevelPlus1"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ProviderMetadataPtr"": [ 8, [ ""Pointer"", ""{\""target\"":\""UInt16\""}"" ]],
				 ""KeywordAny"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""KeywordAll"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""RegHandle"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""EnableCallback"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CallbackContext"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 LevelPlus1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 ProviderMetadataPtr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 KeywordAny { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 KeywordAll { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 RegHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 EnableCallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 CallbackContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _EVENT_FILTER_DESCRIPTOR
 
	public class _EVENT_FILTER_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EVENT_FILTER_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EVENT_FILTER_DESCRIPTOR"": [ 16, {
				 ""Ptr"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Size"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Type"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Ptr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Type { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _tlgProviderMetadata_t
 
	public class _tlgProviderMetadata_t
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _tlgProviderMetadata_t(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 19; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_tlgProviderMetadata_t"": [ 19, {
				 ""Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""ProviderId"": [ 1, [ ""_GUID"", ""null"" ]],
				 ""RemainingSize"": [ 17, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Type{ get { return _StructureData[_BufferOffset +0]; } }
		public _GUID ProviderId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 1);
				return returnValue;
			}
		}
		public UInt16 RemainingSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 17); } }
	}
	#endregion
	#region __m64
 
	public class __m64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public __m64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""__m64"": [ 8, {
				 ""m64_u64"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""m64_f32"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""float\""}"" ]],
				 ""m64_i8"": [ 0, [ ""Array"", ""{\""count\"":8,\""target\"":\""Char\""}"" ]],
				 ""m64_i16"": [ 0, [ ""Array"", ""{\""count\"":4,\""target\"":\""Int16\""}"" ]],
				 ""m64_i32"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""Int32\""}"" ]],
				 ""m64_i64"": [ 0, [ ""Int64"", ""null"" ]],
				 ""m64_u8"": [ 0, [ ""Array"", ""{\""count\"":8,\""target\"":\""Byte\""}"" ]],
				 ""m64_u16"": [ 0, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt16\""}"" ]],
				 ""m64_u32"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 m64_u64 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public float[] m64_f32
		{
			get
			{
				float[] returnValue = new float[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToSingle(_StructureData, (i * sizeof(float)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public Char[] m64_i8
		{
			get
			{
				Char[] returnValue = new Char[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int16[] m64_i16
		{
			get
			{
				Int16[] returnValue = new Int16[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToInt16(_StructureData, (i * sizeof(Int16)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int32[] m64_i32
		{
			get
			{
				Int32[] returnValue = new Int32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToInt32(_StructureData, (i * sizeof(Int32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int64 m64_i64 { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 0); } }
		public Byte[] m64_u8
		{
			get
			{
				Byte[] returnValue = new Byte[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 0];
				return returnValue;
			}
		}
		public UInt16[] m64_u16
		{
			get
			{
				UInt16[] returnValue = new UInt16[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32[] m64_u32
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region __m128
 
	public class __m128
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public __m128(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""__m128"": [ 16, {
				 ""m128_f32"": [ 0, [ ""Array"", ""{\""count\"":4,\""target\"":\""float\""}"" ]],
				 ""m128_u64"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""m128_i8"": [ 0, [ ""Array"", ""{\""count\"":16,\""target\"":\""Char\""}"" ]],
				 ""m128_i16"": [ 0, [ ""Array"", ""{\""count\"":8,\""target\"":\""Int16\""}"" ]],
				 ""m128_i32"": [ 0, [ ""Array"", ""{\""count\"":4,\""target\"":\""Int32\""}"" ]],
				 ""m128_i64"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""Int64\""}"" ]],
				 ""m128_u8"": [ 0, [ ""Array"", ""{\""count\"":16,\""target\"":\""Byte\""}"" ]],
				 ""m128_u16"": [ 0, [ ""Array"", ""{\""count\"":8,\""target\"":\""UInt16\""}"" ]],
				 ""m128_u32"": [ 0, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public float[] m128_f32
		{
			get
			{
				float[] returnValue = new float[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToSingle(_StructureData, (i * sizeof(float)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64[] m128_u64
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public Char[] m128_i8
		{
			get
			{
				Char[] returnValue = new Char[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int16[] m128_i16
		{
			get
			{
				Int16[] returnValue = new Int16[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToInt16(_StructureData, (i * sizeof(Int16)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int32[] m128_i32
		{
			get
			{
				Int32[] returnValue = new Int32[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToInt32(_StructureData, (i * sizeof(Int32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int64[] m128_i64
		{
			get
			{
				Int64[] returnValue = new Int64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToInt64(_StructureData, (i * sizeof(Int64)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte[] m128_u8
		{
			get
			{
				Byte[] returnValue = new Byte[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 0];
				return returnValue;
			}
		}
		public UInt16[] m128_u16
		{
			get
			{
				UInt16[] returnValue = new UInt16[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32[] m128_u32
		{
			get
			{
				UInt32[] returnValue = new UInt32[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region wil_details_FeatureDescriptor
 
	public class wil_details_FeatureDescriptor
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public wil_details_FeatureDescriptor(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""wil_details_FeatureDescriptor"": [ 24, {
				 ""featureStateCache"": [ 0, [ ""Pointer"", ""{\""target\"":\""wil_details_FeatureStateCache\""}"" ]],
				 ""featureId"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""changeTime"": [ 12, [ ""Byte"", ""null"" ]],
				 ""isAlwaysDisabled"": [ 13, [ ""Byte"", ""null"" ]],
				 ""isAlwaysEnabled"": [ 14, [ ""Byte"", ""null"" ]],
				 ""isEnabledByDefault"": [ 15, [ ""Byte"", ""null"" ]],
				 ""requiresFeatures"": [ 16, [ ""Pointer"", ""{\""target\"":\""wil_details_FeatureDescriptor*\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 featureStateCache { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 featureId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte changeTime{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte isAlwaysDisabled{ get { return _StructureData[_BufferOffset +13]; } }
		public Byte isAlwaysEnabled{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte isEnabledByDefault{ get { return _StructureData[_BufferOffset +15]; } }
		public UInt64 requiresFeatures { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region wil_details_FeatureStateCache
 
	public class wil_details_FeatureStateCache
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public wil_details_FeatureStateCache(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""wil_details_FeatureStateCache"": [ 8, {
				 ""exchange"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""stateCached"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""hasNotificationCached"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""variantCached"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""effectiveState"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""desiredState"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""configuredState"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""needsRefresh"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""hasNotification"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""isVariant"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""variant"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""unused"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""payloadId"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""exchange64"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 exchange { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 stateCached
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 hasNotificationCached
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 variantCached
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 effectiveState
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 desiredState
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 configuredState
		{
			get
			{
				// start: 5  end: 7  Mask: 0000000001100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 96) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 needsRefresh
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 hasNotification
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 isVariant
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 variant
		{
			get
			{
				// start: 10  end: 16  Mask: 1111110000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64512) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 unused
		{
			get
			{
				// start: 16  end: 32  Mask: 11111111111111110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294901760) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 payloadId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 exchange64 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region wil_details_FeatureReportingCache
 
	public class wil_details_FeatureReportingCache
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public wil_details_FeatureReportingCache(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""wil_details_FeatureReportingCache"": [ 8, {
				 ""reported"": [ 0, [ ""wil_details_ReportedState"", ""null"" ]],
				 ""recorded"": [ 4, [ ""wil_details_RecordedState"", ""null"" ]] }]
				 }
				)";
			}
		}
		public wil_details_ReportedState reported
		{
			get
			{
				wil_details_ReportedState returnValue = new wil_details_ReportedState(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public wil_details_RecordedState recorded
		{
			get
			{
				wil_details_RecordedState returnValue = new wil_details_RecordedState(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region wil_details_RecordUsageResult
 
	public class wil_details_RecordUsageResult
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public wil_details_RecordUsageResult(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""wil_details_RecordUsageResult"": [ 24, {
				 ""queueBackground"": [ 0, [ ""Int32"", ""null"" ]],
				 ""countImmediate"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""kindImmediate"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""wil_details_ServiceReportingKind\"",\""target\"":\""UInt32\""}"" ]],
				 ""payloadId"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""ignoredUse"": [ 16, [ ""Int32"", ""null"" ]],
				 ""isVariantConfiguration"": [ 20, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 queueBackground { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 countImmediate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public wil_details_ServiceReportingKind kindImmediate { get { return (wil_details_ServiceReportingKind)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 payloadId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public Int32 ignoredUse { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public Int32 isVariantConfiguration { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region wil_details_ReportedState
 
	public class wil_details_ReportedState
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public wil_details_ReportedState(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""wil_details_ReportedState"": [ 4, {
				 ""exchange"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""queuedForReporting"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""reportedDeviceUsage"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""reportedDevicePotential"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""reportedDeviceOpportunity"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""reportedDevicePotentialOpportunity"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""usageCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""usageCountRepresentsPotential"": [ 0, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""opportunityCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""opportunityCountRepresentsPotential"": [ 0, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""unused"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 exchange { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 queuedForReporting
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 reportedDeviceUsage
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 reportedDevicePotential
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 reportedDeviceOpportunity
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 reportedDevicePotentialOpportunity
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 usageCount
		{
			get
			{
				// start: 5  end: 14  Mask: 0011111111100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16352) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 usageCountRepresentsPotential
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 opportunityCount
		{
			get
			{
				// start: 15  end: 22  Mask: 1111111000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4161536) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 opportunityCountRepresentsPotential
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 unused
		{
			get
			{
				// start: 23  end: 32  Mask: 11111111100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4286578688) >> 23;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region wil_details_RecordedState
 
	public class wil_details_RecordedState
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public wil_details_RecordedState(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""wil_details_RecordedState"": [ 4, {
				 ""exchange"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""recordedDeviceUsage"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""recordedDevicePotential"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""recordedDeviceOpportunity"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""recordedDevicePotentialOpportunity"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""recordedVariantDeviceUsage"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""recordedVariant"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""unused"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 exchange { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 recordedDeviceUsage
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 recordedDevicePotential
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 recordedDeviceOpportunity
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 recordedDevicePotentialOpportunity
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 recordedVariantDeviceUsage
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 recordedVariant
		{
			get
			{
				// start: 5  end: 11  Mask: 0000011111100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2016) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 unused
		{
			get
			{
				// start: 11  end: 32  Mask: 11111111111111111111100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294965248) >> 11;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region FEATURE_LOGGED_TRAITS
 
	public class FEATURE_LOGGED_TRAITS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public FEATURE_LOGGED_TRAITS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 6; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""FEATURE_LOGGED_TRAITS"": [ 6, {
				 ""version"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""baseVersion"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""stage"": [ 4, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 baseVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public Byte stage{ get { return _StructureData[_BufferOffset +4]; } }
	}
	#endregion
	#region FEATURE_ERROR
 
	public class FEATURE_ERROR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public FEATURE_ERROR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 104; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""FEATURE_ERROR"": [ 104, {
				 ""hr"": [ 0, [ ""Int32"", ""null"" ]],
				 ""lineNumber"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""file"": [ 8, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""process"": [ 16, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""modulePath"": [ 24, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""callerReturnAddressOffset"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""callerModule"": [ 40, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""message"": [ 48, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""originLineNumber"": [ 56, [ ""UInt16"", ""null"" ]],
				 ""originFile"": [ 64, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""originModule"": [ 72, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""originCallerReturnAddressOffset"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""originCallerModule"": [ 88, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""originName"": [ 96, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 hr { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16 lineNumber { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt64 file { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 process { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 modulePath { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 callerReturnAddressOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 callerModule { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 message { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt16 originLineNumber { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 56); } }
		public UInt64 originFile { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 originModule { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt32 originCallerReturnAddressOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt64 originCallerModule { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 originName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
	}
	#endregion
	#region wil_details_StagingConfigFeature
 
	public class wil_details_StagingConfigFeature
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public wil_details_StagingConfigFeature(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""wil_details_StagingConfigFeature"": [ 12, {
				 ""featureId"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""changedInSession"": [ 4, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""isVariantConfig"": [ 4, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""unused1"": [ 4, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""serviceState"": [ 4, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""userState"": [ 4, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""testState"": [ 4, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""unused2"": [ 4, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""unused3"": [ 4, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""variant"": [ 4, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""payloadKind"": [ 4, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]],
				 ""payload"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 featureId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 changedInSession
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 isVariantConfig
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 unused1
		{
			get
			{
				// start: 2  end: 8  Mask: 0000000011111100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 252) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 serviceState
		{
			get
			{
				// start: 8  end: 10  Mask: 0000001100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 768) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 userState
		{
			get
			{
				// start: 10  end: 12  Mask: 0000110000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 3072) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 testState
		{
			get
			{
				// start: 12  end: 14  Mask: 0011000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 12288) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 unused2
		{
			get
			{
				// start: 14  end: 16  Mask: 1100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 49152) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 unused3
		{
			get
			{
				// start: 16  end: 24  Mask: 111111110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 16711680) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 variant
		{
			get
			{
				// start: 24  end: 30  Mask: 111111000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 1056964608) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 payloadKind
		{
			get
			{
				// start: 30  end: 32  Mask: 11000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 3221225472) >> 30;
				return (UInt32)value2;
			}
		}
		public UInt32 payload { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region wil_details_StagingConfig
 
	public class wil_details_StagingConfig
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public wil_details_StagingConfig(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""wil_details_StagingConfig"": [ 88, {
				 ""store"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""wil_FeatureStore\"",\""target\"":\""UInt32\""}"" ]],
				 ""forUpdate"": [ 4, [ ""Int32"", ""null"" ]],
				 ""readChangeStamp"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""readVersion"": [ 12, [ ""Byte"", ""null"" ]],
				 ""modified"": [ 16, [ ""Int32"", ""null"" ]],
				 ""header"": [ 24, [ ""Pointer"", ""{\""target\"":\""wil_details_StagingConfigHeader\""}"" ]],
				 ""features"": [ 32, [ ""Pointer"", ""{\""target\"":\""wil_details_StagingConfigFeature\""}"" ]],
				 ""triggers"": [ 40, [ ""Pointer"", ""{\""target\"":\""wil_details_StagingConfigUsageTrigger\""}"" ]],
				 ""changedInSession"": [ 48, [ ""Int32"", ""null"" ]],
				 ""buffer"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""bufferSize"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""bufferAlloc"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""bufferOwned"": [ 80, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public wil_FeatureStore store { get { return (wil_FeatureStore)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 forUpdate { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 readChangeStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte readVersion{ get { return _StructureData[_BufferOffset +12]; } }
		public Int32 modified { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 header { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 features { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 triggers { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public Int32 changedInSession { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 48); } }
		public UInt64 buffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 bufferSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 bufferAlloc { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public Int32 bufferOwned { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 80); } }
	}
	#endregion
	#region wil_details_StagingConfigHeader
 
	public class wil_details_StagingConfigHeader
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public wil_details_StagingConfigHeader(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""wil_details_StagingConfigHeader"": [ 16, {
				 ""version"": [ 0, [ ""Byte"", ""null"" ]],
				 ""versionMinor"": [ 1, [ ""Byte"", ""null"" ]],
				 ""headerSizeBytes"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""featureCount"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""featureUsageTriggerCount"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""sessionProperties"": [ 8, [ ""wil_details_StagingConfigHeaderProperties"", ""null"" ]],
				 ""properties"": [ 12, [ ""wil_details_StagingConfigHeaderProperties"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte version{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte versionMinor{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt16 headerSizeBytes { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 featureCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 featureUsageTriggerCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public wil_details_StagingConfigHeaderProperties sessionProperties
		{
			get
			{
				wil_details_StagingConfigHeaderProperties returnValue = new wil_details_StagingConfigHeaderProperties(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public wil_details_StagingConfigHeaderProperties properties
		{
			get
			{
				wil_details_StagingConfigHeaderProperties returnValue = new wil_details_StagingConfigHeaderProperties(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
	}
	#endregion
	#region wil_details_StagingConfigUsageTrigger
 
	public class wil_details_StagingConfigUsageTrigger
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public wil_details_StagingConfigUsageTrigger(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""wil_details_StagingConfigUsageTrigger"": [ 16, {
				 ""featureId"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""trigger"": [ 4, [ ""wil_details_StagingConfigWnfStateName"", ""null"" ]],
				 ""serviceReportingKind"": [ 12, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""isVariantConfig"": [ 12, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""unused"": [ 12, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 featureId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public wil_details_StagingConfigWnfStateName trigger
		{
			get
			{
				wil_details_StagingConfigWnfStateName returnValue = new wil_details_StagingConfigWnfStateName(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 serviceReportingKind
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 65535) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 isVariantConfig
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 unused
		{
			get
			{
				// start: 17  end: 32  Mask: 11111111111111100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 4294836224) >> 17;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region wil_details_StagingConfigHeaderProperties
 
	public class wil_details_StagingConfigHeaderProperties
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public wil_details_StagingConfigHeaderProperties(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""wil_details_StagingConfigHeaderProperties"": [ 4, {
				 ""ignoreServiceState"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ignoreUserState"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""ignoreTestState"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ignoreVariants"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""unused"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ignoreServiceState
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ignoreUserState
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 ignoreTestState
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 ignoreVariants
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 unused
		{
			get
			{
				// start: 4  end: 32  Mask: 11111111111111111111111111110000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967280) >> 4;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region wil_FeatureState
 
	public class wil_FeatureState
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public wil_FeatureState(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""wil_FeatureState"": [ 24, {
				 ""enabledState"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""wil_FeatureEnabledState\"",\""target\"":\""UInt32\""}"" ]],
				 ""variant"": [ 4, [ ""Byte"", ""null"" ]],
				 ""payloadKind"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""wil_FeatureVariantPayloadKind\"",\""target\"":\""UInt32\""}"" ]],
				 ""payload"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""hasNotification"": [ 16, [ ""Int32"", ""null"" ]],
				 ""isVariantConfiguration"": [ 20, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public wil_FeatureEnabledState enabledState { get { return (wil_FeatureEnabledState)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte variant{ get { return _StructureData[_BufferOffset +4]; } }
		public wil_FeatureVariantPayloadKind payloadKind { get { return (wil_FeatureVariantPayloadKind)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 payload { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public Int32 hasNotification { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public Int32 isVariantConfiguration { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _RTL_FEATURE_CONFIGURATION
 
	public class _RTL_FEATURE_CONFIGURATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_FEATURE_CONFIGURATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_FEATURE_CONFIGURATION"": [ 12, {
				 ""FeatureId"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Priority"": [ 4, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""EnabledState"": [ 4, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""IsWexpConfiguration"": [ 4, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""HasSubscriptions"": [ 4, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""Variant"": [ 4, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""VariantPayloadKind"": [ 4, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""VariantPayload"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 FeatureId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Priority
		{
			get
			{
				// start: 0  end: 4  Mask: 0000000000001111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 15) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 EnabledState
		{
			get
			{
				// start: 4  end: 6  Mask: 0000000000110000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 48) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 IsWexpConfiguration
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 HasSubscriptions
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 Variant
		{
			get
			{
				// start: 8  end: 14  Mask: 0011111100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 16128) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 VariantPayloadKind
		{
			get
			{
				// start: 14  end: 16  Mask: 1100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 49152) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 VariantPayload { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region __WIL__WNF_STATE_NAME
 
	public class __WIL__WNF_STATE_NAME
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public __WIL__WNF_STATE_NAME(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""__WIL__WNF_STATE_NAME"": [ 8, {
				 ""Data"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32[] Data
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WNF_STATE_NAME
 
	public class _WNF_STATE_NAME
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WNF_STATE_NAME(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WNF_STATE_NAME"": [ 8, {
				 ""Data"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32[] Data
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WNF_TYPE_ID
 
	public class _WNF_TYPE_ID
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WNF_TYPE_ID(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WNF_TYPE_ID"": [ 16, {
				 ""TypeId"": [ 0, [ ""_GUID"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _GUID TypeId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _wil_details_UsageSubscriptionData
 
	public class _wil_details_UsageSubscriptionData
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _wil_details_UsageSubscriptionData(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_wil_details_UsageSubscriptionData"": [ 8, {
				 ""featureId"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""serviceReportingKind"": [ 4, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 featureId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16 serviceReportingKind { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region wil_StagingConfig
 
	public class wil_StagingConfig
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public wil_StagingConfig(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""wil_StagingConfig"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _RTL_FEATURE_USAGE_REPORT
 
	public class _RTL_FEATURE_USAGE_REPORT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_FEATURE_USAGE_REPORT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_FEATURE_USAGE_REPORT"": [ 8, {
				 ""FeatureId"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ReportingKind"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""ReportingOptions"": [ 6, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 FeatureId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16 ReportingKind { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 ReportingOptions { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
	}
	#endregion
	#region wil_details_FeatureTestState
 
	public class wil_details_FeatureTestState
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public wil_details_FeatureTestState(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""wil_details_FeatureTestState"": [ 32, {
				 ""kind"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""wil_details_FeatureTestStateKind\"",\""target\"":\""UInt32\""}"" ]],
				 ""featureId"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""state"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""wil_FeatureEnabledState\"",\""target\"":\""UInt32\""}"" ]],
				 ""variant"": [ 12, [ ""Byte"", ""null"" ]],
				 ""payload"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""payloadKind"": [ 20, [ ""Enumeration"", ""{\""enum_name\"":\""wil_FeatureVariantPayloadKind\"",\""target\"":\""UInt32\""}"" ]],
				 ""next"": [ 24, [ ""Pointer"", ""{\""target\"":\""wil_details_FeatureTestState\""}"" ]] }]
				 }
				)";
			}
		}
		public wil_details_FeatureTestStateKind kind { get { return (wil_details_FeatureTestStateKind)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 featureId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public wil_FeatureEnabledState state { get { return (wil_FeatureEnabledState)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte variant{ get { return _StructureData[_BufferOffset +12]; } }
		public UInt32 payload { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public wil_FeatureVariantPayloadKind payloadKind { get { return (wil_FeatureVariantPayloadKind)BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _MMPTE
 
	public class _MMPTE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPTE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPTE"": [ 8, {
				 ""u"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EX_PUSH_LOCK_AUTO_EXPAND
 
	public class _EX_PUSH_LOCK_AUTO_EXPAND
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_PUSH_LOCK_AUTO_EXPAND(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_PUSH_LOCK_AUTO_EXPAND"": [ 16, {
				 ""LocalLock"": [ 0, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""State"": [ 8, [ ""_EX_PUSH_LOCK_AUTO_EXPAND_STATE"", ""null"" ]],
				 ""Stats"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _EX_PUSH_LOCK LocalLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK_AUTO_EXPAND_STATE State
		{
			get
			{
				_EX_PUSH_LOCK_AUTO_EXPAND_STATE returnValue = new _EX_PUSH_LOCK_AUTO_EXPAND_STATE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 Stats { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _MI_CACHED_PTE
 
	public class _MI_CACHED_PTE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_CACHED_PTE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_CACHED_PTE"": [ 8, {
				 ""GlobalTimeStamp"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""PteIndex"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Long"": [ 0, [ ""Int64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 GlobalTimeStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 PteIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public Int64 Long { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _KLOCK_QUEUE_HANDLE
 
	public class _KLOCK_QUEUE_HANDLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KLOCK_QUEUE_HANDLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KLOCK_QUEUE_HANDLE"": [ 24, {
				 ""LockQueue"": [ 0, [ ""_KSPIN_LOCK_QUEUE"", ""null"" ]],
				 ""OldIrql"": [ 16, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KSPIN_LOCK_QUEUE LockQueue
		{
			get
			{
				_KSPIN_LOCK_QUEUE returnValue = new _KSPIN_LOCK_QUEUE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte OldIrql{ get { return _StructureData[_BufferOffset +16]; } }
	}
	#endregion
	#region _MMPFNLIST
 
	public class _MMPFNLIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPFNLIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPFNLIST"": [ 40, {
				 ""Total"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""ListName"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_MMLISTS\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flink"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""Blink"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""Lock"": [ 32, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Total { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _MMLISTS ListName { get { return (_MMLISTS)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 Flink { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Blink { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _MMCLONE_DESCRIPTOR
 
	public class _MMCLONE_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMCLONE_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMCLONE_DESCRIPTOR"": [ 112, {
				 ""CloneNode"": [ 0, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_MMCLONE_DESCRIPTOR\""}"" ]],
				 ""StartingCloneBlock"": [ 24, [ ""Pointer"", ""{\""target\"":\""_MMCLONE_BLOCK\""}"" ]],
				 ""EndingCloneBlock"": [ 32, [ ""Pointer"", ""{\""target\"":\""_MMCLONE_BLOCK\""}"" ]],
				 ""NumberOfPtes"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""NumberOfReferences"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""CloneHeader"": [ 56, [ ""Pointer"", ""{\""target\"":\""_MMCLONE_HEADER\""}"" ]],
				 ""NonPagedPoolQuotaCharge"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""DeleteList"": [ 80, [ ""_SLIST_ENTRY"", ""null"" ]],
				 ""NestingLevel"": [ 96, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BALANCED_NODE CloneNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 StartingCloneBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 EndingCloneBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 NumberOfPtes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 NumberOfReferences { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 CloneHeader { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 NonPagedPoolQuotaCharge { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public _SLIST_ENTRY DeleteList
		{
			get
			{
				_SLIST_ENTRY returnValue = new _SLIST_ENTRY(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt64 NestingLevel { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
	}
	#endregion
	#region _MMPFN
 
	public class _MMPFN
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPFN(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPFN"": [ 48, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""TreeNode"": [ 0, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""u1"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""PteAddress"": [ 8, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""PteLong"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""OriginalPte"": [ 16, [ ""_MMPTE"", ""null"" ]],
				 ""u2"": [ 24, [ ""_MIPFNBLINK"", ""null"" ]],
				 ""u3"": [ 32, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""NodeBlinkLow"": [ 36, [ ""UInt16"", ""null"" ]],
				 ""Unused"": [ 38, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Unused2"": [ 38, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""ViewCount"": [ 39, [ ""Byte"", ""null"" ]],
				 ""NodeFlinkLow"": [ 39, [ ""Byte"", ""null"" ]],
				 ""ModifiedListBucketIndex"": [ 39, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""AnchorLargePageSize"": [ 39, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""u4"": [ 40, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _RTL_BALANCED_NODE TreeNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 PteAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 PteLong { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _MMPTE OriginalPte
		{
			get
			{
				_MMPTE returnValue = new _MMPTE(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _MIPFNBLINK u2
		{
			get
			{
				_MIPFNBLINK returnValue = new _MIPFNBLINK(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u3
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt16 NodeBlinkLow { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 36); } }
		public Byte Unused
		{
			get
			{
				// start: 0  end: 4  Mask: 0000000000001111
				Byte value = _StructureData[_BufferOffset + 38];
				var value2 = (value & 15) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Unused2
		{
			get
			{
				// start: 4  end: 8  Mask: 0000000011110000
				Byte value = _StructureData[_BufferOffset + 38];
				var value2 = (value & 240) >> 4;
				return (Byte)value2;
			}
		}
		public Byte ViewCount{ get { return _StructureData[_BufferOffset +39]; } }
		public Byte NodeFlinkLow{ get { return _StructureData[_BufferOffset +39]; } }
		public Byte ModifiedListBucketIndex
		{
			get
			{
				// start: 0  end: 4  Mask: 0000000000001111
				Byte value = _StructureData[_BufferOffset + 39];
				var value2 = (value & 15) >> 0;
				return (Byte)value2;
			}
		}
		public Byte AnchorLargePageSize
		{
			get
			{
				// start: 0  end: 2  Mask: 0000000000000011
				Byte value = _StructureData[_BufferOffset + 39];
				var value2 = (value & 3) >> 0;
				return (Byte)value2;
			}
		}
		public _ANONYMOUS_TAG u4
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SEGMENT
 
	public class _SEGMENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEGMENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEGMENT"": [ 72, {
				 ""ControlArea"": [ 0, [ ""Pointer"", ""{\""target\"":\""_CONTROL_AREA\""}"" ]],
				 ""TotalNumberOfPtes"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SegmentFlags"": [ 12, [ ""_SEGMENT_FLAGS"", ""null"" ]],
				 ""NumberOfCommittedPages"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""SizeOfSegment"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""ExtendInfo"": [ 32, [ ""Pointer"", ""{\""target\"":\""_MMEXTEND_INFO\""}"" ]],
				 ""BasedAddress"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SegmentLock"": [ 40, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""u1"": [ 48, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""u2"": [ 56, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""PrototypePte"": [ 64, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ControlArea { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 TotalNumberOfPtes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _SEGMENT_FLAGS SegmentFlags
		{
			get
			{
				_SEGMENT_FLAGS returnValue = new _SEGMENT_FLAGS(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public UInt64 NumberOfCommittedPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 SizeOfSegment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ExtendInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 BasedAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _EX_PUSH_LOCK SegmentLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u2
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt64 PrototypePte { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _CONTROL_AREA
 
	public class _CONTROL_AREA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CONTROL_AREA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CONTROL_AREA"": [ 128, {
				 ""Segment"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SEGMENT\""}"" ]],
				 ""ListHead"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""AweContext"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberOfSectionReferences"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""NumberOfPfnReferences"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""NumberOfMappedViews"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""NumberOfUserReferences"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""u"": [ 56, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""u1"": [ 60, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""FilePointer"": [ 64, [ ""_EX_FAST_REF"", ""null"" ]],
				 ""ControlAreaLock"": [ 72, [ ""Int32"", ""null"" ]],
				 ""ModifiedWriteCount"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""WaitList"": [ 80, [ ""Pointer"", ""{\""target\"":\""_MI_CONTROL_AREA_WAIT_BLOCK\""}"" ]],
				 ""u2"": [ 88, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""FileObjectLock"": [ 104, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""LockedPages"": [ 112, [ ""UInt64"", ""null"" ]],
				 ""u3"": [ 120, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Segment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _LIST_ENTRY ListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 AweContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 NumberOfSectionReferences { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 NumberOfPfnReferences { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 NumberOfMappedViews { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 NumberOfUserReferences { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 60);
				return returnValue;
			}
		}
		public _EX_FAST_REF FilePointer
		{
			get
			{
				_EX_FAST_REF returnValue = new _EX_FAST_REF(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public Int32 ControlAreaLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 ModifiedWriteCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt64 WaitList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public _ANONYMOUS_TAG u2
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK FileObjectLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt64 LockedPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public _ANONYMOUS_TAG u3
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_CACHED_PTES
 
	public class _MI_CACHED_PTES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_CACHED_PTES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_CACHED_PTES"": [ 72, {
				 ""Bins"": [ 0, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""CachedPteCount"": [ 64, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _MI_CACHED_PTE[] Bins
		{
			get
			{
				_MI_CACHED_PTE[] returnValue = new _MI_CACHED_PTE[8];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<8; i++ )
					returnValue[i] = new _MI_CACHED_PTE(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int32 CachedPteCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _MI_SYSTEM_PTE_TYPE
 
	public class _MI_SYSTEM_PTE_TYPE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SYSTEM_PTE_TYPE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SYSTEM_PTE_TYPE"": [ 96, {
				 ""Bitmap"": [ 0, [ ""_RTL_BITMAP_EX"", ""null"" ]],
				 ""BasePte"": [ 16, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""Flags"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""VaType"": [ 28, [ ""Enumeration"", ""{\""enum_name\"":\""_MI_SYSTEM_VA_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""FailureCount"": [ 32, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""PteFailures"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""SpinLock"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""GlobalPushLock"": [ 48, [ ""Pointer"", ""{\""target\"":\""_EX_PUSH_LOCK\""}"" ]],
				 ""TotalSystemPtes"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""Hint"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""LowestBitEverAllocated"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""CachedPtes"": [ 80, [ ""Pointer"", ""{\""target\"":\""_MI_CACHED_PTES\""}"" ]],
				 ""TotalFreeSystemPtes"": [ 88, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BITMAP_EX Bitmap
		{
			get
			{
				_RTL_BITMAP_EX returnValue = new _RTL_BITMAP_EX(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 BasePte { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _MI_SYSTEM_VA_TYPE VaType { get { return (_MI_SYSTEM_VA_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt64 FailureCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt32 PteFailures { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt64 SpinLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 GlobalPushLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 TotalSystemPtes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 Hint { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 LowestBitEverAllocated { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 CachedPtes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 TotalFreeSystemPtes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
	}
	#endregion
	#region _MMVAD_SHORT
 
	public class _MMVAD_SHORT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMVAD_SHORT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMVAD_SHORT"": [ 64, {
				 ""NextVad"": [ 0, [ ""Pointer"", ""{\""target\"":\""_MMVAD_SHORT\""}"" ]],
				 ""ExtraCreateInfo"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VadNode"": [ 0, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""StartingVpn"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""EndingVpn"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""StartingVpnHigh"": [ 32, [ ""Byte"", ""null"" ]],
				 ""EndingVpnHigh"": [ 33, [ ""Byte"", ""null"" ]],
				 ""CommitChargeHigh"": [ 34, [ ""Byte"", ""null"" ]],
				 ""SpareNT64VadUChar"": [ 35, [ ""Byte"", ""null"" ]],
				 ""ReferenceCount"": [ 36, [ ""Int32"", ""null"" ]],
				 ""PushLock"": [ 40, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""u"": [ 48, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""u1"": [ 52, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""EventList"": [ 56, [ ""Pointer"", ""{\""target\"":\""_MI_VAD_EVENT_BLOCK\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 NextVad { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ExtraCreateInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _RTL_BALANCED_NODE VadNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 StartingVpn { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 EndingVpn { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public Byte StartingVpnHigh{ get { return _StructureData[_BufferOffset +32]; } }
		public Byte EndingVpnHigh{ get { return _StructureData[_BufferOffset +33]; } }
		public Byte CommitChargeHigh{ get { return _StructureData[_BufferOffset +34]; } }
		public Byte SpareNT64VadUChar{ get { return _StructureData[_BufferOffset +35]; } }
		public Int32 ReferenceCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 36); } }
		public _EX_PUSH_LOCK PushLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 52);
				return returnValue;
			}
		}
		public UInt64 EventList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
	}
	#endregion
	#region _MM_STORE_KEY
 
	public class _MM_STORE_KEY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MM_STORE_KEY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MM_STORE_KEY"": [ 8, {
				 ""KeyLow"": [ 0, [ ""BitField"", ""{\""end_bit\"":60,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""KeyHigh"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":60,\""target\"":\""UInt64\""}"" ]],
				 ""EntireKey"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 KeyLow
		{
			get
			{
				// start: 0  end: 60  Mask: 111111111111111111111111111111111111111111111111111111111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1152921504606846975) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 KeyHigh
		{
			get
			{
				// start: 60  end: 64  Mask: 1111000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 17293822569102704640) >> 60;
				return (UInt64)value2;
			}
		}
		public UInt64 EntireKey { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _MI_PARTITION
 
	public class _MI_PARTITION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PARTITION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 11520; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PARTITION"": [ 11520, {
				 ""Core"": [ 0, [ ""_MI_PARTITION_CORE"", ""null"" ]],
				 ""Modwriter"": [ 440, [ ""_MI_PARTITION_MODWRITES"", ""null"" ]],
				 ""Store"": [ 1152, [ ""_MI_PARTITION_STORES"", ""null"" ]],
				 ""Segments"": [ 1344, [ ""_MI_PARTITION_SEGMENTS"", ""null"" ]],
				 ""PageLists"": [ 2176, [ ""_MI_PARTITION_PAGE_LISTS"", ""null"" ]],
				 ""Commit"": [ 6208, [ ""_MI_PARTITION_COMMIT"", ""null"" ]],
				 ""Zeroing"": [ 6272, [ ""_MI_PARTITION_ZEROING"", ""null"" ]],
				 ""PageCombine"": [ 6448, [ ""_MI_PAGE_COMBINING_SUPPORT"", ""null"" ]],
				 ""WorkingSetControl"": [ 6848, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WorkingSetExpansionHead"": [ 6856, [ ""_MMWORKING_SET_EXPANSION_HEAD"", ""null"" ]],
				 ""SessionDetachTimeStamp"": [ 6872, [ ""UInt32"", ""null"" ]],
				 ""Vp"": [ 6912, [ ""_MI_VISIBLE_PARTITION"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _MI_PARTITION_CORE Core
		{
			get
			{
				_MI_PARTITION_CORE returnValue = new _MI_PARTITION_CORE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _MI_PARTITION_MODWRITES Modwriter
		{
			get
			{
				_MI_PARTITION_MODWRITES returnValue = new _MI_PARTITION_MODWRITES(_StructureData, _BufferOffset + 440);
				return returnValue;
			}
		}
		public _MI_PARTITION_STORES Store
		{
			get
			{
				_MI_PARTITION_STORES returnValue = new _MI_PARTITION_STORES(_StructureData, _BufferOffset + 1152);
				return returnValue;
			}
		}
		public _MI_PARTITION_SEGMENTS Segments
		{
			get
			{
				_MI_PARTITION_SEGMENTS returnValue = new _MI_PARTITION_SEGMENTS(_StructureData, _BufferOffset + 1344);
				return returnValue;
			}
		}
		public _MI_PARTITION_PAGE_LISTS PageLists
		{
			get
			{
				_MI_PARTITION_PAGE_LISTS returnValue = new _MI_PARTITION_PAGE_LISTS(_StructureData, _BufferOffset + 2176);
				return returnValue;
			}
		}
		public _MI_PARTITION_COMMIT Commit
		{
			get
			{
				_MI_PARTITION_COMMIT returnValue = new _MI_PARTITION_COMMIT(_StructureData, _BufferOffset + 6208);
				return returnValue;
			}
		}
		public _MI_PARTITION_ZEROING Zeroing
		{
			get
			{
				_MI_PARTITION_ZEROING returnValue = new _MI_PARTITION_ZEROING(_StructureData, _BufferOffset + 6272);
				return returnValue;
			}
		}
		public _MI_PAGE_COMBINING_SUPPORT PageCombine
		{
			get
			{
				_MI_PAGE_COMBINING_SUPPORT returnValue = new _MI_PAGE_COMBINING_SUPPORT(_StructureData, _BufferOffset + 6448);
				return returnValue;
			}
		}
		public UInt64 WorkingSetControl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6848); } }
		public _MMWORKING_SET_EXPANSION_HEAD WorkingSetExpansionHead
		{
			get
			{
				_MMWORKING_SET_EXPANSION_HEAD returnValue = new _MMWORKING_SET_EXPANSION_HEAD(_StructureData, _BufferOffset + 6856);
				return returnValue;
			}
		}
		public UInt32 SessionDetachTimeStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 6872); } }
		public _MI_VISIBLE_PARTITION Vp
		{
			get
			{
				_MI_VISIBLE_PARTITION returnValue = new _MI_VISIBLE_PARTITION(_StructureData, _BufferOffset + 6912);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EPARTITION
 
	public class _EPARTITION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EPARTITION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EPARTITION"": [ 128, {
				 ""MmPartition"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CcPartition"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ExPartition"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HardReferenceCount"": [ 24, [ ""Int64"", ""null"" ]],
				 ""OpenHandleCount"": [ 32, [ ""Int64"", ""null"" ]],
				 ""ActivePartitionLinks"": [ 40, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ParentPartition"": [ 56, [ ""Pointer"", ""{\""target\"":\""_EPARTITION\""}"" ]],
				 ""TeardownWorkItem"": [ 64, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""TeardownLock"": [ 96, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""SystemProcess"": [ 104, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""SystemProcessHandle"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PartitionFlags"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""PairedWithJob"": [ 120, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 MmPartition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 CcPartition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ExPartition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Int64 HardReferenceCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 24); } }
		public Int64 OpenHandleCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 32); } }
		public _LIST_ENTRY ActivePartitionLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt64 ParentPartition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public _WORK_QUEUE_ITEM TeardownWorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK TeardownLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt64 SystemProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 SystemProcessHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt32 PartitionFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 PairedWithJob
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 120);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _HHIVE
 
	public class _HHIVE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HHIVE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1536; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HHIVE"": [ 1536, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""GetCellRoutine"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReleaseCellRoutine"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Allocate"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Free"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FileWrite"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FileRead"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HiveLoadFailure"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BaseBlock"": [ 64, [ ""Pointer"", ""{\""target\"":\""_HBASE_BLOCK\""}"" ]],
				 ""FlusherLock"": [ 72, [ ""_CMSI_RW_LOCK"", ""null"" ]],
				 ""WriterLock"": [ 80, [ ""_CMSI_RW_LOCK"", ""null"" ]],
				 ""DirtyVector"": [ 88, [ ""_RTL_BITMAP"", ""null"" ]],
				 ""DirtyCount"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""DirtyAlloc"": [ 108, [ ""UInt32"", ""null"" ]],
				 ""UnreconciledVector"": [ 112, [ ""_RTL_BITMAP"", ""null"" ]],
				 ""UnreconciledCount"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""BaseBlockAlloc"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""Cluster"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""Flat"": [ 140, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""ReadOnly"": [ 140, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""Reserved"": [ 140, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""DirtyFlag"": [ 141, [ ""Byte"", ""null"" ]],
				 ""HvBinHeadersUse"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""HvFreeCellsUse"": [ 148, [ ""UInt32"", ""null"" ]],
				 ""HvUsedCellsUse"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""CmUsedCellsUse"": [ 156, [ ""UInt32"", ""null"" ]],
				 ""HiveFlags"": [ 160, [ ""UInt32"", ""null"" ]],
				 ""CurrentLog"": [ 164, [ ""UInt32"", ""null"" ]],
				 ""CurrentLogSequence"": [ 168, [ ""UInt32"", ""null"" ]],
				 ""CurrentLogMinimumSequence"": [ 172, [ ""UInt32"", ""null"" ]],
				 ""CurrentLogOffset"": [ 176, [ ""UInt32"", ""null"" ]],
				 ""MinimumLogSequence"": [ 180, [ ""UInt32"", ""null"" ]],
				 ""LogFileSizeCap"": [ 184, [ ""UInt32"", ""null"" ]],
				 ""LogDataPresent"": [ 188, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""PrimaryFileValid"": [ 190, [ ""Byte"", ""null"" ]],
				 ""BaseBlockDirty"": [ 191, [ ""Byte"", ""null"" ]],
				 ""LastLogSwapTime"": [ 192, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""FirstLogFile"": [ 200, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""SecondLogFile"": [ 200, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":3,\""target\"":\""UInt16\""}"" ]],
				 ""HeaderRecovered"": [ 200, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt16\""}"" ]],
				 ""LegacyRecoveryIndicated"": [ 200, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt16\""}"" ]],
				 ""RecoveryInformationReserved"": [ 200, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":8,\""target\"":\""UInt16\""}"" ]],
				 ""RecoveryInformation"": [ 200, [ ""UInt16"", ""null"" ]],
				 ""LogEntriesRecovered"": [ 202, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""RefreshCount"": [ 204, [ ""UInt32"", ""null"" ]],
				 ""StorageTypeCount"": [ 208, [ ""UInt32"", ""null"" ]],
				 ""Version"": [ 212, [ ""UInt32"", ""null"" ]],
				 ""ViewMap"": [ 216, [ ""_HVP_VIEW_MAP"", ""null"" ]],
				 ""Storage"": [ 272, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 GetCellRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ReleaseCellRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Allocate { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 Free { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 FileWrite { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 FileRead { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 HiveLoadFailure { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 BaseBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public _CMSI_RW_LOCK FlusherLock
		{
			get
			{
				_CMSI_RW_LOCK returnValue = new _CMSI_RW_LOCK(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _CMSI_RW_LOCK WriterLock
		{
			get
			{
				_CMSI_RW_LOCK returnValue = new _CMSI_RW_LOCK(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public _RTL_BITMAP DirtyVector
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public UInt32 DirtyCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 DirtyAlloc { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public _RTL_BITMAP UnreconciledVector
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt32 UnreconciledCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 BaseBlockAlloc { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt32 Cluster { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public Byte Flat
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 140];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte ReadOnly
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 140];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte Reserved
		{
			get
			{
				// start: 2  end: 8  Mask: 0000000011111100
				Byte value = _StructureData[_BufferOffset + 140];
				var value2 = (value & 252) >> 2;
				return (Byte)value2;
			}
		}
		public Byte DirtyFlag{ get { return _StructureData[_BufferOffset +141]; } }
		public UInt32 HvBinHeadersUse { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt32 HvFreeCellsUse { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 148); } }
		public UInt32 HvUsedCellsUse { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public UInt32 CmUsedCellsUse { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 156); } }
		public UInt32 HiveFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 160); } }
		public UInt32 CurrentLog { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
		public UInt32 CurrentLogSequence { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public UInt32 CurrentLogMinimumSequence { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 172); } }
		public UInt32 CurrentLogOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 176); } }
		public UInt32 MinimumLogSequence { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 180); } }
		public UInt32 LogFileSizeCap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 184); } }
		public Byte[] LogDataPresent
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 188];
				return returnValue;
			}
		}
		public Byte PrimaryFileValid{ get { return _StructureData[_BufferOffset +190]; } }
		public Byte BaseBlockDirty{ get { return _StructureData[_BufferOffset +191]; } }
		public _LARGE_INTEGER LastLogSwapTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public UInt16 FirstLogFile
		{
			get
			{
				// start: 0  end: 3  Mask: 0000000000000111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 200);
				var value2 = (value & 7) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 SecondLogFile
		{
			get
			{
				// start: 3  end: 6  Mask: 0000000000111000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 200);
				var value2 = (value & 56) >> 3;
				return (UInt16)value2;
			}
		}
		public UInt16 HeaderRecovered
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 200);
				var value2 = (value & 64) >> 6;
				return (UInt16)value2;
			}
		}
		public UInt16 LegacyRecoveryIndicated
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 200);
				var value2 = (value & 128) >> 7;
				return (UInt16)value2;
			}
		}
		public UInt16 RecoveryInformationReserved
		{
			get
			{
				// start: 8  end: 16  Mask: 1111111100000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 200);
				var value2 = (value & 65280) >> 8;
				return (UInt16)value2;
			}
		}
		public UInt16 RecoveryInformation { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 200); } }
		public Byte[] LogEntriesRecovered
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 202];
				return returnValue;
			}
		}
		public UInt32 RefreshCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 204); } }
		public UInt32 StorageTypeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 208); } }
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 212); } }
		public _HVP_VIEW_MAP ViewMap
		{
			get
			{
				_HVP_VIEW_MAP returnValue = new _HVP_VIEW_MAP(_StructureData, _BufferOffset + 216);
				return returnValue;
			}
		}
		public _DUAL[] Storage
		{
			get
			{
				_DUAL[] returnValue = new _DUAL[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _DUAL(_StructureData, (i * size) + _BufferOffset + 272);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HV_GET_CELL_CONTEXT
 
	public class _HV_GET_CELL_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HV_GET_CELL_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HV_GET_CELL_CONTEXT"": [ 8, {
				 ""Cell"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""BinContext"": [ 4, [ ""_HV_GET_BIN_CONTEXT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Cell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _HV_GET_BIN_CONTEXT BinContext
		{
			get
			{
				_HV_GET_BIN_CONTEXT returnValue = new _HV_GET_BIN_CONTEXT(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_KEY_CONTROL_BLOCK
 
	public class _CM_KEY_CONTROL_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_CONTROL_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 312; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_CONTROL_BLOCK"": [ 312, {
				 ""RefCount"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""ExtFlags"": [ 8, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Freed"": [ 8, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""Discarded"": [ 8, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""HiveUnloaded"": [ 8, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""Decommissioned"": [ 8, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""SpareExtFlag"": [ 8, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""TotalLevels"": [ 8, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""KeyHash"": [ 16, [ ""_CM_KEY_HASH"", ""null"" ]],
				 ""ConvKey"": [ 16, [ ""_CM_PATH_HASH"", ""null"" ]],
				 ""NextHash"": [ 24, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_HASH\""}"" ]],
				 ""KeyHive"": [ 32, [ ""Pointer"", ""{\""target\"":\""_HHIVE\""}"" ]],
				 ""KeyCell"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""KcbPushlock"": [ 48, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""Owner"": [ 56, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""SharedCount"": [ 56, [ ""Int32"", ""null"" ]],
				 ""DelayedDeref"": [ 64, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""DelayedClose"": [ 64, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""Parking"": [ 64, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""LayerSemantics"": [ 65, [ ""Byte"", ""null"" ]],
				 ""LayerHeight"": [ 66, [ ""Int16"", ""null"" ]],
				 ""Spare1"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""ParentKcb"": [ 72, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""NameBlock"": [ 80, [ ""Pointer"", ""{\""target\"":\""_CM_NAME_CONTROL_BLOCK\""}"" ]],
				 ""CachedSecurity"": [ 88, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_SECURITY_CACHE\""}"" ]],
				 ""ValueList"": [ 96, [ ""_CHILD_LIST"", ""null"" ]],
				 ""LinkTarget"": [ 104, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""IndexHint"": [ 112, [ ""Pointer"", ""{\""target\"":\""_CM_INDEX_HINT_BLOCK\""}"" ]],
				 ""HashKey"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""SubKeyCount"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""KeyBodyListHead"": [ 120, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ClonedListEntry"": [ 120, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""KeyBodyArray"": [ 136, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_CM_KEY_BODY\""}}"" ]],
				 ""KcbLastWriteTime"": [ 168, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""KcbMaxNameLen"": [ 176, [ ""UInt16"", ""null"" ]],
				 ""KcbMaxValueNameLen"": [ 178, [ ""UInt16"", ""null"" ]],
				 ""KcbMaxValueDataLen"": [ 180, [ ""UInt32"", ""null"" ]],
				 ""KcbUserFlags"": [ 184, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""KcbVirtControlFlags"": [ 184, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""KcbDebug"": [ 184, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 184, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""Spare3"": [ 188, [ ""UInt32"", ""null"" ]],
				 ""LayerInfo"": [ 192, [ ""Pointer"", ""{\""target\"":\""_CM_KCB_LAYER_INFO\""}"" ]],
				 ""RealKeyName"": [ 200, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""KCBUoWListHead"": [ 208, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DelayQueueEntry"": [ 224, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Stolen"": [ 224, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""TransKCBOwner"": [ 240, [ ""Pointer"", ""{\""target\"":\""_CM_TRANS\""}"" ]],
				 ""KCBLock"": [ 248, [ ""_CM_INTENT_LOCK"", ""null"" ]],
				 ""KeyLock"": [ 264, [ ""_CM_INTENT_LOCK"", ""null"" ]],
				 ""TransValueCache"": [ 280, [ ""_CHILD_LIST"", ""null"" ]],
				 ""TransValueListOwner"": [ 288, [ ""Pointer"", ""{\""target\"":\""_CM_TRANS\""}"" ]],
				 ""FullKCBName"": [ 296, [ ""Pointer"", ""{\""target\"":\""_UNICODE_STRING\""}"" ]],
				 ""FullKCBNameStale"": [ 296, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Reserved"": [ 296, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""SequenceNumber"": [ 304, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 RefCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 ExtFlags
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 65535) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Freed
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 Discarded
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 HiveUnloaded
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 262144) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 Decommissioned
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 SpareExtFlag
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 TotalLevels
		{
			get
			{
				// start: 21  end: 31  Mask: 1111111111000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 2145386496) >> 21;
				return (UInt32)value2;
			}
		}
		public _CM_KEY_HASH KeyHash
		{
			get
			{
				_CM_KEY_HASH returnValue = new _CM_KEY_HASH(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _CM_PATH_HASH ConvKey
		{
			get
			{
				_CM_PATH_HASH returnValue = new _CM_PATH_HASH(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 NextHash { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 KeyHive { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt32 KeyCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public _EX_PUSH_LOCK KcbPushlock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt64 Owner { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public Int32 SharedCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 56); } }
		public Byte DelayedDeref
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 64];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte DelayedClose
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 64];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte Parking
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 64];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte LayerSemantics{ get { return _StructureData[_BufferOffset +65]; } }
		public Int16 LayerHeight { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 66); } }
		public UInt32 Spare1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt64 ParentKcb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 NameBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 CachedSecurity { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public _CHILD_LIST ValueList
		{
			get
			{
				_CHILD_LIST returnValue = new _CHILD_LIST(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt64 LinkTarget { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 IndexHint { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt32 HashKey { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public UInt32 SubKeyCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public _LIST_ENTRY KeyBodyListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
		public _LIST_ENTRY ClonedListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
		public _CM_KEY_BODY[] KeyBodyArray
		{
			get
			{
				_CM_KEY_BODY[] returnValue = new _CM_KEY_BODY[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new _CM_KEY_BODY(_StructureData, (i * size) + _BufferOffset + 136);
				return returnValue;
			}
		}
		public _LARGE_INTEGER KcbLastWriteTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 168);
				return returnValue;
			}
		}
		public UInt16 KcbMaxNameLen { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 176); } }
		public UInt16 KcbMaxValueNameLen { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 178); } }
		public UInt32 KcbMaxValueDataLen { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 180); } }
		public UInt32 KcbUserFlags
		{
			get
			{
				// start: 0  end: 4  Mask: 0000000000001111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 184);
				var value2 = (value & 15) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 KcbVirtControlFlags
		{
			get
			{
				// start: 4  end: 8  Mask: 0000000011110000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 184);
				var value2 = (value & 240) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 KcbDebug
		{
			get
			{
				// start: 8  end: 16  Mask: 1111111100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 184);
				var value2 = (value & 65280) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 Flags
		{
			get
			{
				// start: 16  end: 32  Mask: 11111111111111110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 184);
				var value2 = (value & 4294901760) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 Spare3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public UInt64 LayerInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt64 RealKeyName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public _LIST_ENTRY KCBUoWListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 208);
				return returnValue;
			}
		}
		public _LIST_ENTRY DelayQueueEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 224);
				return returnValue;
			}
		}
		public UInt64 Stolen { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 TransKCBOwner { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public _CM_INTENT_LOCK KCBLock
		{
			get
			{
				_CM_INTENT_LOCK returnValue = new _CM_INTENT_LOCK(_StructureData, _BufferOffset + 248);
				return returnValue;
			}
		}
		public _CM_INTENT_LOCK KeyLock
		{
			get
			{
				_CM_INTENT_LOCK returnValue = new _CM_INTENT_LOCK(_StructureData, _BufferOffset + 264);
				return returnValue;
			}
		}
		public _CHILD_LIST TransValueCache
		{
			get
			{
				_CHILD_LIST returnValue = new _CHILD_LIST(_StructureData, _BufferOffset + 280);
				return returnValue;
			}
		}
		public UInt64 TransValueListOwner { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 288); } }
		public UInt64 FullKCBName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 296); } }
		public UInt64 FullKCBNameStale
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 296);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Reserved
		{
			get
			{
				// start: 1  end: 64  Mask: 1111111111111111111111111111111111111111111111111111111111111110
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 296);
				var value2 = (value & 18446744073709551614) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 SequenceNumber { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 304); } }
	}
	#endregion
	#region tagSWITCH_CONTEXT
 
	public class tagSWITCH_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public tagSWITCH_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 856; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""tagSWITCH_CONTEXT"": [ 856, {
				 ""Attribute"": [ 0, [ ""tagSWITCH_CONTEXT_ATTRIBUTE"", ""null"" ]],
				 ""Data"": [ 24, [ ""tagSWITCH_CONTEXT_DATA"", ""null"" ]] }]
				 }
				)";
			}
		}
		public tagSWITCH_CONTEXT_ATTRIBUTE Attribute
		{
			get
			{
				tagSWITCH_CONTEXT_ATTRIBUTE returnValue = new tagSWITCH_CONTEXT_ATTRIBUTE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public tagSWITCH_CONTEXT_DATA Data
		{
			get
			{
				tagSWITCH_CONTEXT_DATA returnValue = new tagSWITCH_CONTEXT_DATA(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_KEY_BODY
 
	public class _CM_KEY_BODY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_BODY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 104; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_BODY"": [ 104, {
				 ""Type"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""KeyControlBlock"": [ 8, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""NotifyBlock"": [ 16, [ ""Pointer"", ""{\""target\"":\""_CM_NOTIFY_BLOCK\""}"" ]],
				 ""ProcessID"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KeyBodyList"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Flags"": [ 48, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""HandleTags"": [ 48, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""Trans"": [ 56, [ ""_CM_TRANS_PTR"", ""null"" ]],
				 ""KtmUow"": [ 64, [ ""Pointer"", ""{\""target\"":\""_GUID\""}"" ]],
				 ""ContextListHead"": [ 72, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""EnumerationResumeContext"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RestrictedAccessMask"": [ 96, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Type { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 KeyControlBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 NotifyBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 ProcessID { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _LIST_ENTRY KeyBodyList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt32 Flags
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 65535) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 HandleTags
		{
			get
			{
				// start: 16  end: 32  Mask: 11111111111111110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 4294901760) >> 16;
				return (UInt32)value2;
			}
		}
		public _CM_TRANS_PTR Trans
		{
			get
			{
				_CM_TRANS_PTR returnValue = new _CM_TRANS_PTR(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt64 KtmUow { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public _LIST_ENTRY ContextListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public UInt64 EnumerationResumeContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt32 RestrictedAccessMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
	}
	#endregion
	#region _CM_KEY_NODE
 
	public class _CM_KEY_NODE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_NODE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_NODE"": [ 80, {
				 ""Signature"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""LastWriteTime"": [ 4, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""AccessBits"": [ 12, [ ""Byte"", ""null"" ]],
				 ""LayerSemantics"": [ 13, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Spare1"": [ 13, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""InheritClass"": [ 13, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""Byte\""}"" ]],
				 ""Spare2"": [ 14, [ ""UInt16"", ""null"" ]],
				 ""Parent"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""SubKeyCounts"": [ 20, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""SubKeyLists"": [ 28, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ValueList"": [ 36, [ ""_CHILD_LIST"", ""null"" ]],
				 ""ChildHiveReference"": [ 28, [ ""_CM_KEY_REFERENCE"", ""null"" ]],
				 ""Security"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""Class"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""MaxNameLen"": [ 52, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""UserFlags"": [ 52, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""VirtControlFlags"": [ 52, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""Debug"": [ 52, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""MaxClassLen"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""MaxValueNameLen"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""MaxValueDataLen"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""WorkVar"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""NameLength"": [ 72, [ ""UInt16"", ""null"" ]],
				 ""ClassLength"": [ 74, [ ""UInt16"", ""null"" ]],
				 ""Name"": [ 76, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Signature { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public _LARGE_INTEGER LastWriteTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public Byte AccessBits{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte LayerSemantics
		{
			get
			{
				// start: 0  end: 2  Mask: 0000000000000011
				Byte value = _StructureData[_BufferOffset + 13];
				var value2 = (value & 3) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Spare1
		{
			get
			{
				// start: 2  end: 7  Mask: 0000000001111100
				Byte value = _StructureData[_BufferOffset + 13];
				var value2 = (value & 124) >> 2;
				return (Byte)value2;
			}
		}
		public Byte InheritClass
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				Byte value = _StructureData[_BufferOffset + 13];
				var value2 = (value & 128) >> 7;
				return (Byte)value2;
			}
		}
		public UInt16 Spare2 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 14); } }
		public UInt32 Parent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32[] SubKeyCounts
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 20);
				return returnValue;
			}
		}
		public UInt32[] SubKeyLists
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 28);
				return returnValue;
			}
		}
		public _CHILD_LIST ValueList
		{
			get
			{
				_CHILD_LIST returnValue = new _CHILD_LIST(_StructureData, _BufferOffset + 36);
				return returnValue;
			}
		}
		public _CM_KEY_REFERENCE ChildHiveReference
		{
			get
			{
				_CM_KEY_REFERENCE returnValue = new _CM_KEY_REFERENCE(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public UInt32 Security { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 Class { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 MaxNameLen
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 52);
				var value2 = (value & 65535) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 UserFlags
		{
			get
			{
				// start: 16  end: 20  Mask: 11110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 52);
				var value2 = (value & 983040) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 VirtControlFlags
		{
			get
			{
				// start: 20  end: 24  Mask: 111100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 52);
				var value2 = (value & 15728640) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 Debug
		{
			get
			{
				// start: 24  end: 32  Mask: 11111111000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 52);
				var value2 = (value & 4278190080) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 MaxClassLen { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 MaxValueNameLen { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 MaxValueDataLen { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 WorkVar { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt16 NameLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 72); } }
		public UInt16 ClassLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 74); } }
		public UInt16[] Name
		{
			get
			{
				UInt16[] returnValue = new UInt16[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 76);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_NAME_CONTROL_BLOCK
 
	public class _CM_NAME_CONTROL_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_NAME_CONTROL_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_NAME_CONTROL_BLOCK"": [ 32, {
				 ""Compressed"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""RefCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""NameHash"": [ 8, [ ""_CM_NAME_HASH"", ""null"" ]],
				 ""ConvKey"": [ 8, [ ""_CM_COMPONENT_HASH"", ""null"" ]],
				 ""NextHash"": [ 16, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_HASH\""}"" ]],
				 ""NameLength"": [ 24, [ ""UInt16"", ""null"" ]],
				 ""Name"": [ 26, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Compressed
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 RefCount
		{
			get
			{
				// start: 1  end: 32  Mask: 11111111111111111111111111111110
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967294) >> 1;
				return (UInt32)value2;
			}
		}
		public _CM_NAME_HASH NameHash
		{
			get
			{
				_CM_NAME_HASH returnValue = new _CM_NAME_HASH(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _CM_COMPONENT_HASH ConvKey
		{
			get
			{
				_CM_COMPONENT_HASH returnValue = new _CM_COMPONENT_HASH(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 NextHash { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt16 NameLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 24); } }
		public UInt16[] Name
		{
			get
			{
				UInt16[] returnValue = new UInt16[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 26);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_KEY_VALUE
 
	public class _CM_KEY_VALUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_VALUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_VALUE"": [ 24, {
				 ""Signature"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""NameLength"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""DataLength"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Data"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Type"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 16, [ ""UInt16"", ""null"" ]],
				 ""Spare"": [ 18, [ ""UInt16"", ""null"" ]],
				 ""Name"": [ 20, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Signature { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 NameLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 DataLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Data { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Type { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 16); } }
		public UInt16 Spare { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 18); } }
		public UInt16[] Name
		{
			get
			{
				UInt16[] returnValue = new UInt16[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 20);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CMHIVE
 
	public class _CMHIVE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CMHIVE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4840; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CMHIVE"": [ 4840, {
				 ""Hive"": [ 0, [ ""_HHIVE"", ""null"" ]],
				 ""FileHandles"": [ 1536, [ ""Array"", ""{\""count\"":6,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""NotifyList"": [ 1584, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""HiveList"": [ 1600, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PreloadedHiveList"": [ 1616, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""HiveRundown"": [ 1632, [ ""_EX_RUNDOWN_REF"", ""null"" ]],
				 ""KcbCacheTable"": [ 1640, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_HASH_TABLE_ENTRY\""}"" ]],
				 ""KcbCacheTableSize"": [ 1648, [ ""UInt32"", ""null"" ]],
				 ""DeletedKcbTable"": [ 1656, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_HASH_TABLE_ENTRY\""}"" ]],
				 ""DeletedKcbTableSize"": [ 1664, [ ""UInt32"", ""null"" ]],
				 ""Identity"": [ 1668, [ ""UInt32"", ""null"" ]],
				 ""HiveLock"": [ 1672, [ ""_CMSI_RW_LOCK"", ""null"" ]],
				 ""FlushDirtyVector"": [ 1680, [ ""_RTL_BITMAP"", ""null"" ]],
				 ""FlushDirtyVectorSize"": [ 1696, [ ""UInt32"", ""null"" ]],
				 ""FlushLogEntryOffsetArray"": [ 1704, [ ""Pointer"", ""{\""target\"":\""CMP_OFFSET_ARRAY\""}"" ]],
				 ""FlushLogEntryOffsetArrayCount"": [ 1712, [ ""UInt32"", ""null"" ]],
				 ""FlushLogEntrySize"": [ 1716, [ ""UInt32"", ""null"" ]],
				 ""FlushHiveTruncated"": [ 1720, [ ""UInt32"", ""null"" ]],
				 ""FlushBaseBlockDirty"": [ 1724, [ ""Byte"", ""null"" ]],
				 ""CapturedUnreconciledVector"": [ 1728, [ ""_RTL_BITMAP"", ""null"" ]],
				 ""CapturedUnreconciledVectorSize"": [ 1744, [ ""UInt32"", ""null"" ]],
				 ""UnreconciledOffsetArray"": [ 1752, [ ""Pointer"", ""{\""target\"":\""CMP_OFFSET_ARRAY\""}"" ]],
				 ""UnreconciledOffsetArrayCount"": [ 1760, [ ""UInt32"", ""null"" ]],
				 ""UnreconciledBaseBlock"": [ 1768, [ ""Pointer"", ""{\""target\"":\""_HBASE_BLOCK\""}"" ]],
				 ""SecurityLock"": [ 1776, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""LastShrinkHiveSize"": [ 1784, [ ""UInt32"", ""null"" ]],
				 ""ActualFileSize"": [ 1792, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""LogFileSizes"": [ 1800, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""FileFullPath"": [ 1816, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""FileUserName"": [ 1832, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""HiveRootPath"": [ 1848, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""SecurityCount"": [ 1864, [ ""UInt32"", ""null"" ]],
				 ""SecurityCacheSize"": [ 1868, [ ""UInt32"", ""null"" ]],
				 ""SecurityHitHint"": [ 1872, [ ""Int32"", ""null"" ]],
				 ""SecurityCache"": [ 1880, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_SECURITY_CACHE_ENTRY\""}"" ]],
				 ""SecurityHash"": [ 1888, [ ""Array"", ""{\""count\"":64,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""UnloadEventCount"": [ 2912, [ ""UInt32"", ""null"" ]],
				 ""UnloadEventArray"": [ 2920, [ ""Pointer"", ""{\""target\"":\""_KEVENT*\""}"" ]],
				 ""RootKcb"": [ 2928, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""Frozen"": [ 2936, [ ""Byte"", ""null"" ]],
				 ""UnloadWorkItem"": [ 2944, [ ""Pointer"", ""{\""target\"":\""_CM_WORKITEM\""}"" ]],
				 ""UnloadWorkItemHolder"": [ 2952, [ ""_CM_WORKITEM"", ""null"" ]],
				 ""DirtyVectorLog"": [ 2992, [ ""_CM_DIRTY_VECTOR_LOG"", ""null"" ]],
				 ""Flags"": [ 4152, [ ""UInt32"", ""null"" ]],
				 ""TrustClassEntry"": [ 4160, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DirtyTime"": [ 4176, [ ""UInt64"", ""null"" ]],
				 ""UnreconciledTime"": [ 4184, [ ""UInt64"", ""null"" ]],
				 ""CmRm"": [ 4192, [ ""Pointer"", ""{\""target\"":\""_CM_RM\""}"" ]],
				 ""CmRmInitFailPoint"": [ 4200, [ ""UInt32"", ""null"" ]],
				 ""CmRmInitFailStatus"": [ 4204, [ ""Int32"", ""null"" ]],
				 ""CreatorOwner"": [ 4208, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""RundownThread"": [ 4216, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""LastWriteTime"": [ 4224, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""FlushQueue"": [ 4232, [ ""_HIVE_WRITE_WAIT_QUEUE"", ""null"" ]],
				 ""ReconcileQueue"": [ 4248, [ ""_HIVE_WRITE_WAIT_QUEUE"", ""null"" ]],
				 ""FlushFlags"": [ 4264, [ ""UInt32"", ""null"" ]],
				 ""PrimaryFilePurged"": [ 4264, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""DiskFileBad"": [ 4264, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""PrimaryFileSizeBeforeLastFlush"": [ 4268, [ ""UInt32"", ""null"" ]],
				 ""ReferenceCount"": [ 4272, [ ""Int32"", ""null"" ]],
				 ""UnloadHistoryIndex"": [ 4276, [ ""Int32"", ""null"" ]],
				 ""UnloadHistory"": [ 4280, [ ""Array"", ""{\""count\"":128,\""target\"":\""UInt32\""}"" ]],
				 ""BootStart"": [ 4792, [ ""UInt32"", ""null"" ]],
				 ""UnaccessedStart"": [ 4796, [ ""UInt32"", ""null"" ]],
				 ""UnaccessedEnd"": [ 4800, [ ""UInt32"", ""null"" ]],
				 ""LoadedKeyCount"": [ 4804, [ ""UInt32"", ""null"" ]],
				 ""HandleClosePending"": [ 4808, [ ""UInt32"", ""null"" ]],
				 ""HandleClosePendingEvent"": [ 4816, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""FinalFlushSucceeded"": [ 4824, [ ""Byte"", ""null"" ]],
				 ""VolumeContext"": [ 4832, [ ""Pointer"", ""{\""target\"":\""_CMP_VOLUME_CONTEXT\""}"" ]] }]
				 }
				)";
			}
		}
		public _HHIVE Hive
		{
			get
			{
				_HHIVE returnValue = new _HHIVE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64[] FileHandles
		{
			get
			{
				UInt64[] returnValue = new UInt64[6];
				int size = 8;
				for(int i=0; i<6; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 1536);
				return returnValue;
			}
		}
		public _LIST_ENTRY NotifyList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1584);
				return returnValue;
			}
		}
		public _LIST_ENTRY HiveList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1600);
				return returnValue;
			}
		}
		public _LIST_ENTRY PreloadedHiveList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1616);
				return returnValue;
			}
		}
		public _EX_RUNDOWN_REF HiveRundown
		{
			get
			{
				_EX_RUNDOWN_REF returnValue = new _EX_RUNDOWN_REF(_StructureData, _BufferOffset + 1632);
				return returnValue;
			}
		}
		public UInt64 KcbCacheTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1640); } }
		public UInt32 KcbCacheTableSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1648); } }
		public UInt64 DeletedKcbTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1656); } }
		public UInt32 DeletedKcbTableSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1664); } }
		public UInt32 Identity { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1668); } }
		public _CMSI_RW_LOCK HiveLock
		{
			get
			{
				_CMSI_RW_LOCK returnValue = new _CMSI_RW_LOCK(_StructureData, _BufferOffset + 1672);
				return returnValue;
			}
		}
		public _RTL_BITMAP FlushDirtyVector
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 1680);
				return returnValue;
			}
		}
		public UInt32 FlushDirtyVectorSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1696); } }
		public UInt64 FlushLogEntryOffsetArray { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1704); } }
		public UInt32 FlushLogEntryOffsetArrayCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1712); } }
		public UInt32 FlushLogEntrySize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1716); } }
		public UInt32 FlushHiveTruncated { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1720); } }
		public Byte FlushBaseBlockDirty{ get { return _StructureData[_BufferOffset +1724]; } }
		public _RTL_BITMAP CapturedUnreconciledVector
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 1728);
				return returnValue;
			}
		}
		public UInt32 CapturedUnreconciledVectorSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1744); } }
		public UInt64 UnreconciledOffsetArray { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1752); } }
		public UInt32 UnreconciledOffsetArrayCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1760); } }
		public UInt64 UnreconciledBaseBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1768); } }
		public _EX_PUSH_LOCK SecurityLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 1776);
				return returnValue;
			}
		}
		public UInt32 LastShrinkHiveSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1784); } }
		public _LARGE_INTEGER ActualFileSize
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 1792);
				return returnValue;
			}
		}
		public _LARGE_INTEGER[] LogFileSizes
		{
			get
			{
				_LARGE_INTEGER[] returnValue = new _LARGE_INTEGER[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _LARGE_INTEGER(_StructureData, (i * size) + _BufferOffset + 1800);
				return returnValue;
			}
		}
		public _UNICODE_STRING FileFullPath
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 1816);
				return returnValue;
			}
		}
		public _UNICODE_STRING FileUserName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 1832);
				return returnValue;
			}
		}
		public _UNICODE_STRING HiveRootPath
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 1848);
				return returnValue;
			}
		}
		public UInt32 SecurityCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1864); } }
		public UInt32 SecurityCacheSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1868); } }
		public Int32 SecurityHitHint { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 1872); } }
		public UInt64 SecurityCache { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1880); } }
		public _LIST_ENTRY[] SecurityHash
		{
			get
			{
				_LIST_ENTRY[] returnValue = new _LIST_ENTRY[64];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<64; i++ )
					returnValue[i] = new _LIST_ENTRY(_StructureData, (i * size) + _BufferOffset + 1888);
				return returnValue;
			}
		}
		public UInt32 UnloadEventCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2912); } }
		public UInt64 UnloadEventArray { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2920); } }
		public UInt64 RootKcb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2928); } }
		public Byte Frozen{ get { return _StructureData[_BufferOffset +2936]; } }
		public UInt64 UnloadWorkItem { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2944); } }
		public _CM_WORKITEM UnloadWorkItemHolder
		{
			get
			{
				_CM_WORKITEM returnValue = new _CM_WORKITEM(_StructureData, _BufferOffset + 2952);
				return returnValue;
			}
		}
		public _CM_DIRTY_VECTOR_LOG DirtyVectorLog
		{
			get
			{
				_CM_DIRTY_VECTOR_LOG returnValue = new _CM_DIRTY_VECTOR_LOG(_StructureData, _BufferOffset + 2992);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4152); } }
		public _LIST_ENTRY TrustClassEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 4160);
				return returnValue;
			}
		}
		public UInt64 DirtyTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4176); } }
		public UInt64 UnreconciledTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4184); } }
		public UInt64 CmRm { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4192); } }
		public UInt32 CmRmInitFailPoint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4200); } }
		public Int32 CmRmInitFailStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4204); } }
		public UInt64 CreatorOwner { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4208); } }
		public UInt64 RundownThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4216); } }
		public _LARGE_INTEGER LastWriteTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 4224);
				return returnValue;
			}
		}
		public _HIVE_WRITE_WAIT_QUEUE FlushQueue
		{
			get
			{
				_HIVE_WRITE_WAIT_QUEUE returnValue = new _HIVE_WRITE_WAIT_QUEUE(_StructureData, _BufferOffset + 4232);
				return returnValue;
			}
		}
		public _HIVE_WRITE_WAIT_QUEUE ReconcileQueue
		{
			get
			{
				_HIVE_WRITE_WAIT_QUEUE returnValue = new _HIVE_WRITE_WAIT_QUEUE(_StructureData, _BufferOffset + 4248);
				return returnValue;
			}
		}
		public UInt32 FlushFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4264); } }
		public UInt32 PrimaryFilePurged
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4264);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 DiskFileBad
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4264);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 PrimaryFileSizeBeforeLastFlush { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4268); } }
		public Int32 ReferenceCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4272); } }
		public Int32 UnloadHistoryIndex { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4276); } }
		public UInt32[] UnloadHistory
		{
			get
			{
				UInt32[] returnValue = new UInt32[128];
				for(int i=0; i<128; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 4280);
				return returnValue;
			}
		}
		public UInt32 BootStart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4792); } }
		public UInt32 UnaccessedStart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4796); } }
		public UInt32 UnaccessedEnd { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4800); } }
		public UInt32 LoadedKeyCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4804); } }
		public UInt32 HandleClosePending { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4808); } }
		public _EX_PUSH_LOCK HandleClosePendingEvent
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 4816);
				return returnValue;
			}
		}
		public Byte FinalFlushSucceeded{ get { return _StructureData[_BufferOffset +4824]; } }
		public UInt64 VolumeContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4832); } }
	}
	#endregion
	#region _HIVE_LOAD_FAILURE
 
	public class _HIVE_LOAD_FAILURE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HIVE_LOAD_FAILURE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 432; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HIVE_LOAD_FAILURE"": [ 432, {
				 ""Hive"": [ 0, [ ""Pointer"", ""{\""target\"":\""_HHIVE\""}"" ]],
				 ""Index"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""RecoverableIndex"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""Locations"": [ 12, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""RecoverableLocations"": [ 108, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""RegistryIO"": [ 208, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""CheckRegistry2"": [ 232, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""CheckKey"": [ 240, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""CheckValueList"": [ 272, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""CheckHive"": [ 296, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""CheckHive1"": [ 312, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""CheckBin"": [ 328, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""RecoverData"": [ 344, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""LinkDebug"": [ 352, [ ""_CM_PARSE_DEBUG_INFO"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Hive { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt16 Index { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 RecoverableIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public _ANONYMOUS_TAG[] Locations
		{
			get
			{
				_ANONYMOUS_TAG[] returnValue = new _ANONYMOUS_TAG[8];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<8; i++ )
					returnValue[i] = new _ANONYMOUS_TAG(_StructureData, (i * size) + _BufferOffset + 12);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG[] RecoverableLocations
		{
			get
			{
				_ANONYMOUS_TAG[] returnValue = new _ANONYMOUS_TAG[8];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<8; i++ )
					returnValue[i] = new _ANONYMOUS_TAG(_StructureData, (i * size) + _BufferOffset + 108);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG RegistryIO
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 208);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG CheckRegistry2
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 232);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG CheckKey
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 240);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG CheckValueList
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 272);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG CheckHive
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 296);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG CheckHive1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 312);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG CheckBin
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 328);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG RecoverData
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 344);
				return returnValue;
			}
		}
		public _CM_PARSE_DEBUG_INFO LinkDebug
		{
			get
			{
				_CM_PARSE_DEBUG_INFO returnValue = new _CM_PARSE_DEBUG_INFO(_StructureData, _BufferOffset + 352);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_KCB_UOW
 
	public class _CM_KCB_UOW
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KCB_UOW(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 120; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KCB_UOW"": [ 120, {
				 ""TransactionListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""KCBLock"": [ 16, [ ""Pointer"", ""{\""target\"":\""_CM_INTENT_LOCK\""}"" ]],
				 ""KeyLock"": [ 24, [ ""Pointer"", ""{\""target\"":\""_CM_INTENT_LOCK\""}"" ]],
				 ""KCBListEntry"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""KeyControlBlock"": [ 48, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""Transaction"": [ 56, [ ""Pointer"", ""{\""target\"":\""_CM_TRANS\""}"" ]],
				 ""UoWState"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""ActionType"": [ 68, [ ""Enumeration"", ""{\""enum_name\"":\""UoWActionType\"",\""target\"":\""UInt32\""}"" ]],
				 ""StorageType"": [ 72, [ ""Enumeration"", ""{\""enum_name\"":\""HSTORAGE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ParentUoW"": [ 80, [ ""Pointer"", ""{\""target\"":\""_CM_KCB_UOW\""}"" ]],
				 ""ChildKCB"": [ 88, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""VolatileKeyCell"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""OldValueCell"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""NewValueCell"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""UserFlags"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""LastWriteTime"": [ 88, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""TxCachedSecurity"": [ 88, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_SECURITY_CACHE\""}"" ]],
				 ""TxSecurityCell"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""OldChildKCB"": [ 88, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""NewChildKCB"": [ 96, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""OtherChildKCB"": [ 88, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""ThisVolatileKeyCell"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""PrepareDataPointer"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SecurityData"": [ 104, [ ""Pointer"", ""{\""target\"":\""_CM_UOW_SET_SD_DATA\""}"" ]],
				 ""ModifyKeysData"": [ 104, [ ""Pointer"", ""{\""target\"":\""_CM_UOW_KEY_STATE_MODIFICATION\""}"" ]],
				 ""SetValueData"": [ 104, [ ""Pointer"", ""{\""target\"":\""_CM_UOW_SET_VALUE_LIST_DATA\""}"" ]],
				 ""ValueData"": [ 112, [ ""Pointer"", ""{\""target\"":\""_CM_UOW_SET_VALUE_KEY_DATA\""}"" ]],
				 ""DiscardReplaceContext"": [ 112, [ ""Pointer"", ""{\""target\"":\""_CMP_DISCARD_AND_REPLACE_KCB_CONTEXT\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY TransactionListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 KCBLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 KeyLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _LIST_ENTRY KCBListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 KeyControlBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Transaction { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt32 UoWState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UoWActionType ActionType { get { return (UoWActionType)BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public HSTORAGE_TYPE StorageType { get { return (HSTORAGE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt64 ParentUoW { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 ChildKCB { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt32 VolatileKeyCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 OldValueCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 NewValueCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 UserFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public _LARGE_INTEGER LastWriteTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public UInt64 TxCachedSecurity { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt32 TxSecurityCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt64 OldChildKCB { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 NewChildKCB { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 OtherChildKCB { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt32 ThisVolatileKeyCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt64 PrepareDataPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 SecurityData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 ModifyKeysData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 SetValueData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 ValueData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 DiscardReplaceContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
	}
	#endregion
	#region _CM_TRANS
 
	public class _CM_TRANS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_TRANS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 184; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_TRANS"": [ 184, {
				 ""TransactionListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""KCBUoWListHead"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LazyCommitListEntry"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Prepared"": [ 48, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Aborted"": [ 48, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""Committed"": [ 48, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""Initializing"": [ 48, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""Invalid"": [ 48, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""UseReservation"": [ 48, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""TmCallbacksActive"": [ 48, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""LightWeight"": [ 48, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""Freed1"": [ 48, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""Freed2"": [ 48, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""Spare1"": [ 48, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""Freed"": [ 48, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""Spare"": [ 48, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""TransState"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""Trans"": [ 56, [ ""_CM_TRANS_PTR"", ""null"" ]],
				 ""CmRm"": [ 64, [ ""Pointer"", ""{\""target\"":\""_CM_RM\""}"" ]],
				 ""KtmEnlistmentObject"": [ 72, [ ""Pointer"", ""{\""target\"":\""_KENLISTMENT\""}"" ]],
				 ""KtmEnlistmentHandle"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KtmUow"": [ 88, [ ""_GUID"", ""null"" ]],
				 ""StartLsn"": [ 104, [ ""UInt64"", ""null"" ]],
				 ""HiveCount"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""HiveArray"": [ 120, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_CMHIVE\""}}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY TransactionListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY KCBUoWListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LIST_ENTRY LazyCommitListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt32 Prepared
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Aborted
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 Committed
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 Initializing
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 Invalid
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 UseReservation
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 TmCallbacksActive
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 LightWeight
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 Freed1
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 Freed2
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 Spare1
		{
			get
			{
				// start: 10  end: 12  Mask: 0000110000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 3072) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 Freed
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 Spare
		{
			get
			{
				// start: 13  end: 32  Mask: 11111111111111111110000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 4294959104) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 TransState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public _CM_TRANS_PTR Trans
		{
			get
			{
				_CM_TRANS_PTR returnValue = new _CM_TRANS_PTR(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt64 CmRm { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 KtmEnlistmentObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 KtmEnlistmentHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public _GUID KtmUow
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public UInt64 StartLsn { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt32 HiveCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public _CMHIVE[] HiveArray
		{
			get
			{
				_CMHIVE[] returnValue = new _CMHIVE[8];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<8; i++ )
					returnValue[i] = new _CMHIVE(_StructureData, (i * size) + _BufferOffset + 120);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PCW_COUNTER_DESCRIPTOR
 
	public class _PCW_COUNTER_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCW_COUNTER_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCW_COUNTER_DESCRIPTOR"": [ 8, {
				 ""Id"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""StructIndex"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Offset"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Size"": [ 6, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Id { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 StructIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 Offset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
	}
	#endregion
	#region _PCW_REGISTRATION
 
	public class _PCW_REGISTRATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCW_REGISTRATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCW_REGISTRATION"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _PCW_REGISTRATION_INFORMATION
 
	public class _PCW_REGISTRATION_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCW_REGISTRATION_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCW_REGISTRATION_INFORMATION"": [ 48, {
				 ""Version"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Name"": [ 8, [ ""Pointer"", ""{\""target\"":\""_UNICODE_STRING\""}"" ]],
				 ""CounterCount"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Counters"": [ 24, [ ""Pointer"", ""{\""target\"":\""_PCW_COUNTER_DESCRIPTOR\""}"" ]],
				 ""Callback"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CallbackContext"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 Name { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 CounterCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 Counters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 Callback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 CallbackContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _PCW_PROCESSOR_INFO
 
	public class _PCW_PROCESSOR_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCW_PROCESSOR_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 200; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCW_PROCESSOR_INFO"": [ 200, {
				 ""IdleTime"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""AvailableTime"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""UserTime"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""KernelTime"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""Interrupts"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""DpcTime"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""InterruptTime"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""ClockInterrupts"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""DpcCount"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""DpcRate"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""C1Time"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""C2Time"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""C3Time"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""C1Transitions"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""C2Transitions"": [ 104, [ ""UInt64"", ""null"" ]],
				 ""C3Transitions"": [ 112, [ ""UInt64"", ""null"" ]],
				 ""StallTime"": [ 120, [ ""UInt64"", ""null"" ]],
				 ""ParkingStatus"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""CurrentFrequency"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""PercentMaxFrequency"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""StateFlags"": [ 140, [ ""UInt32"", ""null"" ]],
				 ""NominalThroughput"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""ActiveThroughput"": [ 148, [ ""UInt32"", ""null"" ]],
				 ""ScaledThroughput"": [ 152, [ ""UInt64"", ""null"" ]],
				 ""ScaledKernelThroughput"": [ 160, [ ""UInt64"", ""null"" ]],
				 ""AverageIdleTime"": [ 168, [ ""UInt64"", ""null"" ]],
				 ""IdleBreakEvents"": [ 176, [ ""UInt64"", ""null"" ]],
				 ""PerformanceLimit"": [ 184, [ ""UInt32"", ""null"" ]],
				 ""PerformanceLimitFlags"": [ 188, [ ""UInt32"", ""null"" ]],
				 ""ScaledFrequency"": [ 192, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 IdleTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 AvailableTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 UserTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 KernelTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 Interrupts { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 DpcTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 InterruptTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt32 ClockInterrupts { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 DpcCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 DpcRate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt64 C1Time { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 C2Time { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 C3Time { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 C1Transitions { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 C2Transitions { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 C3Transitions { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 StallTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt32 ParkingStatus { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 CurrentFrequency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt32 PercentMaxFrequency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public UInt32 StateFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 140); } }
		public UInt32 NominalThroughput { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt32 ActiveThroughput { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 148); } }
		public UInt64 ScaledThroughput { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 ScaledKernelThroughput { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 AverageIdleTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 IdleBreakEvents { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt32 PerformanceLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 184); } }
		public UInt32 PerformanceLimitFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public UInt64 ScaledFrequency { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
	}
	#endregion
	#region _PCW_INSTANCE
 
	public class _PCW_INSTANCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCW_INSTANCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCW_INSTANCE"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _PCW_DATA
 
	public class _PCW_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCW_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCW_DATA"": [ 16, {
				 ""Data"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Size"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Data { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _PCW_BUFFER
 
	public class _PCW_BUFFER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCW_BUFFER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCW_BUFFER"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _SYNCH_COUNTERS
 
	public class _SYNCH_COUNTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SYNCH_COUNTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 184; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SYNCH_COUNTERS"": [ 184, {
				 ""SpinLockAcquireCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SpinLockContentionCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""SpinLockSpinCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""IpiSendRequestBroadcastCount"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""IpiSendRequestRoutineCount"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""IpiSendSoftwareInterruptCount"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""ExInitializeResourceCount"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""ExReInitializeResourceCount"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""ExDeleteResourceCount"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""ExecutiveResourceAcquiresCount"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""ExecutiveResourceContentionsCount"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""ExecutiveResourceReleaseExclusiveCount"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""ExecutiveResourceReleaseSharedCount"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""ExecutiveResourceConvertsCount"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResExclusiveAttempts"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResExclusiveAcquiresExclusive"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResExclusiveAcquiresExclusiveRecursive"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResExclusiveWaits"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResExclusiveNotAcquires"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedAttempts"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedAcquiresExclusive"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedAcquiresShared"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedAcquiresSharedRecursive"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedWaits"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedNotAcquires"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedStarveExclusiveAttempts"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedStarveExclusiveAcquiresExclusive"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedStarveExclusiveAcquiresShared"": [ 108, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedStarveExclusiveAcquiresSharedRecursive"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedStarveExclusiveWaits"": [ 116, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedStarveExclusiveNotAcquires"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedWaitForExclusiveAttempts"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedWaitForExclusiveAcquiresExclusive"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedWaitForExclusiveAcquiresShared"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedWaitForExclusiveAcquiresSharedRecursive"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedWaitForExclusiveWaits"": [ 140, [ ""UInt32"", ""null"" ]],
				 ""ExAcqResSharedWaitForExclusiveNotAcquires"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""ExSetResOwnerPointerExclusive"": [ 148, [ ""UInt32"", ""null"" ]],
				 ""ExSetResOwnerPointerSharedNew"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""ExSetResOwnerPointerSharedOld"": [ 156, [ ""UInt32"", ""null"" ]],
				 ""ExTryToAcqExclusiveAttempts"": [ 160, [ ""UInt32"", ""null"" ]],
				 ""ExTryToAcqExclusiveAcquires"": [ 164, [ ""UInt32"", ""null"" ]],
				 ""ExBoostExclusiveOwner"": [ 168, [ ""UInt32"", ""null"" ]],
				 ""ExBoostSharedOwners"": [ 172, [ ""UInt32"", ""null"" ]],
				 ""ExEtwSynchTrackingNotificationsCount"": [ 176, [ ""UInt32"", ""null"" ]],
				 ""ExEtwSynchTrackingNotificationsAccountedCount"": [ 180, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SpinLockAcquireCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SpinLockContentionCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 SpinLockSpinCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 IpiSendRequestBroadcastCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 IpiSendRequestRoutineCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 IpiSendSoftwareInterruptCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 ExInitializeResourceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 ExReInitializeResourceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 ExDeleteResourceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 ExecutiveResourceAcquiresCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 ExecutiveResourceContentionsCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 ExecutiveResourceReleaseExclusiveCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 ExecutiveResourceReleaseSharedCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 ExecutiveResourceConvertsCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 ExAcqResExclusiveAttempts { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 ExAcqResExclusiveAcquiresExclusive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 ExAcqResExclusiveAcquiresExclusiveRecursive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 ExAcqResExclusiveWaits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 ExAcqResExclusiveNotAcquires { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 ExAcqResSharedAttempts { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 ExAcqResSharedAcquiresExclusive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 ExAcqResSharedAcquiresShared { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 ExAcqResSharedAcquiresSharedRecursive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 ExAcqResSharedWaits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 ExAcqResSharedNotAcquires { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 ExAcqResSharedStarveExclusiveAttempts { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt32 ExAcqResSharedStarveExclusiveAcquiresExclusive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 ExAcqResSharedStarveExclusiveAcquiresShared { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public UInt32 ExAcqResSharedStarveExclusiveAcquiresSharedRecursive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public UInt32 ExAcqResSharedStarveExclusiveWaits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 116); } }
		public UInt32 ExAcqResSharedStarveExclusiveNotAcquires { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 ExAcqResSharedWaitForExclusiveAttempts { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 ExAcqResSharedWaitForExclusiveAcquiresExclusive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 ExAcqResSharedWaitForExclusiveAcquiresShared { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt32 ExAcqResSharedWaitForExclusiveAcquiresSharedRecursive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public UInt32 ExAcqResSharedWaitForExclusiveWaits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 140); } }
		public UInt32 ExAcqResSharedWaitForExclusiveNotAcquires { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt32 ExSetResOwnerPointerExclusive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 148); } }
		public UInt32 ExSetResOwnerPointerSharedNew { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public UInt32 ExSetResOwnerPointerSharedOld { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 156); } }
		public UInt32 ExTryToAcqExclusiveAttempts { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 160); } }
		public UInt32 ExTryToAcqExclusiveAcquires { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
		public UInt32 ExBoostExclusiveOwner { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public UInt32 ExBoostSharedOwners { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 172); } }
		public UInt32 ExEtwSynchTrackingNotificationsCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 176); } }
		public UInt32 ExEtwSynchTrackingNotificationsAccountedCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 180); } }
	}
	#endregion
	#region _ETW_PERF_COUNTERS
 
	public class _ETW_PERF_COUNTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_PERF_COUNTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_PERF_COUNTERS"": [ 24, {
				 ""TotalActiveSessions"": [ 0, [ ""Int32"", ""null"" ]],
				 ""TotalBufferMemoryNonPagedPool"": [ 4, [ ""Int32"", ""null"" ]],
				 ""TotalBufferMemoryPagedPool"": [ 8, [ ""Int32"", ""null"" ]],
				 ""TotalGuidsEnabled"": [ 12, [ ""Int32"", ""null"" ]],
				 ""TotalGuidsNotEnabled"": [ 16, [ ""Int32"", ""null"" ]],
				 ""TotalGuidsPreEnabled"": [ 20, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 TotalActiveSessions { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 TotalBufferMemoryNonPagedPool { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public Int32 TotalBufferMemoryPagedPool { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public Int32 TotalGuidsEnabled { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 12); } }
		public Int32 TotalGuidsNotEnabled { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public Int32 TotalGuidsPreEnabled { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _ETW_SESSION_PERF_COUNTERS
 
	public class _ETW_SESSION_PERF_COUNTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_SESSION_PERF_COUNTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_SESSION_PERF_COUNTERS"": [ 24, {
				 ""BufferMemoryPagedPool"": [ 0, [ ""Int32"", ""null"" ]],
				 ""BufferMemoryNonPagedPool"": [ 4, [ ""Int32"", ""null"" ]],
				 ""EventsLoggedCount"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""EventsLost"": [ 16, [ ""Int32"", ""null"" ]],
				 ""NumConsumers"": [ 20, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 BufferMemoryPagedPool { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 BufferMemoryNonPagedPool { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 EventsLoggedCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public Int32 EventsLost { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public Int32 NumConsumers { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _FILESYSTEM_DISK_COUNTERS
 
	public class _FILESYSTEM_DISK_COUNTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FILESYSTEM_DISK_COUNTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FILESYSTEM_DISK_COUNTERS"": [ 16, {
				 ""FsBytesRead"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""FsBytesWritten"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 FsBytesRead { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 FsBytesWritten { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _THERMAL_ZONE_COUNTERS
 
	public class _THERMAL_ZONE_COUNTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _THERMAL_ZONE_COUNTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_THERMAL_ZONE_COUNTERS"": [ 16, {
				 ""Temperature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ThrottleLimit"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ThrottleReasons"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""TemperatureHighPrecision"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Temperature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ThrottleLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ThrottleReasons { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 TemperatureHighPrecision { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _TEB32
 
	public class _TEB32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TEB32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4096; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TEB32"": [ 4096, {
				 ""NtTib"": [ 0, [ ""_NT_TIB32"", ""null"" ]],
				 ""EnvironmentPointer"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""ClientId"": [ 32, [ ""_CLIENT_ID32"", ""null"" ]],
				 ""ActiveRpcHandle"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""ThreadLocalStoragePointer"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""ProcessEnvironmentBlock"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""LastErrorValue"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""CountOfOwnedCriticalSections"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""CsrClientThread"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""Win32ThreadInfo"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""User32Reserved"": [ 68, [ ""Array"", ""{\""count\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""UserReserved"": [ 172, [ ""Array"", ""{\""count\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""WOW32Reserved"": [ 192, [ ""UInt32"", ""null"" ]],
				 ""CurrentLocale"": [ 196, [ ""UInt32"", ""null"" ]],
				 ""FpSoftwareStatusRegister"": [ 200, [ ""UInt32"", ""null"" ]],
				 ""ReservedForDebuggerInstrumentation"": [ 204, [ ""Array"", ""{\""count\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""SystemReserved1"": [ 268, [ ""Array"", ""{\""count\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""PlaceholderCompatibilityMode"": [ 372, [ ""Char"", ""null"" ]],
				 ""PlaceholderHydrationAlwaysExplicit"": [ 373, [ ""Byte"", ""null"" ]],
				 ""PlaceholderReserved"": [ 374, [ ""Array"", ""{\""count\"":10,\""target\"":\""Char\""}"" ]],
				 ""ProxiedProcessId"": [ 384, [ ""UInt32"", ""null"" ]],
				 ""_ActivationStack"": [ 388, [ ""_ACTIVATION_CONTEXT_STACK32"", ""null"" ]],
				 ""WorkingOnBehalfTicket"": [ 412, [ ""Array"", ""{\""count\"":8,\""target\"":\""Byte\""}"" ]],
				 ""ExceptionCode"": [ 420, [ ""Int32"", ""null"" ]],
				 ""ActivationContextStackPointer"": [ 424, [ ""UInt32"", ""null"" ]],
				 ""InstrumentationCallbackSp"": [ 428, [ ""UInt32"", ""null"" ]],
				 ""InstrumentationCallbackPreviousPc"": [ 432, [ ""UInt32"", ""null"" ]],
				 ""InstrumentationCallbackPreviousSp"": [ 436, [ ""UInt32"", ""null"" ]],
				 ""InstrumentationCallbackDisabled"": [ 440, [ ""Byte"", ""null"" ]],
				 ""SpareBytes"": [ 441, [ ""Array"", ""{\""count\"":23,\""target\"":\""Byte\""}"" ]],
				 ""TxFsContext"": [ 464, [ ""UInt32"", ""null"" ]],
				 ""GdiTebBatch"": [ 468, [ ""_GDI_TEB_BATCH32"", ""null"" ]],
				 ""RealClientId"": [ 1716, [ ""_CLIENT_ID32"", ""null"" ]],
				 ""GdiCachedProcessHandle"": [ 1724, [ ""UInt32"", ""null"" ]],
				 ""GdiClientPID"": [ 1728, [ ""UInt32"", ""null"" ]],
				 ""GdiClientTID"": [ 1732, [ ""UInt32"", ""null"" ]],
				 ""GdiThreadLocalInfo"": [ 1736, [ ""UInt32"", ""null"" ]],
				 ""Win32ClientInfo"": [ 1740, [ ""Array"", ""{\""count\"":62,\""target\"":\""UInt32\""}"" ]],
				 ""glDispatchTable"": [ 1988, [ ""Array"", ""{\""count\"":233,\""target\"":\""UInt32\""}"" ]],
				 ""glReserved1"": [ 2920, [ ""Array"", ""{\""count\"":29,\""target\"":\""UInt32\""}"" ]],
				 ""glReserved2"": [ 3036, [ ""UInt32"", ""null"" ]],
				 ""glSectionInfo"": [ 3040, [ ""UInt32"", ""null"" ]],
				 ""glSection"": [ 3044, [ ""UInt32"", ""null"" ]],
				 ""glTable"": [ 3048, [ ""UInt32"", ""null"" ]],
				 ""glCurrentRC"": [ 3052, [ ""UInt32"", ""null"" ]],
				 ""glContext"": [ 3056, [ ""UInt32"", ""null"" ]],
				 ""LastStatusValue"": [ 3060, [ ""UInt32"", ""null"" ]],
				 ""StaticUnicodeString"": [ 3064, [ ""_STRING32"", ""null"" ]],
				 ""StaticUnicodeBuffer"": [ 3072, [ ""Array"", ""{\""count\"":261,\""target\"":\""UInt16\""}"" ]],
				 ""DeallocationStack"": [ 3596, [ ""UInt32"", ""null"" ]],
				 ""TlsSlots"": [ 3600, [ ""Array"", ""{\""count\"":64,\""target\"":\""UInt32\""}"" ]],
				 ""TlsLinks"": [ 3856, [ ""LIST_ENTRY32"", ""null"" ]],
				 ""Vdm"": [ 3864, [ ""UInt32"", ""null"" ]],
				 ""ReservedForNtRpc"": [ 3868, [ ""UInt32"", ""null"" ]],
				 ""DbgSsReserved"": [ 3872, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""HardErrorMode"": [ 3880, [ ""UInt32"", ""null"" ]],
				 ""Instrumentation"": [ 3884, [ ""Array"", ""{\""count\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""ActivityId"": [ 3920, [ ""_GUID"", ""null"" ]],
				 ""SubProcessTag"": [ 3936, [ ""UInt32"", ""null"" ]],
				 ""PerflibData"": [ 3940, [ ""UInt32"", ""null"" ]],
				 ""EtwTraceData"": [ 3944, [ ""UInt32"", ""null"" ]],
				 ""WinSockData"": [ 3948, [ ""UInt32"", ""null"" ]],
				 ""GdiBatchCount"": [ 3952, [ ""UInt32"", ""null"" ]],
				 ""CurrentIdealProcessor"": [ 3956, [ ""_PROCESSOR_NUMBER"", ""null"" ]],
				 ""IdealProcessorValue"": [ 3956, [ ""UInt32"", ""null"" ]],
				 ""ReservedPad0"": [ 3956, [ ""Byte"", ""null"" ]],
				 ""ReservedPad1"": [ 3957, [ ""Byte"", ""null"" ]],
				 ""ReservedPad2"": [ 3958, [ ""Byte"", ""null"" ]],
				 ""IdealProcessor"": [ 3959, [ ""Byte"", ""null"" ]],
				 ""GuaranteedStackBytes"": [ 3960, [ ""UInt32"", ""null"" ]],
				 ""ReservedForPerf"": [ 3964, [ ""UInt32"", ""null"" ]],
				 ""ReservedForOle"": [ 3968, [ ""UInt32"", ""null"" ]],
				 ""WaitingOnLoaderLock"": [ 3972, [ ""UInt32"", ""null"" ]],
				 ""SavedPriorityState"": [ 3976, [ ""UInt32"", ""null"" ]],
				 ""ReservedForCodeCoverage"": [ 3980, [ ""UInt32"", ""null"" ]],
				 ""ThreadPoolData"": [ 3984, [ ""UInt32"", ""null"" ]],
				 ""TlsExpansionSlots"": [ 3988, [ ""UInt32"", ""null"" ]],
				 ""MuiGeneration"": [ 3992, [ ""UInt32"", ""null"" ]],
				 ""IsImpersonating"": [ 3996, [ ""UInt32"", ""null"" ]],
				 ""NlsCache"": [ 4000, [ ""UInt32"", ""null"" ]],
				 ""pShimData"": [ 4004, [ ""UInt32"", ""null"" ]],
				 ""HeapData"": [ 4008, [ ""UInt32"", ""null"" ]],
				 ""CurrentTransactionHandle"": [ 4012, [ ""UInt32"", ""null"" ]],
				 ""ActiveFrame"": [ 4016, [ ""UInt32"", ""null"" ]],
				 ""FlsData"": [ 4020, [ ""UInt32"", ""null"" ]],
				 ""PreferredLanguages"": [ 4024, [ ""UInt32"", ""null"" ]],
				 ""UserPrefLanguages"": [ 4028, [ ""UInt32"", ""null"" ]],
				 ""MergedPrefLanguages"": [ 4032, [ ""UInt32"", ""null"" ]],
				 ""MuiImpersonation"": [ 4036, [ ""UInt32"", ""null"" ]],
				 ""CrossTebFlags"": [ 4040, [ ""UInt16"", ""null"" ]],
				 ""SpareCrossTebBits"": [ 4040, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""SameTebFlags"": [ 4042, [ ""UInt16"", ""null"" ]],
				 ""SafeThunkCall"": [ 4042, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""InDebugPrint"": [ 4042, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""HasFiberData"": [ 4042, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt16\""}"" ]],
				 ""SkipThreadAttach"": [ 4042, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt16\""}"" ]],
				 ""WerInShipAssertCode"": [ 4042, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt16\""}"" ]],
				 ""RanProcessInit"": [ 4042, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt16\""}"" ]],
				 ""ClonedThread"": [ 4042, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt16\""}"" ]],
				 ""SuppressDebugMsg"": [ 4042, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt16\""}"" ]],
				 ""DisableUserStackWalk"": [ 4042, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt16\""}"" ]],
				 ""RtlExceptionAttached"": [ 4042, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt16\""}"" ]],
				 ""InitialThread"": [ 4042, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt16\""}"" ]],
				 ""SessionAware"": [ 4042, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt16\""}"" ]],
				 ""LoadOwner"": [ 4042, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt16\""}"" ]],
				 ""LoaderWorker"": [ 4042, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt16\""}"" ]],
				 ""SkipLoaderInit"": [ 4042, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt16\""}"" ]],
				 ""SpareSameTebBits"": [ 4042, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt16\""}"" ]],
				 ""TxnScopeEnterCallback"": [ 4044, [ ""UInt32"", ""null"" ]],
				 ""TxnScopeExitCallback"": [ 4048, [ ""UInt32"", ""null"" ]],
				 ""TxnScopeContext"": [ 4052, [ ""UInt32"", ""null"" ]],
				 ""LockCount"": [ 4056, [ ""UInt32"", ""null"" ]],
				 ""WowTebOffset"": [ 4060, [ ""Int32"", ""null"" ]],
				 ""ResourceRetValue"": [ 4064, [ ""UInt32"", ""null"" ]],
				 ""ReservedForWdf"": [ 4068, [ ""UInt32"", ""null"" ]],
				 ""ReservedForCrt"": [ 4072, [ ""UInt64"", ""null"" ]],
				 ""EffectiveContainerId"": [ 4080, [ ""_GUID"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _NT_TIB32 NtTib
		{
			get
			{
				_NT_TIB32 returnValue = new _NT_TIB32(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 EnvironmentPointer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public _CLIENT_ID32 ClientId
		{
			get
			{
				_CLIENT_ID32 returnValue = new _CLIENT_ID32(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt32 ActiveRpcHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 ThreadLocalStoragePointer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 ProcessEnvironmentBlock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 LastErrorValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 CountOfOwnedCriticalSections { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 CsrClientThread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 Win32ThreadInfo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32[] User32Reserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[26];
				for(int i=0; i<26; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 68);
				return returnValue;
			}
		}
		public UInt32[] UserReserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[5];
				for(int i=0; i<5; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 172);
				return returnValue;
			}
		}
		public UInt32 WOW32Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public UInt32 CurrentLocale { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 196); } }
		public UInt32 FpSoftwareStatusRegister { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 200); } }
		public UInt32[] ReservedForDebuggerInstrumentation
		{
			get
			{
				UInt32[] returnValue = new UInt32[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 204);
				return returnValue;
			}
		}
		public UInt32[] SystemReserved1
		{
			get
			{
				UInt32[] returnValue = new UInt32[26];
				for(int i=0; i<26; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 268);
				return returnValue;
			}
		}
		public Char PlaceholderCompatibilityMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 372); } }
		public Byte PlaceholderHydrationAlwaysExplicit{ get { return _StructureData[_BufferOffset +373]; } }
		public Char[] PlaceholderReserved
		{
			get
			{
				Char[] returnValue = new Char[10];
				for(int i=0; i<10; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 374);
				return returnValue;
			}
		}
		public UInt32 ProxiedProcessId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 384); } }
		public _ACTIVATION_CONTEXT_STACK32 _ActivationStack
		{
			get
			{
				_ACTIVATION_CONTEXT_STACK32 returnValue = new _ACTIVATION_CONTEXT_STACK32(_StructureData, _BufferOffset + 388);
				return returnValue;
			}
		}
		public Byte[] WorkingOnBehalfTicket
		{
			get
			{
				Byte[] returnValue = new Byte[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 412];
				return returnValue;
			}
		}
		public Int32 ExceptionCode { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 420); } }
		public UInt32 ActivationContextStackPointer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 424); } }
		public UInt32 InstrumentationCallbackSp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 428); } }
		public UInt32 InstrumentationCallbackPreviousPc { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 432); } }
		public UInt32 InstrumentationCallbackPreviousSp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 436); } }
		public Byte InstrumentationCallbackDisabled{ get { return _StructureData[_BufferOffset +440]; } }
		public Byte[] SpareBytes
		{
			get
			{
				Byte[] returnValue = new Byte[23];
				for(int i=0; i<23; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 441];
				return returnValue;
			}
		}
		public UInt32 TxFsContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 464); } }
		public _GDI_TEB_BATCH32 GdiTebBatch
		{
			get
			{
				_GDI_TEB_BATCH32 returnValue = new _GDI_TEB_BATCH32(_StructureData, _BufferOffset + 468);
				return returnValue;
			}
		}
		public _CLIENT_ID32 RealClientId
		{
			get
			{
				_CLIENT_ID32 returnValue = new _CLIENT_ID32(_StructureData, _BufferOffset + 1716);
				return returnValue;
			}
		}
		public UInt32 GdiCachedProcessHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1724); } }
		public UInt32 GdiClientPID { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1728); } }
		public UInt32 GdiClientTID { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1732); } }
		public UInt32 GdiThreadLocalInfo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1736); } }
		public UInt32[] Win32ClientInfo
		{
			get
			{
				UInt32[] returnValue = new UInt32[62];
				for(int i=0; i<62; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 1740);
				return returnValue;
			}
		}
		public UInt32[] glDispatchTable
		{
			get
			{
				UInt32[] returnValue = new UInt32[233];
				for(int i=0; i<233; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 1988);
				return returnValue;
			}
		}
		public UInt32[] glReserved1
		{
			get
			{
				UInt32[] returnValue = new UInt32[29];
				for(int i=0; i<29; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 2920);
				return returnValue;
			}
		}
		public UInt32 glReserved2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3036); } }
		public UInt32 glSectionInfo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3040); } }
		public UInt32 glSection { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3044); } }
		public UInt32 glTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3048); } }
		public UInt32 glCurrentRC { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3052); } }
		public UInt32 glContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3056); } }
		public UInt32 LastStatusValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3060); } }
		public _STRING32 StaticUnicodeString
		{
			get
			{
				_STRING32 returnValue = new _STRING32(_StructureData, _BufferOffset + 3064);
				return returnValue;
			}
		}
		public UInt16[] StaticUnicodeBuffer
		{
			get
			{
				UInt16[] returnValue = new UInt16[261];
				for(int i=0; i<261; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 3072);
				return returnValue;
			}
		}
		public UInt32 DeallocationStack { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3596); } }
		public UInt32[] TlsSlots
		{
			get
			{
				UInt32[] returnValue = new UInt32[64];
				for(int i=0; i<64; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 3600);
				return returnValue;
			}
		}
		public LIST_ENTRY32 TlsLinks
		{
			get
			{
				LIST_ENTRY32 returnValue = new LIST_ENTRY32(_StructureData, _BufferOffset + 3856);
				return returnValue;
			}
		}
		public UInt32 Vdm { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3864); } }
		public UInt32 ReservedForNtRpc { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3868); } }
		public UInt32[] DbgSsReserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 3872);
				return returnValue;
			}
		}
		public UInt32 HardErrorMode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3880); } }
		public UInt32[] Instrumentation
		{
			get
			{
				UInt32[] returnValue = new UInt32[9];
				for(int i=0; i<9; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 3884);
				return returnValue;
			}
		}
		public _GUID ActivityId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 3920);
				return returnValue;
			}
		}
		public UInt32 SubProcessTag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3936); } }
		public UInt32 PerflibData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3940); } }
		public UInt32 EtwTraceData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3944); } }
		public UInt32 WinSockData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3948); } }
		public UInt32 GdiBatchCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3952); } }
		public _PROCESSOR_NUMBER CurrentIdealProcessor
		{
			get
			{
				_PROCESSOR_NUMBER returnValue = new _PROCESSOR_NUMBER(_StructureData, _BufferOffset + 3956);
				return returnValue;
			}
		}
		public UInt32 IdealProcessorValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3956); } }
		public Byte ReservedPad0{ get { return _StructureData[_BufferOffset +3956]; } }
		public Byte ReservedPad1{ get { return _StructureData[_BufferOffset +3957]; } }
		public Byte ReservedPad2{ get { return _StructureData[_BufferOffset +3958]; } }
		public Byte IdealProcessor{ get { return _StructureData[_BufferOffset +3959]; } }
		public UInt32 GuaranteedStackBytes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3960); } }
		public UInt32 ReservedForPerf { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3964); } }
		public UInt32 ReservedForOle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3968); } }
		public UInt32 WaitingOnLoaderLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3972); } }
		public UInt32 SavedPriorityState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3976); } }
		public UInt32 ReservedForCodeCoverage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3980); } }
		public UInt32 ThreadPoolData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3984); } }
		public UInt32 TlsExpansionSlots { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3988); } }
		public UInt32 MuiGeneration { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3992); } }
		public UInt32 IsImpersonating { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3996); } }
		public UInt32 NlsCache { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4000); } }
		public UInt32 pShimData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4004); } }
		public UInt32 HeapData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4008); } }
		public UInt32 CurrentTransactionHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4012); } }
		public UInt32 ActiveFrame { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4016); } }
		public UInt32 FlsData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4020); } }
		public UInt32 PreferredLanguages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4024); } }
		public UInt32 UserPrefLanguages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4028); } }
		public UInt32 MergedPrefLanguages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4032); } }
		public UInt32 MuiImpersonation { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4036); } }
		public UInt16 CrossTebFlags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4040); } }
		public UInt16 SpareCrossTebBits
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4040);
				var value2 = (value & 65535) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 SameTebFlags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4042); } }
		public UInt16 SafeThunkCall
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4042);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 InDebugPrint
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4042);
				var value2 = (value & 2) >> 1;
				return (UInt16)value2;
			}
		}
		public UInt16 HasFiberData
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4042);
				var value2 = (value & 4) >> 2;
				return (UInt16)value2;
			}
		}
		public UInt16 SkipThreadAttach
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4042);
				var value2 = (value & 8) >> 3;
				return (UInt16)value2;
			}
		}
		public UInt16 WerInShipAssertCode
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4042);
				var value2 = (value & 16) >> 4;
				return (UInt16)value2;
			}
		}
		public UInt16 RanProcessInit
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4042);
				var value2 = (value & 32) >> 5;
				return (UInt16)value2;
			}
		}
		public UInt16 ClonedThread
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4042);
				var value2 = (value & 64) >> 6;
				return (UInt16)value2;
			}
		}
		public UInt16 SuppressDebugMsg
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4042);
				var value2 = (value & 128) >> 7;
				return (UInt16)value2;
			}
		}
		public UInt16 DisableUserStackWalk
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4042);
				var value2 = (value & 256) >> 8;
				return (UInt16)value2;
			}
		}
		public UInt16 RtlExceptionAttached
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4042);
				var value2 = (value & 512) >> 9;
				return (UInt16)value2;
			}
		}
		public UInt16 InitialThread
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4042);
				var value2 = (value & 1024) >> 10;
				return (UInt16)value2;
			}
		}
		public UInt16 SessionAware
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4042);
				var value2 = (value & 2048) >> 11;
				return (UInt16)value2;
			}
		}
		public UInt16 LoadOwner
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4042);
				var value2 = (value & 4096) >> 12;
				return (UInt16)value2;
			}
		}
		public UInt16 LoaderWorker
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4042);
				var value2 = (value & 8192) >> 13;
				return (UInt16)value2;
			}
		}
		public UInt16 SkipLoaderInit
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4042);
				var value2 = (value & 16384) >> 14;
				return (UInt16)value2;
			}
		}
		public UInt16 SpareSameTebBits
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4042);
				var value2 = (value & 32768) >> 15;
				return (UInt16)value2;
			}
		}
		public UInt32 TxnScopeEnterCallback { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4044); } }
		public UInt32 TxnScopeExitCallback { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4048); } }
		public UInt32 TxnScopeContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4052); } }
		public UInt32 LockCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4056); } }
		public Int32 WowTebOffset { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4060); } }
		public UInt32 ResourceRetValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4064); } }
		public UInt32 ReservedForWdf { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4068); } }
		public UInt64 ReservedForCrt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4072); } }
		public _GUID EffectiveContainerId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 4080);
				return returnValue;
			}
		}
	}
	#endregion
	#region _TEB64
 
	public class _TEB64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TEB64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 6200; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TEB64"": [ 6200, {
				 ""NtTib"": [ 0, [ ""_NT_TIB64"", ""null"" ]],
				 ""EnvironmentPointer"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""ClientId"": [ 64, [ ""_CLIENT_ID64"", ""null"" ]],
				 ""ActiveRpcHandle"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""ThreadLocalStoragePointer"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""ProcessEnvironmentBlock"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""LastErrorValue"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""CountOfOwnedCriticalSections"": [ 108, [ ""UInt32"", ""null"" ]],
				 ""CsrClientThread"": [ 112, [ ""UInt64"", ""null"" ]],
				 ""Win32ThreadInfo"": [ 120, [ ""UInt64"", ""null"" ]],
				 ""User32Reserved"": [ 128, [ ""Array"", ""{\""count\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""UserReserved"": [ 232, [ ""Array"", ""{\""count\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""WOW32Reserved"": [ 256, [ ""UInt64"", ""null"" ]],
				 ""CurrentLocale"": [ 264, [ ""UInt32"", ""null"" ]],
				 ""FpSoftwareStatusRegister"": [ 268, [ ""UInt32"", ""null"" ]],
				 ""ReservedForDebuggerInstrumentation"": [ 272, [ ""Array"", ""{\""count\"":16,\""target\"":\""UInt64\""}"" ]],
				 ""SystemReserved1"": [ 400, [ ""Array"", ""{\""count\"":30,\""target\"":\""UInt64\""}"" ]],
				 ""PlaceholderCompatibilityMode"": [ 640, [ ""Char"", ""null"" ]],
				 ""PlaceholderHydrationAlwaysExplicit"": [ 641, [ ""Byte"", ""null"" ]],
				 ""PlaceholderReserved"": [ 642, [ ""Array"", ""{\""count\"":10,\""target\"":\""Char\""}"" ]],
				 ""ProxiedProcessId"": [ 652, [ ""UInt32"", ""null"" ]],
				 ""_ActivationStack"": [ 656, [ ""_ACTIVATION_CONTEXT_STACK64"", ""null"" ]],
				 ""WorkingOnBehalfTicket"": [ 696, [ ""Array"", ""{\""count\"":8,\""target\"":\""Byte\""}"" ]],
				 ""ExceptionCode"": [ 704, [ ""Int32"", ""null"" ]],
				 ""Padding0"": [ 708, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""ActivationContextStackPointer"": [ 712, [ ""UInt64"", ""null"" ]],
				 ""InstrumentationCallbackSp"": [ 720, [ ""UInt64"", ""null"" ]],
				 ""InstrumentationCallbackPreviousPc"": [ 728, [ ""UInt64"", ""null"" ]],
				 ""InstrumentationCallbackPreviousSp"": [ 736, [ ""UInt64"", ""null"" ]],
				 ""TxFsContext"": [ 744, [ ""UInt32"", ""null"" ]],
				 ""InstrumentationCallbackDisabled"": [ 748, [ ""Byte"", ""null"" ]],
				 ""UnalignedLoadStoreExceptions"": [ 749, [ ""Byte"", ""null"" ]],
				 ""Padding1"": [ 750, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""GdiTebBatch"": [ 752, [ ""_GDI_TEB_BATCH64"", ""null"" ]],
				 ""RealClientId"": [ 2008, [ ""_CLIENT_ID64"", ""null"" ]],
				 ""GdiCachedProcessHandle"": [ 2024, [ ""UInt64"", ""null"" ]],
				 ""GdiClientPID"": [ 2032, [ ""UInt32"", ""null"" ]],
				 ""GdiClientTID"": [ 2036, [ ""UInt32"", ""null"" ]],
				 ""GdiThreadLocalInfo"": [ 2040, [ ""UInt64"", ""null"" ]],
				 ""Win32ClientInfo"": [ 2048, [ ""Array"", ""{\""count\"":62,\""target\"":\""UInt64\""}"" ]],
				 ""glDispatchTable"": [ 2544, [ ""Array"", ""{\""count\"":233,\""target\"":\""UInt64\""}"" ]],
				 ""glReserved1"": [ 4408, [ ""Array"", ""{\""count\"":29,\""target\"":\""UInt64\""}"" ]],
				 ""glReserved2"": [ 4640, [ ""UInt64"", ""null"" ]],
				 ""glSectionInfo"": [ 4648, [ ""UInt64"", ""null"" ]],
				 ""glSection"": [ 4656, [ ""UInt64"", ""null"" ]],
				 ""glTable"": [ 4664, [ ""UInt64"", ""null"" ]],
				 ""glCurrentRC"": [ 4672, [ ""UInt64"", ""null"" ]],
				 ""glContext"": [ 4680, [ ""UInt64"", ""null"" ]],
				 ""LastStatusValue"": [ 4688, [ ""UInt32"", ""null"" ]],
				 ""Padding2"": [ 4692, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""StaticUnicodeString"": [ 4696, [ ""_STRING64"", ""null"" ]],
				 ""StaticUnicodeBuffer"": [ 4712, [ ""Array"", ""{\""count\"":261,\""target\"":\""UInt16\""}"" ]],
				 ""Padding3"": [ 5234, [ ""Array"", ""{\""count\"":6,\""target\"":\""Byte\""}"" ]],
				 ""DeallocationStack"": [ 5240, [ ""UInt64"", ""null"" ]],
				 ""TlsSlots"": [ 5248, [ ""Array"", ""{\""count\"":64,\""target\"":\""UInt64\""}"" ]],
				 ""TlsLinks"": [ 5760, [ ""LIST_ENTRY64"", ""null"" ]],
				 ""Vdm"": [ 5776, [ ""UInt64"", ""null"" ]],
				 ""ReservedForNtRpc"": [ 5784, [ ""UInt64"", ""null"" ]],
				 ""DbgSsReserved"": [ 5792, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""HardErrorMode"": [ 5808, [ ""UInt32"", ""null"" ]],
				 ""Padding4"": [ 5812, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""Instrumentation"": [ 5816, [ ""Array"", ""{\""count\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""ActivityId"": [ 5904, [ ""_GUID"", ""null"" ]],
				 ""SubProcessTag"": [ 5920, [ ""UInt64"", ""null"" ]],
				 ""PerflibData"": [ 5928, [ ""UInt64"", ""null"" ]],
				 ""EtwTraceData"": [ 5936, [ ""UInt64"", ""null"" ]],
				 ""WinSockData"": [ 5944, [ ""UInt64"", ""null"" ]],
				 ""GdiBatchCount"": [ 5952, [ ""UInt32"", ""null"" ]],
				 ""CurrentIdealProcessor"": [ 5956, [ ""_PROCESSOR_NUMBER"", ""null"" ]],
				 ""IdealProcessorValue"": [ 5956, [ ""UInt32"", ""null"" ]],
				 ""ReservedPad0"": [ 5956, [ ""Byte"", ""null"" ]],
				 ""ReservedPad1"": [ 5957, [ ""Byte"", ""null"" ]],
				 ""ReservedPad2"": [ 5958, [ ""Byte"", ""null"" ]],
				 ""IdealProcessor"": [ 5959, [ ""Byte"", ""null"" ]],
				 ""GuaranteedStackBytes"": [ 5960, [ ""UInt32"", ""null"" ]],
				 ""Padding5"": [ 5964, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""ReservedForPerf"": [ 5968, [ ""UInt64"", ""null"" ]],
				 ""ReservedForOle"": [ 5976, [ ""UInt64"", ""null"" ]],
				 ""WaitingOnLoaderLock"": [ 5984, [ ""UInt32"", ""null"" ]],
				 ""Padding6"": [ 5988, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""SavedPriorityState"": [ 5992, [ ""UInt64"", ""null"" ]],
				 ""ReservedForCodeCoverage"": [ 6000, [ ""UInt64"", ""null"" ]],
				 ""ThreadPoolData"": [ 6008, [ ""UInt64"", ""null"" ]],
				 ""TlsExpansionSlots"": [ 6016, [ ""UInt64"", ""null"" ]],
				 ""DeallocationBStore"": [ 6024, [ ""UInt64"", ""null"" ]],
				 ""BStoreLimit"": [ 6032, [ ""UInt64"", ""null"" ]],
				 ""MuiGeneration"": [ 6040, [ ""UInt32"", ""null"" ]],
				 ""IsImpersonating"": [ 6044, [ ""UInt32"", ""null"" ]],
				 ""NlsCache"": [ 6048, [ ""UInt64"", ""null"" ]],
				 ""pShimData"": [ 6056, [ ""UInt64"", ""null"" ]],
				 ""HeapData"": [ 6064, [ ""UInt32"", ""null"" ]],
				 ""Padding7"": [ 6068, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""CurrentTransactionHandle"": [ 6072, [ ""UInt64"", ""null"" ]],
				 ""ActiveFrame"": [ 6080, [ ""UInt64"", ""null"" ]],
				 ""FlsData"": [ 6088, [ ""UInt64"", ""null"" ]],
				 ""PreferredLanguages"": [ 6096, [ ""UInt64"", ""null"" ]],
				 ""UserPrefLanguages"": [ 6104, [ ""UInt64"", ""null"" ]],
				 ""MergedPrefLanguages"": [ 6112, [ ""UInt64"", ""null"" ]],
				 ""MuiImpersonation"": [ 6120, [ ""UInt32"", ""null"" ]],
				 ""CrossTebFlags"": [ 6124, [ ""UInt16"", ""null"" ]],
				 ""SpareCrossTebBits"": [ 6124, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""SameTebFlags"": [ 6126, [ ""UInt16"", ""null"" ]],
				 ""SafeThunkCall"": [ 6126, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""InDebugPrint"": [ 6126, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""HasFiberData"": [ 6126, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt16\""}"" ]],
				 ""SkipThreadAttach"": [ 6126, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt16\""}"" ]],
				 ""WerInShipAssertCode"": [ 6126, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt16\""}"" ]],
				 ""RanProcessInit"": [ 6126, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt16\""}"" ]],
				 ""ClonedThread"": [ 6126, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt16\""}"" ]],
				 ""SuppressDebugMsg"": [ 6126, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt16\""}"" ]],
				 ""DisableUserStackWalk"": [ 6126, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt16\""}"" ]],
				 ""RtlExceptionAttached"": [ 6126, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt16\""}"" ]],
				 ""InitialThread"": [ 6126, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt16\""}"" ]],
				 ""SessionAware"": [ 6126, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt16\""}"" ]],
				 ""LoadOwner"": [ 6126, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt16\""}"" ]],
				 ""LoaderWorker"": [ 6126, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt16\""}"" ]],
				 ""SkipLoaderInit"": [ 6126, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt16\""}"" ]],
				 ""SpareSameTebBits"": [ 6126, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt16\""}"" ]],
				 ""TxnScopeEnterCallback"": [ 6128, [ ""UInt64"", ""null"" ]],
				 ""TxnScopeExitCallback"": [ 6136, [ ""UInt64"", ""null"" ]],
				 ""TxnScopeContext"": [ 6144, [ ""UInt64"", ""null"" ]],
				 ""LockCount"": [ 6152, [ ""UInt32"", ""null"" ]],
				 ""WowTebOffset"": [ 6156, [ ""Int32"", ""null"" ]],
				 ""ResourceRetValue"": [ 6160, [ ""UInt64"", ""null"" ]],
				 ""ReservedForWdf"": [ 6168, [ ""UInt64"", ""null"" ]],
				 ""ReservedForCrt"": [ 6176, [ ""UInt64"", ""null"" ]],
				 ""EffectiveContainerId"": [ 6184, [ ""_GUID"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _NT_TIB64 NtTib
		{
			get
			{
				_NT_TIB64 returnValue = new _NT_TIB64(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 EnvironmentPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public _CLIENT_ID64 ClientId
		{
			get
			{
				_CLIENT_ID64 returnValue = new _CLIENT_ID64(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt64 ActiveRpcHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 ThreadLocalStoragePointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 ProcessEnvironmentBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt32 LastErrorValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 CountOfOwnedCriticalSections { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public UInt64 CsrClientThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 Win32ThreadInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt32[] User32Reserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[26];
				for(int i=0; i<26; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt32[] UserReserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[5];
				for(int i=0; i<5; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 232);
				return returnValue;
			}
		}
		public UInt64 WOW32Reserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public UInt32 CurrentLocale { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 264); } }
		public UInt32 FpSoftwareStatusRegister { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 268); } }
		public UInt64[] ReservedForDebuggerInstrumentation
		{
			get
			{
				UInt64[] returnValue = new UInt64[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 272);
				return returnValue;
			}
		}
		public UInt64[] SystemReserved1
		{
			get
			{
				UInt64[] returnValue = new UInt64[30];
				for(int i=0; i<30; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 400);
				return returnValue;
			}
		}
		public Char PlaceholderCompatibilityMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 640); } }
		public Byte PlaceholderHydrationAlwaysExplicit{ get { return _StructureData[_BufferOffset +641]; } }
		public Char[] PlaceholderReserved
		{
			get
			{
				Char[] returnValue = new Char[10];
				for(int i=0; i<10; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 642);
				return returnValue;
			}
		}
		public UInt32 ProxiedProcessId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 652); } }
		public _ACTIVATION_CONTEXT_STACK64 _ActivationStack
		{
			get
			{
				_ACTIVATION_CONTEXT_STACK64 returnValue = new _ACTIVATION_CONTEXT_STACK64(_StructureData, _BufferOffset + 656);
				return returnValue;
			}
		}
		public Byte[] WorkingOnBehalfTicket
		{
			get
			{
				Byte[] returnValue = new Byte[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 696];
				return returnValue;
			}
		}
		public Int32 ExceptionCode { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 704); } }
		public Byte[] Padding0
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 708];
				return returnValue;
			}
		}
		public UInt64 ActivationContextStackPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 712); } }
		public UInt64 InstrumentationCallbackSp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 720); } }
		public UInt64 InstrumentationCallbackPreviousPc { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 728); } }
		public UInt64 InstrumentationCallbackPreviousSp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 736); } }
		public UInt32 TxFsContext { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 744); } }
		public Byte InstrumentationCallbackDisabled{ get { return _StructureData[_BufferOffset +748]; } }
		public Byte UnalignedLoadStoreExceptions{ get { return _StructureData[_BufferOffset +749]; } }
		public Byte[] Padding1
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 750];
				return returnValue;
			}
		}
		public _GDI_TEB_BATCH64 GdiTebBatch
		{
			get
			{
				_GDI_TEB_BATCH64 returnValue = new _GDI_TEB_BATCH64(_StructureData, _BufferOffset + 752);
				return returnValue;
			}
		}
		public _CLIENT_ID64 RealClientId
		{
			get
			{
				_CLIENT_ID64 returnValue = new _CLIENT_ID64(_StructureData, _BufferOffset + 2008);
				return returnValue;
			}
		}
		public UInt64 GdiCachedProcessHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2024); } }
		public UInt32 GdiClientPID { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2032); } }
		public UInt32 GdiClientTID { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2036); } }
		public UInt64 GdiThreadLocalInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2040); } }
		public UInt64[] Win32ClientInfo
		{
			get
			{
				UInt64[] returnValue = new UInt64[62];
				for(int i=0; i<62; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 2048);
				return returnValue;
			}
		}
		public UInt64[] glDispatchTable
		{
			get
			{
				UInt64[] returnValue = new UInt64[233];
				for(int i=0; i<233; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 2544);
				return returnValue;
			}
		}
		public UInt64[] glReserved1
		{
			get
			{
				UInt64[] returnValue = new UInt64[29];
				for(int i=0; i<29; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 4408);
				return returnValue;
			}
		}
		public UInt64 glReserved2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4640); } }
		public UInt64 glSectionInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4648); } }
		public UInt64 glSection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4656); } }
		public UInt64 glTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4664); } }
		public UInt64 glCurrentRC { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4672); } }
		public UInt64 glContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4680); } }
		public UInt32 LastStatusValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4688); } }
		public Byte[] Padding2
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 4692];
				return returnValue;
			}
		}
		public _STRING64 StaticUnicodeString
		{
			get
			{
				_STRING64 returnValue = new _STRING64(_StructureData, _BufferOffset + 4696);
				return returnValue;
			}
		}
		public UInt16[] StaticUnicodeBuffer
		{
			get
			{
				UInt16[] returnValue = new UInt16[261];
				for(int i=0; i<261; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 4712);
				return returnValue;
			}
		}
		public Byte[] Padding3
		{
			get
			{
				Byte[] returnValue = new Byte[6];
				for(int i=0; i<6; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 5234];
				return returnValue;
			}
		}
		public UInt64 DeallocationStack { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5240); } }
		public UInt64[] TlsSlots
		{
			get
			{
				UInt64[] returnValue = new UInt64[64];
				for(int i=0; i<64; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 5248);
				return returnValue;
			}
		}
		public LIST_ENTRY64 TlsLinks
		{
			get
			{
				LIST_ENTRY64 returnValue = new LIST_ENTRY64(_StructureData, _BufferOffset + 5760);
				return returnValue;
			}
		}
		public UInt64 Vdm { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5776); } }
		public UInt64 ReservedForNtRpc { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5784); } }
		public UInt64[] DbgSsReserved
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 5792);
				return returnValue;
			}
		}
		public UInt32 HardErrorMode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 5808); } }
		public Byte[] Padding4
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 5812];
				return returnValue;
			}
		}
		public UInt64[] Instrumentation
		{
			get
			{
				UInt64[] returnValue = new UInt64[11];
				for(int i=0; i<11; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 5816);
				return returnValue;
			}
		}
		public _GUID ActivityId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 5904);
				return returnValue;
			}
		}
		public UInt64 SubProcessTag { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5920); } }
		public UInt64 PerflibData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5928); } }
		public UInt64 EtwTraceData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5936); } }
		public UInt64 WinSockData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5944); } }
		public UInt32 GdiBatchCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 5952); } }
		public _PROCESSOR_NUMBER CurrentIdealProcessor
		{
			get
			{
				_PROCESSOR_NUMBER returnValue = new _PROCESSOR_NUMBER(_StructureData, _BufferOffset + 5956);
				return returnValue;
			}
		}
		public UInt32 IdealProcessorValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 5956); } }
		public Byte ReservedPad0{ get { return _StructureData[_BufferOffset +5956]; } }
		public Byte ReservedPad1{ get { return _StructureData[_BufferOffset +5957]; } }
		public Byte ReservedPad2{ get { return _StructureData[_BufferOffset +5958]; } }
		public Byte IdealProcessor{ get { return _StructureData[_BufferOffset +5959]; } }
		public UInt32 GuaranteedStackBytes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 5960); } }
		public Byte[] Padding5
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 5964];
				return returnValue;
			}
		}
		public UInt64 ReservedForPerf { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5968); } }
		public UInt64 ReservedForOle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5976); } }
		public UInt32 WaitingOnLoaderLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 5984); } }
		public Byte[] Padding6
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 5988];
				return returnValue;
			}
		}
		public UInt64 SavedPriorityState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5992); } }
		public UInt64 ReservedForCodeCoverage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6000); } }
		public UInt64 ThreadPoolData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6008); } }
		public UInt64 TlsExpansionSlots { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6016); } }
		public UInt64 DeallocationBStore { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6024); } }
		public UInt64 BStoreLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6032); } }
		public UInt32 MuiGeneration { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 6040); } }
		public UInt32 IsImpersonating { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 6044); } }
		public UInt64 NlsCache { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6048); } }
		public UInt64 pShimData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6056); } }
		public UInt32 HeapData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 6064); } }
		public Byte[] Padding7
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 6068];
				return returnValue;
			}
		}
		public UInt64 CurrentTransactionHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6072); } }
		public UInt64 ActiveFrame { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6080); } }
		public UInt64 FlsData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6088); } }
		public UInt64 PreferredLanguages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6096); } }
		public UInt64 UserPrefLanguages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6104); } }
		public UInt64 MergedPrefLanguages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6112); } }
		public UInt32 MuiImpersonation { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 6120); } }
		public UInt16 CrossTebFlags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6124); } }
		public UInt16 SpareCrossTebBits
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6124);
				var value2 = (value & 65535) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 SameTebFlags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126); } }
		public UInt16 SafeThunkCall
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 InDebugPrint
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 2) >> 1;
				return (UInt16)value2;
			}
		}
		public UInt16 HasFiberData
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 4) >> 2;
				return (UInt16)value2;
			}
		}
		public UInt16 SkipThreadAttach
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 8) >> 3;
				return (UInt16)value2;
			}
		}
		public UInt16 WerInShipAssertCode
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 16) >> 4;
				return (UInt16)value2;
			}
		}
		public UInt16 RanProcessInit
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 32) >> 5;
				return (UInt16)value2;
			}
		}
		public UInt16 ClonedThread
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 64) >> 6;
				return (UInt16)value2;
			}
		}
		public UInt16 SuppressDebugMsg
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 128) >> 7;
				return (UInt16)value2;
			}
		}
		public UInt16 DisableUserStackWalk
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 256) >> 8;
				return (UInt16)value2;
			}
		}
		public UInt16 RtlExceptionAttached
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 512) >> 9;
				return (UInt16)value2;
			}
		}
		public UInt16 InitialThread
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 1024) >> 10;
				return (UInt16)value2;
			}
		}
		public UInt16 SessionAware
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 2048) >> 11;
				return (UInt16)value2;
			}
		}
		public UInt16 LoadOwner
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 4096) >> 12;
				return (UInt16)value2;
			}
		}
		public UInt16 LoaderWorker
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 8192) >> 13;
				return (UInt16)value2;
			}
		}
		public UInt16 SkipLoaderInit
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 16384) >> 14;
				return (UInt16)value2;
			}
		}
		public UInt16 SpareSameTebBits
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 6126);
				var value2 = (value & 32768) >> 15;
				return (UInt16)value2;
			}
		}
		public UInt64 TxnScopeEnterCallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6128); } }
		public UInt64 TxnScopeExitCallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6136); } }
		public UInt64 TxnScopeContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6144); } }
		public UInt32 LockCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 6152); } }
		public Int32 WowTebOffset { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 6156); } }
		public UInt64 ResourceRetValue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6160); } }
		public UInt64 ReservedForWdf { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6168); } }
		public UInt64 ReservedForCrt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 6176); } }
		public _GUID EffectiveContainerId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 6184);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HV_X64_HYPERVISOR_FEATURES
 
	public class _HV_X64_HYPERVISOR_FEATURES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HV_X64_HYPERVISOR_FEATURES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HV_X64_HYPERVISOR_FEATURES"": [ 16, {
				 ""PartitionPrivileges"": [ 0, [ ""_HV_PARTITION_PRIVILEGE_MASK"", ""null"" ]],
				 ""MaxSupportedCState"": [ 8, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""HpetNeededForC3PowerState_Deprecated"": [ 8, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 8, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""MwaitAvailable_Deprecated"": [ 12, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""GuestDebuggingAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""PerformanceMonitorsAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""CpuDynamicPartitioningAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""XmmRegistersForFastHypercallAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""GuestIdleAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""HypervisorSleepStateSupportAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""NumaDistanceQueryAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""FrequencyRegsAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""SyntheticMachineCheckAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""GuestCrashRegsAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""DebugRegsAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""Npiep1Available"": [ 12, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""DisableHypervisorAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""ExtendedGvaRangesForFlushVirtualAddressListAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""FastHypercallOutputAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""SvmFeaturesAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""SintPollingModeAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""HypercallMsrLockAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""DirectSyntheticTimers"": [ 12, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""RegisterPatAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""RegisterBndcfgsAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""WatchdogTimerAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""SyntheticTimeUnhaltedTimerAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]],
				 ""DeviceDomainsAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""S1DeviceDomainsAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":25,\""target\"":\""UInt32\""}"" ]],
				 ""LbrAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""IptAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":28,\""start_bit\"":27,\""target\"":\""UInt32\""}"" ]],
				 ""CrossVtlFlushAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":29,\""start_bit\"":28,\""target\"":\""UInt32\""}"" ]],
				 ""IdleSpecCtrlAvailable"": [ 12, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":29,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved1"": [ 12, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _HV_PARTITION_PRIVILEGE_MASK PartitionPrivileges
		{
			get
			{
				_HV_PARTITION_PRIVILEGE_MASK returnValue = new _HV_PARTITION_PRIVILEGE_MASK(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 MaxSupportedCState
		{
			get
			{
				// start: 0  end: 4  Mask: 0000000000001111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 15) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 HpetNeededForC3PowerState_Deprecated
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 5  end: 32  Mask: 11111111111111111111111111100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 4294967264) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 MwaitAvailable_Deprecated
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 GuestDebuggingAvailable
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 PerformanceMonitorsAvailable
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 CpuDynamicPartitioningAvailable
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 XmmRegistersForFastHypercallAvailable
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 GuestIdleAvailable
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 HypervisorSleepStateSupportAvailable
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 NumaDistanceQueryAvailable
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 FrequencyRegsAvailable
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 SyntheticMachineCheckAvailable
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 GuestCrashRegsAvailable
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 DebugRegsAvailable
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 Npiep1Available
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 DisableHypervisorAvailable
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 ExtendedGvaRangesForFlushVirtualAddressListAvailable
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 FastHypercallOutputAvailable
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 SvmFeaturesAvailable
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 SintPollingModeAvailable
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 HypercallMsrLockAvailable
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 262144) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 DirectSyntheticTimers
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 RegisterPatAvailable
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 RegisterBndcfgsAvailable
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 WatchdogTimerAvailable
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 SyntheticTimeUnhaltedTimerAvailable
		{
			get
			{
				// start: 23  end: 24  Mask: 100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 8388608) >> 23;
				return (UInt32)value2;
			}
		}
		public UInt32 DeviceDomainsAvailable
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 16777216) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 S1DeviceDomainsAvailable
		{
			get
			{
				// start: 25  end: 26  Mask: 10000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 33554432) >> 25;
				return (UInt32)value2;
			}
		}
		public UInt32 LbrAvailable
		{
			get
			{
				// start: 26  end: 27  Mask: 100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 67108864) >> 26;
				return (UInt32)value2;
			}
		}
		public UInt32 IptAvailable
		{
			get
			{
				// start: 27  end: 28  Mask: 1000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 134217728) >> 27;
				return (UInt32)value2;
			}
		}
		public UInt32 CrossVtlFlushAvailable
		{
			get
			{
				// start: 28  end: 29  Mask: 10000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 268435456) >> 28;
				return (UInt32)value2;
			}
		}
		public UInt32 IdleSpecCtrlAvailable
		{
			get
			{
				// start: 29  end: 30  Mask: 100000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 536870912) >> 29;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved1
		{
			get
			{
				// start: 30  end: 32  Mask: 11000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 3221225472) >> 30;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _HV_PARTITION_PRIVILEGE_MASK
 
	public class _HV_PARTITION_PRIVILEGE_MASK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HV_PARTITION_PRIVILEGE_MASK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HV_PARTITION_PRIVILEGE_MASK"": [ 8, {
				 ""AsUINT64"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""AccessVpRunTimeReg"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""AccessPartitionReferenceCounter"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""AccessSynicRegs"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""AccessSyntheticTimerRegs"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""AccessIntrCtrlRegs"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""AccessHypercallMsrs"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""AccessVpIndex"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt64\""}"" ]],
				 ""AccessResetReg"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt64\""}"" ]],
				 ""AccessStatsReg"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""AccessPartitionReferenceTsc"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt64\""}"" ]],
				 ""AccessGuestIdleReg"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""AccessFrequencyRegs"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""AccessDebugRegs"": [ 0, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""AccessReenlightenmentControls"": [ 0, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt64\""}"" ]],
				 ""AccessRootSchedulerReg"": [ 0, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt64\""}"" ]],
				 ""AccessTscInvariantControls"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt64\""}"" ]],
				 ""Reserved1"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":16,\""target\"":\""UInt64\""}"" ]],
				 ""CreatePartitions"": [ 0, [ ""BitField"", ""{\""end_bit\"":33,\""start_bit\"":32,\""target\"":\""UInt64\""}"" ]],
				 ""AccessPartitionId"": [ 0, [ ""BitField"", ""{\""end_bit\"":34,\""start_bit\"":33,\""target\"":\""UInt64\""}"" ]],
				 ""AccessMemoryPool"": [ 0, [ ""BitField"", ""{\""end_bit\"":35,\""start_bit\"":34,\""target\"":\""UInt64\""}"" ]],
				 ""AdjustMessageBuffers"": [ 0, [ ""BitField"", ""{\""end_bit\"":36,\""start_bit\"":35,\""target\"":\""UInt64\""}"" ]],
				 ""PostMessages"": [ 0, [ ""BitField"", ""{\""end_bit\"":37,\""start_bit\"":36,\""target\"":\""UInt64\""}"" ]],
				 ""SignalEvents"": [ 0, [ ""BitField"", ""{\""end_bit\"":38,\""start_bit\"":37,\""target\"":\""UInt64\""}"" ]],
				 ""CreatePort"": [ 0, [ ""BitField"", ""{\""end_bit\"":39,\""start_bit\"":38,\""target\"":\""UInt64\""}"" ]],
				 ""ConnectPort"": [ 0, [ ""BitField"", ""{\""end_bit\"":40,\""start_bit\"":39,\""target\"":\""UInt64\""}"" ]],
				 ""AccessStats"": [ 0, [ ""BitField"", ""{\""end_bit\"":41,\""start_bit\"":40,\""target\"":\""UInt64\""}"" ]],
				 ""Reserved2"": [ 0, [ ""BitField"", ""{\""end_bit\"":43,\""start_bit\"":41,\""target\"":\""UInt64\""}"" ]],
				 ""Debugging"": [ 0, [ ""BitField"", ""{\""end_bit\"":44,\""start_bit\"":43,\""target\"":\""UInt64\""}"" ]],
				 ""CpuManagement"": [ 0, [ ""BitField"", ""{\""end_bit\"":45,\""start_bit\"":44,\""target\"":\""UInt64\""}"" ]],
				 ""ConfigureProfiler"": [ 0, [ ""BitField"", ""{\""end_bit\"":46,\""start_bit\"":45,\""target\"":\""UInt64\""}"" ]],
				 ""AccessVpExitTracing"": [ 0, [ ""BitField"", ""{\""end_bit\"":47,\""start_bit\"":46,\""target\"":\""UInt64\""}"" ]],
				 ""EnableExtendedGvaRangesForFlushVirtualAddressList"": [ 0, [ ""BitField"", ""{\""end_bit\"":48,\""start_bit\"":47,\""target\"":\""UInt64\""}"" ]],
				 ""AccessVsm"": [ 0, [ ""BitField"", ""{\""end_bit\"":49,\""start_bit\"":48,\""target\"":\""UInt64\""}"" ]],
				 ""AccessVpRegisters"": [ 0, [ ""BitField"", ""{\""end_bit\"":50,\""start_bit\"":49,\""target\"":\""UInt64\""}"" ]],
				 ""UnusedBit"": [ 0, [ ""BitField"", ""{\""end_bit\"":51,\""start_bit\"":50,\""target\"":\""UInt64\""}"" ]],
				 ""FastHypercallOutput"": [ 0, [ ""BitField"", ""{\""end_bit\"":52,\""start_bit\"":51,\""target\"":\""UInt64\""}"" ]],
				 ""EnableExtendedHypercalls"": [ 0, [ ""BitField"", ""{\""end_bit\"":53,\""start_bit\"":52,\""target\"":\""UInt64\""}"" ]],
				 ""StartVirtualProcessor"": [ 0, [ ""BitField"", ""{\""end_bit\"":54,\""start_bit\"":53,\""target\"":\""UInt64\""}"" ]],
				 ""Isolation"": [ 0, [ ""BitField"", ""{\""end_bit\"":55,\""start_bit\"":54,\""target\"":\""UInt64\""}"" ]],
				 ""Reserved3"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":55,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 AsUINT64 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 AccessVpRunTimeReg
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessPartitionReferenceCounter
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessSynicRegs
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessSyntheticTimerRegs
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessIntrCtrlRegs
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessHypercallMsrs
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessVpIndex
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessResetReg
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessStatsReg
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessPartitionReferenceTsc
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessGuestIdleReg
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessFrequencyRegs
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessDebugRegs
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4096) >> 12;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessReenlightenmentControls
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8192) >> 13;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessRootSchedulerReg
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16384) >> 14;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessTscInvariantControls
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32768) >> 15;
				return (UInt64)value2;
			}
		}
		public UInt64 Reserved1
		{
			get
			{
				// start: 16  end: 32  Mask: 11111111111111110000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294901760) >> 16;
				return (UInt64)value2;
			}
		}
		public UInt64 CreatePartitions
		{
			get
			{
				// start: 32  end: 33  Mask: 100000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967296) >> 32;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessPartitionId
		{
			get
			{
				// start: 33  end: 34  Mask: 1000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8589934592) >> 33;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessMemoryPool
		{
			get
			{
				// start: 34  end: 35  Mask: 10000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 17179869184) >> 34;
				return (UInt64)value2;
			}
		}
		public UInt64 AdjustMessageBuffers
		{
			get
			{
				// start: 35  end: 36  Mask: 100000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 34359738368) >> 35;
				return (UInt64)value2;
			}
		}
		public UInt64 PostMessages
		{
			get
			{
				// start: 36  end: 37  Mask: 1000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 68719476736) >> 36;
				return (UInt64)value2;
			}
		}
		public UInt64 SignalEvents
		{
			get
			{
				// start: 37  end: 38  Mask: 10000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 137438953472) >> 37;
				return (UInt64)value2;
			}
		}
		public UInt64 CreatePort
		{
			get
			{
				// start: 38  end: 39  Mask: 100000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 274877906944) >> 38;
				return (UInt64)value2;
			}
		}
		public UInt64 ConnectPort
		{
			get
			{
				// start: 39  end: 40  Mask: 1000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 549755813888) >> 39;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessStats
		{
			get
			{
				// start: 40  end: 41  Mask: 10000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1099511627776) >> 40;
				return (UInt64)value2;
			}
		}
		public UInt64 Reserved2
		{
			get
			{
				// start: 41  end: 43  Mask: 1100000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 6597069766656) >> 41;
				return (UInt64)value2;
			}
		}
		public UInt64 Debugging
		{
			get
			{
				// start: 43  end: 44  Mask: 10000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8796093022208) >> 43;
				return (UInt64)value2;
			}
		}
		public UInt64 CpuManagement
		{
			get
			{
				// start: 44  end: 45  Mask: 100000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 17592186044416) >> 44;
				return (UInt64)value2;
			}
		}
		public UInt64 ConfigureProfiler
		{
			get
			{
				// start: 45  end: 46  Mask: 1000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 35184372088832) >> 45;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessVpExitTracing
		{
			get
			{
				// start: 46  end: 47  Mask: 10000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 70368744177664) >> 46;
				return (UInt64)value2;
			}
		}
		public UInt64 EnableExtendedGvaRangesForFlushVirtualAddressList
		{
			get
			{
				// start: 47  end: 48  Mask: 100000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 140737488355328) >> 47;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessVsm
		{
			get
			{
				// start: 48  end: 49  Mask: 1000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 281474976710656) >> 48;
				return (UInt64)value2;
			}
		}
		public UInt64 AccessVpRegisters
		{
			get
			{
				// start: 49  end: 50  Mask: 10000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 562949953421312) >> 49;
				return (UInt64)value2;
			}
		}
		public UInt64 UnusedBit
		{
			get
			{
				// start: 50  end: 51  Mask: 100000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1125899906842624) >> 50;
				return (UInt64)value2;
			}
		}
		public UInt64 FastHypercallOutput
		{
			get
			{
				// start: 51  end: 52  Mask: 1000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2251799813685248) >> 51;
				return (UInt64)value2;
			}
		}
		public UInt64 EnableExtendedHypercalls
		{
			get
			{
				// start: 52  end: 53  Mask: 10000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4503599627370496) >> 52;
				return (UInt64)value2;
			}
		}
		public UInt64 StartVirtualProcessor
		{
			get
			{
				// start: 53  end: 54  Mask: 100000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 9007199254740992) >> 53;
				return (UInt64)value2;
			}
		}
		public UInt64 Isolation
		{
			get
			{
				// start: 54  end: 55  Mask: 1000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18014398509481984) >> 54;
				return (UInt64)value2;
			}
		}
		public UInt64 Reserved3
		{
			get
			{
				// start: 55  end: 64  Mask: 1111111110000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18410715276690587648) >> 55;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _KTIMER_TABLE
 
	public class _KTIMER_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTIMER_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16920; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTIMER_TABLE"": [ 16920, {
				 ""TimerExpiry"": [ 0, [ ""Array"", ""{\""count\"":64,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_KTIMER\""}}"" ]],
				 ""TimerEntries"": [ 512, [ ""Array"", ""{\""count\"":512,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_KTIMER_TABLE_ENTRY\""}}"" ]],
				 ""TableState"": [ 16896, [ ""_KTIMER_TABLE_STATE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KTIMER[] TimerExpiry
		{
			get
			{
				_KTIMER[] returnValue = new _KTIMER[64];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<64; i++ )
					returnValue[i] = new _KTIMER(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public _KTIMER_TABLE_ENTRY[] TimerEntries
		{
			get
			{
				_KTIMER_TABLE_ENTRY[] returnValue = new _KTIMER_TABLE_ENTRY[512];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<512; i++ )
					returnValue[i] = new _KTIMER_TABLE_ENTRY(_StructureData, (i * size) + _BufferOffset + 512);
				return returnValue;
			}
		}
		public _KTIMER_TABLE_STATE TableState
		{
			get
			{
				_KTIMER_TABLE_STATE returnValue = new _KTIMER_TABLE_STATE(_StructureData, _BufferOffset + 16896);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KTIMER_TABLE_ENTRY
 
	public class _KTIMER_TABLE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTIMER_TABLE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTIMER_TABLE_ENTRY"": [ 32, {
				 ""Lock"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Entry"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Time"": [ 24, [ ""_ULARGE_INTEGER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _LIST_ENTRY Entry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _ULARGE_INTEGER Time
		{
			get
			{
				_ULARGE_INTEGER returnValue = new _ULARGE_INTEGER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _XSTATE_SAVE
 
	public class _XSTATE_SAVE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _XSTATE_SAVE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_XSTATE_SAVE"": [ 56, {
				 ""Prev"": [ 0, [ ""Pointer"", ""{\""target\"":\""_XSTATE_SAVE\""}"" ]],
				 ""Thread"": [ 8, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""Level"": [ 16, [ ""Byte"", ""null"" ]],
				 ""XStateContext"": [ 24, [ ""_XSTATE_CONTEXT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Prev { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public Byte Level{ get { return _StructureData[_BufferOffset +16]; } }
		public _XSTATE_CONTEXT XStateContext
		{
			get
			{
				_XSTATE_CONTEXT returnValue = new _XSTATE_CONTEXT(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _XSAVE_AREA
 
	public class _XSAVE_AREA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _XSAVE_AREA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 576; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_XSAVE_AREA"": [ 576, {
				 ""LegacyState"": [ 0, [ ""_XSAVE_FORMAT"", ""null"" ]],
				 ""Header"": [ 512, [ ""_XSAVE_AREA_HEADER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _XSAVE_FORMAT LegacyState
		{
			get
			{
				_XSAVE_FORMAT returnValue = new _XSAVE_FORMAT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _XSAVE_AREA_HEADER Header
		{
			get
			{
				_XSAVE_AREA_HEADER returnValue = new _XSAVE_AREA_HEADER(_StructureData, _BufferOffset + 512);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KEXCEPTION_FRAME
 
	public class _KEXCEPTION_FRAME
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KEXCEPTION_FRAME(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 320; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KEXCEPTION_FRAME"": [ 320, {
				 ""P1Home"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""P2Home"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""P3Home"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""P4Home"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""P5"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""Spare1"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""Xmm6"": [ 48, [ ""_M128A"", ""null"" ]],
				 ""Xmm7"": [ 64, [ ""_M128A"", ""null"" ]],
				 ""Xmm8"": [ 80, [ ""_M128A"", ""null"" ]],
				 ""Xmm9"": [ 96, [ ""_M128A"", ""null"" ]],
				 ""Xmm10"": [ 112, [ ""_M128A"", ""null"" ]],
				 ""Xmm11"": [ 128, [ ""_M128A"", ""null"" ]],
				 ""Xmm12"": [ 144, [ ""_M128A"", ""null"" ]],
				 ""Xmm13"": [ 160, [ ""_M128A"", ""null"" ]],
				 ""Xmm14"": [ 176, [ ""_M128A"", ""null"" ]],
				 ""Xmm15"": [ 192, [ ""_M128A"", ""null"" ]],
				 ""TrapFrame"": [ 208, [ ""UInt64"", ""null"" ]],
				 ""OutputBuffer"": [ 216, [ ""UInt64"", ""null"" ]],
				 ""OutputLength"": [ 224, [ ""UInt64"", ""null"" ]],
				 ""Spare2"": [ 232, [ ""UInt64"", ""null"" ]],
				 ""MxCsr"": [ 240, [ ""UInt64"", ""null"" ]],
				 ""Rbp"": [ 248, [ ""UInt64"", ""null"" ]],
				 ""Rbx"": [ 256, [ ""UInt64"", ""null"" ]],
				 ""Rdi"": [ 264, [ ""UInt64"", ""null"" ]],
				 ""Rsi"": [ 272, [ ""UInt64"", ""null"" ]],
				 ""R12"": [ 280, [ ""UInt64"", ""null"" ]],
				 ""R13"": [ 288, [ ""UInt64"", ""null"" ]],
				 ""R14"": [ 296, [ ""UInt64"", ""null"" ]],
				 ""R15"": [ 304, [ ""UInt64"", ""null"" ]],
				 ""Return"": [ 312, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 P1Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 P2Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 P3Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 P4Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 P5 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 Spare1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _M128A Xmm6
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _M128A Xmm7
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _M128A Xmm8
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public _M128A Xmm9
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public _M128A Xmm10
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public _M128A Xmm11
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public _M128A Xmm12
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 144);
				return returnValue;
			}
		}
		public _M128A Xmm13
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 160);
				return returnValue;
			}
		}
		public _M128A Xmm14
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 176);
				return returnValue;
			}
		}
		public _M128A Xmm15
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public UInt64 TrapFrame { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 OutputBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 OutputLength { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 Spare2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 MxCsr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 Rbp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public UInt64 Rbx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public UInt64 Rdi { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 264); } }
		public UInt64 Rsi { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public UInt64 R12 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 280); } }
		public UInt64 R13 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 288); } }
		public UInt64 R14 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 296); } }
		public UInt64 R15 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 304); } }
		public UInt64 Return { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 312); } }
	}
	#endregion
	#region _KTRAP_FRAME
 
	public class _KTRAP_FRAME
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTRAP_FRAME(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 400; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTRAP_FRAME"": [ 400, {
				 ""P1Home"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""P2Home"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""P3Home"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""P4Home"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""P5"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""PreviousMode"": [ 40, [ ""Char"", ""null"" ]],
				 ""InterruptRetpolineState"": [ 40, [ ""Byte"", ""null"" ]],
				 ""PreviousIrql"": [ 41, [ ""Byte"", ""null"" ]],
				 ""FaultIndicator"": [ 42, [ ""Byte"", ""null"" ]],
				 ""NmiMsrIbrs"": [ 42, [ ""Byte"", ""null"" ]],
				 ""ExceptionActive"": [ 43, [ ""Byte"", ""null"" ]],
				 ""MxCsr"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""Rax"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""Rcx"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""Rdx"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""R8"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""R9"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""R10"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""R11"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""GsBase"": [ 104, [ ""UInt64"", ""null"" ]],
				 ""GsSwap"": [ 104, [ ""UInt64"", ""null"" ]],
				 ""Xmm0"": [ 112, [ ""_M128A"", ""null"" ]],
				 ""Xmm1"": [ 128, [ ""_M128A"", ""null"" ]],
				 ""Xmm2"": [ 144, [ ""_M128A"", ""null"" ]],
				 ""Xmm3"": [ 160, [ ""_M128A"", ""null"" ]],
				 ""Xmm4"": [ 176, [ ""_M128A"", ""null"" ]],
				 ""Xmm5"": [ 192, [ ""_M128A"", ""null"" ]],
				 ""FaultAddress"": [ 208, [ ""UInt64"", ""null"" ]],
				 ""ContextRecord"": [ 208, [ ""UInt64"", ""null"" ]],
				 ""Dr0"": [ 216, [ ""UInt64"", ""null"" ]],
				 ""Dr1"": [ 224, [ ""UInt64"", ""null"" ]],
				 ""Dr2"": [ 232, [ ""UInt64"", ""null"" ]],
				 ""Dr3"": [ 240, [ ""UInt64"", ""null"" ]],
				 ""Dr6"": [ 248, [ ""UInt64"", ""null"" ]],
				 ""Dr7"": [ 256, [ ""UInt64"", ""null"" ]],
				 ""DebugControl"": [ 264, [ ""UInt64"", ""null"" ]],
				 ""LastBranchToRip"": [ 272, [ ""UInt64"", ""null"" ]],
				 ""LastBranchFromRip"": [ 280, [ ""UInt64"", ""null"" ]],
				 ""LastExceptionToRip"": [ 288, [ ""UInt64"", ""null"" ]],
				 ""LastExceptionFromRip"": [ 296, [ ""UInt64"", ""null"" ]],
				 ""SegDs"": [ 304, [ ""UInt16"", ""null"" ]],
				 ""SegEs"": [ 306, [ ""UInt16"", ""null"" ]],
				 ""SegFs"": [ 308, [ ""UInt16"", ""null"" ]],
				 ""SegGs"": [ 310, [ ""UInt16"", ""null"" ]],
				 ""TrapFrame"": [ 312, [ ""UInt64"", ""null"" ]],
				 ""Rbx"": [ 320, [ ""UInt64"", ""null"" ]],
				 ""Rdi"": [ 328, [ ""UInt64"", ""null"" ]],
				 ""Rsi"": [ 336, [ ""UInt64"", ""null"" ]],
				 ""Rbp"": [ 344, [ ""UInt64"", ""null"" ]],
				 ""ErrorCode"": [ 352, [ ""UInt64"", ""null"" ]],
				 ""ExceptionFrame"": [ 352, [ ""UInt64"", ""null"" ]],
				 ""Rip"": [ 360, [ ""UInt64"", ""null"" ]],
				 ""SegCs"": [ 368, [ ""UInt16"", ""null"" ]],
				 ""Fill0"": [ 370, [ ""Byte"", ""null"" ]],
				 ""Logging"": [ 371, [ ""Byte"", ""null"" ]],
				 ""Fill1"": [ 372, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt16\""}"" ]],
				 ""EFlags"": [ 376, [ ""UInt32"", ""null"" ]],
				 ""Fill2"": [ 380, [ ""UInt32"", ""null"" ]],
				 ""Rsp"": [ 384, [ ""UInt64"", ""null"" ]],
				 ""SegSs"": [ 392, [ ""UInt16"", ""null"" ]],
				 ""Fill3"": [ 394, [ ""UInt16"", ""null"" ]],
				 ""Fill4"": [ 396, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 P1Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 P2Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 P3Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 P4Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 P5 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public Char PreviousMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 40); } }
		public Byte InterruptRetpolineState{ get { return _StructureData[_BufferOffset +40]; } }
		public Byte PreviousIrql{ get { return _StructureData[_BufferOffset +41]; } }
		public Byte FaultIndicator{ get { return _StructureData[_BufferOffset +42]; } }
		public Byte NmiMsrIbrs{ get { return _StructureData[_BufferOffset +42]; } }
		public Byte ExceptionActive{ get { return _StructureData[_BufferOffset +43]; } }
		public UInt32 MxCsr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt64 Rax { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Rcx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 Rdx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 R8 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 R9 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 R10 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 R11 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 GsBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 GsSwap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public _M128A Xmm0
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public _M128A Xmm1
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public _M128A Xmm2
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 144);
				return returnValue;
			}
		}
		public _M128A Xmm3
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 160);
				return returnValue;
			}
		}
		public _M128A Xmm4
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 176);
				return returnValue;
			}
		}
		public _M128A Xmm5
		{
			get
			{
				_M128A returnValue = new _M128A(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public UInt64 FaultAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 ContextRecord { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 Dr0 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 Dr1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 Dr2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 Dr3 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 Dr6 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public UInt64 Dr7 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public UInt64 DebugControl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 264); } }
		public UInt64 LastBranchToRip { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public UInt64 LastBranchFromRip { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 280); } }
		public UInt64 LastExceptionToRip { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 288); } }
		public UInt64 LastExceptionFromRip { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 296); } }
		public UInt16 SegDs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 304); } }
		public UInt16 SegEs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 306); } }
		public UInt16 SegFs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 308); } }
		public UInt16 SegGs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 310); } }
		public UInt64 TrapFrame { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 312); } }
		public UInt64 Rbx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 320); } }
		public UInt64 Rdi { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 328); } }
		public UInt64 Rsi { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 336); } }
		public UInt64 Rbp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 344); } }
		public UInt64 ErrorCode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 352); } }
		public UInt64 ExceptionFrame { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 352); } }
		public UInt64 Rip { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 360); } }
		public UInt16 SegCs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 368); } }
		public Byte Fill0{ get { return _StructureData[_BufferOffset +370]; } }
		public Byte Logging{ get { return _StructureData[_BufferOffset +371]; } }
		public UInt16[] Fill1
		{
			get
			{
				UInt16[] returnValue = new UInt16[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 372);
				return returnValue;
			}
		}
		public UInt32 EFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 376); } }
		public UInt32 Fill2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 380); } }
		public UInt64 Rsp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 384); } }
		public UInt16 SegSs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 392); } }
		public UInt16 Fill3 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 394); } }
		public UInt32 Fill4 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 396); } }
	}
	#endregion
	#region _KIST_BASE_FRAME
 
	public class _KIST_BASE_FRAME
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KIST_BASE_FRAME(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KIST_BASE_FRAME"": [ 48, {
				 ""KernelGsBase"": [ 0, [ ""Pointer"", ""{\""target\"":\""_KPCR\""}"" ]],
				 ""IstStack"": [ 8, [ ""Pointer"", ""{\""target\"":\""_KIST_LINK_FRAME\""}"" ]],
				 ""PreviousGsBase"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""PreviousCr3"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""IstPad"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""Reserved"": [ 40, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 KernelGsBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 IstStack { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 PreviousGsBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 PreviousCr3 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 IstPad { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 Reserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _KIST_LINK_FRAME
 
	public class _KIST_LINK_FRAME
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KIST_LINK_FRAME(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KIST_LINK_FRAME"": [ 32, {
				 ""IstBaseFrame"": [ 0, [ ""Pointer"", ""{\""target\"":\""_KIST_BASE_FRAME\""}"" ]],
				 ""Signature"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Reserved0"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 16, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 IstBaseFrame { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Reserved0 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64[] Reserved
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DEVICE_NODE_IOMMU_EXTENSION
 
	public class _DEVICE_NODE_IOMMU_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_NODE_IOMMU_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_NODE_IOMMU_EXTENSION"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _DEVICE_NODE
 
	public class _DEVICE_NODE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_NODE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 784; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_NODE"": [ 784, {
				 ""Sibling"": [ 0, [ ""Pointer"", ""{\""target\"":\""_DEVICE_NODE\""}"" ]],
				 ""Child"": [ 8, [ ""Pointer"", ""{\""target\"":\""_DEVICE_NODE\""}"" ]],
				 ""Parent"": [ 16, [ ""Pointer"", ""{\""target\"":\""_DEVICE_NODE\""}"" ]],
				 ""LastChild"": [ 24, [ ""Pointer"", ""{\""target\"":\""_DEVICE_NODE\""}"" ]],
				 ""PhysicalDeviceObject"": [ 32, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""InstancePath"": [ 40, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ServiceName"": [ 56, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""PendingIrp"": [ 72, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""FxDevice"": [ 80, [ ""Pointer"", ""{\""target\"":\""_POP_FX_DEVICE\""}"" ]],
				 ""FxDeviceLock"": [ 88, [ ""Int32"", ""null"" ]],
				 ""FxRemoveEvent"": [ 96, [ ""_KEVENT"", ""null"" ]],
				 ""FxActivationCount"": [ 120, [ ""Int32"", ""null"" ]],
				 ""FxSleepCount"": [ 124, [ ""Int32"", ""null"" ]],
				 ""UniqueId"": [ 128, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""Plugin"": [ 144, [ ""Pointer"", ""{\""target\"":\""_POP_FX_PLUGIN\""}"" ]],
				 ""Level"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""CurrentPowerState"": [ 156, [ ""_POWER_STATE"", ""null"" ]],
				 ""Notify"": [ 160, [ ""_PO_DEVICE_NOTIFY"", ""null"" ]],
				 ""PoIrpManager"": [ 264, [ ""_PO_IRP_MANAGER"", ""null"" ]],
				 ""PowerFlags"": [ 296, [ ""Int32"", ""null"" ]],
				 ""State"": [ 300, [ ""Enumeration"", ""{\""enum_name\"":\""_PNP_DEVNODE_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""PreviousState"": [ 304, [ ""Enumeration"", ""{\""enum_name\"":\""_PNP_DEVNODE_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""StateHistory"": [ 308, [ ""Array"", ""{\""size\"":0,\""target\"":\""Enumeration\"",\""target_args\"":{\""enum_name\"":\""_PNP_DEVNODE_STATE\"",\""target\"":\""UInt32\""}}"" ]],
				 ""StateHistoryEntry"": [ 388, [ ""UInt32"", ""null"" ]],
				 ""CompletionStatus"": [ 392, [ ""Int32"", ""null"" ]],
				 ""Flags"": [ 396, [ ""UInt32"", ""null"" ]],
				 ""UserFlags"": [ 400, [ ""UInt32"", ""null"" ]],
				 ""Problem"": [ 404, [ ""UInt32"", ""null"" ]],
				 ""ProblemStatus"": [ 408, [ ""Int32"", ""null"" ]],
				 ""ResourceList"": [ 416, [ ""Pointer"", ""{\""target\"":\""_CM_RESOURCE_LIST\""}"" ]],
				 ""ResourceListTranslated"": [ 424, [ ""Pointer"", ""{\""target\"":\""_CM_RESOURCE_LIST\""}"" ]],
				 ""DuplicatePDO"": [ 432, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""ResourceRequirements"": [ 440, [ ""Pointer"", ""{\""target\"":\""_IO_RESOURCE_REQUIREMENTS_LIST\""}"" ]],
				 ""InterfaceType"": [ 448, [ ""Enumeration"", ""{\""enum_name\"":\""_INTERFACE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""BusNumber"": [ 452, [ ""UInt32"", ""null"" ]],
				 ""ChildInterfaceType"": [ 456, [ ""Enumeration"", ""{\""enum_name\"":\""_INTERFACE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ChildBusNumber"": [ 460, [ ""UInt32"", ""null"" ]],
				 ""ChildBusTypeIndex"": [ 464, [ ""UInt16"", ""null"" ]],
				 ""RemovalPolicy"": [ 466, [ ""Byte"", ""null"" ]],
				 ""HardwareRemovalPolicy"": [ 467, [ ""Byte"", ""null"" ]],
				 ""TargetDeviceNotify"": [ 472, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeviceArbiterList"": [ 488, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeviceTranslatorList"": [ 504, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""NoTranslatorMask"": [ 520, [ ""UInt16"", ""null"" ]],
				 ""QueryTranslatorMask"": [ 522, [ ""UInt16"", ""null"" ]],
				 ""NoArbiterMask"": [ 524, [ ""UInt16"", ""null"" ]],
				 ""QueryArbiterMask"": [ 526, [ ""UInt16"", ""null"" ]],
				 ""OverUsed1"": [ 528, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""OverUsed2"": [ 536, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""BootResources"": [ 544, [ ""Pointer"", ""{\""target\"":\""_CM_RESOURCE_LIST\""}"" ]],
				 ""BootResourcesTranslated"": [ 552, [ ""Pointer"", ""{\""target\"":\""_CM_RESOURCE_LIST\""}"" ]],
				 ""CapabilityFlags"": [ 560, [ ""UInt32"", ""null"" ]],
				 ""DockInfo"": [ 568, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""DisableableDepends"": [ 600, [ ""UInt32"", ""null"" ]],
				 ""PendedSetInterfaceState"": [ 608, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LegacyBusListEntry"": [ 624, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DriverUnloadRetryCount"": [ 640, [ ""UInt32"", ""null"" ]],
				 ""PreviousParent"": [ 648, [ ""Pointer"", ""{\""target\"":\""_DEVICE_NODE\""}"" ]],
				 ""DeletedChildren"": [ 656, [ ""Int32"", ""null"" ]],
				 ""NumaNodeIndex"": [ 660, [ ""UInt32"", ""null"" ]],
				 ""ContainerID"": [ 664, [ ""_GUID"", ""null"" ]],
				 ""OverrideFlags"": [ 680, [ ""Byte"", ""null"" ]],
				 ""DeviceIdsHash"": [ 684, [ ""UInt32"", ""null"" ]],
				 ""RequiresUnloadedDriver"": [ 688, [ ""Byte"", ""null"" ]],
				 ""PendingEjectRelations"": [ 696, [ ""Pointer"", ""{\""target\"":\""_PENDING_RELATIONS_LIST_ENTRY\""}"" ]],
				 ""StateFlags"": [ 704, [ ""UInt32"", ""null"" ]],
				 ""RebalanceContext"": [ 712, [ ""Pointer"", ""{\""target\"":\""_PNP_REBALANCE_TRACE_CONTEXT\""}"" ]],
				 ""IommuExtension"": [ 720, [ ""Pointer"", ""{\""target\"":\""_DEVICE_NODE_IOMMU_EXTENSION\""}"" ]],
				 ""DirectedDripsState"": [ 728, [ ""_PO_DIRECTED_DRIPS_STATE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Sibling { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Child { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Parent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 LastChild { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 PhysicalDeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _UNICODE_STRING InstancePath
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _UNICODE_STRING ServiceName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt64 PendingIrp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 FxDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public Int32 FxDeviceLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 88); } }
		public _KEVENT FxRemoveEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public Int32 FxActivationCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 120); } }
		public Int32 FxSleepCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 124); } }
		public _UNICODE_STRING UniqueId
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt64 Plugin { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt32 Level { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public _POWER_STATE CurrentPowerState
		{
			get
			{
				_POWER_STATE returnValue = new _POWER_STATE(_StructureData, _BufferOffset + 156);
				return returnValue;
			}
		}
		public _PO_DEVICE_NOTIFY Notify
		{
			get
			{
				_PO_DEVICE_NOTIFY returnValue = new _PO_DEVICE_NOTIFY(_StructureData, _BufferOffset + 160);
				return returnValue;
			}
		}
		public _PO_IRP_MANAGER PoIrpManager
		{
			get
			{
				_PO_IRP_MANAGER returnValue = new _PO_IRP_MANAGER(_StructureData, _BufferOffset + 264);
				return returnValue;
			}
		}
		public Int32 PowerFlags { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 296); } }
		public _PNP_DEVNODE_STATE State { get { return (_PNP_DEVNODE_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 300); } }
		public _PNP_DEVNODE_STATE PreviousState { get { return (_PNP_DEVNODE_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 304); } }
		public _PNP_DEVNODE_STATE[] StateHistory
		{
			get
			{
				_PNP_DEVNODE_STATE[] returnValue = new _PNP_DEVNODE_STATE[20];
				int size = 0;
				for(int i=0; i<20; i++ )
					returnValue[i] = (_PNP_DEVNODE_STATE)BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 308);
				return returnValue;
			}
		}
		public UInt32 StateHistoryEntry { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 388); } }
		public Int32 CompletionStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 392); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 396); } }
		public UInt32 UserFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 400); } }
		public UInt32 Problem { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 404); } }
		public Int32 ProblemStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 408); } }
		public UInt64 ResourceList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 416); } }
		public UInt64 ResourceListTranslated { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 424); } }
		public UInt64 DuplicatePDO { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 432); } }
		public UInt64 ResourceRequirements { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 440); } }
		public _INTERFACE_TYPE InterfaceType { get { return (_INTERFACE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 448); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 452); } }
		public _INTERFACE_TYPE ChildInterfaceType { get { return (_INTERFACE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 456); } }
		public UInt32 ChildBusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 460); } }
		public UInt16 ChildBusTypeIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 464); } }
		public Byte RemovalPolicy{ get { return _StructureData[_BufferOffset +466]; } }
		public Byte HardwareRemovalPolicy{ get { return _StructureData[_BufferOffset +467]; } }
		public _LIST_ENTRY TargetDeviceNotify
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 472);
				return returnValue;
			}
		}
		public _LIST_ENTRY DeviceArbiterList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 488);
				return returnValue;
			}
		}
		public _LIST_ENTRY DeviceTranslatorList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 504);
				return returnValue;
			}
		}
		public UInt16 NoTranslatorMask { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 520); } }
		public UInt16 QueryTranslatorMask { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 522); } }
		public UInt16 NoArbiterMask { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 524); } }
		public UInt16 QueryArbiterMask { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 526); } }
		public _ANONYMOUS_TAG OverUsed1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 528);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG OverUsed2
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 536);
				return returnValue;
			}
		}
		public UInt64 BootResources { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 544); } }
		public UInt64 BootResourcesTranslated { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 552); } }
		public UInt32 CapabilityFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 560); } }
		public _ANONYMOUS_TAG DockInfo
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 568);
				return returnValue;
			}
		}
		public UInt32 DisableableDepends { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 600); } }
		public _LIST_ENTRY PendedSetInterfaceState
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 608);
				return returnValue;
			}
		}
		public _LIST_ENTRY LegacyBusListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 624);
				return returnValue;
			}
		}
		public UInt32 DriverUnloadRetryCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 640); } }
		public UInt64 PreviousParent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 648); } }
		public Int32 DeletedChildren { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 656); } }
		public UInt32 NumaNodeIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 660); } }
		public _GUID ContainerID
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 664);
				return returnValue;
			}
		}
		public Byte OverrideFlags{ get { return _StructureData[_BufferOffset +680]; } }
		public UInt32 DeviceIdsHash { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 684); } }
		public Byte RequiresUnloadedDriver{ get { return _StructureData[_BufferOffset +688]; } }
		public UInt64 PendingEjectRelations { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 696); } }
		public UInt32 StateFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 704); } }
		public UInt64 RebalanceContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 712); } }
		public UInt64 IommuExtension { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 720); } }
		public _PO_DIRECTED_DRIPS_STATE DirectedDripsState
		{
			get
			{
				_PO_DIRECTED_DRIPS_STATE returnValue = new _PO_DIRECTED_DRIPS_STATE(_StructureData, _BufferOffset + 728);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MCGEN_TRACE_CONTEXT
 
	public class _MCGEN_TRACE_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MCGEN_TRACE_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MCGEN_TRACE_CONTEXT"": [ 72, {
				 ""RegistrationHandle"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Logger"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""MatchAnyKeyword"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""MatchAllKeyword"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""Flags"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""IsEnabled"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Level"": [ 40, [ ""Byte"", ""null"" ]],
				 ""Reserve"": [ 41, [ ""Byte"", ""null"" ]],
				 ""EnableBitsCount"": [ 42, [ ""UInt16"", ""null"" ]],
				 ""EnableBitMask"": [ 48, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""EnableKeyWords"": [ 56, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]],
				 ""EnableLevel"": [ 64, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 RegistrationHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Logger { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 MatchAnyKeyword { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 MatchAllKeyword { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 IsEnabled { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public Byte Level{ get { return _StructureData[_BufferOffset +40]; } }
		public Byte Reserve{ get { return _StructureData[_BufferOffset +41]; } }
		public UInt16 EnableBitsCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 42); } }
		public UInt64 EnableBitMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 EnableKeyWords { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 EnableLevel { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _SID
 
	public class _SID
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SID(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SID"": [ 12, {
				 ""Revision"": [ 0, [ ""Byte"", ""null"" ]],
				 ""SubAuthorityCount"": [ 1, [ ""Byte"", ""null"" ]],
				 ""IdentifierAuthority"": [ 2, [ ""_SID_IDENTIFIER_AUTHORITY"", ""null"" ]],
				 ""SubAuthority"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte Revision{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte SubAuthorityCount{ get { return _StructureData[_BufferOffset +1]; } }
		public _SID_IDENTIFIER_AUTHORITY IdentifierAuthority
		{
			get
			{
				_SID_IDENTIFIER_AUTHORITY returnValue = new _SID_IDENTIFIER_AUTHORITY(_StructureData, _BufferOffset + 2);
				return returnValue;
			}
		}
		public UInt32[] SubAuthority
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PNP_DEVICE_COMPLETION_QUEUE
 
	public class _PNP_DEVICE_COMPLETION_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PNP_DEVICE_COMPLETION_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PNP_DEVICE_COMPLETION_QUEUE"": [ 80, {
				 ""DispatchedList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DispatchedCount"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""CompletedList"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CompletedSemaphore"": [ 40, [ ""_KSEMAPHORE"", ""null"" ]],
				 ""SpinLock"": [ 72, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY DispatchedList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 DispatchedCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _LIST_ENTRY CompletedList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _KSEMAPHORE CompletedSemaphore
		{
			get
			{
				_KSEMAPHORE returnValue = new _KSEMAPHORE(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt64 SpinLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
	}
	#endregion
	#region _KSEMAPHORE
 
	public class _KSEMAPHORE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KSEMAPHORE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KSEMAPHORE"": [ 32, {
				 ""Header"": [ 0, [ ""_DISPATCHER_HEADER"", ""null"" ]],
				 ""Limit"": [ 24, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _DISPATCHER_HEADER Header
		{
			get
			{
				_DISPATCHER_HEADER returnValue = new _DISPATCHER_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int32 Limit { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _PNP_ASSIGN_RESOURCES_CONTEXT
 
	public class _PNP_ASSIGN_RESOURCES_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PNP_ASSIGN_RESOURCES_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PNP_ASSIGN_RESOURCES_CONTEXT"": [ 16, {
				 ""IncludeFailedDevices"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""DeviceCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DeviceList"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_DEVICE_OBJECT\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 IncludeFailedDevices { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 DeviceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _DEVICE_OBJECT[] DeviceList
		{
			get
			{
				_DEVICE_OBJECT[] returnValue = new _DEVICE_OBJECT[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _DEVICE_OBJECT(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PNP_RESOURCE_REQUEST
 
	public class _PNP_RESOURCE_REQUEST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PNP_RESOURCE_REQUEST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PNP_RESOURCE_REQUEST"": [ 64, {
				 ""PhysicalDevice"": [ 0, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""Flags"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""AllocationType"": [ 12, [ ""Enumeration"", ""{\""enum_name\"":\""_ARBITER_REQUEST_SOURCE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Priority"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Position"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""ResourceRequirements"": [ 24, [ ""Pointer"", ""{\""target\"":\""_IO_RESOURCE_REQUIREMENTS_LIST\""}"" ]],
				 ""ReqList"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ResourceAssignment"": [ 40, [ ""Pointer"", ""{\""target\"":\""_CM_RESOURCE_LIST\""}"" ]],
				 ""TranslatedResourceAssignment"": [ 48, [ ""Pointer"", ""{\""target\"":\""_CM_RESOURCE_LIST\""}"" ]],
				 ""Status"": [ 56, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PhysicalDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _ARBITER_REQUEST_SOURCE AllocationType { get { return (_ARBITER_REQUEST_SOURCE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Priority { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Position { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 ResourceRequirements { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ReqList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 ResourceAssignment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 TranslatedResourceAssignment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 56); } }
	}
	#endregion
	#region _EXCEPTION_RECORD64
 
	public class _EXCEPTION_RECORD64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXCEPTION_RECORD64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 152; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXCEPTION_RECORD64"": [ 152, {
				 ""ExceptionCode"": [ 0, [ ""Int32"", ""null"" ]],
				 ""ExceptionFlags"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ExceptionRecord"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ExceptionAddress"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""NumberParameters"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""__unusedAlignment"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""ExceptionInformation"": [ 32, [ ""Array"", ""{\""count\"":15,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 ExceptionCode { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ExceptionFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 ExceptionRecord { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ExceptionAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 NumberParameters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 __unusedAlignment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt64[] ExceptionInformation
		{
			get
			{
				UInt64[] returnValue = new UInt64[15];
				for(int i=0; i<15; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EXCEPTION_RECORD32
 
	public class _EXCEPTION_RECORD32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXCEPTION_RECORD32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXCEPTION_RECORD32"": [ 80, {
				 ""ExceptionCode"": [ 0, [ ""Int32"", ""null"" ]],
				 ""ExceptionFlags"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ExceptionRecord"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ExceptionAddress"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""NumberParameters"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ExceptionInformation"": [ 20, [ ""Array"", ""{\""count\"":15,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 ExceptionCode { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ExceptionFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ExceptionRecord { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ExceptionAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 NumberParameters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32[] ExceptionInformation
		{
			get
			{
				UInt32[] returnValue = new UInt32[15];
				for(int i=0; i<15; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 20);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DBGKM_EXCEPTION64
 
	public class _DBGKM_EXCEPTION64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKM_EXCEPTION64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKM_EXCEPTION64"": [ 160, {
				 ""ExceptionRecord"": [ 0, [ ""_EXCEPTION_RECORD64"", ""null"" ]],
				 ""FirstChance"": [ 152, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _EXCEPTION_RECORD64 ExceptionRecord
		{
			get
			{
				_EXCEPTION_RECORD64 returnValue = new _EXCEPTION_RECORD64(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 FirstChance { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
	}
	#endregion
	#region _DBGKM_EXCEPTION32
 
	public class _DBGKM_EXCEPTION32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKM_EXCEPTION32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 84; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKM_EXCEPTION32"": [ 84, {
				 ""ExceptionRecord"": [ 0, [ ""_EXCEPTION_RECORD32"", ""null"" ]],
				 ""FirstChance"": [ 80, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _EXCEPTION_RECORD32 ExceptionRecord
		{
			get
			{
				_EXCEPTION_RECORD32 returnValue = new _EXCEPTION_RECORD32(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 FirstChance { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
	}
	#endregion
	#region _X86_KTRAP_FRAME
 
	public class _X86_KTRAP_FRAME
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _X86_KTRAP_FRAME(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 140; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_X86_KTRAP_FRAME"": [ 140, {
				 ""DbgEbp"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""DbgEip"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DbgArgMark"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""DbgArgPointer"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""TempSegCs"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""TempEsp"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Dr0"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Dr1"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""Dr2"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Dr3"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Dr6"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""Dr7"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""SegGs"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""SegEs"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""SegDs"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""Edx"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""Ecx"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""Eax"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""PreviousPreviousMode"": [ 72, [ ""Byte"", ""null"" ]],
				 ""EntropyQueueDpc"": [ 73, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 74, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""ExceptionList"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""SegFs"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""Edi"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""Esi"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""Ebx"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""Ebp"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""ErrCode"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""Eip"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""SegCs"": [ 108, [ ""UInt32"", ""null"" ]],
				 ""EFlags"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""HardwareEsp"": [ 116, [ ""UInt32"", ""null"" ]],
				 ""HardwareSegSs"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""V86Es"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""V86Ds"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""V86Fs"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""V86Gs"": [ 136, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DbgEbp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 DbgEip { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DbgArgMark { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 DbgArgPointer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 TempSegCs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 TempEsp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 Dr0 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 Dr1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 Dr2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 Dr3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 Dr6 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 Dr7 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 SegGs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 SegEs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 SegDs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 Edx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 Ecx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 Eax { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public Byte PreviousPreviousMode{ get { return _StructureData[_BufferOffset +72]; } }
		public Byte EntropyQueueDpc{ get { return _StructureData[_BufferOffset +73]; } }
		public Byte[] Reserved
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 74];
				return returnValue;
			}
		}
		public UInt32 ExceptionList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 SegFs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 Edi { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 Esi { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 Ebx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 Ebp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 ErrCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt32 Eip { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 SegCs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public UInt32 EFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public UInt32 HardwareEsp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 116); } }
		public UInt32 HardwareSegSs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 V86Es { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 V86Ds { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 V86Fs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt32 V86Gs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
	}
	#endregion
	#region _X86_KTRAP_FRAME_BLUE
 
	public class _X86_KTRAP_FRAME_BLUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _X86_KTRAP_FRAME_BLUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 140; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_X86_KTRAP_FRAME_BLUE"": [ 140, {
				 ""DbgEbp"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""DbgEip"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DbgArgMark"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""TempSegCs"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""Logging"": [ 14, [ ""Byte"", ""null"" ]],
				 ""FrameType"": [ 15, [ ""Byte"", ""null"" ]],
				 ""TempEsp"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Dr0"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Dr1"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Dr2"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""Dr3"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Dr6"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Dr7"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""SegGs"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""SegEs"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""SegDs"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""Edx"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""Ecx"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""Eax"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""PreviousPreviousMode"": [ 68, [ ""Byte"", ""null"" ]],
				 ""EntropyQueueDpc"": [ 69, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 70, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""MxCsr"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""ExceptionList"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""SegFs"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""Edi"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""Esi"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""Ebx"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""Ebp"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""ErrCode"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""Eip"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""SegCs"": [ 108, [ ""UInt32"", ""null"" ]],
				 ""EFlags"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""HardwareEsp"": [ 116, [ ""UInt32"", ""null"" ]],
				 ""HardwareSegSs"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""V86Es"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""V86Ds"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""V86Fs"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""V86Gs"": [ 136, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DbgEbp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 DbgEip { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DbgArgMark { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt16 TempSegCs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public Byte Logging{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte FrameType{ get { return _StructureData[_BufferOffset +15]; } }
		public UInt32 TempEsp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Dr0 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 Dr1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 Dr2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 Dr3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 Dr6 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 Dr7 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 SegGs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 SegEs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 SegDs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 Edx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 Ecx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 Eax { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public Byte PreviousPreviousMode{ get { return _StructureData[_BufferOffset +68]; } }
		public Byte EntropyQueueDpc{ get { return _StructureData[_BufferOffset +69]; } }
		public Byte[] Reserved
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 70];
				return returnValue;
			}
		}
		public UInt32 MxCsr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 ExceptionList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 SegFs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 Edi { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 Esi { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 Ebx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 Ebp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 ErrCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt32 Eip { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 SegCs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public UInt32 EFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public UInt32 HardwareEsp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 116); } }
		public UInt32 HardwareSegSs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 V86Es { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 V86Ds { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 V86Fs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt32 V86Gs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
	}
	#endregion
	#region _DBGKD_LOAD_SYMBOLS64
 
	public class _DBGKD_LOAD_SYMBOLS64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_LOAD_SYMBOLS64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_LOAD_SYMBOLS64"": [ 40, {
				 ""PathNameLength"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""BaseOfDll"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ProcessId"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""CheckSum"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""SizeOfImage"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""UnloadSymbols"": [ 32, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PathNameLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 BaseOfDll { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ProcessId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 CheckSum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 SizeOfImage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public Byte UnloadSymbols{ get { return _StructureData[_BufferOffset +32]; } }
	}
	#endregion
	#region _DBGKD_LOAD_SYMBOLS32
 
	public class _DBGKD_LOAD_SYMBOLS32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_LOAD_SYMBOLS32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_LOAD_SYMBOLS32"": [ 24, {
				 ""PathNameLength"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""BaseOfDll"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ProcessId"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""CheckSum"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""SizeOfImage"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""UnloadSymbols"": [ 20, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PathNameLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 BaseOfDll { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ProcessId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 CheckSum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 SizeOfImage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Byte UnloadSymbols{ get { return _StructureData[_BufferOffset +20]; } }
	}
	#endregion
	#region _DBGKD_READ_MEMORY64
 
	public class _DBGKD_READ_MEMORY64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_READ_MEMORY64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_READ_MEMORY64"": [ 16, {
				 ""TargetBaseAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""TransferCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ActualBytesRead"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 TargetBaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 TransferCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ActualBytesRead { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _DBGKD_READ_MEMORY32
 
	public class _DBGKD_READ_MEMORY32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_READ_MEMORY32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_READ_MEMORY32"": [ 12, {
				 ""TargetBaseAddress"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TransferCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ActualBytesRead"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 TargetBaseAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 TransferCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ActualBytesRead { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _DBGKD_WRITE_MEMORY64
 
	public class _DBGKD_WRITE_MEMORY64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_WRITE_MEMORY64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_WRITE_MEMORY64"": [ 16, {
				 ""TargetBaseAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""TransferCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ActualBytesWritten"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 TargetBaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 TransferCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ActualBytesWritten { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _DBGKD_WRITE_MEMORY32
 
	public class _DBGKD_WRITE_MEMORY32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_WRITE_MEMORY32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_WRITE_MEMORY32"": [ 12, {
				 ""TargetBaseAddress"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TransferCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ActualBytesWritten"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 TargetBaseAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 TransferCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ActualBytesWritten { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _DBGKD_WRITE_BREAKPOINT64
 
	public class _DBGKD_WRITE_BREAKPOINT64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_WRITE_BREAKPOINT64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_WRITE_BREAKPOINT64"": [ 16, {
				 ""BreakPointAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""BreakPointHandle"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 BreakPointAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 BreakPointHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _DBGKD_WRITE_BREAKPOINT32
 
	public class _DBGKD_WRITE_BREAKPOINT32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_WRITE_BREAKPOINT32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_WRITE_BREAKPOINT32"": [ 8, {
				 ""BreakPointAddress"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""BreakPointHandle"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BreakPointAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 BreakPointHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _DBGKD_READ_WRITE_IO64
 
	public class _DBGKD_READ_WRITE_IO64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_READ_WRITE_IO64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_READ_WRITE_IO64"": [ 16, {
				 ""IoAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""DataSize"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""DataValue"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 IoAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 DataSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 DataValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _DBGKD_READ_WRITE_IO32
 
	public class _DBGKD_READ_WRITE_IO32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_READ_WRITE_IO32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_READ_WRITE_IO32"": [ 12, {
				 ""DataSize"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""IoAddress"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DataValue"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DataSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 IoAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DataValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _DBGKD_READ_WRITE_IO_EXTENDED64
 
	public class _DBGKD_READ_WRITE_IO_EXTENDED64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_READ_WRITE_IO_EXTENDED64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_READ_WRITE_IO_EXTENDED64"": [ 32, {
				 ""DataSize"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""InterfaceType"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""BusNumber"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""AddressSpace"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""IoAddress"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""DataValue"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DataSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 InterfaceType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 AddressSpace { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 IoAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 DataValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _DBGKD_READ_WRITE_IO_EXTENDED32
 
	public class _DBGKD_READ_WRITE_IO_EXTENDED32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_READ_WRITE_IO_EXTENDED32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_READ_WRITE_IO_EXTENDED32"": [ 24, {
				 ""DataSize"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""InterfaceType"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""BusNumber"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""AddressSpace"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""IoAddress"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""DataValue"": [ 20, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DataSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 InterfaceType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 AddressSpace { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 IoAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 DataValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _DBGKD_SET_SPECIAL_CALL32
 
	public class _DBGKD_SET_SPECIAL_CALL32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_SET_SPECIAL_CALL32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_SET_SPECIAL_CALL32"": [ 4, {
				 ""SpecialCall"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SpecialCall { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _DBGKD_SET_SPECIAL_CALL64
 
	public class _DBGKD_SET_SPECIAL_CALL64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_SET_SPECIAL_CALL64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_SET_SPECIAL_CALL64"": [ 8, {
				 ""SpecialCall"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SpecialCall { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _DBGKD_SET_INTERNAL_BREAKPOINT32
 
	public class _DBGKD_SET_INTERNAL_BREAKPOINT32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_SET_INTERNAL_BREAKPOINT32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_SET_INTERNAL_BREAKPOINT32"": [ 8, {
				 ""BreakpointAddress"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BreakpointAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _DBGKD_SET_INTERNAL_BREAKPOINT64
 
	public class _DBGKD_SET_INTERNAL_BREAKPOINT64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_SET_INTERNAL_BREAKPOINT64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_SET_INTERNAL_BREAKPOINT64"": [ 16, {
				 ""BreakpointAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Flags"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 BreakpointAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _DBGKD_GET_INTERNAL_BREAKPOINT64
 
	public class _DBGKD_GET_INTERNAL_BREAKPOINT64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_GET_INTERNAL_BREAKPOINT64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_GET_INTERNAL_BREAKPOINT64"": [ 32, {
				 ""BreakpointAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Flags"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Calls"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""MaxCallsPerPeriod"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""MinInstructions"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""MaxInstructions"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""TotalInstructions"": [ 28, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 BreakpointAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Calls { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 MaxCallsPerPeriod { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 MinInstructions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 MaxInstructions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 TotalInstructions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _DBGKD_GET_INTERNAL_BREAKPOINT32
 
	public class _DBGKD_GET_INTERNAL_BREAKPOINT32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_GET_INTERNAL_BREAKPOINT32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_GET_INTERNAL_BREAKPOINT32"": [ 28, {
				 ""BreakpointAddress"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Calls"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""MaxCallsPerPeriod"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""MinInstructions"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""MaxInstructions"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""TotalInstructions"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BreakpointAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Calls { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 MaxCallsPerPeriod { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 MinInstructions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 MaxInstructions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 TotalInstructions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _DBGKD_MANIPULATE_STATE64
 
	public class _DBGKD_MANIPULATE_STATE64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_MANIPULATE_STATE64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_MANIPULATE_STATE64"": [ 56, {
				 ""ApiNumber"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ProcessorLevel"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Processor"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""ReturnStatus"": [ 8, [ ""Int32"", ""null"" ]],
				 ""u"": [ 16, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ApiNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16 ProcessorLevel { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Processor { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public Int32 ReturnStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DBGKD_MANIPULATE_STATE32
 
	public class _DBGKD_MANIPULATE_STATE32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_MANIPULATE_STATE32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 52; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_MANIPULATE_STATE32"": [ 52, {
				 ""ApiNumber"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ProcessorLevel"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Processor"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""ReturnStatus"": [ 8, [ ""Int32"", ""null"" ]],
				 ""u"": [ 12, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ApiNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16 ProcessorLevel { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Processor { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public Int32 ReturnStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DBGKD_READ_WRITE_MSR
 
	public class _DBGKD_READ_WRITE_MSR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_READ_WRITE_MSR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_READ_WRITE_MSR"": [ 12, {
				 ""Msr"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""DataValueLow"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DataValueHigh"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Msr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 DataValueLow { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DataValueHigh { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _DBGKD_BREAKPOINTEX
 
	public class _DBGKD_BREAKPOINTEX
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_BREAKPOINTEX(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_BREAKPOINTEX"": [ 8, {
				 ""BreakPointCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ContinueStatus"": [ 4, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BreakPointCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 ContinueStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _DBGKD_SEARCH_MEMORY
 
	public class _DBGKD_SEARCH_MEMORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_SEARCH_MEMORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_SEARCH_MEMORY"": [ 24, {
				 ""SearchAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""FoundAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""SearchLength"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""PatternLength"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SearchAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 FoundAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 SearchLength { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 PatternLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _DBGKD_RESTORE_BREAKPOINT
 
	public class _DBGKD_RESTORE_BREAKPOINT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_RESTORE_BREAKPOINT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_RESTORE_BREAKPOINT"": [ 4, {
				 ""BreakPointHandle"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BreakPointHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _DBGKD_CONTINUE
 
	public class _DBGKD_CONTINUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_CONTINUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_CONTINUE"": [ 4, {
				 ""ContinueStatus"": [ 0, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 ContinueStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _DBGKD_CONTINUE2
 
	public class _DBGKD_CONTINUE2
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_CONTINUE2(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_CONTINUE2"": [ 32, {
				 ""ContinueStatus"": [ 0, [ ""Int32"", ""null"" ]],
				 ""ControlSet"": [ 4, [ ""_AMD64_DBGKD_CONTROL_SET"", ""null"" ]],
				 ""AnyControlSet"": [ 4, [ ""_DBGKD_ANY_CONTROL_SET"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 ContinueStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public _AMD64_DBGKD_CONTROL_SET ControlSet
		{
			get
			{
				_AMD64_DBGKD_CONTROL_SET returnValue = new _AMD64_DBGKD_CONTROL_SET(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public _DBGKD_ANY_CONTROL_SET AnyControlSet
		{
			get
			{
				_DBGKD_ANY_CONTROL_SET returnValue = new _DBGKD_ANY_CONTROL_SET(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DEVICE_MANAGE_DATA_SET_ATTRIBUTES
 
	public class _DEVICE_MANAGE_DATA_SET_ATTRIBUTES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_MANAGE_DATA_SET_ATTRIBUTES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_MANAGE_DATA_SET_ATTRIBUTES"": [ 28, {
				 ""Size"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Action"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ParameterBlockOffset"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""ParameterBlockLength"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""DataSetRangesOffset"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""DataSetRangesLength"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Action { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ParameterBlockOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 ParameterBlockLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 DataSetRangesOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 DataSetRangesLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _DEVICE_DATA_SET_RANGE
 
	public class _DEVICE_DATA_SET_RANGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_DATA_SET_RANGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_DATA_SET_RANGE"": [ 16, {
				 ""StartingOffset"": [ 0, [ ""Int64"", ""null"" ]],
				 ""LengthInBytes"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int64 StartingOffset { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 LengthInBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _DEVICE_DSM_DEFINITION
 
	public class _DEVICE_DSM_DEFINITION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_DSM_DEFINITION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_DSM_DEFINITION"": [ 28, {
				 ""Action"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SingleRange"": [ 4, [ ""Byte"", ""null"" ]],
				 ""ParameterBlockAlignment"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ParameterBlockLength"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""HasOutput"": [ 16, [ ""Byte"", ""null"" ]],
				 ""OutputBlockAlignment"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""OutputBlockLength"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Action { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte SingleRange{ get { return _StructureData[_BufferOffset +4]; } }
		public UInt32 ParameterBlockAlignment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ParameterBlockLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public Byte HasOutput{ get { return _StructureData[_BufferOffset +16]; } }
		public UInt32 OutputBlockAlignment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 OutputBlockLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
 
	public class _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 36; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_MANAGE_DATA_SET_ATTRIBUTES_OUTPUT"": [ 36, {
				 ""Size"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Action"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""OperationStatus"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""ExtendedError"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""TargetDetailedError"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""ReservedStatus"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""OutputBlockOffset"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""OutputBlockLength"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Action { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 OperationStatus { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 ExtendedError { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 TargetDetailedError { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 ReservedStatus { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 OutputBlockOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 OutputBlockLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _PEP_ACPI_RESOURCE
 
	public class _PEP_ACPI_RESOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_ACPI_RESOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_ACPI_RESOURCE"": [ 72, {
				 ""Type"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_PEP_ACPI_RESOURCE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""IoMemory"": [ 0, [ ""_PEP_ACPI_IO_MEMORY_RESOURCE"", ""null"" ]],
				 ""Interrupt"": [ 0, [ ""_PEP_ACPI_INTERRUPT_RESOURCE"", ""null"" ]],
				 ""Gpio"": [ 0, [ ""_PEP_ACPI_GPIO_RESOURCE"", ""null"" ]],
				 ""SpbI2c"": [ 0, [ ""_PEP_ACPI_SPB_I2C_RESOURCE"", ""null"" ]],
				 ""SpbSpi"": [ 0, [ ""_PEP_ACPI_SPB_SPI_RESOURCE"", ""null"" ]],
				 ""SpbUart"": [ 0, [ ""_PEP_ACPI_SPB_UART_RESOURCE"", ""null"" ]],
				 ""ExtendedAddress"": [ 0, [ ""_PEP_ACPI_EXTENDED_ADDRESS"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _PEP_ACPI_RESOURCE_TYPE Type { get { return (_PEP_ACPI_RESOURCE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _PEP_ACPI_IO_MEMORY_RESOURCE IoMemory
		{
			get
			{
				_PEP_ACPI_IO_MEMORY_RESOURCE returnValue = new _PEP_ACPI_IO_MEMORY_RESOURCE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _PEP_ACPI_INTERRUPT_RESOURCE Interrupt
		{
			get
			{
				_PEP_ACPI_INTERRUPT_RESOURCE returnValue = new _PEP_ACPI_INTERRUPT_RESOURCE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _PEP_ACPI_GPIO_RESOURCE Gpio
		{
			get
			{
				_PEP_ACPI_GPIO_RESOURCE returnValue = new _PEP_ACPI_GPIO_RESOURCE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _PEP_ACPI_SPB_I2C_RESOURCE SpbI2c
		{
			get
			{
				_PEP_ACPI_SPB_I2C_RESOURCE returnValue = new _PEP_ACPI_SPB_I2C_RESOURCE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _PEP_ACPI_SPB_SPI_RESOURCE SpbSpi
		{
			get
			{
				_PEP_ACPI_SPB_SPI_RESOURCE returnValue = new _PEP_ACPI_SPB_SPI_RESOURCE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _PEP_ACPI_SPB_UART_RESOURCE SpbUart
		{
			get
			{
				_PEP_ACPI_SPB_UART_RESOURCE returnValue = new _PEP_ACPI_SPB_UART_RESOURCE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _PEP_ACPI_EXTENDED_ADDRESS ExtendedAddress
		{
			get
			{
				_PEP_ACPI_EXTENDED_ADDRESS returnValue = new _PEP_ACPI_EXTENDED_ADDRESS(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PEP_ACPI_IO_MEMORY_RESOURCE
 
	public class _PEP_ACPI_IO_MEMORY_RESOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_ACPI_IO_MEMORY_RESOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_ACPI_IO_MEMORY_RESOURCE"": [ 32, {
				 ""Type"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_PEP_ACPI_RESOURCE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Information"": [ 4, [ ""Byte"", ""null"" ]],
				 ""MinimumAddress"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""MaximumAddress"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Alignment"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Length"": [ 28, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _PEP_ACPI_RESOURCE_TYPE Type { get { return (_PEP_ACPI_RESOURCE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte Information{ get { return _StructureData[_BufferOffset +4]; } }
		public _LARGE_INTEGER MinimumAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _LARGE_INTEGER MaximumAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 Alignment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _PEP_ACPI_INTERRUPT_RESOURCE
 
	public class _PEP_ACPI_INTERRUPT_RESOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_ACPI_INTERRUPT_RESOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_ACPI_INTERRUPT_RESOURCE"": [ 32, {
				 ""Type"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_PEP_ACPI_RESOURCE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""InterruptType"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_MODE\"",\""target\"":\""UInt32\""}"" ]],
				 ""InterruptPolarity"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_POLARITY\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 12, [ ""_PEP_ACPI_RESOURCE_FLAGS"", ""null"" ]],
				 ""Count"": [ 16, [ ""Byte"", ""null"" ]],
				 ""Pins"": [ 24, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]] }]
				 }
				)";
			}
		}
		public _PEP_ACPI_RESOURCE_TYPE Type { get { return (_PEP_ACPI_RESOURCE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _KINTERRUPT_MODE InterruptType { get { return (_KINTERRUPT_MODE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _KINTERRUPT_POLARITY InterruptPolarity { get { return (_KINTERRUPT_POLARITY)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _PEP_ACPI_RESOURCE_FLAGS Flags
		{
			get
			{
				_PEP_ACPI_RESOURCE_FLAGS returnValue = new _PEP_ACPI_RESOURCE_FLAGS(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public Byte Count{ get { return _StructureData[_BufferOffset +16]; } }
		public UInt64 Pins { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _PEP_ACPI_GPIO_RESOURCE
 
	public class _PEP_ACPI_GPIO_RESOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_ACPI_GPIO_RESOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_ACPI_GPIO_RESOURCE"": [ 72, {
				 ""Type"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_PEP_ACPI_RESOURCE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 4, [ ""_PEP_ACPI_RESOURCE_FLAGS"", ""null"" ]],
				 ""InterruptType"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_MODE\"",\""target\"":\""UInt32\""}"" ]],
				 ""InterruptPolarity"": [ 12, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_POLARITY\"",\""target\"":\""UInt32\""}"" ]],
				 ""PinConfig"": [ 16, [ ""Enumeration"", ""{\""enum_name\"":\""_GPIO_PIN_CONFIG_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""IoRestrictionType"": [ 20, [ ""Enumeration"", ""{\""enum_name\"":\""_GPIO_PIN_IORESTRICTION_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""DriveStrength"": [ 24, [ ""UInt16"", ""null"" ]],
				 ""DebounceTimeout"": [ 26, [ ""UInt16"", ""null"" ]],
				 ""PinTable"": [ 32, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""PinCount"": [ 40, [ ""UInt16"", ""null"" ]],
				 ""ResourceSourceIndex"": [ 42, [ ""Byte"", ""null"" ]],
				 ""ResourceSourceName"": [ 48, [ ""Pointer"", ""{\""target\"":\""_UNICODE_STRING\""}"" ]],
				 ""VendorData"": [ 56, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""VendorDataLength"": [ 64, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _PEP_ACPI_RESOURCE_TYPE Type { get { return (_PEP_ACPI_RESOURCE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _PEP_ACPI_RESOURCE_FLAGS Flags
		{
			get
			{
				_PEP_ACPI_RESOURCE_FLAGS returnValue = new _PEP_ACPI_RESOURCE_FLAGS(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public _KINTERRUPT_MODE InterruptType { get { return (_KINTERRUPT_MODE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _KINTERRUPT_POLARITY InterruptPolarity { get { return (_KINTERRUPT_POLARITY)BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _GPIO_PIN_CONFIG_TYPE PinConfig { get { return (_GPIO_PIN_CONFIG_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _GPIO_PIN_IORESTRICTION_TYPE IoRestrictionType { get { return (_GPIO_PIN_IORESTRICTION_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt16 DriveStrength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 24); } }
		public UInt16 DebounceTimeout { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 26); } }
		public UInt64 PinTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt16 PinCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 40); } }
		public Byte ResourceSourceIndex{ get { return _StructureData[_BufferOffset +42]; } }
		public UInt64 ResourceSourceName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 VendorData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt16 VendorDataLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _PEP_ACPI_SPB_I2C_RESOURCE
 
	public class _PEP_ACPI_SPB_I2C_RESOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_ACPI_SPB_I2C_RESOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_ACPI_SPB_I2C_RESOURCE"": [ 48, {
				 ""SpbCommon"": [ 0, [ ""_PEP_ACPI_SPB_RESOURCE"", ""null"" ]],
				 ""ConnectionSpeed"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""SlaveAddress"": [ 44, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _PEP_ACPI_SPB_RESOURCE SpbCommon
		{
			get
			{
				_PEP_ACPI_SPB_RESOURCE returnValue = new _PEP_ACPI_SPB_RESOURCE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 ConnectionSpeed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt16 SlaveAddress { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 44); } }
	}
	#endregion
	#region _PEP_ACPI_SPB_UART_RESOURCE
 
	public class _PEP_ACPI_SPB_UART_RESOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_ACPI_SPB_UART_RESOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_ACPI_SPB_UART_RESOURCE"": [ 56, {
				 ""SpbCommon"": [ 0, [ ""_PEP_ACPI_SPB_RESOURCE"", ""null"" ]],
				 ""BaudRate"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""RxBufferSize"": [ 44, [ ""UInt16"", ""null"" ]],
				 ""TxBufferSize"": [ 46, [ ""UInt16"", ""null"" ]],
				 ""Parity"": [ 48, [ ""Byte"", ""null"" ]],
				 ""LinesInUse"": [ 49, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _PEP_ACPI_SPB_RESOURCE SpbCommon
		{
			get
			{
				_PEP_ACPI_SPB_RESOURCE returnValue = new _PEP_ACPI_SPB_RESOURCE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 BaudRate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt16 RxBufferSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 44); } }
		public UInt16 TxBufferSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 46); } }
		public Byte Parity{ get { return _StructureData[_BufferOffset +48]; } }
		public Byte LinesInUse{ get { return _StructureData[_BufferOffset +49]; } }
	}
	#endregion
	#region _PEP_ACPI_SPB_SPI_RESOURCE
 
	public class _PEP_ACPI_SPB_SPI_RESOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_ACPI_SPB_SPI_RESOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_ACPI_SPB_SPI_RESOURCE"": [ 56, {
				 ""SpbCommon"": [ 0, [ ""_PEP_ACPI_SPB_RESOURCE"", ""null"" ]],
				 ""ConnectionSpeed"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""DataBitLength"": [ 44, [ ""Byte"", ""null"" ]],
				 ""Phase"": [ 45, [ ""Byte"", ""null"" ]],
				 ""Polarity"": [ 46, [ ""Byte"", ""null"" ]],
				 ""DeviceSelection"": [ 48, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _PEP_ACPI_SPB_RESOURCE SpbCommon
		{
			get
			{
				_PEP_ACPI_SPB_RESOURCE returnValue = new _PEP_ACPI_SPB_RESOURCE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 ConnectionSpeed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public Byte DataBitLength{ get { return _StructureData[_BufferOffset +44]; } }
		public Byte Phase{ get { return _StructureData[_BufferOffset +45]; } }
		public Byte Polarity{ get { return _StructureData[_BufferOffset +46]; } }
		public UInt16 DeviceSelection { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _PEP_ACPI_EXTENDED_ADDRESS
 
	public class _PEP_ACPI_EXTENDED_ADDRESS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_ACPI_EXTENDED_ADDRESS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_ACPI_EXTENDED_ADDRESS"": [ 72, {
				 ""Type"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_PEP_ACPI_RESOURCE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 4, [ ""_PEP_ACPI_RESOURCE_FLAGS"", ""null"" ]],
				 ""ResourceFlags"": [ 8, [ ""Byte"", ""null"" ]],
				 ""GeneralFlags"": [ 9, [ ""Byte"", ""null"" ]],
				 ""TypeSpecificFlags"": [ 10, [ ""Byte"", ""null"" ]],
				 ""RevisionId"": [ 11, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 12, [ ""Byte"", ""null"" ]],
				 ""Granularity"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""MinimumAddress"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""MaximumAddress"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""TranslationAddress"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""AddressLength"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""TypeAttribute"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""DescriptorName"": [ 64, [ ""Pointer"", ""{\""target\"":\""_UNICODE_STRING\""}"" ]] }]
				 }
				)";
			}
		}
		public _PEP_ACPI_RESOURCE_TYPE Type { get { return (_PEP_ACPI_RESOURCE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _PEP_ACPI_RESOURCE_FLAGS Flags
		{
			get
			{
				_PEP_ACPI_RESOURCE_FLAGS returnValue = new _PEP_ACPI_RESOURCE_FLAGS(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public Byte ResourceFlags{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte GeneralFlags{ get { return _StructureData[_BufferOffset +9]; } }
		public Byte TypeSpecificFlags{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte RevisionId{ get { return _StructureData[_BufferOffset +11]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +12]; } }
		public UInt64 Granularity { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 MinimumAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 MaximumAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 TranslationAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 AddressLength { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 TypeAttribute { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 DescriptorName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _PPM_PLATFORM_STATES
 
	public class _PPM_PLATFORM_STATES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPM_PLATFORM_STATES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 448; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPM_PLATFORM_STATES"": [ 448, {
				 ""StateCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""InterfaceVersion"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ProcessorCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""CoordinatedInterface"": [ 12, [ ""Byte"", ""null"" ]],
				 ""IdleTest"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IdlePreExecute"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IdleComplete"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""QueryPlatformStateResidency"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Accounting"": [ 48, [ ""Pointer"", ""{\""target\"":\""_PLATFORM_IDLE_ACCOUNTING\""}"" ]],
				 ""DeepSleepEnabled"": [ 56, [ ""Byte"", ""null"" ]],
				 ""State"": [ 64, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 StateCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 InterfaceVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ProcessorCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte CoordinatedInterface{ get { return _StructureData[_BufferOffset +12]; } }
		public UInt64 IdleTest { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 IdlePreExecute { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 IdleComplete { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 QueryPlatformStateResidency { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 Accounting { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public Byte DeepSleepEnabled{ get { return _StructureData[_BufferOffset +56]; } }
		public _PPM_PLATFORM_STATE[] State
		{
			get
			{
				_PPM_PLATFORM_STATE[] returnValue = new _PPM_PLATFORM_STATE[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _PPM_PLATFORM_STATE(_StructureData, (i * size) + _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CPU_INFO
 
	public class _CPU_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CPU_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CPU_INFO"": [ 16, {
				 ""AsUINT32"": [ 0, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""Eax"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Ebx"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Ecx"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Edx"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32[] AsUINT32
		{
			get
			{
				UInt32[] returnValue = new UInt32[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Eax { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Ebx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Ecx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Edx { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _POP_PPM_PROFILE
 
	public class _POP_PPM_PROFILE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_PPM_PROFILE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 5552; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_PPM_PROFILE"": [ 5552, {
				 ""Name"": [ 0, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""Id"": [ 8, [ ""Byte"", ""null"" ]],
				 ""Guid"": [ 12, [ ""_GUID"", ""null"" ]],
				 ""Flags"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""Priority"": [ 32, [ ""Byte"", ""null"" ]],
				 ""Settings"": [ 40, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""StartTime"": [ 5512, [ ""UInt64"", ""null"" ]],
				 ""Count"": [ 5520, [ ""UInt64"", ""null"" ]],
				 ""MaxDuration"": [ 5528, [ ""UInt64"", ""null"" ]],
				 ""MinDuration"": [ 5536, [ ""UInt64"", ""null"" ]],
				 ""TotalDuration"": [ 5544, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Name { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Byte Id{ get { return _StructureData[_BufferOffset +8]; } }
		public _GUID Guid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public Byte Priority{ get { return _StructureData[_BufferOffset +32]; } }
		public _PPM_ENGINE_SETTINGS[] Settings
		{
			get
			{
				_PPM_ENGINE_SETTINGS[] returnValue = new _PPM_ENGINE_SETTINGS[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _PPM_ENGINE_SETTINGS(_StructureData, (i * size) + _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt64 StartTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5512); } }
		public UInt64 Count { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5520); } }
		public UInt64 MaxDuration { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5528); } }
		public UInt64 MinDuration { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5536); } }
		public UInt64 TotalDuration { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 5544); } }
	}
	#endregion
	#region _PPM_ENGINE_SETTINGS
 
	public class _PPM_ENGINE_SETTINGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPM_ENGINE_SETTINGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2736; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPM_ENGINE_SETTINGS"": [ 2736, {
				 ""ExplicitSetting"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""ThrottlingPolicy"": [ 16, [ ""Byte"", ""null"" ]],
				 ""PerfTimeCheck"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""PerfHistoryCount"": [ 24, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""PerfMinPolicy"": [ 26, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""PerfMaxPolicy"": [ 28, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""PerfDecreaseTime"": [ 30, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""PerfIncreaseTime"": [ 32, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""PerfDecreasePolicy"": [ 34, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""PerfIncreasePolicy"": [ 36, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""PerfDecreaseThreshold"": [ 38, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""PerfIncreaseThreshold"": [ 40, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""PerfFrequencyCap"": [ 44, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""PerfBoostPolicy"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""PerfBoostMode"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""PerfReductionTolerance"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""EnergyPerfPreference"": [ 64, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""AutonomousActivityWindow"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""AutonomousPreference"": [ 76, [ ""Byte"", ""null"" ]],
				 ""LatencyHintPerf"": [ 77, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""LatencyHintUnpark"": [ 79, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""ResponsivenessDisableThreshold"": [ 84, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ResponsivenessEnableThreshold"": [ 92, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ResponsivenessDisableTime"": [ 100, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""ResponsivenessEnableTime"": [ 102, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""ResponsivenessEppCeiling"": [ 104, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ResponsivenessPerfFloor"": [ 112, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""DutyCycling"": [ 120, [ ""Byte"", ""null"" ]],
				 ""ParkingPerfState"": [ 121, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""DistributeUtility"": [ 123, [ ""Byte"", ""null"" ]],
				 ""CoreParkingOverUtilizationThreshold"": [ 124, [ ""Byte"", ""null"" ]],
				 ""CoreParkingConcurrencyThreshold"": [ 125, [ ""Byte"", ""null"" ]],
				 ""CoreParkingHeadroomThreshold"": [ 126, [ ""Byte"", ""null"" ]],
				 ""CoreParkingDistributionThreshold"": [ 127, [ ""Byte"", ""null"" ]],
				 ""CoreParkingDecreasePolicy"": [ 128, [ ""Byte"", ""null"" ]],
				 ""CoreParkingIncreasePolicy"": [ 129, [ ""Byte"", ""null"" ]],
				 ""CoreParkingDecreaseTime"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""CoreParkingIncreaseTime"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""CoreParkingMinCores"": [ 140, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""CoreParkingMaxCores"": [ 142, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""SoftParkLatency"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""AllowScaling"": [ 148, [ ""Byte"", ""null"" ]],
				 ""IdleDisabled"": [ 149, [ ""Byte"", ""null"" ]],
				 ""IdleTimeCheck"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""IdleDemotePercent"": [ 156, [ ""Byte"", ""null"" ]],
				 ""IdlePromotePercent"": [ 157, [ ""Byte"", ""null"" ]],
				 ""IdleStateMax"": [ 158, [ ""Byte"", ""null"" ]],
				 ""HeteroDecreaseTime"": [ 159, [ ""Byte"", ""null"" ]],
				 ""HeteroIncreaseTime"": [ 160, [ ""Byte"", ""null"" ]],
				 ""HeteroDecreaseThreshold"": [ 161, [ ""Array"", ""{\""count\"":1280,\""target\"":\""Byte\""}"" ]],
				 ""HeteroIncreaseThreshold"": [ 1441, [ ""Array"", ""{\""count\"":1280,\""target\"":\""Byte\""}"" ]],
				 ""Class0FloorPerformance"": [ 2721, [ ""Byte"", ""null"" ]],
				 ""Class1InitialPerformance"": [ 2722, [ ""Byte"", ""null"" ]],
				 ""ThreadPolicies"": [ 2724, [ ""Array"", ""{\""size\"":0,\""target\"":\""Enumeration\"",\""target_args\"":{\""enum_name\"":\""_KHETERO_CPU_POLICY\"",\""target\"":\""UInt32\""}}"" ]] }]
				 }
				)";
			}
		}
		public _PPM_POLICY_SETTINGS_MASK[] ExplicitSetting
		{
			get
			{
				_PPM_POLICY_SETTINGS_MASK[] returnValue = new _PPM_POLICY_SETTINGS_MASK[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _PPM_POLICY_SETTINGS_MASK(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte ThrottlingPolicy{ get { return _StructureData[_BufferOffset +16]; } }
		public UInt32 PerfTimeCheck { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public Byte[] PerfHistoryCount
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 24];
				return returnValue;
			}
		}
		public Byte[] PerfMinPolicy
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 26];
				return returnValue;
			}
		}
		public Byte[] PerfMaxPolicy
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 28];
				return returnValue;
			}
		}
		public Byte[] PerfDecreaseTime
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 30];
				return returnValue;
			}
		}
		public Byte[] PerfIncreaseTime
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 32];
				return returnValue;
			}
		}
		public Byte[] PerfDecreasePolicy
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 34];
				return returnValue;
			}
		}
		public Byte[] PerfIncreasePolicy
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 36];
				return returnValue;
			}
		}
		public Byte[] PerfDecreaseThreshold
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 38];
				return returnValue;
			}
		}
		public Byte[] PerfIncreaseThreshold
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 40];
				return returnValue;
			}
		}
		public UInt32[] PerfFrequencyCap
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 44);
				return returnValue;
			}
		}
		public UInt32 PerfBoostPolicy { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 PerfBoostMode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 PerfReductionTolerance { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32[] EnergyPerfPreference
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt32 AutonomousActivityWindow { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public Byte AutonomousPreference{ get { return _StructureData[_BufferOffset +76]; } }
		public Byte[] LatencyHintPerf
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 77];
				return returnValue;
			}
		}
		public Byte[] LatencyHintUnpark
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 79];
				return returnValue;
			}
		}
		public UInt32[] ResponsivenessDisableThreshold
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 84);
				return returnValue;
			}
		}
		public UInt32[] ResponsivenessEnableThreshold
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 92);
				return returnValue;
			}
		}
		public Byte[] ResponsivenessDisableTime
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 100];
				return returnValue;
			}
		}
		public Byte[] ResponsivenessEnableTime
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 102];
				return returnValue;
			}
		}
		public UInt32[] ResponsivenessEppCeiling
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt32[] ResponsivenessPerfFloor
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 112);
				return returnValue;
			}
		}
		public Byte DutyCycling{ get { return _StructureData[_BufferOffset +120]; } }
		public Byte[] ParkingPerfState
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 121];
				return returnValue;
			}
		}
		public Byte DistributeUtility{ get { return _StructureData[_BufferOffset +123]; } }
		public Byte CoreParkingOverUtilizationThreshold{ get { return _StructureData[_BufferOffset +124]; } }
		public Byte CoreParkingConcurrencyThreshold{ get { return _StructureData[_BufferOffset +125]; } }
		public Byte CoreParkingHeadroomThreshold{ get { return _StructureData[_BufferOffset +126]; } }
		public Byte CoreParkingDistributionThreshold{ get { return _StructureData[_BufferOffset +127]; } }
		public Byte CoreParkingDecreasePolicy{ get { return _StructureData[_BufferOffset +128]; } }
		public Byte CoreParkingIncreasePolicy{ get { return _StructureData[_BufferOffset +129]; } }
		public UInt32 CoreParkingDecreaseTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt32 CoreParkingIncreaseTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public Byte[] CoreParkingMinCores
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 140];
				return returnValue;
			}
		}
		public Byte[] CoreParkingMaxCores
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 142];
				return returnValue;
			}
		}
		public UInt32 SoftParkLatency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public Byte AllowScaling{ get { return _StructureData[_BufferOffset +148]; } }
		public Byte IdleDisabled{ get { return _StructureData[_BufferOffset +149]; } }
		public UInt32 IdleTimeCheck { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public Byte IdleDemotePercent{ get { return _StructureData[_BufferOffset +156]; } }
		public Byte IdlePromotePercent{ get { return _StructureData[_BufferOffset +157]; } }
		public Byte IdleStateMax{ get { return _StructureData[_BufferOffset +158]; } }
		public Byte HeteroDecreaseTime{ get { return _StructureData[_BufferOffset +159]; } }
		public Byte HeteroIncreaseTime{ get { return _StructureData[_BufferOffset +160]; } }
		public Byte[] HeteroDecreaseThreshold
		{
			get
			{
				Byte[] returnValue = new Byte[1280];
				for(int i=0; i<1280; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 161];
				return returnValue;
			}
		}
		public Byte[] HeteroIncreaseThreshold
		{
			get
			{
				Byte[] returnValue = new Byte[1280];
				for(int i=0; i<1280; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 1441];
				return returnValue;
			}
		}
		public Byte Class0FloorPerformance{ get { return _StructureData[_BufferOffset +2721]; } }
		public Byte Class1InitialPerformance{ get { return _StructureData[_BufferOffset +2722]; } }
		public _KHETERO_CPU_POLICY[] ThreadPolicies
		{
			get
			{
				_KHETERO_CPU_POLICY[] returnValue = new _KHETERO_CPU_POLICY[2];
				int size = 0;
				for(int i=0; i<2; i++ )
					returnValue[i] = (_KHETERO_CPU_POLICY)BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 2724);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EXP_LICENSE_STATE
 
	public class _EXP_LICENSE_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXP_LICENSE_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXP_LICENSE_STATE"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _ESERVERSILO_GLOBALS
 
	public class _ESERVERSILO_GLOBALS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ESERVERSILO_GLOBALS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1168; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ESERVERSILO_GLOBALS"": [ 1168, {
				 ""ObSiloState"": [ 0, [ ""_OBP_SILODRIVERSTATE"", ""null"" ]],
				 ""SeSiloState"": [ 736, [ ""_SEP_SILOSTATE"", ""null"" ]],
				 ""SeRmSiloState"": [ 784, [ ""_SEP_RM_LSA_CONNECTION_STATE"", ""null"" ]],
				 ""EtwSiloState"": [ 864, [ ""Pointer"", ""{\""target\"":\""_ETW_SILODRIVERSTATE\""}"" ]],
				 ""MiSessionLeaderProcess"": [ 872, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""ExpDefaultErrorPortProcess"": [ 880, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""ExpDefaultErrorPort"": [ 888, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HardErrorState"": [ 896, [ ""UInt32"", ""null"" ]],
				 ""ExpLicenseState"": [ 904, [ ""Pointer"", ""{\""target\"":\""_EXP_LICENSE_STATE\""}"" ]],
				 ""WnfSiloState"": [ 912, [ ""_WNF_SILODRIVERSTATE"", ""null"" ]],
				 ""DbgkSiloState"": [ 968, [ ""_DBGK_SILOSTATE"", ""null"" ]],
				 ""PsProtectedCurrentDirectory"": [ 1000, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""PsProtectedEnvironment"": [ 1016, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ApiSetSection"": [ 1032, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ApiSetSchema"": [ 1040, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OneCoreForwardersEnabled"": [ 1048, [ ""Byte"", ""null"" ]],
				 ""NtSystemRoot"": [ 1056, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""SiloRootDirectoryName"": [ 1072, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""Storage"": [ 1088, [ ""Pointer"", ""{\""target\"":\""_PSP_STORAGE\""}"" ]],
				 ""State"": [ 1096, [ ""Enumeration"", ""{\""enum_name\"":\""_SERVERSILO_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ExitStatus"": [ 1100, [ ""Int32"", ""null"" ]],
				 ""DeleteEvent"": [ 1104, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""UserSharedData"": [ 1112, [ ""Pointer"", ""{\""target\"":\""_SILO_USER_SHARED_DATA\""}"" ]],
				 ""UserSharedSection"": [ 1120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TerminateWorkItem"": [ 1128, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""IsDownlevelContainer"": [ 1160, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _OBP_SILODRIVERSTATE ObSiloState
		{
			get
			{
				_OBP_SILODRIVERSTATE returnValue = new _OBP_SILODRIVERSTATE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _SEP_SILOSTATE SeSiloState
		{
			get
			{
				_SEP_SILOSTATE returnValue = new _SEP_SILOSTATE(_StructureData, _BufferOffset + 736);
				return returnValue;
			}
		}
		public _SEP_RM_LSA_CONNECTION_STATE SeRmSiloState
		{
			get
			{
				_SEP_RM_LSA_CONNECTION_STATE returnValue = new _SEP_RM_LSA_CONNECTION_STATE(_StructureData, _BufferOffset + 784);
				return returnValue;
			}
		}
		public UInt64 EtwSiloState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 864); } }
		public UInt64 MiSessionLeaderProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 872); } }
		public UInt64 ExpDefaultErrorPortProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 880); } }
		public UInt64 ExpDefaultErrorPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 888); } }
		public UInt32 HardErrorState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 896); } }
		public UInt64 ExpLicenseState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 904); } }
		public _WNF_SILODRIVERSTATE WnfSiloState
		{
			get
			{
				_WNF_SILODRIVERSTATE returnValue = new _WNF_SILODRIVERSTATE(_StructureData, _BufferOffset + 912);
				return returnValue;
			}
		}
		public _DBGK_SILOSTATE DbgkSiloState
		{
			get
			{
				_DBGK_SILOSTATE returnValue = new _DBGK_SILOSTATE(_StructureData, _BufferOffset + 968);
				return returnValue;
			}
		}
		public _UNICODE_STRING PsProtectedCurrentDirectory
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 1000);
				return returnValue;
			}
		}
		public _UNICODE_STRING PsProtectedEnvironment
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 1016);
				return returnValue;
			}
		}
		public UInt64 ApiSetSection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1032); } }
		public UInt64 ApiSetSchema { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1040); } }
		public Byte OneCoreForwardersEnabled{ get { return _StructureData[_BufferOffset +1048]; } }
		public _UNICODE_STRING NtSystemRoot
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 1056);
				return returnValue;
			}
		}
		public _UNICODE_STRING SiloRootDirectoryName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 1072);
				return returnValue;
			}
		}
		public UInt64 Storage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1088); } }
		public _SERVERSILO_STATE State { get { return (_SERVERSILO_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 1096); } }
		public Int32 ExitStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 1100); } }
		public UInt64 DeleteEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1104); } }
		public UInt64 UserSharedData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1112); } }
		public UInt64 UserSharedSection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1120); } }
		public _WORK_QUEUE_ITEM TerminateWorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 1128);
				return returnValue;
			}
		}
		public Byte IsDownlevelContainer{ get { return _StructureData[_BufferOffset +1160]; } }
	}
	#endregion
	#region _SILO_USER_SHARED_DATA
 
	public class _SILO_USER_SHARED_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SILO_USER_SHARED_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 584; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SILO_USER_SHARED_DATA"": [ 584, {
				 ""ServiceSessionId"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ActiveConsoleId"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ConsoleSessionForegroundProcessId"": [ 8, [ ""Int64"", ""null"" ]],
				 ""NtProductType"": [ 16, [ ""Enumeration"", ""{\""enum_name\"":\""_NT_PRODUCT_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""SuiteMask"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""SharedUserSessionId"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""IsMultiSessionSku"": [ 28, [ ""Byte"", ""null"" ]],
				 ""NtSystemRoot"": [ 30, [ ""Array"", ""{\""count\"":260,\""target\"":\""UInt16\""}"" ]],
				 ""UserModeGlobalLogger"": [ 550, [ ""Array"", ""{\""count\"":16,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ServiceSessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ActiveConsoleId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public Int64 ConsoleSessionForegroundProcessId { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 8); } }
		public _NT_PRODUCT_TYPE NtProductType { get { return (_NT_PRODUCT_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 SuiteMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 SharedUserSessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Byte IsMultiSessionSku{ get { return _StructureData[_BufferOffset +28]; } }
		public UInt16[] NtSystemRoot
		{
			get
			{
				UInt16[] returnValue = new UInt16[260];
				for(int i=0; i<260; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 30);
				return returnValue;
			}
		}
		public UInt16[] UserModeGlobalLogger
		{
			get
			{
				UInt16[] returnValue = new UInt16[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 550);
				return returnValue;
			}
		}
	}
	#endregion
	#region _POP_FX_COMPONENT_FLAGS
 
	public class _POP_FX_COMPONENT_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_COMPONENT_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_COMPONENT_FLAGS"": [ 8, {
				 ""Value"": [ 0, [ ""Int32"", ""null"" ]],
				 ""Value2"": [ 4, [ ""Int32"", ""null"" ]],
				 ""RefCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Idling"": [ 0, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]],
				 ""Active"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""CriticalIdleOverride"": [ 4, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ResidentOverride"": [ 4, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 4, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 Value { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 Value2 { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 RefCount
		{
			get
			{
				// start: 0  end: 30  Mask: 111111111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1073741823) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Idling
		{
			get
			{
				// start: 30  end: 31  Mask: 1000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1073741824) >> 30;
				return (UInt32)value2;
			}
		}
		public UInt32 Active
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public UInt32 CriticalIdleOverride
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ResidentOverride
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 2  end: 32  Mask: 11111111111111111111111111111100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4294967292) >> 2;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _POP_FX_PERF_FLAGS
 
	public class _POP_FX_PERF_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_PERF_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_PERF_FLAGS"": [ 4, {
				 ""Value"": [ 0, [ ""Int32"", ""null"" ]],
				 ""Progress"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""Synchronicity"": [ 0, [ ""BitField"", ""{\""end_bit\"":29,\""start_bit\"":27,\""target\"":\""UInt32\""}"" ]],
				 ""RequestPepCompleted"": [ 0, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":29,\""target\"":\""UInt32\""}"" ]],
				 ""RequestSucceeded"": [ 0, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]],
				 ""NestedCallback"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 Value { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Progress
		{
			get
			{
				// start: 0  end: 3  Mask: 0000000000000111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 7) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 3  end: 27  Mask: 111111111111111111111111000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 134217720) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 Synchronicity
		{
			get
			{
				// start: 27  end: 29  Mask: 11000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 402653184) >> 27;
				return (UInt32)value2;
			}
		}
		public UInt32 RequestPepCompleted
		{
			get
			{
				// start: 29  end: 30  Mask: 100000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 536870912) >> 29;
				return (UInt32)value2;
			}
		}
		public UInt32 RequestSucceeded
		{
			get
			{
				// start: 30  end: 31  Mask: 1000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1073741824) >> 30;
				return (UInt32)value2;
			}
		}
		public UInt32 NestedCallback
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _POP_FX_DEVICE_STATUS
 
	public class _POP_FX_DEVICE_STATUS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_DEVICE_STATUS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_DEVICE_STATUS"": [ 4, {
				 ""Value"": [ 0, [ ""Int32"", ""null"" ]],
				 ""SystemTransition"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""PepD0Notify"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""IdleTimerOn"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""IgnoreIdleTimeout"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""IrpInUse"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""IrpPending"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""DPNRDeviceNotified"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""DPNRReceivedFromPep"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""IrpFirstPendingIndex"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""IrpLastPendingIndex"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""SIrpBlocked"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""BlockFastResume"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""DirectedPoweredDown"": [ 0, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""DirectedTransitionInProgress"": [ 0, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 Value { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SystemTransition
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 PepD0Notify
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 IdleTimerOn
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 IgnoreIdleTimeout
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 IrpInUse
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 IrpPending
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 DPNRDeviceNotified
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 DPNRReceivedFromPep
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 IrpFirstPendingIndex
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 IrpLastPendingIndex
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 SIrpBlocked
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 BlockFastResume
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 DirectedPoweredDown
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 DirectedTransitionInProgress
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 14  end: 32  Mask: 11111111111111111100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294950912) >> 14;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _POP_RW_LOCK
 
	public class _POP_RW_LOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_RW_LOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_RW_LOCK"": [ 16, {
				 ""Lock"": [ 0, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""Thread"": [ 8, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]] }]
				 }
				)";
			}
		}
		public _EX_PUSH_LOCK Lock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _VOLUME_CACHE_MAP
 
	public class _VOLUME_CACHE_MAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VOLUME_CACHE_MAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 208; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VOLUME_CACHE_MAP"": [ 208, {
				 ""NodeTypeCode"": [ 0, [ ""Int16"", ""null"" ]],
				 ""NodeByteCode"": [ 2, [ ""Int16"", ""null"" ]],
				 ""UseCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DeviceObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""VolumeCacheMapLinks"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DirtyPages"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""LogHandleContext"": [ 40, [ ""_LOG_HANDLE_CONTEXT"", ""null"" ]],
				 ""Flags"": [ 192, [ ""UInt32"", ""null"" ]],
				 ""PagesQueuedToDisk"": [ 196, [ ""UInt32"", ""null"" ]],
				 ""LoggedPagesQueuedToDisk"": [ 200, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int16 NodeTypeCode { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 NodeByteCode { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 UseCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY VolumeCacheMapLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 DirtyPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _LOG_HANDLE_CONTEXT LogHandleContext
		{
			get
			{
				_LOG_HANDLE_CONTEXT returnValue = new _LOG_HANDLE_CONTEXT(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public UInt32 PagesQueuedToDisk { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 196); } }
		public UInt32 LoggedPagesQueuedToDisk { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 200); } }
	}
	#endregion
	#region _SHARED_CACHE_MAP
 
	public class _SHARED_CACHE_MAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SHARED_CACHE_MAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 552; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SHARED_CACHE_MAP"": [ 552, {
				 ""NodeTypeCode"": [ 0, [ ""Int16"", ""null"" ]],
				 ""NodeByteSize"": [ 2, [ ""Int16"", ""null"" ]],
				 ""OpenCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""FileSize"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""BcbList"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SectionSize"": [ 32, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ValidDataLength"": [ 40, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ValidDataGoal"": [ 48, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""InitialVacbs"": [ 56, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_VACB\""}}"" ]],
				 ""Vacbs"": [ 88, [ ""Pointer"", ""{\""target\"":\""_VACB*\""}"" ]],
				 ""FileObjectFastRef"": [ 96, [ ""_EX_FAST_REF"", ""null"" ]],
				 ""VacbLock"": [ 104, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""DirtyPages"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""LoggedStreamLinks"": [ 120, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SharedCacheMapLinks"": [ 136, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Flags"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""Status"": [ 156, [ ""Int32"", ""null"" ]],
				 ""Mbcb"": [ 160, [ ""Pointer"", ""{\""target\"":\""_MBCB\""}"" ]],
				 ""Section"": [ 168, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CreateEvent"": [ 176, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""WaitOnActiveCount"": [ 184, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""PagesToWrite"": [ 192, [ ""UInt32"", ""null"" ]],
				 ""BeyondLastFlush"": [ 200, [ ""Int64"", ""null"" ]],
				 ""Callbacks"": [ 208, [ ""Pointer"", ""{\""target\"":\""_CACHE_MANAGER_CALLBACKS\""}"" ]],
				 ""LazyWriteContext"": [ 216, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PrivateList"": [ 224, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""V1"": [ 240, [ ""_LOGGED_STREAM_CALLBACK_V1"", ""null"" ]],
				 ""V2"": [ 240, [ ""_LOGGED_STREAM_CALLBACK_V2"", ""null"" ]],
				 ""LargestLSN"": [ 256, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""DirtyPageThreshold"": [ 264, [ ""UInt32"", ""null"" ]],
				 ""LazyWritePassCount"": [ 268, [ ""UInt32"", ""null"" ]],
				 ""UninitializeEvent"": [ 272, [ ""Pointer"", ""{\""target\"":\""_CACHE_UNINITIALIZE_EVENT\""}"" ]],
				 ""BcbLock"": [ 280, [ ""_FAST_MUTEX"", ""null"" ]],
				 ""LastUnmapBehindOffset"": [ 336, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Event"": [ 344, [ ""_KEVENT"", ""null"" ]],
				 ""HighWaterMappingOffset"": [ 368, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""PrivateCacheMap"": [ 376, [ ""_PRIVATE_CACHE_MAP"", ""null"" ]],
				 ""WriteBehindWorkQueueEntry"": [ 496, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VolumeCacheMap"": [ 504, [ ""Pointer"", ""{\""target\"":\""_VOLUME_CACHE_MAP\""}"" ]],
				 ""ProcImagePathHash"": [ 512, [ ""UInt32"", ""null"" ]],
				 ""WritesInProgress"": [ 516, [ ""UInt32"", ""null"" ]],
				 ""AsyncReadRequestCount"": [ 520, [ ""UInt32"", ""null"" ]],
				 ""Partition"": [ 528, [ ""Pointer"", ""{\""target\"":\""_CC_PARTITION\""}"" ]],
				 ""InternalRefCount"": [ 536, [ ""UInt32"", ""null"" ]],
				 ""NumMappedVacb"": [ 540, [ ""UInt32"", ""null"" ]],
				 ""NumActiveVacb"": [ 544, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int16 NodeTypeCode { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 NodeByteSize { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 OpenCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LARGE_INTEGER FileSize
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _LIST_ENTRY BcbList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LARGE_INTEGER SectionSize
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ValidDataLength
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ValidDataGoal
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _VACB[] InitialVacbs
		{
			get
			{
				_VACB[] returnValue = new _VACB[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new _VACB(_StructureData, (i * size) + _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt64 Vacbs { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public _EX_FAST_REF FileObjectFastRef
		{
			get
			{
				_EX_FAST_REF returnValue = new _EX_FAST_REF(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK VacbLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt32 DirtyPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public _LIST_ENTRY LoggedStreamLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
		public _LIST_ENTRY SharedCacheMapLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 156); } }
		public UInt64 Mbcb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 Section { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 CreateEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 WaitOnActiveCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public UInt32 PagesToWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public Int64 BeyondLastFlush { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 Callbacks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 LazyWriteContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public _LIST_ENTRY PrivateList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 224);
				return returnValue;
			}
		}
		public _LOGGED_STREAM_CALLBACK_V1 V1
		{
			get
			{
				_LOGGED_STREAM_CALLBACK_V1 returnValue = new _LOGGED_STREAM_CALLBACK_V1(_StructureData, _BufferOffset + 240);
				return returnValue;
			}
		}
		public _LOGGED_STREAM_CALLBACK_V2 V2
		{
			get
			{
				_LOGGED_STREAM_CALLBACK_V2 returnValue = new _LOGGED_STREAM_CALLBACK_V2(_StructureData, _BufferOffset + 240);
				return returnValue;
			}
		}
		public _LARGE_INTEGER LargestLSN
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
		public UInt32 DirtyPageThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 264); } }
		public UInt32 LazyWritePassCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 268); } }
		public UInt64 UninitializeEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public _FAST_MUTEX BcbLock
		{
			get
			{
				_FAST_MUTEX returnValue = new _FAST_MUTEX(_StructureData, _BufferOffset + 280);
				return returnValue;
			}
		}
		public _LARGE_INTEGER LastUnmapBehindOffset
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 336);
				return returnValue;
			}
		}
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 344);
				return returnValue;
			}
		}
		public _LARGE_INTEGER HighWaterMappingOffset
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 368);
				return returnValue;
			}
		}
		public _PRIVATE_CACHE_MAP PrivateCacheMap
		{
			get
			{
				_PRIVATE_CACHE_MAP returnValue = new _PRIVATE_CACHE_MAP(_StructureData, _BufferOffset + 376);
				return returnValue;
			}
		}
		public UInt64 WriteBehindWorkQueueEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 496); } }
		public UInt64 VolumeCacheMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 504); } }
		public UInt32 ProcImagePathHash { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 512); } }
		public UInt32 WritesInProgress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 516); } }
		public UInt32 AsyncReadRequestCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 520); } }
		public UInt64 Partition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 528); } }
		public UInt32 InternalRefCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 536); } }
		public UInt32 NumMappedVacb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 540); } }
		public UInt32 NumActiveVacb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 544); } }
	}
	#endregion
	#region _VACB
 
	public class _VACB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VACB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VACB"": [ 40, {
				 ""BaseAddress"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SharedCacheMap"": [ 8, [ ""Pointer"", ""{\""target\"":\""_SHARED_CACHE_MAP\""}"" ]],
				 ""Overlay"": [ 16, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""ArrayHead"": [ 32, [ ""Pointer"", ""{\""target\"":\""_VACB_ARRAY_HEADER\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 BaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 SharedCacheMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _ANONYMOUS_TAG Overlay
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 ArrayHead { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _CC_PARTITION
 
	public class _CC_PARTITION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CC_PARTITION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1088; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CC_PARTITION"": [ 1088, {
				 ""NodeTypeCode"": [ 0, [ ""Int16"", ""null"" ]],
				 ""NodeByteSize"": [ 2, [ ""Int16"", ""null"" ]],
				 ""PartitionObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""_EPARTITION\""}"" ]],
				 ""CleanSharedCacheMapList"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CleanSharedCacheMapWithLogHandleList"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DirtySharedCacheMapList"": [ 48, [ ""_SHARED_CACHE_MAP_LIST_CURSOR"", ""null"" ]],
				 ""LazyWriteCursor"": [ 72, [ ""_SHARED_CACHE_MAP_LIST_CURSOR"", ""null"" ]],
				 ""DirtySharedCacheMapWithLogHandleList"": [ 96, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PrivateLock"": [ 128, [ ""UInt64"", ""null"" ]],
				 ""ConsecutiveWorklessLazyScanCount"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""ForcedDisableLazywriteScan"": [ 140, [ ""Byte"", ""null"" ]],
				 ""WorkQueueLock"": [ 192, [ ""UInt64"", ""null"" ]],
				 ""NumberWorkerThreads"": [ 200, [ ""UInt32"", ""null"" ]],
				 ""NumberActiveWorkerThreads"": [ 204, [ ""UInt32"", ""null"" ]],
				 ""IdleWorkerThreadList"": [ 208, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FastTeardownWorkQueue"": [ 224, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ExpressWorkQueue"": [ 240, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""RegularWorkQueue"": [ 256, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PostTickWorkQueue"": [ 272, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CleanCachemapUninitWorkQueue"": [ 288, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""IdleExtraWriteBehindThreadList"": [ 304, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ActiveExtraWriteBehindThreads"": [ 320, [ ""UInt32"", ""null"" ]],
				 ""MaxExtraWriteBehindThreads"": [ 324, [ ""UInt32"", ""null"" ]],
				 ""IdleCacheMapUninitThreadList"": [ 328, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ActiveCacheMapUninitThreads"": [ 344, [ ""UInt32"", ""null"" ]],
				 ""MaxCacheMapUninitThreads"": [ 348, [ ""UInt32"", ""null"" ]],
				 ""QueueThrottle"": [ 352, [ ""Byte"", ""null"" ]],
				 ""PostTickWorkItemCount"": [ 356, [ ""UInt32"", ""null"" ]],
				 ""ThreadsActiveBeforeThrottle"": [ 360, [ ""UInt32"", ""null"" ]],
				 ""ExtraWBThreadsActiveBeforeThrottle"": [ 364, [ ""UInt32"", ""null"" ]],
				 ""ExecutingWriteBehindWorkItems"": [ 368, [ ""UInt32"", ""null"" ]],
				 ""ExecutingHighPriorityWorkItem"": [ 372, [ ""UInt32"", ""null"" ]],
				 ""LowMemoryEvent"": [ 376, [ ""_KEVENT"", ""null"" ]],
				 ""PowerEvent"": [ 400, [ ""_KEVENT"", ""null"" ]],
				 ""PeriodicEvent"": [ 424, [ ""_KEVENT"", ""null"" ]],
				 ""WaitingForTeardownEvent"": [ 448, [ ""_KEVENT"", ""null"" ]],
				 ""CoalescingFlushEvent"": [ 472, [ ""_KEVENT"", ""null"" ]],
				 ""PagesYetToWrite"": [ 496, [ ""UInt32"", ""null"" ]],
				 ""LazyWriter"": [ 504, [ ""_LAZY_WRITER"", ""null"" ]],
				 ""DirtyPageStatistics"": [ 640, [ ""_DIRTY_PAGE_STATISTICS"", ""null"" ]],
				 ""DirtyPageThresholds"": [ 664, [ ""_DIRTY_PAGE_THRESHOLDS"", ""null"" ]],
				 ""ThroughputStats"": [ 720, [ ""Pointer"", ""{\""target\"":\""_WRITE_BEHIND_THROUGHPUT\""}"" ]],
				 ""ThroughputTrend"": [ 728, [ ""Int32"", ""null"" ]],
				 ""AverageAvailablePages"": [ 736, [ ""UInt64"", ""null"" ]],
				 ""AverageDirtyPages"": [ 744, [ ""UInt64"", ""null"" ]],
				 ""PagesSkippedDueToHotSpot"": [ 752, [ ""UInt64"", ""null"" ]],
				 ""PrevRegularQueueItemRunTime"": [ 760, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""PrevExtraWBThreadCheckTime"": [ 768, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""AddExtraWriteBehindThreads"": [ 776, [ ""Byte"", ""null"" ]],
				 ""RemoveExtraThreadPending"": [ 777, [ ""Byte"", ""null"" ]],
				 ""DeferredWrites"": [ 784, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeferredWriteSpinLock"": [ 832, [ ""UInt64"", ""null"" ]],
				 ""IdleAsyncReadWorkerThreadList"": [ 840, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""NumberActiveAsyncReadWorkerThreads"": [ 848, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""NumberActiveCompleteAsyncReadWorkItems"": [ 856, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""AsyncReadWorkQueue"": [ 864, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""AsyncReadCompletionWorkQueue"": [ 872, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""NewAsyncReadRequestEvent"": [ 880, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""ReaderThreadsStats"": [ 888, [ ""Pointer"", ""{\""target\"":\""_ASYNC_READ_THREAD_STATS\""}"" ]],
				 ""AsyncReadWorkQueueLock"": [ 896, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""VacbFreeHighPriorityList"": [ 904, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""NumberOfFreeHighPriorityVacbs"": [ 920, [ ""UInt32"", ""null"" ]],
				 ""LowPriWorkerThread"": [ 928, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""LowPriSharedCacheMap"": [ 936, [ ""Pointer"", ""{\""target\"":\""_SHARED_CACHE_MAP\""}"" ]],
				 ""LowPriOldCpuPriority"": [ 944, [ ""Int32"", ""null"" ]],
				 ""LowPriOldIoPriority"": [ 948, [ ""Enumeration"", ""{\""enum_name\"":\""_IO_PRIORITY_HINT\"",\""target\"":\""UInt32\""}"" ]],
				 ""LowPriorityWorkerThreadLock"": [ 952, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""MaxNumberOfWriteBehindThreads"": [ 960, [ ""UInt32"", ""null"" ]],
				 ""CoalescingState"": [ 964, [ ""Byte"", ""null"" ]],
				 ""ActivePartition"": [ 965, [ ""Byte"", ""null"" ]],
				 ""RundownPhase"": [ 966, [ ""Byte"", ""null"" ]],
				 ""RefCount"": [ 968, [ ""Int64"", ""null"" ]],
				 ""ExitEvent"": [ 976, [ ""_KEVENT"", ""null"" ]],
				 ""FinalDereferenceEvent"": [ 1000, [ ""_KEVENT"", ""null"" ]],
				 ""LazyWriteScanThreadHandle"": [ 1024, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 NodeTypeCode { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 NodeByteSize { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 PartitionObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY CleanSharedCacheMapList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LIST_ENTRY CleanSharedCacheMapWithLogHandleList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _SHARED_CACHE_MAP_LIST_CURSOR DirtySharedCacheMapList
		{
			get
			{
				_SHARED_CACHE_MAP_LIST_CURSOR returnValue = new _SHARED_CACHE_MAP_LIST_CURSOR(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _SHARED_CACHE_MAP_LIST_CURSOR LazyWriteCursor
		{
			get
			{
				_SHARED_CACHE_MAP_LIST_CURSOR returnValue = new _SHARED_CACHE_MAP_LIST_CURSOR(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _LIST_ENTRY DirtySharedCacheMapWithLogHandleList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt64 PrivateLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt32 ConsecutiveWorklessLazyScanCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public Byte ForcedDisableLazywriteScan{ get { return _StructureData[_BufferOffset +140]; } }
		public UInt64 WorkQueueLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt32 NumberWorkerThreads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 200); } }
		public UInt32 NumberActiveWorkerThreads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 204); } }
		public _LIST_ENTRY IdleWorkerThreadList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 208);
				return returnValue;
			}
		}
		public _LIST_ENTRY FastTeardownWorkQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 224);
				return returnValue;
			}
		}
		public _LIST_ENTRY ExpressWorkQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 240);
				return returnValue;
			}
		}
		public _LIST_ENTRY RegularWorkQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
		public _LIST_ENTRY PostTickWorkQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 272);
				return returnValue;
			}
		}
		public _LIST_ENTRY CleanCachemapUninitWorkQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 288);
				return returnValue;
			}
		}
		public _LIST_ENTRY IdleExtraWriteBehindThreadList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 304);
				return returnValue;
			}
		}
		public UInt32 ActiveExtraWriteBehindThreads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 320); } }
		public UInt32 MaxExtraWriteBehindThreads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 324); } }
		public _LIST_ENTRY IdleCacheMapUninitThreadList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 328);
				return returnValue;
			}
		}
		public UInt32 ActiveCacheMapUninitThreads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 344); } }
		public UInt32 MaxCacheMapUninitThreads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 348); } }
		public Byte QueueThrottle{ get { return _StructureData[_BufferOffset +352]; } }
		public UInt32 PostTickWorkItemCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 356); } }
		public UInt32 ThreadsActiveBeforeThrottle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 360); } }
		public UInt32 ExtraWBThreadsActiveBeforeThrottle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 364); } }
		public UInt32 ExecutingWriteBehindWorkItems { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 368); } }
		public UInt32 ExecutingHighPriorityWorkItem { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 372); } }
		public _KEVENT LowMemoryEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 376);
				return returnValue;
			}
		}
		public _KEVENT PowerEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 400);
				return returnValue;
			}
		}
		public _KEVENT PeriodicEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 424);
				return returnValue;
			}
		}
		public _KEVENT WaitingForTeardownEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 448);
				return returnValue;
			}
		}
		public _KEVENT CoalescingFlushEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 472);
				return returnValue;
			}
		}
		public UInt32 PagesYetToWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 496); } }
		public _LAZY_WRITER LazyWriter
		{
			get
			{
				_LAZY_WRITER returnValue = new _LAZY_WRITER(_StructureData, _BufferOffset + 504);
				return returnValue;
			}
		}
		public _DIRTY_PAGE_STATISTICS DirtyPageStatistics
		{
			get
			{
				_DIRTY_PAGE_STATISTICS returnValue = new _DIRTY_PAGE_STATISTICS(_StructureData, _BufferOffset + 640);
				return returnValue;
			}
		}
		public _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds
		{
			get
			{
				_DIRTY_PAGE_THRESHOLDS returnValue = new _DIRTY_PAGE_THRESHOLDS(_StructureData, _BufferOffset + 664);
				return returnValue;
			}
		}
		public UInt64 ThroughputStats { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 720); } }
		public Int32 ThroughputTrend { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 728); } }
		public UInt64 AverageAvailablePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 736); } }
		public UInt64 AverageDirtyPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 744); } }
		public UInt64 PagesSkippedDueToHotSpot { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 752); } }
		public _LARGE_INTEGER PrevRegularQueueItemRunTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 760);
				return returnValue;
			}
		}
		public _LARGE_INTEGER PrevExtraWBThreadCheckTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 768);
				return returnValue;
			}
		}
		public Byte AddExtraWriteBehindThreads{ get { return _StructureData[_BufferOffset +776]; } }
		public Byte RemoveExtraThreadPending{ get { return _StructureData[_BufferOffset +777]; } }
		public _LIST_ENTRY DeferredWrites
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 784);
				return returnValue;
			}
		}
		public UInt64 DeferredWriteSpinLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 832); } }
		public UInt64 IdleAsyncReadWorkerThreadList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 840); } }
		public UInt64 NumberActiveAsyncReadWorkerThreads { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 848); } }
		public UInt64 NumberActiveCompleteAsyncReadWorkItems { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 856); } }
		public UInt64 AsyncReadWorkQueue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 864); } }
		public UInt64 AsyncReadCompletionWorkQueue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 872); } }
		public UInt64 NewAsyncReadRequestEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 880); } }
		public UInt64 ReaderThreadsStats { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 888); } }
		public _EX_PUSH_LOCK AsyncReadWorkQueueLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 896);
				return returnValue;
			}
		}
		public _LIST_ENTRY VacbFreeHighPriorityList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 904);
				return returnValue;
			}
		}
		public UInt32 NumberOfFreeHighPriorityVacbs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 920); } }
		public UInt64 LowPriWorkerThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 928); } }
		public UInt64 LowPriSharedCacheMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 936); } }
		public Int32 LowPriOldCpuPriority { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 944); } }
		public _IO_PRIORITY_HINT LowPriOldIoPriority { get { return (_IO_PRIORITY_HINT)BitConverter.ToUInt32(_StructureData, _BufferOffset + 948); } }
		public _EX_PUSH_LOCK LowPriorityWorkerThreadLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 952);
				return returnValue;
			}
		}
		public UInt32 MaxNumberOfWriteBehindThreads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 960); } }
		public Byte CoalescingState{ get { return _StructureData[_BufferOffset +964]; } }
		public Byte ActivePartition{ get { return _StructureData[_BufferOffset +965]; } }
		public Byte RundownPhase{ get { return _StructureData[_BufferOffset +966]; } }
		public Int64 RefCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 968); } }
		public _KEVENT ExitEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 976);
				return returnValue;
			}
		}
		public _KEVENT FinalDereferenceEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 1000);
				return returnValue;
			}
		}
		public UInt64 LazyWriteScanThreadHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1024); } }
	}
	#endregion
	#region _WORK_QUEUE_ENTRY
 
	public class _WORK_QUEUE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WORK_QUEUE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 136; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WORK_QUEUE_ENTRY"": [ 136, {
				 ""WorkQueueLinks"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Parameters"": [ 16, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""Function"": [ 120, [ ""Byte"", ""null"" ]],
				 ""Partition"": [ 128, [ ""Pointer"", ""{\""target\"":\""_CC_PARTITION\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY WorkQueueLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG Parameters
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public Byte Function{ get { return _StructureData[_BufferOffset +120]; } }
		public UInt64 Partition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
	}
	#endregion
	#region _DEFERRED_WRITE
 
	public class _DEFERRED_WRITE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEFERRED_WRITE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEFERRED_WRITE"": [ 96, {
				 ""NodeTypeCode"": [ 0, [ ""Int16"", ""null"" ]],
				 ""NodeByteSize"": [ 2, [ ""Int16"", ""null"" ]],
				 ""FileObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""BytesToWrite"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""DeferredWriteLinks"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Event"": [ 40, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""PostRoutine"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Context1"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Context2"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Partition"": [ 72, [ ""Pointer"", ""{\""target\"":\""_CC_PARTITION\""}"" ]],
				 ""SoftThrottle"": [ 80, [ ""Byte"", ""null"" ]],
				 ""TimeAdded"": [ 88, [ ""_LARGE_INTEGER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int16 NodeTypeCode { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 NodeByteSize { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 FileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 BytesToWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _LIST_ENTRY DeferredWriteLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 Event { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 PostRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Context1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 Context2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 Partition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public Byte SoftThrottle{ get { return _StructureData[_BufferOffset +80]; } }
		public _LARGE_INTEGER TimeAdded
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CC_EXTERNAL_CACHE_INFO
 
	public class _CC_EXTERNAL_CACHE_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CC_EXTERNAL_CACHE_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CC_EXTERNAL_CACHE_INFO"": [ 48, {
				 ""Callback"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DirtyPageStatistics"": [ 8, [ ""_DIRTY_PAGE_STATISTICS"", ""null"" ]],
				 ""Links"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Callback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _DIRTY_PAGE_STATISTICS DirtyPageStatistics
		{
			get
			{
				_DIRTY_PAGE_STATISTICS returnValue = new _DIRTY_PAGE_STATISTICS(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _LIST_ENTRY Links
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region VACB_LEVEL_ALLOCATION_LIST
 
	public class VACB_LEVEL_ALLOCATION_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public VACB_LEVEL_ALLOCATION_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""VACB_LEVEL_ALLOCATION_LIST"": [ 32, {
				 ""VacbLevelList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""VacbLevelWithBcbListHeads"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VacbLevelsAllocated"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY VacbLevelList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 VacbLevelWithBcbListHeads { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 VacbLevelsAllocated { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _VACB_LEVEL_REFERENCE
 
	public class _VACB_LEVEL_REFERENCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VACB_LEVEL_REFERENCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VACB_LEVEL_REFERENCE"": [ 8, {
				 ""Reference"": [ 0, [ ""Int32"", ""null"" ]],
				 ""SpecialReference"": [ 4, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 Reference { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 SpecialReference { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _LOG_HANDLE_CONTEXT
 
	public class _LOG_HANDLE_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LOG_HANDLE_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 152; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LOG_HANDLE_CONTEXT"": [ 152, {
				 ""LogHandle"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FlushToLsnRoutine"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""QueryLogHandleInfoRoutine"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DirtyPageStatistics"": [ 24, [ ""_DIRTY_PAGE_STATISTICS"", ""null"" ]],
				 ""DirtyPageThresholds"": [ 48, [ ""_DIRTY_PAGE_THRESHOLDS"", ""null"" ]],
				 ""AdditionalPagesToWrite"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""CcLWScanDPThreshold"": [ 108, [ ""UInt32"", ""null"" ]],
				 ""LargestLsnForCurrentLWScan"": [ 112, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""RelatedFileObject"": [ 120, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""LargestLsnFileObjectKey"": [ 128, [ ""UInt64"", ""null"" ]],
				 ""LastLWTimeStamp"": [ 136, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Flags"": [ 144, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 LogHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 FlushToLsnRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 QueryLogHandleInfoRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _DIRTY_PAGE_STATISTICS DirtyPageStatistics
		{
			get
			{
				_DIRTY_PAGE_STATISTICS returnValue = new _DIRTY_PAGE_STATISTICS(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _DIRTY_PAGE_THRESHOLDS DirtyPageThresholds
		{
			get
			{
				_DIRTY_PAGE_THRESHOLDS returnValue = new _DIRTY_PAGE_THRESHOLDS(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 AdditionalPagesToWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 CcLWScanDPThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public _LARGE_INTEGER LargestLsnForCurrentLWScan
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt64 RelatedFileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 LargestLsnFileObjectKey { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public _LARGE_INTEGER LastLWTimeStamp
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
	}
	#endregion
	#region _MBCB
 
	public class _MBCB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MBCB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 192; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MBCB"": [ 192, {
				 ""NodeTypeCode"": [ 0, [ ""Int16"", ""null"" ]],
				 ""NodeIsInZone"": [ 2, [ ""Int16"", ""null"" ]],
				 ""PagesToWrite"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DirtyPages"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""BitmapRanges"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ResumeWritePage"": [ 32, [ ""Int64"", ""null"" ]],
				 ""MostRecentlyDirtiedPage"": [ 40, [ ""Int64"", ""null"" ]],
				 ""BitmapRange1"": [ 48, [ ""_BITMAP_RANGE"", ""null"" ]],
				 ""BitmapRange2"": [ 96, [ ""_BITMAP_RANGE"", ""null"" ]],
				 ""BitmapRange3"": [ 144, [ ""_BITMAP_RANGE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int16 NodeTypeCode { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 NodeIsInZone { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 PagesToWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DirtyPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _LIST_ENTRY BitmapRanges
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public Int64 ResumeWritePage { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 32); } }
		public Int64 MostRecentlyDirtiedPage { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 40); } }
		public _BITMAP_RANGE BitmapRange1
		{
			get
			{
				_BITMAP_RANGE returnValue = new _BITMAP_RANGE(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _BITMAP_RANGE BitmapRange2
		{
			get
			{
				_BITMAP_RANGE returnValue = new _BITMAP_RANGE(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public _BITMAP_RANGE BitmapRange3
		{
			get
			{
				_BITMAP_RANGE returnValue = new _BITMAP_RANGE(_StructureData, _BufferOffset + 144);
				return returnValue;
			}
		}
	}
	#endregion
	#region _BITMAP_RANGE
 
	public class _BITMAP_RANGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _BITMAP_RANGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_BITMAP_RANGE"": [ 48, {
				 ""Links"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""BasePage"": [ 16, [ ""Int64"", ""null"" ]],
				 ""FirstDirtyPage"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""LastDirtyPage"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""DirtyPages"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Bitmap"": [ 40, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Links
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int64 BasePage { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 FirstDirtyPage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 LastDirtyPage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 DirtyPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 Bitmap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _SHARED_CACHE_MAP_LIST_CURSOR
 
	public class _SHARED_CACHE_MAP_LIST_CURSOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SHARED_CACHE_MAP_LIST_CURSOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SHARED_CACHE_MAP_LIST_CURSOR"": [ 24, {
				 ""SharedCacheMapLinks"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Flags"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY SharedCacheMapLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _LAZY_WRITER
 
	public class _LAZY_WRITER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LAZY_WRITER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 136; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LAZY_WRITER"": [ 136, {
				 ""ScanDpc"": [ 0, [ ""_KDPC"", ""null"" ]],
				 ""ScanTimer"": [ 64, [ ""_KTIMER"", ""null"" ]],
				 ""ScanActive"": [ 128, [ ""Byte"", ""null"" ]],
				 ""OtherWork"": [ 129, [ ""Byte"", ""null"" ]],
				 ""PendingTeardownScan"": [ 130, [ ""Byte"", ""null"" ]],
				 ""PendingPeriodicScan"": [ 131, [ ""Byte"", ""null"" ]],
				 ""PendingLowMemoryScan"": [ 132, [ ""Byte"", ""null"" ]],
				 ""PendingPowerScan"": [ 133, [ ""Byte"", ""null"" ]],
				 ""PendingCoalescingFlushScan"": [ 134, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KDPC ScanDpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _KTIMER ScanTimer
		{
			get
			{
				_KTIMER returnValue = new _KTIMER(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public Byte ScanActive{ get { return _StructureData[_BufferOffset +128]; } }
		public Byte OtherWork{ get { return _StructureData[_BufferOffset +129]; } }
		public Byte PendingTeardownScan{ get { return _StructureData[_BufferOffset +130]; } }
		public Byte PendingPeriodicScan{ get { return _StructureData[_BufferOffset +131]; } }
		public Byte PendingLowMemoryScan{ get { return _StructureData[_BufferOffset +132]; } }
		public Byte PendingPowerScan{ get { return _StructureData[_BufferOffset +133]; } }
		public Byte PendingCoalescingFlushScan{ get { return _StructureData[_BufferOffset +134]; } }
	}
	#endregion
	#region _CACHE_UNINITIALIZE_EVENT
 
	public class _CACHE_UNINITIALIZE_EVENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CACHE_UNINITIALIZE_EVENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CACHE_UNINITIALIZE_EVENT"": [ 32, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_CACHE_UNINITIALIZE_EVENT\""}"" ]],
				 ""Event"": [ 8, [ ""_KEVENT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_SUBALLOCATOR_CALLBACKS
 
	public class _HEAP_SUBALLOCATOR_CALLBACKS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_SUBALLOCATOR_CALLBACKS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_SUBALLOCATOR_CALLBACKS"": [ 40, {
				 ""Allocate"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Free"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Commit"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""Decommit"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""ExtendContext"": [ 32, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Allocate { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Free { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Commit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Decommit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ExtendContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _SEGMENT_HEAP_EXTRA
 
	public class _SEGMENT_HEAP_EXTRA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEGMENT_HEAP_EXTRA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEGMENT_HEAP_EXTRA"": [ 16, {
				 ""AllocationTag"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""InterceptorIndex"": [ 2, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""UserFlags"": [ 2, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""ExtraSizeInUnits"": [ 3, [ ""Byte"", ""null"" ]],
				 ""Settable"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 AllocationTag { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte InterceptorIndex
		{
			get
			{
				// start: 0  end: 4  Mask: 0000000000001111
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 15) >> 0;
				return (Byte)value2;
			}
		}
		public Byte UserFlags
		{
			get
			{
				// start: 4  end: 8  Mask: 0000000011110000
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 240) >> 4;
				return (Byte)value2;
			}
		}
		public Byte ExtraSizeInUnits{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt64 Settable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _RTL_CSPARSE_BITMAP
 
	public class _RTL_CSPARSE_BITMAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_CSPARSE_BITMAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_CSPARSE_BITMAP"": [ 64, {
				 ""CommitBitmap"": [ 0, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]],
				 ""UserBitmap"": [ 8, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]],
				 ""BitCount"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""BitmapLock"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""DecommitPageIndex"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""RtlpCSparseBitmapWakeLock"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""LockType"": [ 48, [ ""Byte"", ""null"" ]],
				 ""AddressSpace"": [ 49, [ ""Byte"", ""null"" ]],
				 ""MemType"": [ 50, [ ""Byte"", ""null"" ]],
				 ""AllocAlignment"": [ 51, [ ""Byte"", ""null"" ]],
				 ""CommitDirectoryMaxSize"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""CommitDirectory"": [ 56, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 CommitBitmap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 UserBitmap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 BitCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 BitmapLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 DecommitPageIndex { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 RtlpCSparseBitmapWakeLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public Byte LockType{ get { return _StructureData[_BufferOffset +48]; } }
		public Byte AddressSpace{ get { return _StructureData[_BufferOffset +49]; } }
		public Byte MemType{ get { return _StructureData[_BufferOffset +50]; } }
		public Byte AllocAlignment{ get { return _StructureData[_BufferOffset +51]; } }
		public UInt32 CommitDirectoryMaxSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt64[] CommitDirectory
		{
			get
			{
				UInt64[] returnValue = new UInt64[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 56);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_SPARSE_ARRAY
 
	public class _RTL_SPARSE_ARRAY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_SPARSE_ARRAY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_SPARSE_ARRAY"": [ 80, {
				 ""ElementCount"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""ElementSizeShift"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Bitmap"": [ 16, [ ""_RTL_CSPARSE_BITMAP"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ElementCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 ElementSizeShift { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _RTL_CSPARSE_BITMAP Bitmap
		{
			get
			{
				_RTL_CSPARSE_BITMAP returnValue = new _RTL_CSPARSE_BITMAP(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_VAMGR_ALLOCATOR
 
	public class _HEAP_VAMGR_ALLOCATOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_VAMGR_ALLOCATOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_VAMGR_ALLOCATOR"": [ 48, {
				 ""TreeLock"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""FreeRanges"": [ 8, [ ""_RTL_RB_TREE"", ""null"" ]],
				 ""VaSpace"": [ 24, [ ""Pointer"", ""{\""target\"":\""_HEAP_VAMGR_VASPACE\""}"" ]],
				 ""PartitionHandle"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ChunksPerRegion"": [ 40, [ ""UInt16"", ""null"" ]],
				 ""RefCount"": [ 42, [ ""UInt16"", ""null"" ]],
				 ""AllocatorIndex"": [ 44, [ ""Byte"", ""null"" ]],
				 ""NumaNode"": [ 45, [ ""Byte"", ""null"" ]],
				 ""LockType"": [ 46, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""MemoryType"": [ 46, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""ConstrainedVA"": [ 46, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""AllowFreeHead"": [ 46, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""Spare0"": [ 46, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""Spare1"": [ 47, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 TreeLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _RTL_RB_TREE FreeRanges
		{
			get
			{
				_RTL_RB_TREE returnValue = new _RTL_RB_TREE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 VaSpace { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 PartitionHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt16 ChunksPerRegion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 40); } }
		public UInt16 RefCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 42); } }
		public Byte AllocatorIndex{ get { return _StructureData[_BufferOffset +44]; } }
		public Byte NumaNode{ get { return _StructureData[_BufferOffset +45]; } }
		public Byte LockType
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 46];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte MemoryType
		{
			get
			{
				// start: 1  end: 3  Mask: 0000000000000110
				Byte value = _StructureData[_BufferOffset + 46];
				var value2 = (value & 6) >> 1;
				return (Byte)value2;
			}
		}
		public Byte ConstrainedVA
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 46];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte AllowFreeHead
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 46];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte Spare0
		{
			get
			{
				// start: 5  end: 8  Mask: 0000000011100000
				Byte value = _StructureData[_BufferOffset + 46];
				var value2 = (value & 224) >> 5;
				return (Byte)value2;
			}
		}
		public Byte Spare1{ get { return _StructureData[_BufferOffset +47]; } }
	}
	#endregion
	#region _HEAP_VAMGR_VASPACE
 
	public class _HEAP_VAMGR_VASPACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_VAMGR_VASPACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2144; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_VAMGR_VASPACE"": [ 2144, {
				 ""AddressSpaceType"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_RTLP_HP_ADDRESS_SPACE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""BaseAddress"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""VaRangeArray"": [ 16, [ ""_RTL_SPARSE_ARRAY"", ""null"" ]],
				 ""VaRangeArrayBuffer"": [ 16, [ ""Array"", ""{\""count\"":2128,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public _RTLP_HP_ADDRESS_SPACE_TYPE AddressSpaceType { get { return (_RTLP_HP_ADDRESS_SPACE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 BaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _RTL_SPARSE_ARRAY VaRangeArray
		{
			get
			{
				_RTL_SPARSE_ARRAY returnValue = new _RTL_SPARSE_ARRAY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public Byte[] VaRangeArrayBuffer
		{
			get
			{
				Byte[] returnValue = new Byte[2128];
				for(int i=0; i<2128; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 16];
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_VAMGR_RANGE
 
	public class _HEAP_VAMGR_RANGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_VAMGR_RANGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_VAMGR_RANGE"": [ 32, {
				 ""RbNode"": [ 0, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""Next"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""Allocated"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Internal"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""Standalone"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""Spare0"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""AllocatorIndex"": [ 1, [ ""Byte"", ""null"" ]],
				 ""OwnerCtx"": [ 8, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""SizeInChunks"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""ChunkCount"": [ 24, [ ""UInt16"", ""null"" ]],
				 ""PrevChunkCount"": [ 26, [ ""UInt16"", ""null"" ]],
				 ""Signature"": [ 24, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BALANCED_NODE RbNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY Next
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte Allocated
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Internal
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte Standalone
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte Spare0
		{
			get
			{
				// start: 3  end: 8  Mask: 0000000011111000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 248) >> 3;
				return (Byte)value2;
			}
		}
		public Byte AllocatorIndex{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt64[] OwnerCtx
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 SizeInChunks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt16 ChunkCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 24); } }
		public UInt16 PrevChunkCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 26); } }
		public UInt64 Signature { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _RTLP_HP_HEAP_MANAGER
 
	public class _RTLP_HP_HEAP_MANAGER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTLP_HP_HEAP_MANAGER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 14544; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTLP_HP_HEAP_MANAGER"": [ 14544, {
				 ""Globals"": [ 0, [ ""Pointer"", ""{\""target\"":\""_RTLP_HP_HEAP_GLOBALS\""}"" ]],
				 ""AllocTracker"": [ 8, [ ""_RTLP_HP_ALLOC_TRACKER"", ""null"" ]],
				 ""VaMgr"": [ 88, [ ""_HEAP_VAMGR_CTX"", ""null"" ]],
				 ""MetadataHeaps"": [ 14488, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""SubAllocConfigs"": [ 14536, [ ""_RTL_HP_SUB_ALLOCATOR_CONFIGS"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Globals { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _RTLP_HP_ALLOC_TRACKER AllocTracker
		{
			get
			{
				_RTLP_HP_ALLOC_TRACKER returnValue = new _RTLP_HP_ALLOC_TRACKER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _HEAP_VAMGR_CTX VaMgr
		{
			get
			{
				_HEAP_VAMGR_CTX returnValue = new _HEAP_VAMGR_CTX(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public _RTLP_HP_METADATA_HEAP_CTX[] MetadataHeaps
		{
			get
			{
				_RTLP_HP_METADATA_HEAP_CTX[] returnValue = new _RTLP_HP_METADATA_HEAP_CTX[3];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<3; i++ )
					returnValue[i] = new _RTLP_HP_METADATA_HEAP_CTX(_StructureData, (i * size) + _BufferOffset + 14488);
				return returnValue;
			}
		}
		public _RTL_HP_SUB_ALLOCATOR_CONFIGS SubAllocConfigs
		{
			get
			{
				_RTL_HP_SUB_ALLOCATOR_CONFIGS returnValue = new _RTL_HP_SUB_ALLOCATOR_CONFIGS(_StructureData, _BufferOffset + 14536);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTLP_HP_ALLOC_TRACKER
 
	public class _RTLP_HP_ALLOC_TRACKER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTLP_HP_ALLOC_TRACKER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTLP_HP_ALLOC_TRACKER"": [ 80, {
				 ""BaseAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""AllocTrackerBitmap"": [ 8, [ ""_RTL_CSPARSE_BITMAP"", ""null"" ]],
				 ""AllocTrackerBitmapBuffer"": [ 8, [ ""Array"", ""{\""count\"":72,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 BaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _RTL_CSPARSE_BITMAP AllocTrackerBitmap
		{
			get
			{
				_RTL_CSPARSE_BITMAP returnValue = new _RTL_CSPARSE_BITMAP(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public Byte[] AllocTrackerBitmapBuffer
		{
			get
			{
				Byte[] returnValue = new Byte[72];
				for(int i=0; i<72; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 8];
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_STACKDB_CONTEXT
 
	public class _RTL_STACKDB_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_STACKDB_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_STACKDB_CONTEXT"": [ 72, {
				 ""StackSegmentTable"": [ 0, [ ""_RTL_HASH_TABLE"", ""null"" ]],
				 ""StackEntryTable"": [ 16, [ ""_RTL_HASH_TABLE"", ""null"" ]],
				 ""StackEntryTableLock"": [ 32, [ ""_RTL_SRWLOCK"", ""null"" ]],
				 ""SegmentTableLock"": [ 40, [ ""_RTL_SRWLOCK"", ""null"" ]],
				 ""Allocate"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Free"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AllocatorContext"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _RTL_HASH_TABLE StackSegmentTable
		{
			get
			{
				_RTL_HASH_TABLE returnValue = new _RTL_HASH_TABLE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _RTL_HASH_TABLE StackEntryTable
		{
			get
			{
				_RTL_HASH_TABLE returnValue = new _RTL_HASH_TABLE(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _RTL_SRWLOCK StackEntryTableLock
		{
			get
			{
				_RTL_SRWLOCK returnValue = new _RTL_SRWLOCK(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _RTL_SRWLOCK SegmentTableLock
		{
			get
			{
				_RTL_SRWLOCK returnValue = new _RTL_SRWLOCK(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt64 Allocate { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Free { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 AllocatorContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _HEAP_LFH_FAST_REF
 
	public class _HEAP_LFH_FAST_REF
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_LFH_FAST_REF(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_LFH_FAST_REF"": [ 8, {
				 ""Target"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Value"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""RefCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Target { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Value { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 RefCount
		{
			get
			{
				// start: 0  end: 12  Mask: 0000111111111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4095) >> 0;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _HEAP_LFH_SUBSEGMENT_OWNER
 
	public class _HEAP_LFH_SUBSEGMENT_OWNER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_LFH_SUBSEGMENT_OWNER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_LFH_SUBSEGMENT_OWNER"": [ 56, {
				 ""IsBucket"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Spare0"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""BucketIndex"": [ 1, [ ""Byte"", ""null"" ]],
				 ""SlotCount"": [ 2, [ ""Byte"", ""null"" ]],
				 ""SlotIndex"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Spare1"": [ 3, [ ""Byte"", ""null"" ]],
				 ""AvailableSubsegmentCount"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Lock"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""AvailableSubsegmentList"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FullSubsegmentList"": [ 40, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte IsBucket
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Spare0
		{
			get
			{
				// start: 1  end: 8  Mask: 0000000011111110
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 254) >> 1;
				return (Byte)value2;
			}
		}
		public Byte BucketIndex{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte SlotCount{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte SlotIndex{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Spare1{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt64 AvailableSubsegmentCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _LIST_ENTRY AvailableSubsegmentList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LIST_ENTRY FullSubsegmentList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_LFH_CONTEXT
 
	public class _HEAP_LFH_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_LFH_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1216; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_LFH_CONTEXT"": [ 1216, {
				 ""BackendCtx"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Callbacks"": [ 8, [ ""_HEAP_SUBALLOCATOR_CALLBACKS"", ""null"" ]],
				 ""AffinityModArray"": [ 48, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""MaxAffinity"": [ 56, [ ""Byte"", ""null"" ]],
				 ""LockType"": [ 57, [ ""Byte"", ""null"" ]],
				 ""MemStatsOffset"": [ 58, [ ""Int16"", ""null"" ]],
				 ""Config"": [ 60, [ ""_RTL_HP_LFH_CONFIG"", ""null"" ]],
				 ""BucketStats"": [ 64, [ ""_HEAP_LFH_SUBSEGMENT_STATS"", ""null"" ]],
				 ""SubsegmentCreationLock"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""Buckets"": [ 128, [ ""Array"", ""{\""count\"":129,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_HEAP_LFH_BUCKET\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 BackendCtx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _HEAP_SUBALLOCATOR_CALLBACKS Callbacks
		{
			get
			{
				_HEAP_SUBALLOCATOR_CALLBACKS returnValue = new _HEAP_SUBALLOCATOR_CALLBACKS(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 AffinityModArray { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public Byte MaxAffinity{ get { return _StructureData[_BufferOffset +56]; } }
		public Byte LockType{ get { return _StructureData[_BufferOffset +57]; } }
		public Int16 MemStatsOffset { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 58); } }
		public _RTL_HP_LFH_CONFIG Config
		{
			get
			{
				_RTL_HP_LFH_CONFIG returnValue = new _RTL_HP_LFH_CONFIG(_StructureData, _BufferOffset + 60);
				return returnValue;
			}
		}
		public _HEAP_LFH_SUBSEGMENT_STATS BucketStats
		{
			get
			{
				_HEAP_LFH_SUBSEGMENT_STATS returnValue = new _HEAP_LFH_SUBSEGMENT_STATS(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt64 SubsegmentCreationLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public _HEAP_LFH_BUCKET[] Buckets
		{
			get
			{
				_HEAP_LFH_BUCKET[] returnValue = new _HEAP_LFH_BUCKET[129];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<129; i++ )
					returnValue[i] = new _HEAP_LFH_BUCKET(_StructureData, (i * size) + _BufferOffset + 128);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_LFH_BUCKET
 
	public class _HEAP_LFH_BUCKET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_LFH_BUCKET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 104; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_LFH_BUCKET"": [ 104, {
				 ""State"": [ 0, [ ""_HEAP_LFH_SUBSEGMENT_OWNER"", ""null"" ]],
				 ""TotalBlockCount"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""TotalSubsegmentCount"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""ReciprocalBlockSize"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""Shift"": [ 76, [ ""Byte"", ""null"" ]],
				 ""ContentionCount"": [ 77, [ ""Byte"", ""null"" ]],
				 ""AffinityMappingLock"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""ProcAffinityMapping"": [ 88, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""AffinitySlots"": [ 96, [ ""Pointer"", ""{\""target\"":\""_HEAP_LFH_AFFINITY_SLOT*\""}"" ]] }]
				 }
				)";
			}
		}
		public _HEAP_LFH_SUBSEGMENT_OWNER State
		{
			get
			{
				_HEAP_LFH_SUBSEGMENT_OWNER returnValue = new _HEAP_LFH_SUBSEGMENT_OWNER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 TotalBlockCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 TotalSubsegmentCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt32 ReciprocalBlockSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public Byte Shift{ get { return _StructureData[_BufferOffset +76]; } }
		public Byte ContentionCount{ get { return _StructureData[_BufferOffset +77]; } }
		public UInt64 AffinityMappingLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 ProcAffinityMapping { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 AffinitySlots { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
	}
	#endregion
	#region _HEAP_LFH_ONDEMAND_POINTER
 
	public class _HEAP_LFH_ONDEMAND_POINTER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_LFH_ONDEMAND_POINTER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_LFH_ONDEMAND_POINTER"": [ 8, {
				 ""Invalid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""AllocationInProgress"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""Spare0"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":2,\""target\"":\""UInt16\""}"" ]],
				 ""UsageData"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""AllBits"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Invalid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 AllocationInProgress
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt16)value2;
			}
		}
		public UInt16 Spare0
		{
			get
			{
				// start: 2  end: 16  Mask: 1111111111111100
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65532) >> 2;
				return (UInt16)value2;
			}
		}
		public UInt16 UsageData { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 AllBits { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS
 
	public class _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS"": [ 4, {
				 ""BlockSize"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""FirstBlockOffset"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""EncodedData"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 BlockSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 FirstBlockOffset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 EncodedData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _HEAP_LFH_SUBSEGMENT
 
	public class _HEAP_LFH_SUBSEGMENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_LFH_SUBSEGMENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_LFH_SUBSEGMENT"": [ 56, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Owner"": [ 16, [ ""Pointer"", ""{\""target\"":\""_HEAP_LFH_SUBSEGMENT_OWNER\""}"" ]],
				 ""DelayFree"": [ 16, [ ""_HEAP_LFH_SUBSEGMENT_DELAY_FREE"", ""null"" ]],
				 ""CommitLock"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""FreeCount"": [ 32, [ ""UInt16"", ""null"" ]],
				 ""BlockCount"": [ 34, [ ""UInt16"", ""null"" ]],
				 ""InterlockedShort"": [ 32, [ ""Int16"", ""null"" ]],
				 ""InterlockedLong"": [ 32, [ ""Int32"", ""null"" ]],
				 ""FreeHint"": [ 36, [ ""UInt16"", ""null"" ]],
				 ""Location"": [ 38, [ ""Byte"", ""null"" ]],
				 ""WitheldBlockCount"": [ 39, [ ""Byte"", ""null"" ]],
				 ""BlockOffsets"": [ 40, [ ""_HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS"", ""null"" ]],
				 ""CommitUnitShift"": [ 44, [ ""Byte"", ""null"" ]],
				 ""CommitUnitCount"": [ 45, [ ""Byte"", ""null"" ]],
				 ""CommitStateOffset"": [ 46, [ ""UInt16"", ""null"" ]],
				 ""BlockBitmap"": [ 48, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Owner { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _HEAP_LFH_SUBSEGMENT_DELAY_FREE DelayFree
		{
			get
			{
				_HEAP_LFH_SUBSEGMENT_DELAY_FREE returnValue = new _HEAP_LFH_SUBSEGMENT_DELAY_FREE(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 CommitLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt16 FreeCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 32); } }
		public UInt16 BlockCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 34); } }
		public Int16 InterlockedShort { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 32); } }
		public Int32 InterlockedLong { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 32); } }
		public UInt16 FreeHint { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 36); } }
		public Byte Location{ get { return _StructureData[_BufferOffset +38]; } }
		public Byte WitheldBlockCount{ get { return _StructureData[_BufferOffset +39]; } }
		public _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS BlockOffsets
		{
			get
			{
				_HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS returnValue = new _HEAP_LFH_SUBSEGMENT_ENCODED_OFFSETS(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public Byte CommitUnitShift{ get { return _StructureData[_BufferOffset +44]; } }
		public Byte CommitUnitCount{ get { return _StructureData[_BufferOffset +45]; } }
		public UInt16 CommitStateOffset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 46); } }
		public UInt64[] BlockBitmap
		{
			get
			{
				UInt64[] returnValue = new UInt64[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 48);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_LFH_UNUSED_BYTES_INFO
 
	public class _HEAP_LFH_UNUSED_BYTES_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_LFH_UNUSED_BYTES_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_LFH_UNUSED_BYTES_INFO"": [ 2, {
				 ""UnusedBytes"": [ 0, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""ExtraPresent"": [ 0, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt16\""}"" ]],
				 ""OneByteUnused"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt16\""}"" ]],
				 ""Bytes"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 UnusedBytes
		{
			get
			{
				// start: 0  end: 14  Mask: 0011111111111111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16383) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 ExtraPresent
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16384) >> 14;
				return (UInt16)value2;
			}
		}
		public UInt16 OneByteUnused
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32768) >> 15;
				return (UInt16)value2;
			}
		}
		public Byte[] Bytes
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 0];
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTLP_HP_QUEUE_LOCK_HANDLE
 
	public class _RTLP_HP_QUEUE_LOCK_HANDLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTLP_HP_QUEUE_LOCK_HANDLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTLP_HP_QUEUE_LOCK_HANDLE"": [ 24, {
				 ""Reserved1"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""LockPtr"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""HandleData"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Reserved1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 LockPtr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 HandleData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _HEAP_VS_CONTEXT
 
	public class _HEAP_VS_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_VS_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 192; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_VS_CONTEXT"": [ 192, {
				 ""Lock"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""LockType"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_RTLP_HP_LOCK_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""FreeChunkTree"": [ 16, [ ""_RTL_RB_TREE"", ""null"" ]],
				 ""SubsegmentList"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""TotalCommittedUnits"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""FreeCommittedUnits"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""DelayFreeContext"": [ 64, [ ""_HEAP_VS_DELAY_FREE_CONTEXT"", ""null"" ]],
				 ""BackendCtx"": [ 128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Callbacks"": [ 136, [ ""_HEAP_SUBALLOCATOR_CALLBACKS"", ""null"" ]],
				 ""Config"": [ 176, [ ""_RTL_HP_VS_CONFIG"", ""null"" ]],
				 ""Flags"": [ 180, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _RTLP_HP_LOCK_TYPE LockType { get { return (_RTLP_HP_LOCK_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _RTL_RB_TREE FreeChunkTree
		{
			get
			{
				_RTL_RB_TREE returnValue = new _RTL_RB_TREE(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LIST_ENTRY SubsegmentList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 TotalCommittedUnits { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 FreeCommittedUnits { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public _HEAP_VS_DELAY_FREE_CONTEXT DelayFreeContext
		{
			get
			{
				_HEAP_VS_DELAY_FREE_CONTEXT returnValue = new _HEAP_VS_DELAY_FREE_CONTEXT(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt64 BackendCtx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public _HEAP_SUBALLOCATOR_CALLBACKS Callbacks
		{
			get
			{
				_HEAP_SUBALLOCATOR_CALLBACKS returnValue = new _HEAP_SUBALLOCATOR_CALLBACKS(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public _RTL_HP_VS_CONFIG Config
		{
			get
			{
				_RTL_HP_VS_CONFIG returnValue = new _RTL_HP_VS_CONFIG(_StructureData, _BufferOffset + 176);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 180); } }
	}
	#endregion
	#region _HEAP_VS_CHUNK_HEADER
 
	public class _HEAP_VS_CHUNK_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_VS_CHUNK_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_VS_CHUNK_HEADER"": [ 16, {
				 ""Sizes"": [ 0, [ ""_HEAP_VS_CHUNK_HEADER_SIZE"", ""null"" ]],
				 ""EncodedSegmentPageOffset"": [ 8, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""UnusedBytes"": [ 8, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""SkipDuringWalk"": [ 8, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""Spare"": [ 8, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""AllocatedChunkBits"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _HEAP_VS_CHUNK_HEADER_SIZE Sizes
		{
			get
			{
				_HEAP_VS_CHUNK_HEADER_SIZE returnValue = new _HEAP_VS_CHUNK_HEADER_SIZE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 EncodedSegmentPageOffset
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 255) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 UnusedBytes
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 SkipDuringWalk
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 Spare
		{
			get
			{
				// start: 10  end: 32  Mask: 11111111111111111111110000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 4294966272) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 AllocatedChunkBits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _HEAP_VS_CHUNK_HEADER_SIZE
 
	public class _HEAP_VS_CHUNK_HEADER_SIZE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_VS_CHUNK_HEADER_SIZE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_VS_CHUNK_HEADER_SIZE"": [ 8, {
				 ""MemoryCost"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""UnsafeSize"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""UnsafePrevSize"": [ 4, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Allocated"": [ 4, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""KeyUShort"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""KeyULong"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HeaderBits"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 MemoryCost
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65535) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 UnsafeSize
		{
			get
			{
				// start: 16  end: 32  Mask: 11111111111111110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294901760) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 UnsafePrevSize
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 65535) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Allocated
		{
			get
			{
				// start: 16  end: 24  Mask: 111111110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 16711680) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt16 KeyUShort { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt32 KeyULong { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 HeaderBits { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _HEAP_VS_CHUNK_FREE_HEADER
 
	public class _HEAP_VS_CHUNK_FREE_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_VS_CHUNK_FREE_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_VS_CHUNK_FREE_HEADER"": [ 32, {
				 ""Header"": [ 0, [ ""_HEAP_VS_CHUNK_HEADER"", ""null"" ]],
				 ""OverlapsHeader"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Node"": [ 8, [ ""_RTL_BALANCED_NODE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _HEAP_VS_CHUNK_HEADER Header
		{
			get
			{
				_HEAP_VS_CHUNK_HEADER returnValue = new _HEAP_VS_CHUNK_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 OverlapsHeader { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _RTL_BALANCED_NODE Node
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_VS_SUBSEGMENT
 
	public class _HEAP_VS_SUBSEGMENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_VS_SUBSEGMENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_VS_SUBSEGMENT"": [ 40, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CommitBitmap"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""CommitLock"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""Size"": [ 32, [ ""UInt16"", ""null"" ]],
				 ""Signature"": [ 34, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""FullCommit"": [ 34, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 CommitBitmap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 CommitLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 32); } }
		public UInt16 Signature
		{
			get
			{
				// start: 0  end: 15  Mask: 0111111111111111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 34);
				var value2 = (value & 32767) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 FullCommit
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 34);
				var value2 = (value & 32768) >> 15;
				return (UInt16)value2;
			}
		}
	}
	#endregion
	#region _HEAP_VS_UNUSED_BYTES_INFO
 
	public class _HEAP_VS_UNUSED_BYTES_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_VS_UNUSED_BYTES_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_VS_UNUSED_BYTES_INFO"": [ 2, {
				 ""UnusedBytes"": [ 0, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""LfhSubsegment"": [ 0, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt16\""}"" ]],
				 ""ExtraPresent"": [ 0, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt16\""}"" ]],
				 ""OneByteUnused"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt16\""}"" ]],
				 ""Bytes"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 UnusedBytes
		{
			get
			{
				// start: 0  end: 13  Mask: 0001111111111111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8191) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 LfhSubsegment
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8192) >> 13;
				return (UInt16)value2;
			}
		}
		public UInt16 ExtraPresent
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16384) >> 14;
				return (UInt16)value2;
			}
		}
		public UInt16 OneByteUnused
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32768) >> 15;
				return (UInt16)value2;
			}
		}
		public Byte[] Bytes
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 0];
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_PAGE_RANGE_DESCRIPTOR
 
	public class _HEAP_PAGE_RANGE_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_PAGE_RANGE_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_PAGE_RANGE_DESCRIPTOR"": [ 32, {
				 ""TreeNode"": [ 0, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""TreeSignature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""UnusedBytes"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ExtraPresent"": [ 8, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""Spare0"": [ 8, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""RangeFlags"": [ 24, [ ""Byte"", ""null"" ]],
				 ""CommittedPageCount"": [ 25, [ ""Byte"", ""null"" ]],
				 ""Spare"": [ 26, [ ""UInt16"", ""null"" ]],
				 ""Key"": [ 28, [ ""_HEAP_DESCRIPTOR_KEY"", ""null"" ]],
				 ""Align"": [ 28, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""UnitOffset"": [ 31, [ ""Byte"", ""null"" ]],
				 ""UnitSize"": [ 31, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BALANCED_NODE TreeNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 TreeSignature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 UnusedBytes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt16 ExtraPresent
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 8);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 Spare0
		{
			get
			{
				// start: 1  end: 16  Mask: 1111111111111110
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 8);
				var value2 = (value & 65534) >> 1;
				return (UInt16)value2;
			}
		}
		public Byte RangeFlags{ get { return _StructureData[_BufferOffset +24]; } }
		public Byte CommittedPageCount{ get { return _StructureData[_BufferOffset +25]; } }
		public UInt16 Spare { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 26); } }
		public _HEAP_DESCRIPTOR_KEY Key
		{
			get
			{
				_HEAP_DESCRIPTOR_KEY returnValue = new _HEAP_DESCRIPTOR_KEY(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public Byte[] Align
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 28];
				return returnValue;
			}
		}
		public Byte UnitOffset{ get { return _StructureData[_BufferOffset +31]; } }
		public Byte UnitSize{ get { return _StructureData[_BufferOffset +31]; } }
	}
	#endregion
	#region _HEAP_PAGE_SEGMENT
 
	public class _HEAP_PAGE_SEGMENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_PAGE_SEGMENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8192; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_PAGE_SEGMENT"": [ 8192, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Signature"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""SegmentCommitState"": [ 24, [ ""Pointer"", ""{\""target\"":\""_HEAP_SEGMENT_MGR_COMMIT_STATE\""}"" ]],
				 ""UnusedWatermark"": [ 32, [ ""Byte"", ""null"" ]],
				 ""DescArray"": [ 0, [ ""Array"", ""{\""count\"":256,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Signature { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 SegmentCommitState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public Byte UnusedWatermark{ get { return _StructureData[_BufferOffset +32]; } }
		public _HEAP_PAGE_RANGE_DESCRIPTOR[] DescArray
		{
			get
			{
				_HEAP_PAGE_RANGE_DESCRIPTOR[] returnValue = new _HEAP_PAGE_RANGE_DESCRIPTOR[256];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<256; i++ )
					returnValue[i] = new _HEAP_PAGE_RANGE_DESCRIPTOR(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_SEG_CONTEXT
 
	public class _HEAP_SEG_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_SEG_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 192; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_SEG_CONTEXT"": [ 192, {
				 ""SegmentMask"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""UnitShift"": [ 8, [ ""Byte"", ""null"" ]],
				 ""PagesPerUnitShift"": [ 9, [ ""Byte"", ""null"" ]],
				 ""FirstDescriptorIndex"": [ 10, [ ""Byte"", ""null"" ]],
				 ""CachedCommitSoftShift"": [ 11, [ ""Byte"", ""null"" ]],
				 ""CachedCommitHighShift"": [ 12, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 13, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""MaxAllocationSize"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""OlpStatsOffset"": [ 20, [ ""Int16"", ""null"" ]],
				 ""MemStatsOffset"": [ 22, [ ""Int16"", ""null"" ]],
				 ""LfhContext"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VsContext"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EnvHandle"": [ 40, [ ""RTL_HP_ENV_HANDLE"", ""null"" ]],
				 ""Heap"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SegmentLock"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""SegmentListHead"": [ 72, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SegmentCount"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""FreePageRanges"": [ 96, [ ""_RTL_RB_TREE"", ""null"" ]],
				 ""FreeSegmentListLock"": [ 112, [ ""UInt64"", ""null"" ]],
				 ""FreeSegmentList"": [ 120, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SegmentMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Byte UnitShift{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte PagesPerUnitShift{ get { return _StructureData[_BufferOffset +9]; } }
		public Byte FirstDescriptorIndex{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte CachedCommitSoftShift{ get { return _StructureData[_BufferOffset +11]; } }
		public Byte CachedCommitHighShift{ get { return _StructureData[_BufferOffset +12]; } }
		public _ANONYMOUS_TAG Flags
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 13);
				return returnValue;
			}
		}
		public UInt32 MaxAllocationSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Int16 OlpStatsOffset { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 20); } }
		public Int16 MemStatsOffset { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 22); } }
		public UInt64 LfhContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 VsContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public RTL_HP_ENV_HANDLE EnvHandle
		{
			get
			{
				RTL_HP_ENV_HANDLE returnValue = new RTL_HP_ENV_HANDLE(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt64 Heap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 SegmentLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public _LIST_ENTRY SegmentListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public UInt64 SegmentCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public _RTL_RB_TREE FreePageRanges
		{
			get
			{
				_RTL_RB_TREE returnValue = new _RTL_RB_TREE(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt64 FreeSegmentListLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public _SINGLE_LIST_ENTRY[] FreeSegmentList
		{
			get
			{
				_SINGLE_LIST_ENTRY[] returnValue = new _SINGLE_LIST_ENTRY[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _SINGLE_LIST_ENTRY(_StructureData, (i * size) + _BufferOffset + 120);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_RUNTIME_MEMORY_STATS
 
	public class _HEAP_RUNTIME_MEMORY_STATS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_RUNTIME_MEMORY_STATS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_RUNTIME_MEMORY_STATS"": [ 88, {
				 ""TotalReservedPages"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""TotalCommittedPages"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""FreeCommittedPages"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""LfhFreeCommittedPages"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""LargePageStats"": [ 32, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""LargePageUtilizationPolicy"": [ 64, [ ""_RTL_HP_SEG_ALLOC_POLICY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 TotalReservedPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 TotalCommittedPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 FreeCommittedPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 LfhFreeCommittedPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS[] LargePageStats
		{
			get
			{
				_HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS[] returnValue = new _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
		public _RTL_HP_SEG_ALLOC_POLICY LargePageUtilizationPolicy
		{
			get
			{
				_RTL_HP_SEG_ALLOC_POLICY returnValue = new _RTL_HP_SEG_ALLOC_POLICY(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_DESCRIPTOR_KEY
 
	public class _HEAP_DESCRIPTOR_KEY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_DESCRIPTOR_KEY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_DESCRIPTOR_KEY"": [ 4, {
				 ""Key"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""EncodedCommittedPageCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""LargePageCost"": [ 0, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""UnitCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Key { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 EncodedCommittedPageCount
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65535) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 LargePageCost
		{
			get
			{
				// start: 16  end: 24  Mask: 111111110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16711680) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 UnitCount
		{
			get
			{
				// start: 24  end: 32  Mask: 11111111000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4278190080) >> 24;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region RTL_HP_ENV_HANDLE
 
	public class RTL_HP_ENV_HANDLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public RTL_HP_ENV_HANDLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""RTL_HP_ENV_HANDLE"": [ 16, {
				 ""h"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64[] h
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				int size = 8;
				for(int i=0; i<2; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SEGMENT_HEAP
 
	public class _SEGMENT_HEAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEGMENT_HEAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2048; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEGMENT_HEAP"": [ 2048, {
				 ""EnvHandle"": [ 0, [ ""RTL_HP_ENV_HANDLE"", ""null"" ]],
				 ""Signature"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""GlobalFlags"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Interceptor"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""ProcessHeapListIndex"": [ 28, [ ""UInt16"", ""null"" ]],
				 ""AllocatedFromMetadata"": [ 30, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""CommitLimitData"": [ 32, [ ""_RTL_HEAP_MEMORY_LIMIT_DATA"", ""null"" ]],
				 ""ReservedMustBeZero1"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""UserContext"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReservedMustBeZero2"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""Spare"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LargeMetadataLock"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""LargeAllocMetadata"": [ 72, [ ""_RTL_RB_TREE"", ""null"" ]],
				 ""LargeReservedPages"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""LargeCommittedPages"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""StackTraceInitVar"": [ 104, [ ""_RTL_RUN_ONCE"", ""null"" ]],
				 ""MemStats"": [ 128, [ ""_HEAP_RUNTIME_MEMORY_STATS"", ""null"" ]],
				 ""GlobalLockCount"": [ 216, [ ""UInt16"", ""null"" ]],
				 ""GlobalLockOwner"": [ 220, [ ""UInt32"", ""null"" ]],
				 ""ContextExtendLock"": [ 224, [ ""UInt64"", ""null"" ]],
				 ""AllocatedBase"": [ 232, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""UncommittedBase"": [ 240, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""ReservedLimit"": [ 248, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""SegContexts"": [ 256, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""VsContext"": [ 640, [ ""_HEAP_VS_CONTEXT"", ""null"" ]],
				 ""LfhContext"": [ 832, [ ""_HEAP_LFH_CONTEXT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public RTL_HP_ENV_HANDLE EnvHandle
		{
			get
			{
				RTL_HP_ENV_HANDLE returnValue = new RTL_HP_ENV_HANDLE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 GlobalFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 Interceptor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt16 ProcessHeapListIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 28); } }
		public UInt16 AllocatedFromMetadata
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 30);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public _RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData
		{
			get
			{
				_RTL_HEAP_MEMORY_LIMIT_DATA returnValue = new _RTL_HEAP_MEMORY_LIMIT_DATA(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 ReservedMustBeZero1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 UserContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 ReservedMustBeZero2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Spare { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 LargeMetadataLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public _RTL_RB_TREE LargeAllocMetadata
		{
			get
			{
				_RTL_RB_TREE returnValue = new _RTL_RB_TREE(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public UInt64 LargeReservedPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 LargeCommittedPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public _RTL_RUN_ONCE StackTraceInitVar
		{
			get
			{
				_RTL_RUN_ONCE returnValue = new _RTL_RUN_ONCE(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public _HEAP_RUNTIME_MEMORY_STATS MemStats
		{
			get
			{
				_HEAP_RUNTIME_MEMORY_STATS returnValue = new _HEAP_RUNTIME_MEMORY_STATS(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt16 GlobalLockCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 216); } }
		public UInt32 GlobalLockOwner { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 220); } }
		public UInt64 ContextExtendLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 AllocatedBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 UncommittedBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 ReservedLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public _HEAP_SEG_CONTEXT[] SegContexts
		{
			get
			{
				_HEAP_SEG_CONTEXT[] returnValue = new _HEAP_SEG_CONTEXT[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _HEAP_SEG_CONTEXT(_StructureData, (i * size) + _BufferOffset + 256);
				return returnValue;
			}
		}
		public _HEAP_VS_CONTEXT VsContext
		{
			get
			{
				_HEAP_VS_CONTEXT returnValue = new _HEAP_VS_CONTEXT(_StructureData, _BufferOffset + 640);
				return returnValue;
			}
		}
		public _HEAP_LFH_CONTEXT LfhContext
		{
			get
			{
				_HEAP_LFH_CONTEXT returnValue = new _HEAP_LFH_CONTEXT(_StructureData, _BufferOffset + 832);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_DYNAMIC_LOOKASIDE
 
	public class _RTL_DYNAMIC_LOOKASIDE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_DYNAMIC_LOOKASIDE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_DYNAMIC_LOOKASIDE"": [ 4160, {
				 ""EnabledBucketBitmap"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""BucketCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ActiveBucketCount"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Buckets"": [ 64, [ ""Array"", ""{\""count\"":64,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 EnabledBucketBitmap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 BucketCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ActiveBucketCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _RTL_LOOKASIDE[] Buckets
		{
			get
			{
				_RTL_LOOKASIDE[] returnValue = new _RTL_LOOKASIDE[64];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<64; i++ )
					returnValue[i] = new _RTL_LOOKASIDE(_StructureData, (i * size) + _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_LOOKASIDE
 
	public class _RTL_LOOKASIDE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_LOOKASIDE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_LOOKASIDE"": [ 64, {
				 ""ListHead"": [ 0, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""Depth"": [ 16, [ ""UInt16"", ""null"" ]],
				 ""MaximumDepth"": [ 18, [ ""UInt16"", ""null"" ]],
				 ""TotalAllocates"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""AllocateMisses"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""TotalFrees"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""FreeMisses"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""LastTotalAllocates"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""LastAllocateMisses"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""LastTotalFrees"": [ 44, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SLIST_HEADER ListHead
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt16 Depth { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 16); } }
		public UInt16 MaximumDepth { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 18); } }
		public UInt32 TotalAllocates { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 AllocateMisses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 TotalFrees { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 FreeMisses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 LastTotalAllocates { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 LastAllocateMisses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 LastTotalFrees { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
	}
	#endregion
	#region _HEAP_LIST_LOOKUP
 
	public class _HEAP_LIST_LOOKUP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_LIST_LOOKUP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_LIST_LOOKUP"": [ 56, {
				 ""ExtendedLookup"": [ 0, [ ""Pointer"", ""{\""target\"":\""_HEAP_LIST_LOOKUP\""}"" ]],
				 ""ArraySize"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ExtraItem"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""ItemCount"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""OutOfRangeItems"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""BaseIndex"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""ListHead"": [ 32, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""ListsInUseUlong"": [ 40, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""ListHints"": [ 48, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY*\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ExtendedLookup { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 ArraySize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ExtraItem { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 ItemCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 OutOfRangeItems { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 BaseIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt64 ListHead { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 ListsInUseUlong { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 ListHints { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _HEAP
 
	public class _HEAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 704; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP"": [ 704, {
				 ""Segment"": [ 0, [ ""_HEAP_SEGMENT"", ""null"" ]],
				 ""Entry"": [ 0, [ ""_HEAP_ENTRY"", ""null"" ]],
				 ""SegmentSignature"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""SegmentFlags"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""SegmentListEntry"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Heap"": [ 40, [ ""Pointer"", ""{\""target\"":\""_HEAP\""}"" ]],
				 ""BaseAddress"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberOfPages"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""FirstEntry"": [ 64, [ ""Pointer"", ""{\""target\"":\""_HEAP_ENTRY\""}"" ]],
				 ""LastValidEntry"": [ 72, [ ""Pointer"", ""{\""target\"":\""_HEAP_ENTRY\""}"" ]],
				 ""NumberOfUnCommittedPages"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""NumberOfUnCommittedRanges"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""SegmentAllocatorBackTraceIndex"": [ 88, [ ""UInt16"", ""null"" ]],
				 ""Reserved"": [ 90, [ ""UInt16"", ""null"" ]],
				 ""UCRSegmentList"": [ 96, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Flags"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""ForceFlags"": [ 116, [ ""UInt32"", ""null"" ]],
				 ""CompatibilityFlags"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""EncodeFlagMask"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""Encoding"": [ 128, [ ""_HEAP_ENTRY"", ""null"" ]],
				 ""Interceptor"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""VirtualMemoryThreshold"": [ 148, [ ""UInt32"", ""null"" ]],
				 ""Signature"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""SegmentReserve"": [ 160, [ ""UInt64"", ""null"" ]],
				 ""SegmentCommit"": [ 168, [ ""UInt64"", ""null"" ]],
				 ""DeCommitFreeBlockThreshold"": [ 176, [ ""UInt64"", ""null"" ]],
				 ""DeCommitTotalFreeThreshold"": [ 184, [ ""UInt64"", ""null"" ]],
				 ""TotalFreeSize"": [ 192, [ ""UInt64"", ""null"" ]],
				 ""MaximumAllocationSize"": [ 200, [ ""UInt64"", ""null"" ]],
				 ""ProcessHeapsListIndex"": [ 208, [ ""UInt16"", ""null"" ]],
				 ""HeaderValidateLength"": [ 210, [ ""UInt16"", ""null"" ]],
				 ""HeaderValidateCopy"": [ 216, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NextAvailableTagIndex"": [ 224, [ ""UInt16"", ""null"" ]],
				 ""MaximumTagIndex"": [ 226, [ ""UInt16"", ""null"" ]],
				 ""TagEntries"": [ 232, [ ""Pointer"", ""{\""target\"":\""_HEAP_TAG_ENTRY\""}"" ]],
				 ""UCRList"": [ 240, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""AlignRound"": [ 256, [ ""UInt64"", ""null"" ]],
				 ""AlignMask"": [ 264, [ ""UInt64"", ""null"" ]],
				 ""VirtualAllocdBlocks"": [ 272, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SegmentList"": [ 288, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""AllocatorBackTraceIndex"": [ 304, [ ""UInt16"", ""null"" ]],
				 ""NonDedicatedListLength"": [ 308, [ ""UInt32"", ""null"" ]],
				 ""BlocksIndex"": [ 312, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UCRIndex"": [ 320, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PseudoTagEntries"": [ 328, [ ""Pointer"", ""{\""target\"":\""_HEAP_PSEUDO_TAG_ENTRY\""}"" ]],
				 ""FreeLists"": [ 336, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LockVariable"": [ 352, [ ""Pointer"", ""{\""target\"":\""_HEAP_LOCK\""}"" ]],
				 ""CommitRoutine"": [ 360, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StackTraceInitVar"": [ 368, [ ""_RTL_RUN_ONCE"", ""null"" ]],
				 ""CommitLimitData"": [ 376, [ ""_RTL_HEAP_MEMORY_LIMIT_DATA"", ""null"" ]],
				 ""FrontEndHeap"": [ 408, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FrontHeapLockCount"": [ 416, [ ""UInt16"", ""null"" ]],
				 ""FrontEndHeapType"": [ 418, [ ""Byte"", ""null"" ]],
				 ""RequestedFrontEndHeapType"": [ 419, [ ""Byte"", ""null"" ]],
				 ""FrontEndHeapUsageData"": [ 424, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""FrontEndHeapMaximumIndex"": [ 432, [ ""UInt16"", ""null"" ]],
				 ""FrontEndHeapStatusBitmap"": [ 434, [ ""Array"", ""{\""count\"":129,\""target\"":\""Byte\""}"" ]],
				 ""Counters"": [ 568, [ ""_HEAP_COUNTERS"", ""null"" ]],
				 ""TuningParameters"": [ 688, [ ""_HEAP_TUNING_PARAMETERS"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _HEAP_SEGMENT Segment
		{
			get
			{
				_HEAP_SEGMENT returnValue = new _HEAP_SEGMENT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _HEAP_ENTRY Entry
		{
			get
			{
				_HEAP_ENTRY returnValue = new _HEAP_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 SegmentSignature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 SegmentFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _LIST_ENTRY SegmentListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 Heap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 BaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt32 NumberOfPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt64 FirstEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 LastValidEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt32 NumberOfUnCommittedPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 NumberOfUnCommittedRanges { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt16 SegmentAllocatorBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 88); } }
		public UInt16 Reserved { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 90); } }
		public _LIST_ENTRY UCRSegmentList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public UInt32 ForceFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 116); } }
		public UInt32 CompatibilityFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 EncodeFlagMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public _HEAP_ENTRY Encoding
		{
			get
			{
				_HEAP_ENTRY returnValue = new _HEAP_ENTRY(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt32 Interceptor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt32 VirtualMemoryThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 148); } }
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public UInt64 SegmentReserve { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 SegmentCommit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 DeCommitFreeBlockThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 DeCommitTotalFreeThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public UInt64 TotalFreeSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt64 MaximumAllocationSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt16 ProcessHeapsListIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 208); } }
		public UInt16 HeaderValidateLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 210); } }
		public UInt64 HeaderValidateCopy { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt16 NextAvailableTagIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 224); } }
		public UInt16 MaximumTagIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 226); } }
		public UInt64 TagEntries { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public _LIST_ENTRY UCRList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 240);
				return returnValue;
			}
		}
		public UInt64 AlignRound { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public UInt64 AlignMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 264); } }
		public _LIST_ENTRY VirtualAllocdBlocks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 272);
				return returnValue;
			}
		}
		public _LIST_ENTRY SegmentList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 288);
				return returnValue;
			}
		}
		public UInt16 AllocatorBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 304); } }
		public UInt32 NonDedicatedListLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 308); } }
		public UInt64 BlocksIndex { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 312); } }
		public UInt64 UCRIndex { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 320); } }
		public UInt64 PseudoTagEntries { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 328); } }
		public _LIST_ENTRY FreeLists
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 336);
				return returnValue;
			}
		}
		public UInt64 LockVariable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 352); } }
		public UInt64 CommitRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 360); } }
		public _RTL_RUN_ONCE StackTraceInitVar
		{
			get
			{
				_RTL_RUN_ONCE returnValue = new _RTL_RUN_ONCE(_StructureData, _BufferOffset + 368);
				return returnValue;
			}
		}
		public _RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData
		{
			get
			{
				_RTL_HEAP_MEMORY_LIMIT_DATA returnValue = new _RTL_HEAP_MEMORY_LIMIT_DATA(_StructureData, _BufferOffset + 376);
				return returnValue;
			}
		}
		public UInt64 FrontEndHeap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 408); } }
		public UInt16 FrontHeapLockCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 416); } }
		public Byte FrontEndHeapType{ get { return _StructureData[_BufferOffset +418]; } }
		public Byte RequestedFrontEndHeapType{ get { return _StructureData[_BufferOffset +419]; } }
		public UInt64 FrontEndHeapUsageData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 424); } }
		public UInt16 FrontEndHeapMaximumIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 432); } }
		public Byte[] FrontEndHeapStatusBitmap
		{
			get
			{
				Byte[] returnValue = new Byte[129];
				for(int i=0; i<129; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 434];
				return returnValue;
			}
		}
		public _HEAP_COUNTERS Counters
		{
			get
			{
				_HEAP_COUNTERS returnValue = new _HEAP_COUNTERS(_StructureData, _BufferOffset + 568);
				return returnValue;
			}
		}
		public _HEAP_TUNING_PARAMETERS TuningParameters
		{
			get
			{
				_HEAP_TUNING_PARAMETERS returnValue = new _HEAP_TUNING_PARAMETERS(_StructureData, _BufferOffset + 688);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_LOCK
 
	public class _HEAP_LOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_LOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 104; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_LOCK"": [ 104, {
				 ""Lock"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG Lock
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_ENTRY
 
	public class _HEAP_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_ENTRY"": [ 16, {
				 ""UnpackedEntry"": [ 0, [ ""_HEAP_UNPACKED_ENTRY"", ""null"" ]],
				 ""PreviousBlockPrivateData"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Size"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 10, [ ""Byte"", ""null"" ]],
				 ""SmallTagIndex"": [ 11, [ ""Byte"", ""null"" ]],
				 ""SubSegmentCode"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""PreviousSize"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""SegmentOffset"": [ 14, [ ""Byte"", ""null"" ]],
				 ""LFHFlags"": [ 14, [ ""Byte"", ""null"" ]],
				 ""UnusedBytes"": [ 15, [ ""Byte"", ""null"" ]],
				 ""CompactHeader"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ExtendedEntry"": [ 0, [ ""_HEAP_EXTENDED_ENTRY"", ""null"" ]],
				 ""Reserved"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FunctionIndex"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""ContextValue"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""InterceptorValue"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""UnusedBytesLength"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""EntryOffset"": [ 14, [ ""Byte"", ""null"" ]],
				 ""ExtendedBlockSignature"": [ 15, [ ""Byte"", ""null"" ]],
				 ""ReservedForAlignment"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Code1"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Code2"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""Code3"": [ 14, [ ""Byte"", ""null"" ]],
				 ""Code4"": [ 15, [ ""Byte"", ""null"" ]],
				 ""Code234"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""AgregateCode"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _HEAP_UNPACKED_ENTRY UnpackedEntry
		{
			get
			{
				_HEAP_UNPACKED_ENTRY returnValue = new _HEAP_UNPACKED_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 PreviousBlockPrivateData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte SmallTagIndex{ get { return _StructureData[_BufferOffset +11]; } }
		public UInt32 SubSegmentCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt16 PreviousSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public Byte SegmentOffset{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte LFHFlags{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte UnusedBytes{ get { return _StructureData[_BufferOffset +15]; } }
		public UInt64 CompactHeader { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _HEAP_EXTENDED_ENTRY ExtendedEntry
		{
			get
			{
				_HEAP_EXTENDED_ENTRY returnValue = new _HEAP_EXTENDED_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Reserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt16 FunctionIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 ContextValue { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public UInt32 InterceptorValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt16 UnusedBytesLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public Byte EntryOffset{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte ExtendedBlockSignature{ get { return _StructureData[_BufferOffset +15]; } }
		public UInt64 ReservedForAlignment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Code1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt16 Code2 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public Byte Code3{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte Code4{ get { return _StructureData[_BufferOffset +15]; } }
		public UInt32 Code234 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 AgregateCode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _HEAP_SEGMENT
 
	public class _HEAP_SEGMENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_SEGMENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_SEGMENT"": [ 112, {
				 ""Entry"": [ 0, [ ""_HEAP_ENTRY"", ""null"" ]],
				 ""SegmentSignature"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""SegmentFlags"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""SegmentListEntry"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Heap"": [ 40, [ ""Pointer"", ""{\""target\"":\""_HEAP\""}"" ]],
				 ""BaseAddress"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberOfPages"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""FirstEntry"": [ 64, [ ""Pointer"", ""{\""target\"":\""_HEAP_ENTRY\""}"" ]],
				 ""LastValidEntry"": [ 72, [ ""Pointer"", ""{\""target\"":\""_HEAP_ENTRY\""}"" ]],
				 ""NumberOfUnCommittedPages"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""NumberOfUnCommittedRanges"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""SegmentAllocatorBackTraceIndex"": [ 88, [ ""UInt16"", ""null"" ]],
				 ""Reserved"": [ 90, [ ""UInt16"", ""null"" ]],
				 ""UCRSegmentList"": [ 96, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _HEAP_ENTRY Entry
		{
			get
			{
				_HEAP_ENTRY returnValue = new _HEAP_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 SegmentSignature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 SegmentFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _LIST_ENTRY SegmentListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 Heap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 BaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt32 NumberOfPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt64 FirstEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 LastValidEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt32 NumberOfUnCommittedPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 NumberOfUnCommittedRanges { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt16 SegmentAllocatorBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 88); } }
		public UInt16 Reserved { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 90); } }
		public _LIST_ENTRY UCRSegmentList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_VIRTUAL_ALLOC_ENTRY
 
	public class _HEAP_VIRTUAL_ALLOC_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_VIRTUAL_ALLOC_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_VIRTUAL_ALLOC_ENTRY"": [ 64, {
				 ""Entry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ExtraStuff"": [ 16, [ ""_HEAP_ENTRY_EXTRA"", ""null"" ]],
				 ""CommitSize"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""ReserveSize"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""BusyBlock"": [ 48, [ ""_HEAP_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Entry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _HEAP_ENTRY_EXTRA ExtraStuff
		{
			get
			{
				_HEAP_ENTRY_EXTRA returnValue = new _HEAP_ENTRY_EXTRA(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 CommitSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 ReserveSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _HEAP_ENTRY BusyBlock
		{
			get
			{
				_HEAP_ENTRY returnValue = new _HEAP_ENTRY(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_FREE_ENTRY
 
	public class _HEAP_FREE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_FREE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_FREE_ENTRY"": [ 32, {
				 ""HeapEntry"": [ 0, [ ""_HEAP_ENTRY"", ""null"" ]],
				 ""UnpackedEntry"": [ 0, [ ""_HEAP_UNPACKED_ENTRY"", ""null"" ]],
				 ""PreviousBlockPrivateData"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Size"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 10, [ ""Byte"", ""null"" ]],
				 ""SmallTagIndex"": [ 11, [ ""Byte"", ""null"" ]],
				 ""SubSegmentCode"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""PreviousSize"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""SegmentOffset"": [ 14, [ ""Byte"", ""null"" ]],
				 ""LFHFlags"": [ 14, [ ""Byte"", ""null"" ]],
				 ""UnusedBytes"": [ 15, [ ""Byte"", ""null"" ]],
				 ""CompactHeader"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ExtendedEntry"": [ 0, [ ""_HEAP_EXTENDED_ENTRY"", ""null"" ]],
				 ""Reserved"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FunctionIndex"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""ContextValue"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""InterceptorValue"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""UnusedBytesLength"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""EntryOffset"": [ 14, [ ""Byte"", ""null"" ]],
				 ""ExtendedBlockSignature"": [ 15, [ ""Byte"", ""null"" ]],
				 ""ReservedForAlignment"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Code1"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Code2"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""Code3"": [ 14, [ ""Byte"", ""null"" ]],
				 ""Code4"": [ 15, [ ""Byte"", ""null"" ]],
				 ""Code234"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""AgregateCode"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""FreeList"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _HEAP_ENTRY HeapEntry
		{
			get
			{
				_HEAP_ENTRY returnValue = new _HEAP_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _HEAP_UNPACKED_ENTRY UnpackedEntry
		{
			get
			{
				_HEAP_UNPACKED_ENTRY returnValue = new _HEAP_UNPACKED_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 PreviousBlockPrivateData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte SmallTagIndex{ get { return _StructureData[_BufferOffset +11]; } }
		public UInt32 SubSegmentCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt16 PreviousSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public Byte SegmentOffset{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte LFHFlags{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte UnusedBytes{ get { return _StructureData[_BufferOffset +15]; } }
		public UInt64 CompactHeader { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _HEAP_EXTENDED_ENTRY ExtendedEntry
		{
			get
			{
				_HEAP_EXTENDED_ENTRY returnValue = new _HEAP_EXTENDED_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Reserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt16 FunctionIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 ContextValue { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public UInt32 InterceptorValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt16 UnusedBytesLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public Byte EntryOffset{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte ExtendedBlockSignature{ get { return _StructureData[_BufferOffset +15]; } }
		public UInt64 ReservedForAlignment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Code1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt16 Code2 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public Byte Code3{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte Code4{ get { return _StructureData[_BufferOffset +15]; } }
		public UInt32 Code234 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 AgregateCode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY FreeList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTLP_HP_PADDING_HEADER
 
	public class _RTLP_HP_PADDING_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTLP_HP_PADDING_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTLP_HP_PADDING_HEADER"": [ 16, {
				 ""PaddingSize"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Spare"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PaddingSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Spare { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _HEAP_LARGE_ALLOC_DATA
 
	public class _HEAP_LARGE_ALLOC_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_LARGE_ALLOC_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_LARGE_ALLOC_DATA"": [ 40, {
				 ""TreeNode"": [ 0, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""VirtualAddress"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""UnusedBytes"": [ 24, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""ExtraPresent"": [ 32, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""GuardPageCount"": [ 32, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""GuardPageAlignment"": [ 32, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""Spare"": [ 32, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""AllocatedPages"": [ 32, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BALANCED_NODE TreeNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 VirtualAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 UnusedBytes
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 24);
				var value2 = (value & 65535) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 ExtraPresent
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 32);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 GuardPageCount
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 32);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 GuardPageAlignment
		{
			get
			{
				// start: 2  end: 8  Mask: 0000000011111100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 32);
				var value2 = (value & 252) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 Spare
		{
			get
			{
				// start: 8  end: 12  Mask: 0000111100000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 32);
				var value2 = (value & 3840) >> 8;
				return (UInt64)value2;
			}
		}
		public UInt64 AllocatedPages
		{
			get
			{
				// start: 12  end: 64  Mask: 1111111111111111111111111111111111111111111111111111000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 32);
				var value2 = (value & 18446744073709547520) >> 12;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _PORT_MESSAGE
 
	public class _PORT_MESSAGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PORT_MESSAGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PORT_MESSAGE"": [ 40, {
				 ""u1"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""u2"": [ 4, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""ClientId"": [ 8, [ ""_CLIENT_ID"", ""null"" ]],
				 ""DoNotUseThisField"": [ 8, [ ""Double"", ""null"" ]],
				 ""MessageId"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""ClientViewSize"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""CallbackId"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u2
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public _CLIENT_ID ClientId
		{
			get
			{
				_CLIENT_ID returnValue = new _CLIENT_ID(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public Double DoNotUseThisField { get { return BitConverter.ToDouble(_StructureData, _BufferOffset + 8); } }
		public UInt32 MessageId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt64 ClientViewSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt32 CallbackId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _ALPC_MESSAGE_ATTRIBUTES
 
	public class _ALPC_MESSAGE_ATTRIBUTES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ALPC_MESSAGE_ATTRIBUTES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ALPC_MESSAGE_ATTRIBUTES"": [ 8, {
				 ""AllocatedAttributes"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ValidAttributes"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 AllocatedAttributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ValidAttributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _ALPC_HANDLE_ENTRY
 
	public class _ALPC_HANDLE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ALPC_HANDLE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ALPC_HANDLE_ENTRY"": [ 8, {
				 ""Object"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Object { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _BLOB_TYPE
 
	public class _BLOB_TYPE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _BLOB_TYPE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_BLOB_TYPE"": [ 56, {
				 ""ResourceId"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_BLOB_ID\"",\""target\"":\""UInt32\""}"" ]],
				 ""PoolTag"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""LookasideIndex"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Counters"": [ 16, [ ""Pointer"", ""{\""target\"":\""_BLOB_COUNTERS\""}"" ]],
				 ""CleanupProcedure"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeleteProcedure"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DestroyProcedure"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UsualSize"": [ 48, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _BLOB_ID ResourceId { get { return (_BLOB_ID)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 PoolTag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 LookasideIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 Counters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 CleanupProcedure { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 DeleteProcedure { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 DestroyProcedure { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 UsualSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _BLOB
 
	public class _BLOB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _BLOB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_BLOB"": [ 48, {
				 ""ResourceList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FreeListEntry"": [ 0, [ ""_SLIST_ENTRY"", ""null"" ]],
				 ""u1"": [ 16, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""ResourceId"": [ 17, [ ""Byte"", ""null"" ]],
				 ""CachedReferences"": [ 18, [ ""Int16"", ""null"" ]],
				 ""ReferenceCount"": [ 24, [ ""Int64"", ""null"" ]],
				 ""Lock"": [ 32, [ ""_EX_PUSH_LOCK"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ResourceList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _SLIST_ENTRY FreeListEntry
		{
			get
			{
				_SLIST_ENTRY returnValue = new _SLIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public Byte ResourceId{ get { return _StructureData[_BufferOffset +17]; } }
		public Int16 CachedReferences { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 18); } }
		public Int64 ReferenceCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 24); } }
		public _EX_PUSH_LOCK Lock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KALPC_SECTION
 
	public class _KALPC_SECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KALPC_SECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KALPC_SECTION"": [ 72, {
				 ""SectionObject"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Size"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""HandleTable"": [ 16, [ ""Pointer"", ""{\""target\"":\""_ALPC_HANDLE_TABLE\""}"" ]],
				 ""SectionHandle"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OwnerProcess"": [ 32, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""OwnerPort"": [ 40, [ ""Pointer"", ""{\""target\"":\""_ALPC_PORT\""}"" ]],
				 ""u1"": [ 48, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""NumberOfRegions"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""RegionListHead"": [ 56, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SectionObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Size { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 HandleTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 SectionHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 OwnerProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 OwnerPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 NumberOfRegions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public _LIST_ENTRY RegionListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KALPC_REGION
 
	public class _KALPC_REGION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KALPC_REGION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KALPC_REGION"": [ 88, {
				 ""RegionListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Section"": [ 16, [ ""Pointer"", ""{\""target\"":\""_KALPC_SECTION\""}"" ]],
				 ""Offset"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""Size"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""ViewSize"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""u1"": [ 48, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""NumberOfViews"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""ViewListHead"": [ 56, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ReadOnlyView"": [ 72, [ ""Pointer"", ""{\""target\"":\""_KALPC_VIEW\""}"" ]],
				 ""ReadWriteView"": [ 80, [ ""Pointer"", ""{\""target\"":\""_KALPC_VIEW\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY RegionListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Section { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Offset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 Size { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 ViewSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 NumberOfViews { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public _LIST_ENTRY ViewListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt64 ReadOnlyView { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 ReadWriteView { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
	}
	#endregion
	#region _KALPC_VIEW
 
	public class _KALPC_VIEW
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KALPC_VIEW(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KALPC_VIEW"": [ 96, {
				 ""ViewListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Region"": [ 16, [ ""Pointer"", ""{\""target\"":\""_KALPC_REGION\""}"" ]],
				 ""OwnerPort"": [ 24, [ ""Pointer"", ""{\""target\"":\""_ALPC_PORT\""}"" ]],
				 ""OwnerProcess"": [ 32, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""Address"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Size"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""SecureViewHandle"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WriteAccessHandle"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""u1"": [ 72, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""NumberOfOwnerMessages"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""ProcessViewListEntry"": [ 80, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ViewListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Region { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 OwnerPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 OwnerProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 Address { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 Size { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 SecureViewHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 WriteAccessHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public UInt32 NumberOfOwnerMessages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public _LIST_ENTRY ProcessViewListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ALPC_COMMUNICATION_INFO
 
	public class _ALPC_COMMUNICATION_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ALPC_COMMUNICATION_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ALPC_COMMUNICATION_INFO"": [ 72, {
				 ""ConnectionPort"": [ 0, [ ""Pointer"", ""{\""target\"":\""_ALPC_PORT\""}"" ]],
				 ""ServerCommunicationPort"": [ 8, [ ""Pointer"", ""{\""target\"":\""_ALPC_PORT\""}"" ]],
				 ""ClientCommunicationPort"": [ 16, [ ""Pointer"", ""{\""target\"":\""_ALPC_PORT\""}"" ]],
				 ""CommunicationList"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""HandleTable"": [ 40, [ ""_ALPC_HANDLE_TABLE"", ""null"" ]],
				 ""CloseMessage"": [ 64, [ ""Pointer"", ""{\""target\"":\""_KALPC_MESSAGE\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ConnectionPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ServerCommunicationPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ClientCommunicationPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _LIST_ENTRY CommunicationList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _ALPC_HANDLE_TABLE HandleTable
		{
			get
			{
				_ALPC_HANDLE_TABLE returnValue = new _ALPC_HANDLE_TABLE(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt64 CloseMessage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _CALLBACK_OBJECT
 
	public class _CALLBACK_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CALLBACK_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CALLBACK_OBJECT"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _ALPC_PORT
 
	public class _ALPC_PORT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ALPC_PORT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 472; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ALPC_PORT"": [ 472, {
				 ""PortListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CommunicationInfo"": [ 16, [ ""Pointer"", ""{\""target\"":\""_ALPC_COMMUNICATION_INFO\""}"" ]],
				 ""OwnerProcess"": [ 24, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""CompletionPort"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CompletionKey"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CompletionPacketLookaside"": [ 48, [ ""Pointer"", ""{\""target\"":\""_ALPC_COMPLETION_PACKET_LOOKASIDE\""}"" ]],
				 ""PortContext"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StaticSecurity"": [ 64, [ ""_SECURITY_CLIENT_CONTEXT"", ""null"" ]],
				 ""IncomingQueueLock"": [ 136, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""MainQueue"": [ 144, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LargeMessageQueue"": [ 160, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PendingQueueLock"": [ 176, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""PendingQueue"": [ 184, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DirectQueueLock"": [ 200, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""DirectQueue"": [ 208, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""WaitQueueLock"": [ 224, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""WaitQueue"": [ 232, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Semaphore"": [ 248, [ ""Pointer"", ""{\""target\"":\""_KSEMAPHORE\""}"" ]],
				 ""DummyEvent"": [ 248, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""PortAttributes"": [ 256, [ ""_ALPC_PORT_ATTRIBUTES"", ""null"" ]],
				 ""ResourceListLock"": [ 328, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""ResourceListHead"": [ 336, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PortObjectLock"": [ 352, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""CompletionList"": [ 360, [ ""Pointer"", ""{\""target\"":\""_ALPC_COMPLETION_LIST\""}"" ]],
				 ""CallbackObject"": [ 368, [ ""Pointer"", ""{\""target\"":\""_CALLBACK_OBJECT\""}"" ]],
				 ""CallbackContext"": [ 376, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CanceledQueue"": [ 384, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SequenceNo"": [ 400, [ ""Int32"", ""null"" ]],
				 ""ReferenceNo"": [ 404, [ ""Int32"", ""null"" ]],
				 ""ReferenceNoWait"": [ 408, [ ""Pointer"", ""{\""target\"":\""_PALPC_PORT_REFERENCE_WAIT_BLOCK\""}"" ]],
				 ""u1"": [ 416, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""TargetQueuePort"": [ 424, [ ""Pointer"", ""{\""target\"":\""_ALPC_PORT\""}"" ]],
				 ""TargetSequencePort"": [ 432, [ ""Pointer"", ""{\""target\"":\""_ALPC_PORT\""}"" ]],
				 ""CachedMessage"": [ 440, [ ""Pointer"", ""{\""target\"":\""_KALPC_MESSAGE\""}"" ]],
				 ""MainQueueLength"": [ 448, [ ""UInt32"", ""null"" ]],
				 ""LargeMessageQueueLength"": [ 452, [ ""UInt32"", ""null"" ]],
				 ""PendingQueueLength"": [ 456, [ ""UInt32"", ""null"" ]],
				 ""DirectQueueLength"": [ 460, [ ""UInt32"", ""null"" ]],
				 ""CanceledQueueLength"": [ 464, [ ""UInt32"", ""null"" ]],
				 ""WaitQueueLength"": [ 468, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY PortListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 CommunicationInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 OwnerProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 CompletionPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 CompletionKey { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 CompletionPacketLookaside { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 PortContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public _SECURITY_CLIENT_CONTEXT StaticSecurity
		{
			get
			{
				_SECURITY_CLIENT_CONTEXT returnValue = new _SECURITY_CLIENT_CONTEXT(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK IncomingQueueLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public _LIST_ENTRY MainQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 144);
				return returnValue;
			}
		}
		public _LIST_ENTRY LargeMessageQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 160);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK PendingQueueLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 176);
				return returnValue;
			}
		}
		public _LIST_ENTRY PendingQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 184);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK DirectQueueLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 200);
				return returnValue;
			}
		}
		public _LIST_ENTRY DirectQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 208);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK WaitQueueLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 224);
				return returnValue;
			}
		}
		public _LIST_ENTRY WaitQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 232);
				return returnValue;
			}
		}
		public UInt64 Semaphore { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public UInt64 DummyEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public _ALPC_PORT_ATTRIBUTES PortAttributes
		{
			get
			{
				_ALPC_PORT_ATTRIBUTES returnValue = new _ALPC_PORT_ATTRIBUTES(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK ResourceListLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 328);
				return returnValue;
			}
		}
		public _LIST_ENTRY ResourceListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 336);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK PortObjectLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 352);
				return returnValue;
			}
		}
		public UInt64 CompletionList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 360); } }
		public UInt64 CallbackObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 368); } }
		public UInt64 CallbackContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 376); } }
		public _LIST_ENTRY CanceledQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 384);
				return returnValue;
			}
		}
		public Int32 SequenceNo { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 400); } }
		public Int32 ReferenceNo { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 404); } }
		public UInt64 ReferenceNoWait { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 408); } }
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 416);
				return returnValue;
			}
		}
		public UInt64 TargetQueuePort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 424); } }
		public UInt64 TargetSequencePort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 432); } }
		public UInt64 CachedMessage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 440); } }
		public UInt32 MainQueueLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 448); } }
		public UInt32 LargeMessageQueueLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 452); } }
		public UInt32 PendingQueueLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 456); } }
		public UInt32 DirectQueueLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 460); } }
		public UInt32 CanceledQueueLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 464); } }
		public UInt32 WaitQueueLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 468); } }
	}
	#endregion
	#region _ALPC_COMPLETION_LIST
 
	public class _ALPC_COMPLETION_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ALPC_COMPLETION_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ALPC_COMPLETION_LIST"": [ 160, {
				 ""Entry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""OwnerProcess"": [ 16, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""CompletionListLock"": [ 24, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""Mdl"": [ 32, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""UserVa"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UserLimit"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DataUserVa"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SystemVa"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TotalSize"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""Header"": [ 80, [ ""Pointer"", ""{\""target\"":\""_ALPC_COMPLETION_LIST_HEADER\""}"" ]],
				 ""List"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ListSize"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""Bitmap"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BitmapSize"": [ 112, [ ""UInt64"", ""null"" ]],
				 ""Data"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DataSize"": [ 128, [ ""UInt64"", ""null"" ]],
				 ""BitmapLimit"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""BitmapNextHint"": [ 140, [ ""UInt32"", ""null"" ]],
				 ""ConcurrencyCount"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""AttributeFlags"": [ 148, [ ""UInt32"", ""null"" ]],
				 ""AttributeSize"": [ 152, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Entry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 OwnerProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _EX_PUSH_LOCK CompletionListLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 Mdl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 UserVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 UserLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 DataUserVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 SystemVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 TotalSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 Header { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 List { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 ListSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 Bitmap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 BitmapSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 Data { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 DataSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt32 BitmapLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public UInt32 BitmapNextHint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 140); } }
		public UInt32 ConcurrencyCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt32 AttributeFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 148); } }
		public UInt32 AttributeSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
	}
	#endregion
	#region _OBJECT_ATTRIBUTES
 
	public class _OBJECT_ATTRIBUTES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_ATTRIBUTES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_ATTRIBUTES"": [ 48, {
				 ""Length"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""RootDirectory"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ObjectName"": [ 16, [ ""Pointer"", ""{\""target\"":\""_UNICODE_STRING\""}"" ]],
				 ""Attributes"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""SecurityDescriptor"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SecurityQualityOfService"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 RootDirectory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ObjectName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 Attributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt64 SecurityDescriptor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 SecurityQualityOfService { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _OBJECT_TYPE
 
	public class _OBJECT_TYPE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_TYPE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 216; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_TYPE"": [ 216, {
				 ""TypeList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Name"": [ 16, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""DefaultObject"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Index"": [ 40, [ ""Byte"", ""null"" ]],
				 ""TotalNumberOfObjects"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""TotalNumberOfHandles"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""HighWaterNumberOfObjects"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""HighWaterNumberOfHandles"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""TypeInfo"": [ 64, [ ""_OBJECT_TYPE_INITIALIZER"", ""null"" ]],
				 ""TypeLock"": [ 184, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""Key"": [ 192, [ ""UInt32"", ""null"" ]],
				 ""CallbackList"": [ 200, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY TypeList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _UNICODE_STRING Name
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 DefaultObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public Byte Index{ get { return _StructureData[_BufferOffset +40]; } }
		public UInt32 TotalNumberOfObjects { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 TotalNumberOfHandles { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 HighWaterNumberOfObjects { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 HighWaterNumberOfHandles { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public _OBJECT_TYPE_INITIALIZER TypeInfo
		{
			get
			{
				_OBJECT_TYPE_INITIALIZER returnValue = new _OBJECT_TYPE_INITIALIZER(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK TypeLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 184);
				return returnValue;
			}
		}
		public UInt32 Key { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public _LIST_ENTRY CallbackList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 200);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PALPC_PORT_REFERENCE_WAIT_BLOCK
 
	public class _PALPC_PORT_REFERENCE_WAIT_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PALPC_PORT_REFERENCE_WAIT_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PALPC_PORT_REFERENCE_WAIT_BLOCK"": [ 32, {
				 ""DesiredReferenceNoEvent"": [ 0, [ ""_KEVENT"", ""null"" ]],
				 ""DesiredReferenceNo"": [ 24, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KEVENT DesiredReferenceNoEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int32 DesiredReferenceNo { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _PORT_MESSAGE32
 
	public class _PORT_MESSAGE32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PORT_MESSAGE32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PORT_MESSAGE32"": [ 24, {
				 ""u1"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""u2"": [ 4, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""ClientId"": [ 8, [ ""_CLIENT_ID32"", ""null"" ]],
				 ""DoNotUseThisField"": [ 8, [ ""Double"", ""null"" ]],
				 ""MessageId"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ClientViewSize"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""CallbackId"": [ 20, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u2
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public _CLIENT_ID32 ClientId
		{
			get
			{
				_CLIENT_ID32 returnValue = new _CLIENT_ID32(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public Double DoNotUseThisField { get { return BitConverter.ToDouble(_StructureData, _BufferOffset + 8); } }
		public UInt32 MessageId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ClientViewSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 CallbackId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _KALPC_MESSAGE
 
	public class _KALPC_MESSAGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KALPC_MESSAGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 280; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KALPC_MESSAGE"": [ 280, {
				 ""Entry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PortQueue"": [ 16, [ ""Pointer"", ""{\""target\"":\""_ALPC_PORT\""}"" ]],
				 ""OwnerPort"": [ 24, [ ""Pointer"", ""{\""target\"":\""_ALPC_PORT\""}"" ]],
				 ""WaitingThread"": [ 32, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""u1"": [ 40, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""SequenceNo"": [ 44, [ ""Int32"", ""null"" ]],
				 ""QuotaProcess"": [ 48, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""QuotaBlock"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CancelSequencePort"": [ 56, [ ""Pointer"", ""{\""target\"":\""_ALPC_PORT\""}"" ]],
				 ""CancelQueuePort"": [ 64, [ ""Pointer"", ""{\""target\"":\""_ALPC_PORT\""}"" ]],
				 ""CancelSequenceNo"": [ 72, [ ""Int32"", ""null"" ]],
				 ""CancelListEntry"": [ 80, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Reserve"": [ 96, [ ""Pointer"", ""{\""target\"":\""_KALPC_RESERVE\""}"" ]],
				 ""MessageAttributes"": [ 104, [ ""_KALPC_MESSAGE_ATTRIBUTES"", ""null"" ]],
				 ""DataUserVa"": [ 176, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CommunicationInfo"": [ 184, [ ""Pointer"", ""{\""target\"":\""_ALPC_COMMUNICATION_INFO\""}"" ]],
				 ""ConnectionPort"": [ 192, [ ""Pointer"", ""{\""target\"":\""_ALPC_PORT\""}"" ]],
				 ""ServerThread"": [ 200, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""WakeReference"": [ 208, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WakeReference2"": [ 216, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ExtensionBuffer"": [ 224, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ExtensionBufferSize"": [ 232, [ ""UInt64"", ""null"" ]],
				 ""PortMessage"": [ 240, [ ""_PORT_MESSAGE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Entry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 PortQueue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 OwnerPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 WaitingThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public Int32 SequenceNo { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 44); } }
		public UInt64 QuotaProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 QuotaBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 CancelSequencePort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 CancelQueuePort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public Int32 CancelSequenceNo { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 72); } }
		public _LIST_ENTRY CancelListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt64 Reserve { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public _KALPC_MESSAGE_ATTRIBUTES MessageAttributes
		{
			get
			{
				_KALPC_MESSAGE_ATTRIBUTES returnValue = new _KALPC_MESSAGE_ATTRIBUTES(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt64 DataUserVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 CommunicationInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public UInt64 ConnectionPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt64 ServerThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 WakeReference { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 WakeReference2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 ExtensionBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 ExtensionBufferSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public _PORT_MESSAGE PortMessage
		{
			get
			{
				_PORT_MESSAGE returnValue = new _PORT_MESSAGE(_StructureData, _BufferOffset + 240);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KALPC_RESERVE
 
	public class _KALPC_RESERVE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KALPC_RESERVE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KALPC_RESERVE"": [ 48, {
				 ""OwnerPort"": [ 0, [ ""Pointer"", ""{\""target\"":\""_ALPC_PORT\""}"" ]],
				 ""HandleTable"": [ 8, [ ""Pointer"", ""{\""target\"":\""_ALPC_HANDLE_TABLE\""}"" ]],
				 ""Handle"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Message"": [ 24, [ ""Pointer"", ""{\""target\"":\""_KALPC_MESSAGE\""}"" ]],
				 ""Size"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""Active"": [ 40, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 OwnerPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 HandleTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Handle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Message { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 Size { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public Int32 Active { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _ALPC_DISPATCH_CONTEXT
 
	public class _ALPC_DISPATCH_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ALPC_DISPATCH_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ALPC_DISPATCH_CONTEXT"": [ 64, {
				 ""PortObject"": [ 0, [ ""Pointer"", ""{\""target\"":\""_ALPC_PORT\""}"" ]],
				 ""Message"": [ 8, [ ""Pointer"", ""{\""target\"":\""_KALPC_MESSAGE\""}"" ]],
				 ""CommunicationInfo"": [ 16, [ ""Pointer"", ""{\""target\"":\""_ALPC_COMMUNICATION_INFO\""}"" ]],
				 ""TargetThread"": [ 24, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""TargetPort"": [ 32, [ ""Pointer"", ""{\""target\"":\""_ALPC_PORT\""}"" ]],
				 ""DirectEvent"": [ 40, [ ""_KALPC_DIRECT_EVENT"", ""null"" ]],
				 ""Flags"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""TotalLength"": [ 52, [ ""UInt16"", ""null"" ]],
				 ""Type"": [ 54, [ ""UInt16"", ""null"" ]],
				 ""DataInfoOffset"": [ 56, [ ""UInt16"", ""null"" ]],
				 ""SignalCompletion"": [ 58, [ ""Byte"", ""null"" ]],
				 ""PostedToCompletionList"": [ 59, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PortObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Message { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 CommunicationInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 TargetThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 TargetPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _KALPC_DIRECT_EVENT DirectEvent
		{
			get
			{
				_KALPC_DIRECT_EVENT returnValue = new _KALPC_DIRECT_EVENT(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt16 TotalLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 52); } }
		public UInt16 Type { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 54); } }
		public UInt16 DataInfoOffset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 56); } }
		public Byte SignalCompletion{ get { return _StructureData[_BufferOffset +58]; } }
		public Byte PostedToCompletionList{ get { return _StructureData[_BufferOffset +59]; } }
	}
	#endregion
	#region _REMOTE_PORT_VIEW
 
	public class _REMOTE_PORT_VIEW
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _REMOTE_PORT_VIEW(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_REMOTE_PORT_VIEW"": [ 24, {
				 ""Length"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ViewSize"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ViewBase"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 ViewSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ViewBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _KALPC_HANDLE_DATA
 
	public class _KALPC_HANDLE_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KALPC_HANDLE_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KALPC_HANDLE_DATA"": [ 48, {
				 ""ObjectType"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Count"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DuplicateContext"": [ 8, [ ""_OB_DUPLICATE_OBJECT_STATE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ObjectType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _OB_DUPLICATE_OBJECT_STATE DuplicateContext
		{
			get
			{
				_OB_DUPLICATE_OBJECT_STATE returnValue = new _OB_DUPLICATE_OBJECT_STATE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KALPC_MESSAGE_ATTRIBUTES
 
	public class _KALPC_MESSAGE_ATTRIBUTES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KALPC_MESSAGE_ATTRIBUTES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KALPC_MESSAGE_ATTRIBUTES"": [ 72, {
				 ""ClientContext"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ServerContext"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PortContext"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CancelPortContext"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SecurityData"": [ 32, [ ""Pointer"", ""{\""target\"":\""_KALPC_SECURITY_DATA\""}"" ]],
				 ""View"": [ 40, [ ""Pointer"", ""{\""target\"":\""_KALPC_VIEW\""}"" ]],
				 ""HandleData"": [ 48, [ ""Pointer"", ""{\""target\"":\""_KALPC_HANDLE_DATA\""}"" ]],
				 ""DirectEvent"": [ 56, [ ""_KALPC_DIRECT_EVENT"", ""null"" ]],
				 ""WorkOnBehalfData"": [ 64, [ ""_KALPC_WORK_ON_BEHALF_DATA"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ClientContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ServerContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 PortContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 CancelPortContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 SecurityData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 View { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 HandleData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _KALPC_DIRECT_EVENT DirectEvent
		{
			get
			{
				_KALPC_DIRECT_EVENT returnValue = new _KALPC_DIRECT_EVENT(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _KALPC_WORK_ON_BEHALF_DATA WorkOnBehalfData
		{
			get
			{
				_KALPC_WORK_ON_BEHALF_DATA returnValue = new _KALPC_WORK_ON_BEHALF_DATA(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KALPC_SECURITY_DATA
 
	public class _KALPC_SECURITY_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KALPC_SECURITY_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KALPC_SECURITY_DATA"": [ 112, {
				 ""HandleTable"": [ 0, [ ""Pointer"", ""{\""target\"":\""_ALPC_HANDLE_TABLE\""}"" ]],
				 ""ContextHandle"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OwningProcess"": [ 16, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""OwnerPort"": [ 24, [ ""Pointer"", ""{\""target\"":\""_ALPC_PORT\""}"" ]],
				 ""DynamicSecurity"": [ 32, [ ""_SECURITY_CLIENT_CONTEXT"", ""null"" ]],
				 ""u1"": [ 104, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 HandleTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ContextHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 OwningProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 OwnerPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _SECURITY_CLIENT_CONTEXT DynamicSecurity
		{
			get
			{
				_SECURITY_CLIENT_CONTEXT returnValue = new _SECURITY_CLIENT_CONTEXT(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ALPC_WORK_ON_BEHALF_TICKET
 
	public class _ALPC_WORK_ON_BEHALF_TICKET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ALPC_WORK_ON_BEHALF_TICKET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ALPC_WORK_ON_BEHALF_TICKET"": [ 8, {
				 ""ThreadId"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ThreadCreationTimeLow"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ThreadId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ThreadCreationTimeLow { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _KALPC_DIRECT_EVENT
 
	public class _KALPC_DIRECT_EVENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KALPC_DIRECT_EVENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KALPC_DIRECT_EVENT"": [ 8, {
				 ""Value"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""DirectType"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""EventReferenced"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""EventObjectBits"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Value { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 DirectType
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 EventReferenced
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 EventObjectBits
		{
			get
			{
				// start: 2  end: 64  Mask: 1111111111111111111111111111111111111111111111111111111111111100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744073709551612) >> 2;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _IO_MINI_COMPLETION_PACKET_USER
 
	public class _IO_MINI_COMPLETION_PACKET_USER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_MINI_COMPLETION_PACKET_USER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_MINI_COMPLETION_PACKET_USER"": [ 80, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PacketType"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""KeyContext"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ApcContext"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IoStatus"": [ 40, [ ""Int32"", ""null"" ]],
				 ""IoStatusInformation"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""MiniPacketCallback"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Context"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Allocated"": [ 72, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 PacketType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 KeyContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ApcContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public Int32 IoStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 40); } }
		public UInt64 IoStatusInformation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 MiniPacketCallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public Byte Allocated{ get { return _StructureData[_BufferOffset +72]; } }
	}
	#endregion
	#region _IOP_IRP_EXTENSION
 
	public class _IOP_IRP_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IOP_IRP_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IOP_IRP_EXTENSION"": [ 64, {
				 ""ExtensionFlags"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Allocated"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""PropagateId"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""SpareBits"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":2,\""target\"":\""UInt16\""}"" ]],
				 ""TypesAllocated"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""GenericExtension"": [ 4, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""VerifierContext"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DiskIoAttributionHandle"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""ActivityId"": [ 24, [ ""_GUID"", ""null"" ]],
				 ""Timestamp"": [ 40, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ZeroingOffset"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""FsTrackOffsetBlob"": [ 40, [ ""Pointer"", ""{\""target\"":\""_IO_IRP_EXT_TRACK_OFFSET_HEADER\""}"" ]],
				 ""FsTrackedOffset"": [ 48, [ ""Int64"", ""null"" ]],
				 ""AdapterCryptoParameters"": [ 40, [ ""_IO_ADAPTER_CRYPTO_PARAMETERS"", ""null"" ]],
				 ""DriverFlags"": [ 56, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 ExtensionFlags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Allocated
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 PropagateId
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt16)value2;
			}
		}
		public UInt16 SpareBits
		{
			get
			{
				// start: 2  end: 16  Mask: 1111111111111100
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65532) >> 2;
				return (UInt16)value2;
			}
		}
		public UInt16 TypesAllocated { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public Byte[] GenericExtension
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 4];
				return returnValue;
			}
		}
		public UInt64 VerifierContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 DiskIoAttributionHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _GUID ActivityId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LARGE_INTEGER Timestamp
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt32 ZeroingOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt64 FsTrackOffsetBlob { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public Int64 FsTrackedOffset { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 48); } }
		public _IO_ADAPTER_CRYPTO_PARAMETERS AdapterCryptoParameters
		{
			get
			{
				_IO_ADAPTER_CRYPTO_PARAMETERS returnValue = new _IO_ADAPTER_CRYPTO_PARAMETERS(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG DriverFlags
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
	}
	#endregion
	#region _FILE_SEGMENT_ELEMENT
 
	public class _FILE_SEGMENT_ELEMENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FILE_SEGMENT_ELEMENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FILE_SEGMENT_ELEMENT"": [ 8, {
				 ""Buffer"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Alignment"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Buffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Alignment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _RELATIVE_SYMLINK_INFO
 
	public class _RELATIVE_SYMLINK_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RELATIVE_SYMLINK_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RELATIVE_SYMLINK_INFO"": [ 32, {
				 ""ExposedNamespaceLength"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""DeviceNameLength"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Reserved"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""InteriorMountPoint"": [ 8, [ ""Pointer"", ""{\""target\"":\""_RELATIVE_SYMLINK_INFO\""}"" ]],
				 ""OpenedName"": [ 16, [ ""_UNICODE_STRING"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 ExposedNamespaceLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 DeviceNameLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Reserved { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt64 InteriorMountPoint { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _UNICODE_STRING OpenedName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ECP_LIST
 
	public class _ECP_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ECP_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ECP_LIST"": [ 24, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""EcpList"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LIST_ENTRY EcpList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IOP_FILE_OBJECT_EXTENSION
 
	public class _IOP_FILE_OBJECT_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IOP_FILE_OBJECT_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IOP_FILE_OBJECT_EXTENSION"": [ 88, {
				 ""FoExtFlags"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""FoExtPerTypeExtension"": [ 8, [ ""Array"", ""{\""count\"":9,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""FoIoPriorityHint"": [ 80, [ ""Enumeration"", ""{\""enum_name\"":\""_IOP_PRIORITY_HINT\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 FoExtFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64[] FoExtPerTypeExtension
		{
			get
			{
				UInt64[] returnValue = new UInt64[9];
				int size = 8;
				for(int i=0; i<9; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
		public _IOP_PRIORITY_HINT FoIoPriorityHint { get { return (_IOP_PRIORITY_HINT)BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
	}
	#endregion
	#region _OPEN_PACKET
 
	public class _OPEN_PACKET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OPEN_PACKET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 216; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OPEN_PACKET"": [ 216, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""Int16"", ""null"" ]],
				 ""FileObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""FinalStatus"": [ 16, [ ""Int32"", ""null"" ]],
				 ""Information"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""ParseCheck"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""RelatedFileObject"": [ 40, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""ReferencedDeviceObject"": [ 40, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""OriginalAttributes"": [ 48, [ ""Pointer"", ""{\""target\"":\""_OBJECT_ATTRIBUTES\""}"" ]],
				 ""AllocationSize"": [ 56, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""CreateOptions"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""FileAttributes"": [ 68, [ ""UInt16"", ""null"" ]],
				 ""ShareAccess"": [ 70, [ ""UInt16"", ""null"" ]],
				 ""EaBuffer"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EaLength"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""Options"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""Disposition"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""BasicInformation"": [ 96, [ ""Pointer"", ""{\""target\"":\""_FILE_BASIC_INFORMATION\""}"" ]],
				 ""NetworkInformation"": [ 104, [ ""Pointer"", ""{\""target\"":\""_FILE_NETWORK_OPEN_INFORMATION\""}"" ]],
				 ""FileInformation"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CreateFileType"": [ 120, [ ""Enumeration"", ""{\""enum_name\"":\""_CREATE_FILE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""MailslotOrPipeParameters"": [ 128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Override"": [ 136, [ ""Byte"", ""null"" ]],
				 ""QueryOnly"": [ 137, [ ""Byte"", ""null"" ]],
				 ""DeleteOnly"": [ 138, [ ""Byte"", ""null"" ]],
				 ""FullAttributes"": [ 139, [ ""Byte"", ""null"" ]],
				 ""LocalFileObject"": [ 144, [ ""Pointer"", ""{\""target\"":\""_DUMMY_FILE_OBJECT\""}"" ]],
				 ""InternalFlags"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""AccessMode"": [ 156, [ ""Char"", ""null"" ]],
				 ""DriverCreateContext"": [ 160, [ ""_IO_DRIVER_CREATE_CONTEXT"", ""null"" ]],
				 ""FileInformationClass"": [ 200, [ ""Enumeration"", ""{\""enum_name\"":\""_FILE_INFORMATION_CLASS\"",\""target\"":\""UInt32\""}"" ]],
				 ""FileInformationLength"": [ 204, [ ""UInt32"", ""null"" ]],
				 ""FilterQuery"": [ 208, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 Size { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 FileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public Int32 FinalStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 Information { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 ParseCheck { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 RelatedFileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 ReferencedDeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 OriginalAttributes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _LARGE_INTEGER AllocationSize
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt32 CreateOptions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt16 FileAttributes { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 68); } }
		public UInt16 ShareAccess { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 70); } }
		public UInt64 EaBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt32 EaLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 Options { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 Disposition { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt64 BasicInformation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 NetworkInformation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 FileInformation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public _CREATE_FILE_TYPE CreateFileType { get { return (_CREATE_FILE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt64 MailslotOrPipeParameters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public Byte Override{ get { return _StructureData[_BufferOffset +136]; } }
		public Byte QueryOnly{ get { return _StructureData[_BufferOffset +137]; } }
		public Byte DeleteOnly{ get { return _StructureData[_BufferOffset +138]; } }
		public Byte FullAttributes{ get { return _StructureData[_BufferOffset +139]; } }
		public UInt64 LocalFileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt32 InternalFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public Char AccessMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 156); } }
		public _IO_DRIVER_CREATE_CONTEXT DriverCreateContext
		{
			get
			{
				_IO_DRIVER_CREATE_CONTEXT returnValue = new _IO_DRIVER_CREATE_CONTEXT(_StructureData, _BufferOffset + 160);
				return returnValue;
			}
		}
		public _FILE_INFORMATION_CLASS FileInformationClass { get { return (_FILE_INFORMATION_CLASS)BitConverter.ToUInt32(_StructureData, _BufferOffset + 200); } }
		public UInt32 FileInformationLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 204); } }
		public Byte FilterQuery{ get { return _StructureData[_BufferOffset +208]; } }
	}
	#endregion
	#region _ETW_SYSTEMTIME
 
	public class _ETW_SYSTEMTIME
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_SYSTEMTIME(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_SYSTEMTIME"": [ 16, {
				 ""Year"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Month"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""DayOfWeek"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Day"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""Hour"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""Minute"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""Second"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""Milliseconds"": [ 14, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Year { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Month { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 DayOfWeek { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Day { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt16 Hour { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 Minute { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public UInt16 Second { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public UInt16 Milliseconds { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 14); } }
	}
	#endregion
	#region _TIME_FIELDS
 
	public class _TIME_FIELDS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TIME_FIELDS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TIME_FIELDS"": [ 16, {
				 ""Year"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Month"": [ 2, [ ""Int16"", ""null"" ]],
				 ""Day"": [ 4, [ ""Int16"", ""null"" ]],
				 ""Hour"": [ 6, [ ""Int16"", ""null"" ]],
				 ""Minute"": [ 8, [ ""Int16"", ""null"" ]],
				 ""Second"": [ 10, [ ""Int16"", ""null"" ]],
				 ""Milliseconds"": [ 12, [ ""Int16"", ""null"" ]],
				 ""Weekday"": [ 14, [ ""Int16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int16 Year { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 Month { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public Int16 Day { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 4); } }
		public Int16 Hour { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 6); } }
		public Int16 Minute { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 8); } }
		public Int16 Second { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 10); } }
		public Int16 Milliseconds { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 12); } }
		public Int16 Weekday { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 14); } }
	}
	#endregion
	#region _TRACE_LOGFILE_HEADER
 
	public class _TRACE_LOGFILE_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TRACE_LOGFILE_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 280; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TRACE_LOGFILE_HEADER"": [ 280, {
				 ""BufferSize"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Version"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""VersionDetail"": [ 4, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""ProviderVersion"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""NumberOfProcessors"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""EndTime"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""TimerResolution"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""MaximumFileSize"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""LogFileMode"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""BuffersWritten"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""LogInstanceGuid"": [ 40, [ ""_GUID"", ""null"" ]],
				 ""StartBuffers"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""PointerSize"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""EventsLost"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""CpuSpeedInMHz"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""LoggerName"": [ 56, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""LogFileName"": [ 64, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""TimeZone"": [ 72, [ ""_RTL_TIME_ZONE_INFORMATION"", ""null"" ]],
				 ""BootTime"": [ 248, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""PerfFreq"": [ 256, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""StartTime"": [ 264, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ReservedFlags"": [ 272, [ ""UInt32"", ""null"" ]],
				 ""BuffersLost"": [ 276, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BufferSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _ANONYMOUS_TAG VersionDetail
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 ProviderVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 NumberOfProcessors { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _LARGE_INTEGER EndTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 TimerResolution { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 MaximumFileSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 LogFileMode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 BuffersWritten { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public _GUID LogInstanceGuid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt32 StartBuffers { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 PointerSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 EventsLost { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 CpuSpeedInMHz { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt64 LoggerName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 LogFileName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public _RTL_TIME_ZONE_INFORMATION TimeZone
		{
			get
			{
				_RTL_TIME_ZONE_INFORMATION returnValue = new _RTL_TIME_ZONE_INFORMATION(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _LARGE_INTEGER BootTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 248);
				return returnValue;
			}
		}
		public _LARGE_INTEGER PerfFreq
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
		public _LARGE_INTEGER StartTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 264);
				return returnValue;
			}
		}
		public UInt32 ReservedFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 272); } }
		public UInt32 BuffersLost { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 276); } }
	}
	#endregion
	#region _ETW_BUFFER_QUEUE
 
	public class _ETW_BUFFER_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_BUFFER_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_BUFFER_QUEUE"": [ 16, {
				 ""QueueTail"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SINGLE_LIST_ENTRY\""}"" ]],
				 ""QueueEntry"": [ 8, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 QueueTail { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _SINGLE_LIST_ENTRY QueueEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WMI_BUFFER_HEADER
 
	public class _WMI_BUFFER_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WMI_BUFFER_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WMI_BUFFER_HEADER"": [ 72, {
				 ""BufferSize"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SavedOffset"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""CurrentOffset"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ReferenceCount"": [ 12, [ ""Int32"", ""null"" ]],
				 ""TimeStamp"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""SequenceNumber"": [ 24, [ ""Int64"", ""null"" ]],
				 ""ClockType"": [ 32, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Frequency"": [ 32, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""SlistEntry"": [ 32, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""NextBuffer"": [ 32, [ ""Pointer"", ""{\""target\"":\""_WMI_BUFFER_HEADER\""}"" ]],
				 ""ClientContext"": [ 40, [ ""_ETW_BUFFER_CONTEXT"", ""null"" ]],
				 ""State"": [ 44, [ ""Enumeration"", ""{\""enum_name\"":\""_ETW_BUFFER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Offset"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""BufferFlag"": [ 52, [ ""UInt16"", ""null"" ]],
				 ""BufferType"": [ 54, [ ""UInt16"", ""null"" ]],
				 ""Padding1"": [ 56, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""ReferenceTime"": [ 56, [ ""_ETW_REF_CLOCK"", ""null"" ]],
				 ""GlobalEntry"": [ 56, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Pointer0"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Pointer1"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BufferSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SavedOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 CurrentOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Int32 ReferenceCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 12); } }
		public _LARGE_INTEGER TimeStamp
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public Int64 SequenceNumber { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ClockType
		{
			get
			{
				// start: 0  end: 3  Mask: 0000000000000111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 32);
				var value2 = (value & 7) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Frequency
		{
			get
			{
				// start: 3  end: 64  Mask: 1111111111111111111111111111111111111111111111111111111111111000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 32);
				var value2 = (value & 18446744073709551608) >> 3;
				return (UInt64)value2;
			}
		}
		public _SINGLE_LIST_ENTRY SlistEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 NextBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _ETW_BUFFER_CONTEXT ClientContext
		{
			get
			{
				_ETW_BUFFER_CONTEXT returnValue = new _ETW_BUFFER_CONTEXT(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _ETW_BUFFER_STATE State { get { return (_ETW_BUFFER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 Offset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt16 BufferFlag { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 52); } }
		public UInt16 BufferType { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 54); } }
		public UInt32[] Padding1
		{
			get
			{
				UInt32[] returnValue = new UInt32[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 56);
				return returnValue;
			}
		}
		public _ETW_REF_CLOCK ReferenceTime
		{
			get
			{
				_ETW_REF_CLOCK returnValue = new _ETW_REF_CLOCK(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _LIST_ENTRY GlobalEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt64 Pointer0 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 Pointer1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _ETW_STACK_CACHE
 
	public class _ETW_STACK_CACHE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_STACK_CACHE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_STACK_CACHE"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _EX_TIMER
 
	public class _EX_TIMER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_TIMER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_TIMER"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _ETW_SOFT_RESTART_CONTEXT
 
	public class _ETW_SOFT_RESTART_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_SOFT_RESTART_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_SOFT_RESTART_CONTEXT"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _ETW_EVENT_CALLBACK_CONTEXT
 
	public class _ETW_EVENT_CALLBACK_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_EVENT_CALLBACK_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_EVENT_CALLBACK_CONTEXT"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _WMI_LOGGER_CONTEXT
 
	public class _WMI_LOGGER_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WMI_LOGGER_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1360; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WMI_LOGGER_CONTEXT"": [ 1360, {
				 ""LoggerId"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""BufferSize"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""MaximumEventSize"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""LoggerMode"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""AcceptNewEvents"": [ 16, [ ""Int32"", ""null"" ]],
				 ""EventMarker"": [ 20, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ErrorMarker"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""SizeMask"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""GetCpuClock"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""LoggerThread"": [ 48, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""LoggerStatus"": [ 56, [ ""Int32"", ""null"" ]],
				 ""FailureReason"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""BufferQueue"": [ 64, [ ""_ETW_BUFFER_QUEUE"", ""null"" ]],
				 ""OverflowQueue"": [ 80, [ ""_ETW_BUFFER_QUEUE"", ""null"" ]],
				 ""GlobalList"": [ 96, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DebugIdTrackingList"": [ 112, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DecodeControlList"": [ 128, [ ""Pointer"", ""{\""target\"":\""_ETW_DECODE_CONTROL_ENTRY\""}"" ]],
				 ""DecodeControlCount"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""BatchedBufferList"": [ 144, [ ""Pointer"", ""{\""target\"":\""_WMI_BUFFER_HEADER\""}"" ]],
				 ""CurrentBuffer"": [ 144, [ ""_EX_FAST_REF"", ""null"" ]],
				 ""LoggerName"": [ 152, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""LogFileName"": [ 168, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""LogFilePattern"": [ 184, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""NewLogFileName"": [ 200, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ClockType"": [ 216, [ ""UInt32"", ""null"" ]],
				 ""LastFlushedBuffer"": [ 220, [ ""UInt32"", ""null"" ]],
				 ""FlushTimer"": [ 224, [ ""UInt32"", ""null"" ]],
				 ""FlushThreshold"": [ 228, [ ""UInt32"", ""null"" ]],
				 ""ByteOffset"": [ 232, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""MinimumBuffers"": [ 240, [ ""UInt32"", ""null"" ]],
				 ""BuffersAvailable"": [ 244, [ ""Int32"", ""null"" ]],
				 ""NumberOfBuffers"": [ 248, [ ""Int32"", ""null"" ]],
				 ""MaximumBuffers"": [ 252, [ ""UInt32"", ""null"" ]],
				 ""EventsLost"": [ 256, [ ""UInt32"", ""null"" ]],
				 ""PeakBuffersCount"": [ 260, [ ""Int32"", ""null"" ]],
				 ""BuffersWritten"": [ 264, [ ""UInt32"", ""null"" ]],
				 ""LogBuffersLost"": [ 268, [ ""UInt32"", ""null"" ]],
				 ""RealTimeBuffersDelivered"": [ 272, [ ""UInt32"", ""null"" ]],
				 ""RealTimeBuffersLost"": [ 276, [ ""UInt32"", ""null"" ]],
				 ""SequencePtr"": [ 280, [ ""Pointer"", ""{\""target\"":\""long\""}"" ]],
				 ""LocalSequence"": [ 288, [ ""UInt32"", ""null"" ]],
				 ""InstanceGuid"": [ 292, [ ""_GUID"", ""null"" ]],
				 ""MaximumFileSize"": [ 308, [ ""UInt32"", ""null"" ]],
				 ""FileCounter"": [ 312, [ ""Int32"", ""null"" ]],
				 ""PoolType"": [ 316, [ ""Enumeration"", ""{\""enum_name\"":\""_POOL_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ReferenceTime"": [ 320, [ ""_ETW_REF_CLOCK"", ""null"" ]],
				 ""CollectionOn"": [ 336, [ ""Int32"", ""null"" ]],
				 ""ProviderInfoSize"": [ 340, [ ""UInt32"", ""null"" ]],
				 ""Consumers"": [ 344, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""NumConsumers"": [ 360, [ ""UInt32"", ""null"" ]],
				 ""TransitionConsumer"": [ 368, [ ""Pointer"", ""{\""target\"":\""_ETW_REALTIME_CONSUMER\""}"" ]],
				 ""RealtimeLogfileHandle"": [ 376, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RealtimeLogfileName"": [ 384, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""RealtimeWriteOffset"": [ 400, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""RealtimeReadOffset"": [ 408, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""RealtimeLogfileSize"": [ 416, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""RealtimeLogfileUsage"": [ 424, [ ""UInt64"", ""null"" ]],
				 ""RealtimeMaximumFileSize"": [ 432, [ ""UInt64"", ""null"" ]],
				 ""RealtimeBuffersSaved"": [ 440, [ ""UInt32"", ""null"" ]],
				 ""RealtimeReferenceTime"": [ 448, [ ""_ETW_REF_CLOCK"", ""null"" ]],
				 ""NewRTEventsLost"": [ 464, [ ""Enumeration"", ""{\""enum_name\"":\""_ETW_RT_EVENT_LOSS\"",\""target\"":\""UInt32\""}"" ]],
				 ""LoggerEvent"": [ 472, [ ""_KEVENT"", ""null"" ]],
				 ""FlushEvent"": [ 496, [ ""_KEVENT"", ""null"" ]],
				 ""FlushTimeOutTimer"": [ 520, [ ""_KTIMER"", ""null"" ]],
				 ""LoggerDpc"": [ 584, [ ""_KDPC"", ""null"" ]],
				 ""LoggerMutex"": [ 648, [ ""_KMUTANT"", ""null"" ]],
				 ""LoggerLock"": [ 704, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""BufferListSpinLock"": [ 712, [ ""UInt64"", ""null"" ]],
				 ""BufferListPushLock"": [ 712, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""ClientSecurityContext"": [ 720, [ ""_SECURITY_CLIENT_CONTEXT"", ""null"" ]],
				 ""TokenAccessInformation"": [ 792, [ ""Pointer"", ""{\""target\"":\""_TOKEN_ACCESS_INFORMATION\""}"" ]],
				 ""SecurityDescriptor"": [ 800, [ ""_EX_FAST_REF"", ""null"" ]],
				 ""StartTime"": [ 808, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""LogFileHandle"": [ 816, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BufferSequenceNumber"": [ 824, [ ""Int64"", ""null"" ]],
				 ""Flags"": [ 832, [ ""UInt32"", ""null"" ]],
				 ""Persistent"": [ 832, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""AutoLogger"": [ 832, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""FsReady"": [ 832, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""RealTime"": [ 832, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""Wow"": [ 832, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""KernelTrace"": [ 832, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""NoMoreEnable"": [ 832, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""StackTracing"": [ 832, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""ErrorLogged"": [ 832, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""RealtimeLoggerContextFreed"": [ 832, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""PebsTracing"": [ 832, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""PmcCounters"": [ 832, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""PageAlignBuffers"": [ 832, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""StackLookasideListAllocated"": [ 832, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""SecurityTrace"": [ 832, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""LastBranchTracing"": [ 832, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""SystemLoggerIndex"": [ 832, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""StackCaching"": [ 832, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""ProviderTracking"": [ 832, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":25,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessorTrace"": [ 832, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""QpcDeltaTracking"": [ 832, [ ""BitField"", ""{\""end_bit\"":28,\""start_bit\"":27,\""target\"":\""UInt32\""}"" ]],
				 ""MarkerBufferSaved"": [ 832, [ ""BitField"", ""{\""end_bit\"":29,\""start_bit\"":28,\""target\"":\""UInt32\""}"" ]],
				 ""LargeMdlPages"": [ 832, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":29,\""target\"":\""UInt32\""}"" ]],
				 ""ExcludeKernelStack"": [ 832, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]],
				 ""SpareFlags2"": [ 832, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""RequestFlag"": [ 836, [ ""UInt32"", ""null"" ]],
				 ""DbgRequestNewFile"": [ 836, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""DbgRequestUpdateFile"": [ 836, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""DbgRequestFlush"": [ 836, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""DbgRequestDisableRealtime"": [ 836, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""DbgRequestDisconnectConsumer"": [ 836, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""DbgRequestConnectConsumer"": [ 836, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""DbgRequestNotifyConsumer"": [ 836, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""DbgRequestUpdateHeader"": [ 836, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""DbgRequestDeferredFlush"": [ 836, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""DbgRequestDeferredFlushTimer"": [ 836, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""DbgRequestFlushTimer"": [ 836, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""DbgRequestUpdateDebugger"": [ 836, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""DbgSpareRequestFlags"": [ 836, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""StackTraceBlock"": [ 848, [ ""_ETW_STACK_TRACE_BLOCK"", ""null"" ]],
				 ""HookIdMap"": [ 976, [ ""_RTL_BITMAP"", ""null"" ]],
				 ""StackCache"": [ 992, [ ""Pointer"", ""{\""target\"":\""_ETW_STACK_CACHE\""}"" ]],
				 ""PmcData"": [ 1000, [ ""Pointer"", ""{\""target\"":\""_ETW_PMC_SUPPORT\""}"" ]],
				 ""LbrData"": [ 1008, [ ""Pointer"", ""{\""target\"":\""_ETW_LBR_SUPPORT\""}"" ]],
				 ""IptData"": [ 1016, [ ""Pointer"", ""{\""target\"":\""_ETW_IPT_SUPPORT\""}"" ]],
				 ""BinaryTrackingList"": [ 1024, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ScratchArray"": [ 1040, [ ""Pointer"", ""{\""target\"":\""_WMI_BUFFER_HEADER*\""}"" ]],
				 ""DisallowedGuids"": [ 1048, [ ""_DISALLOWED_GUIDS"", ""null"" ]],
				 ""RelativeTimerDueTime"": [ 1064, [ ""Int64"", ""null"" ]],
				 ""PeriodicCaptureStateGuids"": [ 1072, [ ""_PERIODIC_CAPTURE_STATE_GUIDS"", ""null"" ]],
				 ""PeriodicCaptureStateTimer"": [ 1088, [ ""Pointer"", ""{\""target\"":\""_EX_TIMER\""}"" ]],
				 ""PeriodicCaptureStateTimerState"": [ 1096, [ ""Enumeration"", ""{\""enum_name\"":\""_ETW_PERIODIC_TIMER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""SoftRestartContext"": [ 1104, [ ""Pointer"", ""{\""target\"":\""_ETW_SOFT_RESTART_CONTEXT\""}"" ]],
				 ""SiloState"": [ 1112, [ ""Pointer"", ""{\""target\"":\""_ETW_SILODRIVERSTATE\""}"" ]],
				 ""CompressionWorkItem"": [ 1120, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""CompressionWorkItemState"": [ 1152, [ ""Int32"", ""null"" ]],
				 ""CompressionLock"": [ 1160, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""CompressionTarget"": [ 1168, [ ""Pointer"", ""{\""target\"":\""_WMI_BUFFER_HEADER\""}"" ]],
				 ""CompressionWorkspace"": [ 1176, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CompressionOn"": [ 1184, [ ""Int32"", ""null"" ]],
				 ""CompressionRatioGuess"": [ 1188, [ ""UInt32"", ""null"" ]],
				 ""PartialBufferCompressionLevel"": [ 1192, [ ""UInt32"", ""null"" ]],
				 ""CompressionResumptionMode"": [ 1196, [ ""Enumeration"", ""{\""enum_name\"":\""ETW_COMPRESSION_RESUMPTION_MODE\"",\""target\"":\""UInt32\""}"" ]],
				 ""PlaceholderList"": [ 1200, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""CompressionDpc"": [ 1208, [ ""_KDPC"", ""null"" ]],
				 ""LastBufferSwitchTime"": [ 1272, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""BufferWriteDuration"": [ 1280, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""BufferCompressDuration"": [ 1288, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ReferenceQpcDelta"": [ 1296, [ ""Int64"", ""null"" ]],
				 ""CallbackContext"": [ 1304, [ ""Pointer"", ""{\""target\"":\""_ETW_EVENT_CALLBACK_CONTEXT\""}"" ]],
				 ""LastDroppedTime"": [ 1312, [ ""Pointer"", ""{\""target\"":\""_LARGE_INTEGER\""}"" ]],
				 ""FlushingLastDroppedTime"": [ 1320, [ ""Pointer"", ""{\""target\"":\""_LARGE_INTEGER\""}"" ]],
				 ""FlushingSequenceNumber"": [ 1328, [ ""Int64"", ""null"" ]],
				 ""PartitionContext"": [ 1336, [ ""_ETW_PARTITION_CONTEXT"", ""null"" ]],
				 ""BufferMdl"": [ 1344, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 LoggerId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 BufferSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 MaximumEventSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 LoggerMode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public Int32 AcceptNewEvents { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32[] EventMarker
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 20);
				return returnValue;
			}
		}
		public UInt32 ErrorMarker { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 SizeMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 GetCpuClock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 LoggerThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public Int32 LoggerStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 FailureReason { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public _ETW_BUFFER_QUEUE BufferQueue
		{
			get
			{
				_ETW_BUFFER_QUEUE returnValue = new _ETW_BUFFER_QUEUE(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _ETW_BUFFER_QUEUE OverflowQueue
		{
			get
			{
				_ETW_BUFFER_QUEUE returnValue = new _ETW_BUFFER_QUEUE(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public _LIST_ENTRY GlobalList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public _LIST_ENTRY DebugIdTrackingList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt64 DecodeControlList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt32 DecodeControlCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public UInt64 BatchedBufferList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public _EX_FAST_REF CurrentBuffer
		{
			get
			{
				_EX_FAST_REF returnValue = new _EX_FAST_REF(_StructureData, _BufferOffset + 144);
				return returnValue;
			}
		}
		public _UNICODE_STRING LoggerName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 152);
				return returnValue;
			}
		}
		public _UNICODE_STRING LogFileName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 168);
				return returnValue;
			}
		}
		public _UNICODE_STRING LogFilePattern
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 184);
				return returnValue;
			}
		}
		public _UNICODE_STRING NewLogFileName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 200);
				return returnValue;
			}
		}
		public UInt32 ClockType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 216); } }
		public UInt32 LastFlushedBuffer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 220); } }
		public UInt32 FlushTimer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 224); } }
		public UInt32 FlushThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 228); } }
		public _LARGE_INTEGER ByteOffset
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 232);
				return returnValue;
			}
		}
		public UInt32 MinimumBuffers { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 240); } }
		public Int32 BuffersAvailable { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 244); } }
		public Int32 NumberOfBuffers { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 248); } }
		public UInt32 MaximumBuffers { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 252); } }
		public UInt32 EventsLost { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 256); } }
		public Int32 PeakBuffersCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 260); } }
		public UInt32 BuffersWritten { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 264); } }
		public UInt32 LogBuffersLost { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 268); } }
		public UInt32 RealTimeBuffersDelivered { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 272); } }
		public UInt32 RealTimeBuffersLost { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 276); } }
		public UInt64 SequencePtr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 280); } }
		public UInt32 LocalSequence { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 288); } }
		public _GUID InstanceGuid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 292);
				return returnValue;
			}
		}
		public UInt32 MaximumFileSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 308); } }
		public Int32 FileCounter { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 312); } }
		public _POOL_TYPE PoolType { get { return (_POOL_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 316); } }
		public _ETW_REF_CLOCK ReferenceTime
		{
			get
			{
				_ETW_REF_CLOCK returnValue = new _ETW_REF_CLOCK(_StructureData, _BufferOffset + 320);
				return returnValue;
			}
		}
		public Int32 CollectionOn { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 336); } }
		public UInt32 ProviderInfoSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 340); } }
		public _LIST_ENTRY Consumers
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 344);
				return returnValue;
			}
		}
		public UInt32 NumConsumers { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 360); } }
		public UInt64 TransitionConsumer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 368); } }
		public UInt64 RealtimeLogfileHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 376); } }
		public _UNICODE_STRING RealtimeLogfileName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 384);
				return returnValue;
			}
		}
		public _LARGE_INTEGER RealtimeWriteOffset
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 400);
				return returnValue;
			}
		}
		public _LARGE_INTEGER RealtimeReadOffset
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 408);
				return returnValue;
			}
		}
		public _LARGE_INTEGER RealtimeLogfileSize
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 416);
				return returnValue;
			}
		}
		public UInt64 RealtimeLogfileUsage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 424); } }
		public UInt64 RealtimeMaximumFileSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 432); } }
		public UInt32 RealtimeBuffersSaved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 440); } }
		public _ETW_REF_CLOCK RealtimeReferenceTime
		{
			get
			{
				_ETW_REF_CLOCK returnValue = new _ETW_REF_CLOCK(_StructureData, _BufferOffset + 448);
				return returnValue;
			}
		}
		public _ETW_RT_EVENT_LOSS NewRTEventsLost { get { return (_ETW_RT_EVENT_LOSS)BitConverter.ToUInt32(_StructureData, _BufferOffset + 464); } }
		public _KEVENT LoggerEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 472);
				return returnValue;
			}
		}
		public _KEVENT FlushEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 496);
				return returnValue;
			}
		}
		public _KTIMER FlushTimeOutTimer
		{
			get
			{
				_KTIMER returnValue = new _KTIMER(_StructureData, _BufferOffset + 520);
				return returnValue;
			}
		}
		public _KDPC LoggerDpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 584);
				return returnValue;
			}
		}
		public _KMUTANT LoggerMutex
		{
			get
			{
				_KMUTANT returnValue = new _KMUTANT(_StructureData, _BufferOffset + 648);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK LoggerLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 704);
				return returnValue;
			}
		}
		public UInt64 BufferListSpinLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 712); } }
		public _EX_PUSH_LOCK BufferListPushLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 712);
				return returnValue;
			}
		}
		public _SECURITY_CLIENT_CONTEXT ClientSecurityContext
		{
			get
			{
				_SECURITY_CLIENT_CONTEXT returnValue = new _SECURITY_CLIENT_CONTEXT(_StructureData, _BufferOffset + 720);
				return returnValue;
			}
		}
		public UInt64 TokenAccessInformation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 792); } }
		public _EX_FAST_REF SecurityDescriptor
		{
			get
			{
				_EX_FAST_REF returnValue = new _EX_FAST_REF(_StructureData, _BufferOffset + 800);
				return returnValue;
			}
		}
		public _LARGE_INTEGER StartTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 808);
				return returnValue;
			}
		}
		public UInt64 LogFileHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 816); } }
		public Int64 BufferSequenceNumber { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 824); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 832); } }
		public UInt32 Persistent
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 AutoLogger
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 FsReady
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 RealTime
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 Wow
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 KernelTrace
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 NoMoreEnable
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 StackTracing
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 ErrorLogged
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 RealtimeLoggerContextFreed
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 PebsTracing
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 PmcCounters
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 PageAlignBuffers
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 StackLookasideListAllocated
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 SecurityTrace
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 LastBranchTracing
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 SystemLoggerIndex
		{
			get
			{
				// start: 16  end: 24  Mask: 111111110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 16711680) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 StackCaching
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 16777216) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 ProviderTracking
		{
			get
			{
				// start: 25  end: 26  Mask: 10000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 33554432) >> 25;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessorTrace
		{
			get
			{
				// start: 26  end: 27  Mask: 100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 67108864) >> 26;
				return (UInt32)value2;
			}
		}
		public UInt32 QpcDeltaTracking
		{
			get
			{
				// start: 27  end: 28  Mask: 1000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 134217728) >> 27;
				return (UInt32)value2;
			}
		}
		public UInt32 MarkerBufferSaved
		{
			get
			{
				// start: 28  end: 29  Mask: 10000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 268435456) >> 28;
				return (UInt32)value2;
			}
		}
		public UInt32 LargeMdlPages
		{
			get
			{
				// start: 29  end: 30  Mask: 100000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 536870912) >> 29;
				return (UInt32)value2;
			}
		}
		public UInt32 ExcludeKernelStack
		{
			get
			{
				// start: 30  end: 31  Mask: 1000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 1073741824) >> 30;
				return (UInt32)value2;
			}
		}
		public UInt32 SpareFlags2
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 832);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public UInt32 RequestFlag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 836); } }
		public UInt32 DbgRequestNewFile
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 836);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgRequestUpdateFile
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 836);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgRequestFlush
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 836);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgRequestDisableRealtime
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 836);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgRequestDisconnectConsumer
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 836);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgRequestConnectConsumer
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 836);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgRequestNotifyConsumer
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 836);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgRequestUpdateHeader
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 836);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgRequestDeferredFlush
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 836);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgRequestDeferredFlushTimer
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 836);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgRequestFlushTimer
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 836);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgRequestUpdateDebugger
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 836);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 DbgSpareRequestFlags
		{
			get
			{
				// start: 12  end: 32  Mask: 11111111111111111111000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 836);
				var value2 = (value & 4294963200) >> 12;
				return (UInt32)value2;
			}
		}
		public _ETW_STACK_TRACE_BLOCK StackTraceBlock
		{
			get
			{
				_ETW_STACK_TRACE_BLOCK returnValue = new _ETW_STACK_TRACE_BLOCK(_StructureData, _BufferOffset + 848);
				return returnValue;
			}
		}
		public _RTL_BITMAP HookIdMap
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 976);
				return returnValue;
			}
		}
		public UInt64 StackCache { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 992); } }
		public UInt64 PmcData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1000); } }
		public UInt64 LbrData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1008); } }
		public UInt64 IptData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1016); } }
		public _LIST_ENTRY BinaryTrackingList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 1024);
				return returnValue;
			}
		}
		public UInt64 ScratchArray { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1040); } }
		public _DISALLOWED_GUIDS DisallowedGuids
		{
			get
			{
				_DISALLOWED_GUIDS returnValue = new _DISALLOWED_GUIDS(_StructureData, _BufferOffset + 1048);
				return returnValue;
			}
		}
		public Int64 RelativeTimerDueTime { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 1064); } }
		public _PERIODIC_CAPTURE_STATE_GUIDS PeriodicCaptureStateGuids
		{
			get
			{
				_PERIODIC_CAPTURE_STATE_GUIDS returnValue = new _PERIODIC_CAPTURE_STATE_GUIDS(_StructureData, _BufferOffset + 1072);
				return returnValue;
			}
		}
		public UInt64 PeriodicCaptureStateTimer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1088); } }
		public _ETW_PERIODIC_TIMER_STATE PeriodicCaptureStateTimerState { get { return (_ETW_PERIODIC_TIMER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 1096); } }
		public UInt64 SoftRestartContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1104); } }
		public UInt64 SiloState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1112); } }
		public _WORK_QUEUE_ITEM CompressionWorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 1120);
				return returnValue;
			}
		}
		public Int32 CompressionWorkItemState { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 1152); } }
		public _EX_PUSH_LOCK CompressionLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 1160);
				return returnValue;
			}
		}
		public UInt64 CompressionTarget { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1168); } }
		public UInt64 CompressionWorkspace { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1176); } }
		public Int32 CompressionOn { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 1184); } }
		public UInt32 CompressionRatioGuess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1188); } }
		public UInt32 PartialBufferCompressionLevel { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1192); } }
		public ETW_COMPRESSION_RESUMPTION_MODE CompressionResumptionMode { get { return (ETW_COMPRESSION_RESUMPTION_MODE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 1196); } }
		public _SINGLE_LIST_ENTRY PlaceholderList
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 1200);
				return returnValue;
			}
		}
		public _KDPC CompressionDpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 1208);
				return returnValue;
			}
		}
		public _LARGE_INTEGER LastBufferSwitchTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 1272);
				return returnValue;
			}
		}
		public _LARGE_INTEGER BufferWriteDuration
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 1280);
				return returnValue;
			}
		}
		public _LARGE_INTEGER BufferCompressDuration
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 1288);
				return returnValue;
			}
		}
		public Int64 ReferenceQpcDelta { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 1296); } }
		public UInt64 CallbackContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1304); } }
		public UInt64 LastDroppedTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1312); } }
		public UInt64 FlushingLastDroppedTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1320); } }
		public Int64 FlushingSequenceNumber { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 1328); } }
		public _ETW_PARTITION_CONTEXT PartitionContext
		{
			get
			{
				_ETW_PARTITION_CONTEXT returnValue = new _ETW_PARTITION_CONTEXT(_StructureData, _BufferOffset + 1336);
				return returnValue;
			}
		}
		public UInt64 BufferMdl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1344); } }
	}
	#endregion
	#region _HAL_PMC_COUNTERS
 
	public class _HAL_PMC_COUNTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HAL_PMC_COUNTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HAL_PMC_COUNTERS"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _ETW_PMC_SUPPORT
 
	public class _ETW_PMC_SUPPORT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_PMC_SUPPORT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_PMC_SUPPORT"": [ 32, {
				 ""Source"": [ 0, [ ""Pointer"", ""{\""target\"":\""_KPROFILE_SOURCE\""}"" ]],
				 ""HookIdCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""HookId"": [ 12, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt16\""}"" ]],
				 ""CountersCount"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""ProcessorCtrs"": [ 24, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_HAL_PMC_COUNTERS\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Source { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 HookIdCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt16[] HookId
		{
			get
			{
				UInt16[] returnValue = new UInt16[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 12);
				return returnValue;
			}
		}
		public UInt32 CountersCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _HAL_PMC_COUNTERS[] ProcessorCtrs
		{
			get
			{
				_HAL_PMC_COUNTERS[] returnValue = new _HAL_PMC_COUNTERS[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _HAL_PMC_COUNTERS(_StructureData, (i * size) + _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ETW_LBR_SUPPORT
 
	public class _ETW_LBR_SUPPORT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_LBR_SUPPORT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_LBR_SUPPORT"": [ 20, {
				 ""LbrHandle"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""LbrOptions"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""HookIdCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""HookId"": [ 12, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 LbrHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 LbrOptions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 HookIdCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt16[] HookId
		{
			get
			{
				UInt16[] returnValue = new UInt16[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 12);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ETW_IPT_SUPPORT
 
	public class _ETW_IPT_SUPPORT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_IPT_SUPPORT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_IPT_SUPPORT"": [ 40, {
				 ""IptHandle"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IptOption"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""EtwHwTraceExtInterface"": [ 16, [ ""Pointer"", ""{\""target\"":\""_ETW_HW_TRACE_EXT_INTERFACE\""}"" ]],
				 ""HookIdCount"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""HookId"": [ 28, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 IptHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 IptOption { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 EtwHwTraceExtInterface { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 HookIdCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt16[] HookId
		{
			get
			{
				UInt16[] returnValue = new UInt16[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 28);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EX_WNF_SUBSCRIPTION
 
	public class _EX_WNF_SUBSCRIPTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_WNF_SUBSCRIPTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_WNF_SUBSCRIPTION"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _ETW_SILODRIVERSTATE
 
	public class _ETW_SILODRIVERSTATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_SILODRIVERSTATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4640; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_SILODRIVERSTATE"": [ 4640, {
				 ""Silo"": [ 0, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]],
				 ""SiloGlobals"": [ 8, [ ""Pointer"", ""{\""target\"":\""_ESERVERSILO_GLOBALS\""}"" ]],
				 ""MaxLoggers"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""EtwpSecurityProviderGuidEntry"": [ 24, [ ""_ETW_GUID_ENTRY"", ""null"" ]],
				 ""EtwpLoggerRundown"": [ 448, [ ""Pointer"", ""{\""target\"":\""_EX_RUNDOWN_REF_CACHE_AWARE*\""}"" ]],
				 ""EtwpLoggerContext"": [ 456, [ ""Pointer"", ""{\""target\"":\""_WMI_LOGGER_CONTEXT*\""}"" ]],
				 ""EtwpGuidHashTable"": [ 464, [ ""Array"", ""{\""count\"":64,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""EtwpSecurityLoggers"": [ 4048, [ ""Array"", ""{\""count\"":8,\""target\"":\""UInt16\""}"" ]],
				 ""EtwpSecurityProviderEnableMask"": [ 4064, [ ""Byte"", ""null"" ]],
				 ""EtwpShutdownInProgress"": [ 4068, [ ""Int32"", ""null"" ]],
				 ""EtwpSecurityProviderPID"": [ 4072, [ ""UInt32"", ""null"" ]],
				 ""PrivHandleDemuxTable"": [ 4080, [ ""_ETW_PRIV_HANDLE_DEMUX_TABLE"", ""null"" ]],
				 ""EtwpCounters"": [ 4112, [ ""_ETW_COUNTERS"", ""null"" ]],
				 ""LogfileBytesWritten"": [ 4128, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ProcessorBlocks"": [ 4136, [ ""Pointer"", ""{\""target\"":\""_ETW_SILO_TRACING_BLOCK\""}"" ]],
				 ""ContainerRestoreWnfSubscription"": [ 4144, [ ""Pointer"", ""{\""target\"":\""_EX_WNF_SUBSCRIPTION\""}"" ]],
				 ""PartitionId"": [ 4152, [ ""_GUID"", ""null"" ]],
				 ""ParentId"": [ 4168, [ ""_GUID"", ""null"" ]],
				 ""QpcOffsetFromRoot"": [ 4184, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""PartitionName"": [ 4192, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""PartitionNameSize"": [ 4200, [ ""UInt16"", ""null"" ]],
				 ""UnusedPadding"": [ 4202, [ ""UInt16"", ""null"" ]],
				 ""PartitionType"": [ 4204, [ ""UInt32"", ""null"" ]],
				 ""SystemLoggerSettings"": [ 4208, [ ""_ETW_SYSTEM_LOGGER_SETTINGS"", ""null"" ]],
				 ""EtwpStartTraceMutex"": [ 4584, [ ""_KMUTANT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Silo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 SiloGlobals { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 MaxLoggers { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _ETW_GUID_ENTRY EtwpSecurityProviderGuidEntry
		{
			get
			{
				_ETW_GUID_ENTRY returnValue = new _ETW_GUID_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 EtwpLoggerRundown { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 448); } }
		public UInt64 EtwpLoggerContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 456); } }
		public _ETW_HASH_BUCKET[] EtwpGuidHashTable
		{
			get
			{
				_ETW_HASH_BUCKET[] returnValue = new _ETW_HASH_BUCKET[64];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<64; i++ )
					returnValue[i] = new _ETW_HASH_BUCKET(_StructureData, (i * size) + _BufferOffset + 464);
				return returnValue;
			}
		}
		public UInt16[] EtwpSecurityLoggers
		{
			get
			{
				UInt16[] returnValue = new UInt16[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 4048);
				return returnValue;
			}
		}
		public Byte EtwpSecurityProviderEnableMask{ get { return _StructureData[_BufferOffset +4064]; } }
		public Int32 EtwpShutdownInProgress { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4068); } }
		public UInt32 EtwpSecurityProviderPID { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4072); } }
		public _ETW_PRIV_HANDLE_DEMUX_TABLE PrivHandleDemuxTable
		{
			get
			{
				_ETW_PRIV_HANDLE_DEMUX_TABLE returnValue = new _ETW_PRIV_HANDLE_DEMUX_TABLE(_StructureData, _BufferOffset + 4080);
				return returnValue;
			}
		}
		public _ETW_COUNTERS EtwpCounters
		{
			get
			{
				_ETW_COUNTERS returnValue = new _ETW_COUNTERS(_StructureData, _BufferOffset + 4112);
				return returnValue;
			}
		}
		public _LARGE_INTEGER LogfileBytesWritten
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 4128);
				return returnValue;
			}
		}
		public UInt64 ProcessorBlocks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4136); } }
		public UInt64 ContainerRestoreWnfSubscription { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4144); } }
		public _GUID PartitionId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 4152);
				return returnValue;
			}
		}
		public _GUID ParentId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 4168);
				return returnValue;
			}
		}
		public _LARGE_INTEGER QpcOffsetFromRoot
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 4184);
				return returnValue;
			}
		}
		public UInt64 PartitionName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4192); } }
		public UInt16 PartitionNameSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4200); } }
		public UInt16 UnusedPadding { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4202); } }
		public UInt32 PartitionType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4204); } }
		public _ETW_SYSTEM_LOGGER_SETTINGS SystemLoggerSettings
		{
			get
			{
				_ETW_SYSTEM_LOGGER_SETTINGS returnValue = new _ETW_SYSTEM_LOGGER_SETTINGS(_StructureData, _BufferOffset + 4208);
				return returnValue;
			}
		}
		public _KMUTANT EtwpStartTraceMutex
		{
			get
			{
				_KMUTANT returnValue = new _KMUTANT(_StructureData, _BufferOffset + 4584);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ETW_LOGGER_HANDLE
 
	public class _ETW_LOGGER_HANDLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_LOGGER_HANDLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_LOGGER_HANDLE"": [ 1, {
				 ""DereferenceAndLeave"": [ 0, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte DereferenceAndLeave{ get { return _StructureData[_BufferOffset +0]; } }
	}
	#endregion
	#region _CI_NGEN_PATHS
 
	public class _CI_NGEN_PATHS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CI_NGEN_PATHS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CI_NGEN_PATHS"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _SEP_SILOSTATE
 
	public class _SEP_SILOSTATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEP_SILOSTATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEP_SILOSTATE"": [ 48, {
				 ""SystemLogonSession"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SEP_LOGON_SESSION_REFERENCES\""}"" ]],
				 ""AnonymousLogonSession"": [ 8, [ ""Pointer"", ""{\""target\"":\""_SEP_LOGON_SESSION_REFERENCES\""}"" ]],
				 ""AnonymousLogonToken"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AnonymousLogonTokenNoEveryone"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UncSystemPaths"": [ 32, [ ""Pointer"", ""{\""target\"":\""_UNICODE_STRING\""}"" ]],
				 ""NgenPaths"": [ 40, [ ""Pointer"", ""{\""target\"":\""_CI_NGEN_PATHS\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SystemLogonSession { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 AnonymousLogonSession { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 AnonymousLogonToken { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 AnonymousLogonTokenNoEveryone { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 UncSystemPaths { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 NgenPaths { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _TOKEN
 
	public class _TOKEN
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TOKEN(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1176; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TOKEN"": [ 1176, {
				 ""TokenSource"": [ 0, [ ""_TOKEN_SOURCE"", ""null"" ]],
				 ""TokenId"": [ 16, [ ""_LUID"", ""null"" ]],
				 ""AuthenticationId"": [ 24, [ ""_LUID"", ""null"" ]],
				 ""ParentTokenId"": [ 32, [ ""_LUID"", ""null"" ]],
				 ""ExpirationTime"": [ 40, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""TokenLock"": [ 48, [ ""Pointer"", ""{\""target\"":\""_ERESOURCE\""}"" ]],
				 ""ModifiedId"": [ 56, [ ""_LUID"", ""null"" ]],
				 ""Privileges"": [ 64, [ ""_SEP_TOKEN_PRIVILEGES"", ""null"" ]],
				 ""AuditPolicy"": [ 88, [ ""_SEP_AUDIT_POLICY"", ""null"" ]],
				 ""SessionId"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""UserAndGroupCount"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""RestrictedSidCount"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""VariableLength"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""DynamicCharged"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""DynamicAvailable"": [ 140, [ ""UInt32"", ""null"" ]],
				 ""DefaultOwnerIndex"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""UserAndGroups"": [ 152, [ ""Pointer"", ""{\""target\"":\""_SID_AND_ATTRIBUTES\""}"" ]],
				 ""RestrictedSids"": [ 160, [ ""Pointer"", ""{\""target\"":\""_SID_AND_ATTRIBUTES\""}"" ]],
				 ""PrimaryGroup"": [ 168, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DynamicPart"": [ 176, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""DefaultDacl"": [ 184, [ ""Pointer"", ""{\""target\"":\""_ACL\""}"" ]],
				 ""TokenType"": [ 192, [ ""Enumeration"", ""{\""enum_name\"":\""_TOKEN_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ImpersonationLevel"": [ 196, [ ""Enumeration"", ""{\""enum_name\"":\""_SECURITY_IMPERSONATION_LEVEL\"",\""target\"":\""UInt32\""}"" ]],
				 ""TokenFlags"": [ 200, [ ""UInt32"", ""null"" ]],
				 ""TokenInUse"": [ 204, [ ""Byte"", ""null"" ]],
				 ""IntegrityLevelIndex"": [ 208, [ ""UInt32"", ""null"" ]],
				 ""MandatoryPolicy"": [ 212, [ ""UInt32"", ""null"" ]],
				 ""LogonSession"": [ 216, [ ""Pointer"", ""{\""target\"":\""_SEP_LOGON_SESSION_REFERENCES\""}"" ]],
				 ""OriginatingLogonSession"": [ 224, [ ""_LUID"", ""null"" ]],
				 ""SidHash"": [ 232, [ ""_SID_AND_ATTRIBUTES_HASH"", ""null"" ]],
				 ""RestrictedSidHash"": [ 504, [ ""_SID_AND_ATTRIBUTES_HASH"", ""null"" ]],
				 ""pSecurityAttributes"": [ 776, [ ""Pointer"", ""{\""target\"":\""_AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION\""}"" ]],
				 ""Package"": [ 784, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Capabilities"": [ 792, [ ""Pointer"", ""{\""target\"":\""_SID_AND_ATTRIBUTES\""}"" ]],
				 ""CapabilityCount"": [ 800, [ ""UInt32"", ""null"" ]],
				 ""CapabilitiesHash"": [ 808, [ ""_SID_AND_ATTRIBUTES_HASH"", ""null"" ]],
				 ""LowboxNumberEntry"": [ 1080, [ ""Pointer"", ""{\""target\"":\""_SEP_LOWBOX_NUMBER_ENTRY\""}"" ]],
				 ""LowboxHandlesEntry"": [ 1088, [ ""Pointer"", ""{\""target\"":\""_SEP_CACHED_HANDLES_ENTRY\""}"" ]],
				 ""pClaimAttributes"": [ 1096, [ ""Pointer"", ""{\""target\"":\""_AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION\""}"" ]],
				 ""TrustLevelSid"": [ 1104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TrustLinkedToken"": [ 1112, [ ""Pointer"", ""{\""target\"":\""_TOKEN\""}"" ]],
				 ""IntegrityLevelSidValue"": [ 1120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TokenSidValues"": [ 1128, [ ""Pointer"", ""{\""target\"":\""_SEP_SID_VALUES_BLOCK\""}"" ]],
				 ""IndexEntry"": [ 1136, [ ""Pointer"", ""{\""target\"":\""_SEP_LUID_TO_INDEX_MAP_ENTRY\""}"" ]],
				 ""DiagnosticInfo"": [ 1144, [ ""Pointer"", ""{\""target\"":\""_SEP_TOKEN_DIAG_TRACK_ENTRY\""}"" ]],
				 ""BnoIsolationHandlesEntry"": [ 1152, [ ""Pointer"", ""{\""target\"":\""_SEP_CACHED_HANDLES_ENTRY\""}"" ]],
				 ""SessionObject"": [ 1160, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VariablePart"": [ 1168, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _TOKEN_SOURCE TokenSource
		{
			get
			{
				_TOKEN_SOURCE returnValue = new _TOKEN_SOURCE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LUID TokenId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LUID AuthenticationId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LUID ParentTokenId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ExpirationTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt64 TokenLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _LUID ModifiedId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _SEP_TOKEN_PRIVILEGES Privileges
		{
			get
			{
				_SEP_TOKEN_PRIVILEGES returnValue = new _SEP_TOKEN_PRIVILEGES(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _SEP_AUDIT_POLICY AuditPolicy
		{
			get
			{
				_SEP_AUDIT_POLICY returnValue = new _SEP_AUDIT_POLICY(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 UserAndGroupCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 RestrictedSidCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 VariableLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt32 DynamicCharged { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public UInt32 DynamicAvailable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 140); } }
		public UInt32 DefaultOwnerIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt64 UserAndGroups { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 RestrictedSids { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 PrimaryGroup { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 DynamicPart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 DefaultDacl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public _TOKEN_TYPE TokenType { get { return (_TOKEN_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel { get { return (_SECURITY_IMPERSONATION_LEVEL)BitConverter.ToUInt32(_StructureData, _BufferOffset + 196); } }
		public UInt32 TokenFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 200); } }
		public Byte TokenInUse{ get { return _StructureData[_BufferOffset +204]; } }
		public UInt32 IntegrityLevelIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 208); } }
		public UInt32 MandatoryPolicy { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 212); } }
		public UInt64 LogonSession { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public _LUID OriginatingLogonSession
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 224);
				return returnValue;
			}
		}
		public _SID_AND_ATTRIBUTES_HASH SidHash
		{
			get
			{
				_SID_AND_ATTRIBUTES_HASH returnValue = new _SID_AND_ATTRIBUTES_HASH(_StructureData, _BufferOffset + 232);
				return returnValue;
			}
		}
		public _SID_AND_ATTRIBUTES_HASH RestrictedSidHash
		{
			get
			{
				_SID_AND_ATTRIBUTES_HASH returnValue = new _SID_AND_ATTRIBUTES_HASH(_StructureData, _BufferOffset + 504);
				return returnValue;
			}
		}
		public UInt64 pSecurityAttributes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 776); } }
		public UInt64 Package { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 784); } }
		public UInt64 Capabilities { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 792); } }
		public UInt32 CapabilityCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 800); } }
		public _SID_AND_ATTRIBUTES_HASH CapabilitiesHash
		{
			get
			{
				_SID_AND_ATTRIBUTES_HASH returnValue = new _SID_AND_ATTRIBUTES_HASH(_StructureData, _BufferOffset + 808);
				return returnValue;
			}
		}
		public UInt64 LowboxNumberEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1080); } }
		public UInt64 LowboxHandlesEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1088); } }
		public UInt64 pClaimAttributes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1096); } }
		public UInt64 TrustLevelSid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1104); } }
		public UInt64 TrustLinkedToken { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1112); } }
		public UInt64 IntegrityLevelSidValue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1120); } }
		public UInt64 TokenSidValues { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1128); } }
		public UInt64 IndexEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1136); } }
		public UInt64 DiagnosticInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1144); } }
		public UInt64 BnoIsolationHandlesEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1152); } }
		public UInt64 SessionObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1160); } }
		public UInt64 VariablePart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1168); } }
	}
	#endregion
	#region _SEP_LOGON_SESSION_REFERENCES
 
	public class _SEP_LOGON_SESSION_REFERENCES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEP_LOGON_SESSION_REFERENCES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 192; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEP_LOGON_SESSION_REFERENCES"": [ 192, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SEP_LOGON_SESSION_REFERENCES\""}"" ]],
				 ""LogonId"": [ 8, [ ""_LUID"", ""null"" ]],
				 ""BuddyLogonId"": [ 16, [ ""_LUID"", ""null"" ]],
				 ""ReferenceCount"": [ 24, [ ""Int64"", ""null"" ]],
				 ""Flags"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""pDeviceMap"": [ 40, [ ""Pointer"", ""{\""target\"":\""_DEVICE_MAP\""}"" ]],
				 ""Token"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AccountName"": [ 56, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""AuthorityName"": [ 72, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""CachedHandlesTable"": [ 88, [ ""_SEP_CACHED_HANDLES_TABLE"", ""null"" ]],
				 ""SharedDataLock"": [ 104, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""SharedClaimAttributes"": [ 112, [ ""Pointer"", ""{\""target\"":\""_AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION\""}"" ]],
				 ""SharedSidValues"": [ 120, [ ""Pointer"", ""{\""target\"":\""_SEP_SID_VALUES_BLOCK\""}"" ]],
				 ""RevocationBlock"": [ 128, [ ""_OB_HANDLE_REVOCATION_BLOCK"", ""null"" ]],
				 ""ServerSilo"": [ 160, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]],
				 ""SiblingAuthId"": [ 168, [ ""_LUID"", ""null"" ]],
				 ""TokenList"": [ 176, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _LUID LogonId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _LUID BuddyLogonId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public Int64 ReferenceCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 pDeviceMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 Token { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _UNICODE_STRING AccountName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _UNICODE_STRING AuthorityName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _SEP_CACHED_HANDLES_TABLE CachedHandlesTable
		{
			get
			{
				_SEP_CACHED_HANDLES_TABLE returnValue = new _SEP_CACHED_HANDLES_TABLE(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK SharedDataLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt64 SharedClaimAttributes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 SharedSidValues { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public _OB_HANDLE_REVOCATION_BLOCK RevocationBlock
		{
			get
			{
				_OB_HANDLE_REVOCATION_BLOCK returnValue = new _OB_HANDLE_REVOCATION_BLOCK(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt64 ServerSilo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public _LUID SiblingAuthId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 168);
				return returnValue;
			}
		}
		public _LIST_ENTRY TokenList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 176);
				return returnValue;
			}
		}
	}
	#endregion
	#region _OBJECT_HEADER
 
	public class _OBJECT_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_HEADER"": [ 56, {
				 ""PointerCount"": [ 0, [ ""Int64"", ""null"" ]],
				 ""HandleCount"": [ 8, [ ""Int64"", ""null"" ]],
				 ""NextToFree"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Lock"": [ 16, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""TypeIndex"": [ 24, [ ""Byte"", ""null"" ]],
				 ""TraceFlags"": [ 25, [ ""Byte"", ""null"" ]],
				 ""DbgRefTrace"": [ 25, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""DbgTracePermanent"": [ 25, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""InfoMask"": [ 26, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 27, [ ""Byte"", ""null"" ]],
				 ""NewObject"": [ 27, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""KernelObject"": [ 27, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""KernelOnlyAccess"": [ 27, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""ExclusiveObject"": [ 27, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""PermanentObject"": [ 27, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""DefaultSecurityQuota"": [ 27, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""SingleHandleEntry"": [ 27, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""DeletedInline"": [ 27, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""Byte\""}"" ]],
				 ""Reserved"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""ObjectCreateInfo"": [ 32, [ ""Pointer"", ""{\""target\"":\""_OBJECT_CREATE_INFORMATION\""}"" ]],
				 ""QuotaBlockCharged"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SecurityDescriptor"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Body"": [ 48, [ ""_QUAD"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int64 PointerCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 0); } }
		public Int64 HandleCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 NextToFree { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _EX_PUSH_LOCK Lock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public Byte TypeIndex{ get { return _StructureData[_BufferOffset +24]; } }
		public Byte TraceFlags{ get { return _StructureData[_BufferOffset +25]; } }
		public Byte DbgRefTrace
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 25];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte DbgTracePermanent
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 25];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte InfoMask{ get { return _StructureData[_BufferOffset +26]; } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +27]; } }
		public Byte NewObject
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 27];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte KernelObject
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 27];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte KernelOnlyAccess
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 27];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte ExclusiveObject
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 27];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte PermanentObject
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 27];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte DefaultSecurityQuota
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 27];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte SingleHandleEntry
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				Byte value = _StructureData[_BufferOffset + 27];
				var value2 = (value & 64) >> 6;
				return (Byte)value2;
			}
		}
		public Byte DeletedInline
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				Byte value = _StructureData[_BufferOffset + 27];
				var value2 = (value & 128) >> 7;
				return (Byte)value2;
			}
		}
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt64 ObjectCreateInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 QuotaBlockCharged { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 SecurityDescriptor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _QUAD Body
		{
			get
			{
				_QUAD returnValue = new _QUAD(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
	}
	#endregion
	#region _OBJECT_HEADER_QUOTA_INFO
 
	public class _OBJECT_HEADER_QUOTA_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_HEADER_QUOTA_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_HEADER_QUOTA_INFO"": [ 32, {
				 ""PagedPoolCharge"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""NonPagedPoolCharge"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""SecurityDescriptorCharge"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Reserved1"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""SecurityDescriptorQuotaBlock"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Reserved2"": [ 24, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PagedPoolCharge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 NonPagedPoolCharge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 SecurityDescriptorCharge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Reserved1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 SecurityDescriptorQuotaBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Reserved2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _OBJECT_HEADER_PROCESS_INFO
 
	public class _OBJECT_HEADER_PROCESS_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_HEADER_PROCESS_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_HEADER_PROCESS_INFO"": [ 16, {
				 ""ExclusiveProcess"": [ 0, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""Reserved"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ExclusiveProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Reserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _OBJECT_HEADER_HANDLE_INFO
 
	public class _OBJECT_HEADER_HANDLE_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_HEADER_HANDLE_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_HEADER_HANDLE_INFO"": [ 16, {
				 ""HandleCountDataBase"": [ 0, [ ""Pointer"", ""{\""target\"":\""_OBJECT_HANDLE_COUNT_DATABASE\""}"" ]],
				 ""SingleEntry"": [ 0, [ ""_OBJECT_HANDLE_COUNT_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 HandleCountDataBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _OBJECT_HANDLE_COUNT_ENTRY SingleEntry
		{
			get
			{
				_OBJECT_HANDLE_COUNT_ENTRY returnValue = new _OBJECT_HANDLE_COUNT_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _OBJECT_HEADER_NAME_INFO
 
	public class _OBJECT_HEADER_NAME_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_HEADER_NAME_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_HEADER_NAME_INFO"": [ 32, {
				 ""Directory"": [ 0, [ ""Pointer"", ""{\""target\"":\""_OBJECT_DIRECTORY\""}"" ]],
				 ""Name"": [ 8, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ReferenceCount"": [ 24, [ ""Int32"", ""null"" ]],
				 ""Reserved"": [ 28, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Directory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _UNICODE_STRING Name
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public Int32 ReferenceCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _OBJECT_HEADER_CREATOR_INFO
 
	public class _OBJECT_HEADER_CREATOR_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_HEADER_CREATOR_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_HEADER_CREATOR_INFO"": [ 32, {
				 ""TypeList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CreatorUniqueProcess"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CreatorBackTraceIndex"": [ 24, [ ""UInt16"", ""null"" ]],
				 ""Reserved1"": [ 26, [ ""UInt16"", ""null"" ]],
				 ""Reserved2"": [ 28, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY TypeList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 CreatorUniqueProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt16 CreatorBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 24); } }
		public UInt16 Reserved1 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 26); } }
		public UInt32 Reserved2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _OBJECT_HEADER_AUDIT_INFO
 
	public class _OBJECT_HEADER_AUDIT_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_HEADER_AUDIT_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_HEADER_AUDIT_INFO"": [ 16, {
				 ""SecurityDescriptor"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Reserved"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SecurityDescriptor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Reserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _OBJECT_HEADER_EXTENDED_INFO
 
	public class _OBJECT_HEADER_EXTENDED_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_HEADER_EXTENDED_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_HEADER_EXTENDED_INFO"": [ 16, {
				 ""Footer"": [ 0, [ ""Pointer"", ""{\""target\"":\""_OBJECT_FOOTER\""}"" ]],
				 ""Reserved"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Footer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Reserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _OBJECT_FOOTER
 
	public class _OBJECT_FOOTER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_FOOTER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_FOOTER"": [ 48, {
				 ""HandleRevocationInfo"": [ 0, [ ""_HANDLE_REVOCATION_INFO"", ""null"" ]],
				 ""ExtendedUserInfo"": [ 32, [ ""_OB_EXTENDED_USER_INFO"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _HANDLE_REVOCATION_INFO HandleRevocationInfo
		{
			get
			{
				_HANDLE_REVOCATION_INFO returnValue = new _HANDLE_REVOCATION_INFO(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _OB_EXTENDED_USER_INFO ExtendedUserInfo
		{
			get
			{
				_OB_EXTENDED_USER_INFO returnValue = new _OB_EXTENDED_USER_INFO(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _OB_EXTENDED_USER_INFO
 
	public class _OB_EXTENDED_USER_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OB_EXTENDED_USER_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OB_EXTENDED_USER_INFO"": [ 16, {
				 ""Context1"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Context2"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Context1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Context2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _HANDLE_REVOCATION_INFO
 
	public class _HANDLE_REVOCATION_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HANDLE_REVOCATION_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HANDLE_REVOCATION_INFO"": [ 32, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""RevocationBlock"": [ 16, [ ""Pointer"", ""{\""target\"":\""_OB_HANDLE_REVOCATION_BLOCK\""}"" ]],
				 ""AllowHandleRevocation"": [ 24, [ ""Byte"", ""null"" ]],
				 ""Padding1"": [ 25, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""Padding2"": [ 28, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 RevocationBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Byte AllowHandleRevocation{ get { return _StructureData[_BufferOffset +24]; } }
		public Byte[] Padding1
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 25];
				return returnValue;
			}
		}
		public Byte[] Padding2
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 28];
				return returnValue;
			}
		}
	}
	#endregion
	#region _OBP_LOOKUP_CONTEXT
 
	public class _OBP_LOOKUP_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBP_LOOKUP_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBP_LOOKUP_CONTEXT"": [ 40, {
				 ""Directory"": [ 0, [ ""Pointer"", ""{\""target\"":\""_OBJECT_DIRECTORY\""}"" ]],
				 ""Object"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EntryLink"": [ 16, [ ""Pointer"", ""{\""target\"":\""_OBJECT_DIRECTORY_ENTRY*\""}"" ]],
				 ""HashValue"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""HashIndex"": [ 28, [ ""UInt16"", ""null"" ]],
				 ""DirectoryLocked"": [ 30, [ ""Byte"", ""null"" ]],
				 ""LockedExclusive"": [ 31, [ ""Byte"", ""null"" ]],
				 ""LockStateSignature"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Directory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Object { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 EntryLink { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 HashValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt16 HashIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 28); } }
		public Byte DirectoryLocked{ get { return _StructureData[_BufferOffset +30]; } }
		public Byte LockedExclusive{ get { return _StructureData[_BufferOffset +31]; } }
		public UInt32 LockStateSignature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _OBJECT_DIRECTORY
 
	public class _OBJECT_DIRECTORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_DIRECTORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 344; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_DIRECTORY"": [ 344, {
				 ""HashBuckets"": [ 0, [ ""Array"", ""{\""count\"":37,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_OBJECT_DIRECTORY_ENTRY\""}}"" ]],
				 ""Lock"": [ 296, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""DeviceMap"": [ 304, [ ""Pointer"", ""{\""target\"":\""_DEVICE_MAP\""}"" ]],
				 ""ShadowDirectory"": [ 312, [ ""Pointer"", ""{\""target\"":\""_OBJECT_DIRECTORY\""}"" ]],
				 ""NamespaceEntry"": [ 320, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SessionObject"": [ 328, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Flags"": [ 336, [ ""UInt32"", ""null"" ]],
				 ""SessionId"": [ 340, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _OBJECT_DIRECTORY_ENTRY[] HashBuckets
		{
			get
			{
				_OBJECT_DIRECTORY_ENTRY[] returnValue = new _OBJECT_DIRECTORY_ENTRY[37];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<37; i++ )
					returnValue[i] = new _OBJECT_DIRECTORY_ENTRY(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK Lock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 296);
				return returnValue;
			}
		}
		public UInt64 DeviceMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 304); } }
		public UInt64 ShadowDirectory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 312); } }
		public UInt64 NamespaceEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 320); } }
		public UInt64 SessionObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 328); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 336); } }
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 340); } }
	}
	#endregion
	#region _OBP_SILODRIVERSTATE
 
	public class _OBP_SILODRIVERSTATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBP_SILODRIVERSTATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 736; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBP_SILODRIVERSTATE"": [ 736, {
				 ""SystemDeviceMap"": [ 0, [ ""Pointer"", ""{\""target\"":\""_DEVICE_MAP\""}"" ]],
				 ""SystemDosDeviceState"": [ 8, [ ""_OBP_SYSTEM_DOS_DEVICE_STATE"", ""null"" ]],
				 ""DeviceMapLock"": [ 120, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""PrivateNamespaceLookupTable"": [ 128, [ ""_OBJECT_NAMESPACE_LOOKUPTABLE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SystemDeviceMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _OBP_SYSTEM_DOS_DEVICE_STATE SystemDosDeviceState
		{
			get
			{
				_OBP_SYSTEM_DOS_DEVICE_STATE returnValue = new _OBP_SYSTEM_DOS_DEVICE_STATE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK DeviceMapLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
		public _OBJECT_NAMESPACE_LOOKUPTABLE PrivateNamespaceLookupTable
		{
			get
			{
				_OBJECT_NAMESPACE_LOOKUPTABLE returnValue = new _OBJECT_NAMESPACE_LOOKUPTABLE(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEAP_INFO_BLOCK
 
	public class _WHEAP_INFO_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEAP_INFO_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEAP_INFO_BLOCK"": [ 24, {
				 ""ErrorSourceCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ErrorSourceTable"": [ 8, [ ""Pointer"", ""{\""target\"":\""_WHEAP_ERROR_SOURCE_TABLE\""}"" ]],
				 ""WorkQueue"": [ 16, [ ""Pointer"", ""{\""target\"":\""_WHEAP_WORK_QUEUE\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ErrorSourceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 ErrorSourceTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 WorkQueue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _WHEAP_ERROR_SOURCE
 
	public class _WHEAP_ERROR_SOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEAP_ERROR_SOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1072; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEAP_ERROR_SOURCE"": [ 1072, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FailedAllocations"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""PlatformErrorSourceId"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""ErrorCount"": [ 24, [ ""Int32"", ""null"" ]],
				 ""RecordCount"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""RecordLength"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""PoolTag"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Type"": [ 40, [ ""Enumeration"", ""{\""enum_name\"":\""_WHEA_ERROR_SOURCE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Records"": [ 48, [ ""Pointer"", ""{\""target\"":\""_WHEAP_ERROR_RECORD_WRAPPER\""}"" ]],
				 ""Context"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SectionCount"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""SectionLength"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""TickCountAtLastError"": [ 72, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""AccumulatedErrors"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""TotalErrors"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""Deferred"": [ 88, [ ""Byte"", ""null"" ]],
				 ""Busy"": [ 92, [ ""Int32"", ""null"" ]],
				 ""Descriptor"": [ 96, [ ""_WHEA_ERROR_SOURCE_DESCRIPTOR"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 FailedAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 PlatformErrorSourceId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public Int32 ErrorCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 RecordCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 RecordLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 PoolTag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public _WHEA_ERROR_SOURCE_TYPE Type { get { return (_WHEA_ERROR_SOURCE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt64 Records { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt32 SectionCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 SectionLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public _LARGE_INTEGER TickCountAtLastError
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public UInt32 AccumulatedErrors { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 TotalErrors { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public Byte Deferred{ get { return _StructureData[_BufferOffset +88]; } }
		public Int32 Busy { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 92); } }
		public _WHEA_ERROR_SOURCE_DESCRIPTOR Descriptor
		{
			get
			{
				_WHEA_ERROR_SOURCE_DESCRIPTOR returnValue = new _WHEA_ERROR_SOURCE_DESCRIPTOR(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEAP_ERROR_RECORD_WRAPPER
 
	public class _WHEAP_ERROR_RECORD_WRAPPER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEAP_ERROR_RECORD_WRAPPER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 240; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEAP_ERROR_RECORD_WRAPPER"": [ 240, {
				 ""WorkEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Length"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ProcessorNumber"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 24, [ ""_WHEAP_ERROR_RECORD_WRAPPER_FLAGS"", ""null"" ]],
				 ""InUse"": [ 28, [ ""Int32"", ""null"" ]],
				 ""ErrorSource"": [ 32, [ ""Pointer"", ""{\""target\"":\""_WHEAP_ERROR_SOURCE\""}"" ]],
				 ""ErrorRecord"": [ 40, [ ""_WHEA_ERROR_RECORD"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY WorkEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ProcessorNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _WHEAP_ERROR_RECORD_WRAPPER_FLAGS Flags
		{
			get
			{
				_WHEAP_ERROR_RECORD_WRAPPER_FLAGS returnValue = new _WHEAP_ERROR_RECORD_WRAPPER_FLAGS(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public Int32 InUse { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 28); } }
		public UInt64 ErrorSource { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _WHEA_ERROR_RECORD ErrorRecord
		{
			get
			{
				_WHEA_ERROR_RECORD returnValue = new _WHEA_ERROR_RECORD(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WNF_NODE_HEADER
 
	public class _WNF_NODE_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WNF_NODE_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WNF_NODE_HEADER"": [ 4, {
				 ""NodeTypeCode"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""NodeByteSize"": [ 2, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 NodeTypeCode { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 NodeByteSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
	}
	#endregion
	#region _WNF_LOCK
 
	public class _WNF_LOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WNF_LOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WNF_LOCK"": [ 8, {
				 ""PushLock"": [ 0, [ ""_EX_PUSH_LOCK"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _EX_PUSH_LOCK PushLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WNF_STATE_NAME_STRUCT
 
	public class _WNF_STATE_NAME_STRUCT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WNF_STATE_NAME_STRUCT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WNF_STATE_NAME_STRUCT"": [ 8, {
				 ""Version"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""NameLifetime"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""DataScope"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":6,\""target\"":\""UInt64\""}"" ]],
				 ""PermanentData"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""Sequence"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Version
		{
			get
			{
				// start: 0  end: 4  Mask: 0000000000001111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 15) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 NameLifetime
		{
			get
			{
				// start: 4  end: 6  Mask: 0000000000110000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 48) >> 4;
				return (UInt64)value2;
			}
		}
		public UInt64 DataScope
		{
			get
			{
				// start: 6  end: 10  Mask: 0000001111000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 960) >> 6;
				return (UInt64)value2;
			}
		}
		public UInt64 PermanentData
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 Sequence
		{
			get
			{
				// start: 11  end: 64  Mask: 1111111111111111111111111111111111111111111111111111100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744073709549568) >> 11;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _WNF_SCOPE_INSTANCE
 
	public class _WNF_SCOPE_INSTANCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WNF_SCOPE_INSTANCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WNF_SCOPE_INSTANCE"": [ 80, {
				 ""Header"": [ 0, [ ""_WNF_NODE_HEADER"", ""null"" ]],
				 ""RunRef"": [ 8, [ ""_EX_RUNDOWN_REF"", ""null"" ]],
				 ""DataScope"": [ 16, [ ""Enumeration"", ""{\""enum_name\"":\""_WNF_DATA_SCOPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""InstanceIdSize"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""InstanceIdData"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ResolverListEntry"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""NameSetLock"": [ 48, [ ""_WNF_LOCK"", ""null"" ]],
				 ""NameSet"": [ 56, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""PermanentDataStore"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VolatilePermanentDataStore"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _WNF_NODE_HEADER Header
		{
			get
			{
				_WNF_NODE_HEADER returnValue = new _WNF_NODE_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _EX_RUNDOWN_REF RunRef
		{
			get
			{
				_EX_RUNDOWN_REF returnValue = new _EX_RUNDOWN_REF(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _WNF_DATA_SCOPE DataScope { get { return (_WNF_DATA_SCOPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 InstanceIdSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 InstanceIdData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _LIST_ENTRY ResolverListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _WNF_LOCK NameSetLock
		{
			get
			{
				_WNF_LOCK returnValue = new _WNF_LOCK(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _RTL_AVL_TREE NameSet
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt64 PermanentDataStore { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 VolatilePermanentDataStore { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
	}
	#endregion
	#region _WNF_NAME_INSTANCE
 
	public class _WNF_NAME_INSTANCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WNF_NAME_INSTANCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 168; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WNF_NAME_INSTANCE"": [ 168, {
				 ""Header"": [ 0, [ ""_WNF_NODE_HEADER"", ""null"" ]],
				 ""RunRef"": [ 8, [ ""_EX_RUNDOWN_REF"", ""null"" ]],
				 ""TreeLinks"": [ 16, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""StateName"": [ 40, [ ""_WNF_STATE_NAME_STRUCT"", ""null"" ]],
				 ""ScopeInstance"": [ 48, [ ""Pointer"", ""{\""target\"":\""_WNF_SCOPE_INSTANCE\""}"" ]],
				 ""StateNameInfo"": [ 56, [ ""_WNF_STATE_NAME_REGISTRATION"", ""null"" ]],
				 ""StateDataLock"": [ 80, [ ""_WNF_LOCK"", ""null"" ]],
				 ""StateData"": [ 88, [ ""Pointer"", ""{\""target\"":\""_WNF_STATE_DATA\""}"" ]],
				 ""CurrentChangeStamp"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""PermanentDataStore"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StateSubscriptionListLock"": [ 112, [ ""_WNF_LOCK"", ""null"" ]],
				 ""StateSubscriptionListHead"": [ 120, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""TemporaryNameListEntry"": [ 136, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CreatorProcess"": [ 152, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""DataSubscribersCount"": [ 160, [ ""Int32"", ""null"" ]],
				 ""CurrentDeliveryCount"": [ 164, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _WNF_NODE_HEADER Header
		{
			get
			{
				_WNF_NODE_HEADER returnValue = new _WNF_NODE_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _EX_RUNDOWN_REF RunRef
		{
			get
			{
				_EX_RUNDOWN_REF returnValue = new _EX_RUNDOWN_REF(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _RTL_BALANCED_NODE TreeLinks
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _WNF_STATE_NAME_STRUCT StateName
		{
			get
			{
				_WNF_STATE_NAME_STRUCT returnValue = new _WNF_STATE_NAME_STRUCT(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt64 ScopeInstance { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _WNF_STATE_NAME_REGISTRATION StateNameInfo
		{
			get
			{
				_WNF_STATE_NAME_REGISTRATION returnValue = new _WNF_STATE_NAME_REGISTRATION(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _WNF_LOCK StateDataLock
		{
			get
			{
				_WNF_LOCK returnValue = new _WNF_LOCK(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt64 StateData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt32 CurrentChangeStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt64 PermanentDataStore { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public _WNF_LOCK StateSubscriptionListLock
		{
			get
			{
				_WNF_LOCK returnValue = new _WNF_LOCK(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public _LIST_ENTRY StateSubscriptionListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
		public _LIST_ENTRY TemporaryNameListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public UInt64 CreatorProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public Int32 DataSubscribersCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 160); } }
		public Int32 CurrentDeliveryCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 164); } }
	}
	#endregion
	#region _WNF_SUBSCRIPTION
 
	public class _WNF_SUBSCRIPTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WNF_SUBSCRIPTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 136; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WNF_SUBSCRIPTION"": [ 136, {
				 ""Header"": [ 0, [ ""_WNF_NODE_HEADER"", ""null"" ]],
				 ""RunRef"": [ 8, [ ""_EX_RUNDOWN_REF"", ""null"" ]],
				 ""SubscriptionId"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""ProcessSubscriptionListEntry"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Process"": [ 40, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""NameInstance"": [ 48, [ ""Pointer"", ""{\""target\"":\""_WNF_NAME_INSTANCE\""}"" ]],
				 ""StateName"": [ 56, [ ""_WNF_STATE_NAME_STRUCT"", ""null"" ]],
				 ""StateSubscriptionListEntry"": [ 64, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CallbackRoutine"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""CallbackContext"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CurrentChangeStamp"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""SubscribedEventSet"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""PendingSubscriptionListEntry"": [ 104, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SubscriptionState"": [ 120, [ ""Enumeration"", ""{\""enum_name\"":\""_WNF_SUBSCRIPTION_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""SignaledEventSet"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""InDeliveryEventSet"": [ 128, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _WNF_NODE_HEADER Header
		{
			get
			{
				_WNF_NODE_HEADER returnValue = new _WNF_NODE_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _EX_RUNDOWN_REF RunRef
		{
			get
			{
				_EX_RUNDOWN_REF returnValue = new _EX_RUNDOWN_REF(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 SubscriptionId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _LIST_ENTRY ProcessSubscriptionListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 Process { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 NameInstance { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _WNF_STATE_NAME_STRUCT StateName
		{
			get
			{
				_WNF_STATE_NAME_STRUCT returnValue = new _WNF_STATE_NAME_STRUCT(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _LIST_ENTRY StateSubscriptionListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt64 CallbackRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 CallbackContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt32 CurrentChangeStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 SubscribedEventSet { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public _LIST_ENTRY PendingSubscriptionListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public _WNF_SUBSCRIPTION_STATE SubscriptionState { get { return (_WNF_SUBSCRIPTION_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 SignaledEventSet { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 InDeliveryEventSet { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
	}
	#endregion
	#region _WNF_PROCESS_CONTEXT
 
	public class _WNF_PROCESS_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WNF_PROCESS_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 136; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WNF_PROCESS_CONTEXT"": [ 136, {
				 ""Header"": [ 0, [ ""_WNF_NODE_HEADER"", ""null"" ]],
				 ""Process"": [ 8, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""WnfProcessesListEntry"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ImplicitScopeInstances"": [ 32, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""TemporaryNamesListLock"": [ 56, [ ""_WNF_LOCK"", ""null"" ]],
				 ""TemporaryNamesListHead"": [ 64, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ProcessSubscriptionListLock"": [ 80, [ ""_WNF_LOCK"", ""null"" ]],
				 ""ProcessSubscriptionListHead"": [ 88, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeliveryPendingListLock"": [ 104, [ ""_WNF_LOCK"", ""null"" ]],
				 ""DeliveryPendingListHead"": [ 112, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""NotificationEvent"": [ 128, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]] }]
				 }
				)";
			}
		}
		public _WNF_NODE_HEADER Header
		{
			get
			{
				_WNF_NODE_HEADER returnValue = new _WNF_NODE_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Process { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY WnfProcessesListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64[] ImplicitScopeInstances
		{
			get
			{
				UInt64[] returnValue = new UInt64[3];
				int size = 8;
				for(int i=0; i<3; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
		public _WNF_LOCK TemporaryNamesListLock
		{
			get
			{
				_WNF_LOCK returnValue = new _WNF_LOCK(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _LIST_ENTRY TemporaryNamesListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _WNF_LOCK ProcessSubscriptionListLock
		{
			get
			{
				_WNF_LOCK returnValue = new _WNF_LOCK(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public _LIST_ENTRY ProcessSubscriptionListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public _WNF_LOCK DeliveryPendingListLock
		{
			get
			{
				_WNF_LOCK returnValue = new _WNF_LOCK(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public _LIST_ENTRY DeliveryPendingListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt64 NotificationEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
	}
	#endregion
	#region _WNF_SILODRIVERSTATE
 
	public class _WNF_SILODRIVERSTATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WNF_SILODRIVERSTATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WNF_SILODRIVERSTATE"": [ 56, {
				 ""ScopeMap"": [ 0, [ ""Pointer"", ""{\""target\"":\""_WNF_SCOPE_MAP\""}"" ]],
				 ""PermanentNameStoreRootKey"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PersistentNameStoreRootKey"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PermanentNameSequenceNumber"": [ 24, [ ""Int64"", ""null"" ]],
				 ""PermanentNameSequenceNumberLock"": [ 32, [ ""_WNF_LOCK"", ""null"" ]],
				 ""PermanentNameSequenceNumberPool"": [ 40, [ ""Int64"", ""null"" ]],
				 ""RuntimeNameSequenceNumber"": [ 48, [ ""Int64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ScopeMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 PermanentNameStoreRootKey { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 PersistentNameStoreRootKey { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Int64 PermanentNameSequenceNumber { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 24); } }
		public _WNF_LOCK PermanentNameSequenceNumberLock
		{
			get
			{
				_WNF_LOCK returnValue = new _WNF_LOCK(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public Int64 PermanentNameSequenceNumberPool { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 40); } }
		public Int64 RuntimeNameSequenceNumber { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _PCW_CALLBACK_INFORMATION
 
	public class _PCW_CALLBACK_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCW_CALLBACK_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCW_CALLBACK_INFORMATION"": [ 40, {
				 ""AddCounter"": [ 0, [ ""_PCW_COUNTER_INFORMATION"", ""null"" ]],
				 ""RemoveCounter"": [ 0, [ ""_PCW_COUNTER_INFORMATION"", ""null"" ]],
				 ""EnumerateInstances"": [ 0, [ ""_PCW_MASK_INFORMATION"", ""null"" ]],
				 ""CollectData"": [ 0, [ ""_PCW_MASK_INFORMATION"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _PCW_COUNTER_INFORMATION AddCounter
		{
			get
			{
				_PCW_COUNTER_INFORMATION returnValue = new _PCW_COUNTER_INFORMATION(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _PCW_COUNTER_INFORMATION RemoveCounter
		{
			get
			{
				_PCW_COUNTER_INFORMATION returnValue = new _PCW_COUNTER_INFORMATION(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _PCW_MASK_INFORMATION EnumerateInstances
		{
			get
			{
				_PCW_MASK_INFORMATION returnValue = new _PCW_MASK_INFORMATION(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _PCW_MASK_INFORMATION CollectData
		{
			get
			{
				_PCW_MASK_INFORMATION returnValue = new _PCW_MASK_INFORMATION(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KSTATIC_AFFINITY_BLOCK
 
	public class _KSTATIC_AFFINITY_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KSTATIC_AFFINITY_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 672; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KSTATIC_AFFINITY_BLOCK"": [ 672, {
				 ""KeFlushTbAffinity"": [ 0, [ ""_KAFFINITY_EX"", ""null"" ]],
				 ""KeFlushWbAffinity"": [ 0, [ ""_KAFFINITY_EX"", ""null"" ]],
				 ""KeSyncContextAffinity"": [ 0, [ ""_KAFFINITY_EX"", ""null"" ]],
				 ""KeFlushTbDeepIdleAffinity"": [ 168, [ ""_KAFFINITY_EX"", ""null"" ]],
				 ""KeIpiSendAffinity"": [ 336, [ ""_KAFFINITY_EX"", ""null"" ]],
				 ""KeIpiSendIpiSet"": [ 504, [ ""_KAFFINITY_EX"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KAFFINITY_EX KeFlushTbAffinity
		{
			get
			{
				_KAFFINITY_EX returnValue = new _KAFFINITY_EX(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _KAFFINITY_EX KeFlushWbAffinity
		{
			get
			{
				_KAFFINITY_EX returnValue = new _KAFFINITY_EX(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _KAFFINITY_EX KeSyncContextAffinity
		{
			get
			{
				_KAFFINITY_EX returnValue = new _KAFFINITY_EX(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _KAFFINITY_EX KeFlushTbDeepIdleAffinity
		{
			get
			{
				_KAFFINITY_EX returnValue = new _KAFFINITY_EX(_StructureData, _BufferOffset + 168);
				return returnValue;
			}
		}
		public _KAFFINITY_EX KeIpiSendAffinity
		{
			get
			{
				_KAFFINITY_EX returnValue = new _KAFFINITY_EX(_StructureData, _BufferOffset + 336);
				return returnValue;
			}
		}
		public _KAFFINITY_EX KeIpiSendIpiSet
		{
			get
			{
				_KAFFINITY_EX returnValue = new _KAFFINITY_EX(_StructureData, _BufferOffset + 504);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WNF_DISPATCHER
 
	public class _WNF_DISPATCHER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WNF_DISPATCHER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WNF_DISPATCHER"": [ 48, {
				 ""Header"": [ 0, [ ""_WNF_NODE_HEADER"", ""null"" ]],
				 ""WorkItem"": [ 8, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""State"": [ 40, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _WNF_NODE_HEADER Header
		{
			get
			{
				_WNF_NODE_HEADER returnValue = new _WNF_NODE_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _WORK_QUEUE_ITEM WorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public Int32 State { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _MMSECTION_FLAGS
 
	public class _MMSECTION_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMSECTION_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMSECTION_FLAGS"": [ 4, {
				 ""BeingDeleted"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""BeingCreated"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""BeingPurged"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""NoModifiedWriting"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""FailAllIo"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""Image"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""Based"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""File"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""AttemptingDelete"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""PrefetchCreated"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""PhysicalMemory"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""ImageControlAreaOnRemovableMedia"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""Reserve"": [ 0, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""Commit"": [ 0, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""NoChange"": [ 0, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""WasPurged"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""UserReference"": [ 0, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""GlobalMemory"": [ 0, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""DeleteOnClose"": [ 0, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""FilePointerNull"": [ 0, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""PreferredNode"": [ 0, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""GlobalOnlyPerSession"": [ 0, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""UserWritable"": [ 0, [ ""BitField"", ""{\""end_bit\"":28,\""start_bit\"":27,\""target\"":\""UInt32\""}"" ]],
				 ""SystemVaAllocated"": [ 0, [ ""BitField"", ""{\""end_bit\"":29,\""start_bit\"":28,\""target\"":\""UInt32\""}"" ]],
				 ""PreferredFsCompressionBoundary"": [ 0, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":29,\""target\"":\""UInt32\""}"" ]],
				 ""UsingFileExtents"": [ 0, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]],
				 ""PageSize64K"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BeingDeleted
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 BeingCreated
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 BeingPurged
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 NoModifiedWriting
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 FailAllIo
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 Image
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 Based
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 File
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 AttemptingDelete
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 PrefetchCreated
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 PhysicalMemory
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 ImageControlAreaOnRemovableMedia
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserve
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 Commit
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 NoChange
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 WasPurged
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 UserReference
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 GlobalMemory
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 DeleteOnClose
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 262144) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 FilePointerNull
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 PreferredNode
		{
			get
			{
				// start: 20  end: 26  Mask: 11111100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 66060288) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 GlobalOnlyPerSession
		{
			get
			{
				// start: 26  end: 27  Mask: 100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 67108864) >> 26;
				return (UInt32)value2;
			}
		}
		public UInt32 UserWritable
		{
			get
			{
				// start: 27  end: 28  Mask: 1000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 134217728) >> 27;
				return (UInt32)value2;
			}
		}
		public UInt32 SystemVaAllocated
		{
			get
			{
				// start: 28  end: 29  Mask: 10000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 268435456) >> 28;
				return (UInt32)value2;
			}
		}
		public UInt32 PreferredFsCompressionBoundary
		{
			get
			{
				// start: 29  end: 30  Mask: 100000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 536870912) >> 29;
				return (UInt32)value2;
			}
		}
		public UInt32 UsingFileExtents
		{
			get
			{
				// start: 30  end: 31  Mask: 1000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1073741824) >> 30;
				return (UInt32)value2;
			}
		}
		public UInt32 PageSize64K
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _PEP_ACPI_SPB_RESOURCE
 
	public class _PEP_ACPI_SPB_RESOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_ACPI_SPB_RESOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_ACPI_SPB_RESOURCE"": [ 40, {
				 ""Type"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_PEP_ACPI_RESOURCE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 4, [ ""_PEP_ACPI_RESOURCE_FLAGS"", ""null"" ]],
				 ""TypeSpecificFlags"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""ResourceSourceIndex"": [ 10, [ ""Byte"", ""null"" ]],
				 ""ResourceSourceName"": [ 16, [ ""Pointer"", ""{\""target\"":\""_UNICODE_STRING\""}"" ]],
				 ""VendorData"": [ 24, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""VendorDataLength"": [ 32, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _PEP_ACPI_RESOURCE_TYPE Type { get { return (_PEP_ACPI_RESOURCE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _PEP_ACPI_RESOURCE_FLAGS Flags
		{
			get
			{
				_PEP_ACPI_RESOURCE_FLAGS returnValue = new _PEP_ACPI_RESOURCE_FLAGS(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt16 TypeSpecificFlags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public Byte ResourceSourceIndex{ get { return _StructureData[_BufferOffset +10]; } }
		public UInt64 ResourceSourceName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 VendorData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt16 VendorDataLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _DBGKD_GET_VERSION32
 
	public class _DBGKD_GET_VERSION32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_GET_VERSION32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_GET_VERSION32"": [ 40, {
				 ""MajorVersion"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MinorVersion"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""ProtocolVersion"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""KernBase"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""PsLoadedModuleList"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""MachineType"": [ 16, [ ""UInt16"", ""null"" ]],
				 ""ThCallbackStack"": [ 18, [ ""UInt16"", ""null"" ]],
				 ""NextCallback"": [ 20, [ ""UInt16"", ""null"" ]],
				 ""FramePointer"": [ 22, [ ""UInt16"", ""null"" ]],
				 ""KiCallUserMode"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""KeUserCallbackDispatcher"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""BreakpointWithStatus"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""DebuggerDataList"": [ 36, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 MajorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 MinorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 ProtocolVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt32 KernBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 PsLoadedModuleList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt16 MachineType { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 16); } }
		public UInt16 ThCallbackStack { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 18); } }
		public UInt16 NextCallback { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 20); } }
		public UInt16 FramePointer { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 22); } }
		public UInt32 KiCallUserMode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 KeUserCallbackDispatcher { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 BreakpointWithStatus { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 DebuggerDataList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
	}
	#endregion
	#region _HANDLE_TABLE_FREE_LIST
 
	public class _HANDLE_TABLE_FREE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HANDLE_TABLE_FREE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HANDLE_TABLE_FREE_LIST"": [ 64, {
				 ""FreeListLock"": [ 0, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""FirstFreeHandleEntry"": [ 8, [ ""Pointer"", ""{\""target\"":\""_HANDLE_TABLE_ENTRY\""}"" ]],
				 ""LastFreeHandleEntry"": [ 16, [ ""Pointer"", ""{\""target\"":\""_HANDLE_TABLE_ENTRY\""}"" ]],
				 ""HandleCount"": [ 24, [ ""Int32"", ""null"" ]],
				 ""HighWaterMark"": [ 28, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _EX_PUSH_LOCK FreeListLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 FirstFreeHandleEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 LastFreeHandleEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Int32 HandleCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 HighWaterMark { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _VF_KE_CRITICAL_REGION_TRACE
 
	public class _VF_KE_CRITICAL_REGION_TRACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VF_KE_CRITICAL_REGION_TRACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VF_KE_CRITICAL_REGION_TRACE"": [ 64, {
				 ""Thread"": [ 0, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""StackTrace"": [ 8, [ ""Array"", ""{\""count\"":7,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64[] StackTrace
		{
			get
			{
				UInt64[] returnValue = new UInt64[7];
				int size = 8;
				for(int i=0; i<7; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KDPC_DATA
 
	public class _KDPC_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KDPC_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KDPC_DATA"": [ 40, {
				 ""DpcList"": [ 0, [ ""_KDPC_LIST"", ""null"" ]],
				 ""DpcLock"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""DpcQueueDepth"": [ 24, [ ""Int32"", ""null"" ]],
				 ""DpcCount"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""ActiveDpc"": [ 32, [ ""Pointer"", ""{\""target\"":\""_KDPC\""}"" ]] }]
				 }
				)";
			}
		}
		public _KDPC_LIST DpcList
		{
			get
			{
				_KDPC_LIST returnValue = new _KDPC_LIST(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 DpcLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Int32 DpcQueueDepth { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 DpcCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt64 ActiveDpc { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _DBGKD_QUERY_SPECIAL_CALLS
 
	public class _DBGKD_QUERY_SPECIAL_CALLS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_QUERY_SPECIAL_CALLS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_QUERY_SPECIAL_CALLS"": [ 4, {
				 ""NumberOfSpecialCalls"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 NumberOfSpecialCalls { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _PLATFORM_IDLE_ACCOUNTING
 
	public class _PLATFORM_IDLE_ACCOUNTING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PLATFORM_IDLE_ACCOUNTING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1032; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PLATFORM_IDLE_ACCOUNTING"": [ 1032, {
				 ""ResetCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""StateCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DeepSleepCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""TimeUnit"": [ 12, [ ""Enumeration"", ""{\""enum_name\"":\""PPM_IDLE_BUCKET_TIME_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""StartTime"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""State"": [ 24, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ResetCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 StateCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DeepSleepCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public PPM_IDLE_BUCKET_TIME_TYPE TimeUnit { get { return (PPM_IDLE_BUCKET_TIME_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 StartTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _PLATFORM_IDLE_STATE_ACCOUNTING[] State
		{
			get
			{
				_PLATFORM_IDLE_STATE_ACCOUNTING[] returnValue = new _PLATFORM_IDLE_STATE_ACCOUNTING[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _PLATFORM_IDLE_STATE_ACCOUNTING(_StructureData, (i * size) + _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ACTIVATION_CONTEXT_STACK32
 
	public class _ACTIVATION_CONTEXT_STACK32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ACTIVATION_CONTEXT_STACK32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ACTIVATION_CONTEXT_STACK32"": [ 24, {
				 ""ActiveFrame"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""FrameListCache"": [ 4, [ ""LIST_ENTRY32"", ""null"" ]],
				 ""Flags"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""NextCookieSequenceNumber"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""StackId"": [ 20, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ActiveFrame { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public LIST_ENTRY32 FrameListCache
		{
			get
			{
				LIST_ENTRY32 returnValue = new LIST_ENTRY32(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 NextCookieSequenceNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 StackId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _IMAGE_ROM_OPTIONAL_HEADER
 
	public class _IMAGE_ROM_OPTIONAL_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_ROM_OPTIONAL_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_ROM_OPTIONAL_HEADER"": [ 56, {
				 ""Magic"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MajorLinkerVersion"": [ 2, [ ""Byte"", ""null"" ]],
				 ""MinorLinkerVersion"": [ 3, [ ""Byte"", ""null"" ]],
				 ""SizeOfCode"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""SizeOfInitializedData"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SizeOfUninitializedData"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""AddressOfEntryPoint"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""BaseOfCode"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""BaseOfData"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""BaseOfBss"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""GprMask"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""CprMask"": [ 36, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""GpValue"": [ 52, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Magic { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte MajorLinkerVersion{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte MinorLinkerVersion{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 SizeOfCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 SizeOfInitializedData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 SizeOfUninitializedData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 AddressOfEntryPoint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 BaseOfCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 BaseOfData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 BaseOfBss { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 GprMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32[] CprMask
		{
			get
			{
				UInt32[] returnValue = new UInt32[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 36);
				return returnValue;
			}
		}
		public UInt32 GpValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
	}
	#endregion
	#region _MM_SESSION_SPACE
 
	public class _MM_SESSION_SPACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MM_SESSION_SPACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20480; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MM_SESSION_SPACE"": [ 20480, {
				 ""ReferenceCount"": [ 0, [ ""Int32"", ""null"" ]],
				 ""u"": [ 4, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""SessionId"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ProcessReferenceToSession"": [ 12, [ ""Int32"", ""null"" ]],
				 ""ProcessList"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SessionPageDirectoryIndex"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""NonPagablePages"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""CommittedPages"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""PagedPoolStart"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PagedPoolEnd"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SessionObject"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SessionObjectHandle"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ImageTree"": [ 88, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""LocaleId"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""AttachCount"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""AttachGate"": [ 104, [ ""_KGATE"", ""null"" ]],
				 ""WsListEntry"": [ 128, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""WsTreeEntry"": [ 144, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""PagedPoolInfo"": [ 168, [ ""_MM_PAGED_POOL_INFO"", ""null"" ]],
				 ""Session"": [ 192, [ ""_MMSESSION"", ""null"" ]],
				 ""CombineDomain"": [ 224, [ ""UInt64"", ""null"" ]],
				 ""Vm"": [ 256, [ ""_MMSUPPORT_FULL"", ""null"" ]],
				 ""WorkingSetList"": [ 576, [ ""_MMWSL_INSTANCE"", ""null"" ]],
				 ""AggregateSessionWs"": [ 640, [ ""_MMSUPPORT_AGGREGATION"", ""null"" ]],
				 ""HeapState"": [ 672, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DriverUnload"": [ 680, [ ""_MI_SESSION_DRIVER_UNLOAD"", ""null"" ]],
				 ""TopLevelPteLockBits"": [ 688, [ ""Array"", ""{\""count\"":32,\""target\"":\""UInt32\""}"" ]],
				 ""PageDirectory"": [ 816, [ ""_MMPTE"", ""null"" ]],
				 ""SessionVaLock"": [ 824, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""DynamicVaBitMap"": [ 832, [ ""_RTL_BITMAP_EX"", ""null"" ]],
				 ""DynamicVaHint"": [ 848, [ ""UInt64"", ""null"" ]],
				 ""SessionPteLock"": [ 856, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""PoolBigEntriesInUse"": [ 864, [ ""Int32"", ""null"" ]],
				 ""PagedPoolPdeCount"": [ 868, [ ""Int32"", ""null"" ]],
				 ""DynamicSessionPdeCount"": [ 872, [ ""UInt32"", ""null"" ]],
				 ""SystemPteInfo"": [ 880, [ ""_MI_SYSTEM_PTE_TYPE"", ""null"" ]],
				 ""PoolTrackTableExpansion"": [ 976, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PoolTrackTableExpansionSize"": [ 984, [ ""UInt64"", ""null"" ]],
				 ""PoolTrackBigPages"": [ 992, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PoolTrackBigPagesSize"": [ 1000, [ ""UInt64"", ""null"" ]],
				 ""PermittedFaultsTree"": [ 1008, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""IoState"": [ 1016, [ ""Enumeration"", ""{\""enum_name\"":\""_IO_SESSION_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""IoStateSequence"": [ 1020, [ ""UInt32"", ""null"" ]],
				 ""IoNotificationEvent"": [ 1024, [ ""_KEVENT"", ""null"" ]],
				 ""ServerSilo"": [ 1048, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]],
				 ""CreateTime"": [ 1056, [ ""UInt64"", ""null"" ]],
				 ""PoolTags"": [ 4096, [ ""Array"", ""{\""count\"":16384,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 ReferenceCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Int32 ProcessReferenceToSession { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 12); } }
		public _LIST_ENTRY ProcessList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 SessionPageDirectoryIndex { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 NonPagablePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 CommittedPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 PagedPoolStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 PagedPoolEnd { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 SessionObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 SessionObjectHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public _RTL_AVL_TREE ImageTree
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public UInt32 LocaleId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 AttachCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public _KGATE AttachGate
		{
			get
			{
				_KGATE returnValue = new _KGATE(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public _LIST_ENTRY WsListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public _RTL_BALANCED_NODE WsTreeEntry
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 144);
				return returnValue;
			}
		}
		public _MM_PAGED_POOL_INFO PagedPoolInfo
		{
			get
			{
				_MM_PAGED_POOL_INFO returnValue = new _MM_PAGED_POOL_INFO(_StructureData, _BufferOffset + 168);
				return returnValue;
			}
		}
		public _MMSESSION Session
		{
			get
			{
				_MMSESSION returnValue = new _MMSESSION(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public UInt64 CombineDomain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public _MMSUPPORT_FULL Vm
		{
			get
			{
				_MMSUPPORT_FULL returnValue = new _MMSUPPORT_FULL(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
		public _MMWSL_INSTANCE WorkingSetList
		{
			get
			{
				_MMWSL_INSTANCE returnValue = new _MMWSL_INSTANCE(_StructureData, _BufferOffset + 576);
				return returnValue;
			}
		}
		public _MMSUPPORT_AGGREGATION AggregateSessionWs
		{
			get
			{
				_MMSUPPORT_AGGREGATION returnValue = new _MMSUPPORT_AGGREGATION(_StructureData, _BufferOffset + 640);
				return returnValue;
			}
		}
		public UInt64 HeapState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 672); } }
		public _MI_SESSION_DRIVER_UNLOAD DriverUnload
		{
			get
			{
				_MI_SESSION_DRIVER_UNLOAD returnValue = new _MI_SESSION_DRIVER_UNLOAD(_StructureData, _BufferOffset + 680);
				return returnValue;
			}
		}
		public UInt32[] TopLevelPteLockBits
		{
			get
			{
				UInt32[] returnValue = new UInt32[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 688);
				return returnValue;
			}
		}
		public _MMPTE PageDirectory
		{
			get
			{
				_MMPTE returnValue = new _MMPTE(_StructureData, _BufferOffset + 816);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK SessionVaLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 824);
				return returnValue;
			}
		}
		public _RTL_BITMAP_EX DynamicVaBitMap
		{
			get
			{
				_RTL_BITMAP_EX returnValue = new _RTL_BITMAP_EX(_StructureData, _BufferOffset + 832);
				return returnValue;
			}
		}
		public UInt64 DynamicVaHint { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 848); } }
		public _EX_PUSH_LOCK SessionPteLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 856);
				return returnValue;
			}
		}
		public Int32 PoolBigEntriesInUse { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 864); } }
		public Int32 PagedPoolPdeCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 868); } }
		public UInt32 DynamicSessionPdeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 872); } }
		public _MI_SYSTEM_PTE_TYPE SystemPteInfo
		{
			get
			{
				_MI_SYSTEM_PTE_TYPE returnValue = new _MI_SYSTEM_PTE_TYPE(_StructureData, _BufferOffset + 880);
				return returnValue;
			}
		}
		public UInt64 PoolTrackTableExpansion { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 976); } }
		public UInt64 PoolTrackTableExpansionSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 984); } }
		public UInt64 PoolTrackBigPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 992); } }
		public UInt64 PoolTrackBigPagesSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1000); } }
		public _RTL_AVL_TREE PermittedFaultsTree
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 1008);
				return returnValue;
			}
		}
		public _IO_SESSION_STATE IoState { get { return (_IO_SESSION_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 1016); } }
		public UInt32 IoStateSequence { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1020); } }
		public _KEVENT IoNotificationEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 1024);
				return returnValue;
			}
		}
		public UInt64 ServerSilo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1048); } }
		public UInt64 CreateTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1056); } }
		public Byte[] PoolTags
		{
			get
			{
				Byte[] returnValue = new Byte[16384];
				for(int i=0; i<16384; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 4096];
				return returnValue;
			}
		}
	}
	#endregion
	#region _OBJECT_NAMESPACE_LOOKUPTABLE
 
	public class _OBJECT_NAMESPACE_LOOKUPTABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_NAMESPACE_LOOKUPTABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 608; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_NAMESPACE_LOOKUPTABLE"": [ 608, {
				 ""HashBuckets"": [ 0, [ ""Array"", ""{\""count\"":37,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""Lock"": [ 592, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""NumberOfPrivateSpaces"": [ 600, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY[] HashBuckets
		{
			get
			{
				_LIST_ENTRY[] returnValue = new _LIST_ENTRY[37];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<37; i++ )
					returnValue[i] = new _LIST_ENTRY(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK Lock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 592);
				return returnValue;
			}
		}
		public UInt32 NumberOfPrivateSpaces { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 600); } }
	}
	#endregion
	#region _CMP_VOLUME_CONTEXT
 
	public class _CMP_VOLUME_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CMP_VOLUME_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CMP_VOLUME_CONTEXT"": [ 72, {
				 ""VolumeContextListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""VolumeManager"": [ 16, [ ""Pointer"", ""{\""target\"":\""_CMP_VOLUME_MANAGER\""}"" ]],
				 ""RefCount"": [ 24, [ ""Int64"", ""null"" ]],
				 ""VolumeGuid"": [ 32, [ ""_GUID"", ""null"" ]],
				 ""VolumeFileObject"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VolumeContextLock"": [ 56, [ ""_CMSI_RW_LOCK"", ""null"" ]],
				 ""DeviceUsageNotificationSent"": [ 64, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY VolumeContextListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 VolumeManager { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Int64 RefCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 24); } }
		public _GUID VolumeGuid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 VolumeFileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _CMSI_RW_LOCK VolumeContextLock
		{
			get
			{
				_CMSI_RW_LOCK returnValue = new _CMSI_RW_LOCK(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public Byte DeviceUsageNotificationSent{ get { return _StructureData[_BufferOffset +64]; } }
	}
	#endregion
	#region _OBJECT_TYPE_INITIALIZER
 
	public class _OBJECT_TYPE_INITIALIZER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_TYPE_INITIALIZER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 120; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_TYPE_INITIALIZER"": [ 120, {
				 ""Length"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""ObjectTypeFlags"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""CaseInsensitive"": [ 2, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""UnnamedObjectsOnly"": [ 2, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""UseDefaultObject"": [ 2, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""SecurityRequired"": [ 2, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""MaintainHandleCount"": [ 2, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""MaintainTypeList"": [ 2, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""SupportsObjectCallbacks"": [ 2, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""CacheAligned"": [ 2, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""Byte\""}"" ]],
				 ""UseExtendedParameters"": [ 3, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Reserved"": [ 3, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""ObjectTypeCode"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""InvalidAttributes"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""GenericMapping"": [ 12, [ ""_GENERIC_MAPPING"", ""null"" ]],
				 ""ValidAccessMask"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""RetainAccess"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""PoolType"": [ 36, [ ""Enumeration"", ""{\""enum_name\"":\""_POOL_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""DefaultPagedPoolCharge"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""DefaultNonPagedPoolCharge"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""DumpProcedure"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OpenProcedure"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CloseProcedure"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeleteProcedure"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ParseProcedure"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ParseProcedureEx"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SecurityProcedure"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""QueryNameProcedure"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OkayToCloseProcedure"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WaitObjectFlagMask"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""WaitObjectFlagOffset"": [ 116, [ ""UInt16"", ""null"" ]],
				 ""WaitObjectPointerOffset"": [ 118, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Length { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 ObjectTypeFlags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public Byte CaseInsensitive
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte UnnamedObjectsOnly
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte UseDefaultObject
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte SecurityRequired
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte MaintainHandleCount
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte MaintainTypeList
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte SupportsObjectCallbacks
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 64) >> 6;
				return (Byte)value2;
			}
		}
		public Byte CacheAligned
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 128) >> 7;
				return (Byte)value2;
			}
		}
		public Byte UseExtendedParameters
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Reserved
		{
			get
			{
				// start: 1  end: 8  Mask: 0000000011111110
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 254) >> 1;
				return (Byte)value2;
			}
		}
		public UInt32 ObjectTypeCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 InvalidAttributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _GENERIC_MAPPING GenericMapping
		{
			get
			{
				_GENERIC_MAPPING returnValue = new _GENERIC_MAPPING(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public UInt32 ValidAccessMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 RetainAccess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public _POOL_TYPE PoolType { get { return (_POOL_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 DefaultPagedPoolCharge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 DefaultNonPagedPoolCharge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt64 DumpProcedure { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 OpenProcedure { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 CloseProcedure { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 DeleteProcedure { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 ParseProcedure { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 ParseProcedureEx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 SecurityProcedure { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 QueryNameProcedure { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 OkayToCloseProcedure { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt32 WaitObjectFlagMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public UInt16 WaitObjectFlagOffset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 116); } }
		public UInt16 WaitObjectPointerOffset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 118); } }
	}
	#endregion
	#region _KLOCK_ENTRY
 
	public class _KLOCK_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KLOCK_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KLOCK_ENTRY"": [ 96, {
				 ""TreeNode"": [ 0, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""FreeListEntry"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""EntryFlags"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""EntryOffset"": [ 24, [ ""Byte"", ""null"" ]],
				 ""ThreadLocalFlags"": [ 25, [ ""Byte"", ""null"" ]],
				 ""WaitingBit"": [ 25, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Spare0"": [ 25, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""AcquiredByte"": [ 26, [ ""Byte"", ""null"" ]],
				 ""AcquiredBit"": [ 26, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""CrossThreadFlags"": [ 27, [ ""Byte"", ""null"" ]],
				 ""HeadNodeBit"": [ 27, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""IoPriorityBit"": [ 27, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""IoQoSWaiter"": [ 27, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""Spare1"": [ 27, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""StaticState"": [ 24, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""AllFlags"": [ 24, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""SpareFlags"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""LockState"": [ 32, [ ""_KLOCK_ENTRY_LOCK_STATE"", ""null"" ]],
				 ""LockUnsafe"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CrossThreadReleasableAndBusyByte"": [ 32, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 33, [ ""Array"", ""{\""count\"":6,\""target\"":\""Byte\""}"" ]],
				 ""InTreeByte"": [ 39, [ ""Byte"", ""null"" ]],
				 ""SessionState"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SessionId"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""SessionPad"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""OwnerTree"": [ 48, [ ""_RTL_RB_TREE"", ""null"" ]],
				 ""WaiterTree"": [ 64, [ ""_RTL_RB_TREE"", ""null"" ]],
				 ""CpuPriorityKey"": [ 48, [ ""Char"", ""null"" ]],
				 ""EntryLock"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""BoostBitmap"": [ 88, [ ""_KLOCK_ENTRY_BOOST_BITMAP"", ""null"" ]],
				 ""SparePad"": [ 92, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BALANCED_NODE TreeNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY FreeListEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 EntryFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Byte EntryOffset{ get { return _StructureData[_BufferOffset +24]; } }
		public Byte ThreadLocalFlags{ get { return _StructureData[_BufferOffset +25]; } }
		public Byte WaitingBit
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 25];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Spare0
		{
			get
			{
				// start: 1  end: 8  Mask: 0000000011111110
				Byte value = _StructureData[_BufferOffset + 25];
				var value2 = (value & 254) >> 1;
				return (Byte)value2;
			}
		}
		public Byte AcquiredByte{ get { return _StructureData[_BufferOffset +26]; } }
		public Byte AcquiredBit
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 26];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte CrossThreadFlags{ get { return _StructureData[_BufferOffset +27]; } }
		public Byte HeadNodeBit
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 27];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte IoPriorityBit
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 27];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte IoQoSWaiter
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 27];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte Spare1
		{
			get
			{
				// start: 3  end: 8  Mask: 0000000011111000
				Byte value = _StructureData[_BufferOffset + 27];
				var value2 = (value & 248) >> 3;
				return (Byte)value2;
			}
		}
		public UInt32 StaticState
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 24);
				var value2 = (value & 255) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 AllFlags
		{
			get
			{
				// start: 8  end: 32  Mask: 11111111111111111111111100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 24);
				var value2 = (value & 4294967040) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 SpareFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public _KLOCK_ENTRY_LOCK_STATE LockState
		{
			get
			{
				_KLOCK_ENTRY_LOCK_STATE returnValue = new _KLOCK_ENTRY_LOCK_STATE(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 LockUnsafe { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public Byte CrossThreadReleasableAndBusyByte{ get { return _StructureData[_BufferOffset +32]; } }
		public Byte[] Reserved
		{
			get
			{
				Byte[] returnValue = new Byte[6];
				for(int i=0; i<6; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 33];
				return returnValue;
			}
		}
		public Byte InTreeByte{ get { return _StructureData[_BufferOffset +39]; } }
		public UInt64 SessionState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 SessionPad { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public _RTL_RB_TREE OwnerTree
		{
			get
			{
				_RTL_RB_TREE returnValue = new _RTL_RB_TREE(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _RTL_RB_TREE WaiterTree
		{
			get
			{
				_RTL_RB_TREE returnValue = new _RTL_RB_TREE(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public Char CpuPriorityKey { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 48); } }
		public UInt64 EntryLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public _KLOCK_ENTRY_BOOST_BITMAP BoostBitmap
		{
			get
			{
				_KLOCK_ENTRY_BOOST_BITMAP returnValue = new _KLOCK_ENTRY_BOOST_BITMAP(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public UInt32 SparePad { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
	}
	#endregion
	#region _KTHREAD_COUNTERS
 
	public class _KTHREAD_COUNTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTHREAD_COUNTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 424; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTHREAD_COUNTERS"": [ 424, {
				 ""WaitReasonBitMap"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""UserData"": [ 8, [ ""Pointer"", ""{\""target\"":\""_THREAD_PERFORMANCE_DATA\""}"" ]],
				 ""Flags"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ContextSwitches"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""CycleTimeBias"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""HardwareCounters"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""HwCounter"": [ 40, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 WaitReasonBitMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 UserData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ContextSwitches { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 CycleTimeBias { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 HardwareCounters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _COUNTER_READING[] HwCounter
		{
			get
			{
				_COUNTER_READING[] returnValue = new _COUNTER_READING[16];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<16; i++ )
					returnValue[i] = new _COUNTER_READING(_StructureData, (i * size) + _BufferOffset + 40);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_TAG_ENTRY
 
	public class _HEAP_TAG_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_TAG_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_TAG_ENTRY"": [ 72, {
				 ""Allocs"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Frees"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Size"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""TagIndex"": [ 16, [ ""UInt16"", ""null"" ]],
				 ""CreatorBackTraceIndex"": [ 18, [ ""UInt16"", ""null"" ]],
				 ""TagName"": [ 20, [ ""Array"", ""{\""count\"":24,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Allocs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Frees { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 Size { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt16 TagIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 16); } }
		public UInt16 CreatorBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 18); } }
		public UInt16[] TagName
		{
			get
			{
				UInt16[] returnValue = new UInt16[24];
				for(int i=0; i<24; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 20);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DBGKD_ANY_CONTROL_SET
 
	public class _DBGKD_ANY_CONTROL_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_ANY_CONTROL_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_ANY_CONTROL_SET"": [ 28, {
				 ""X86ControlSet"": [ 0, [ ""_X86_DBGKD_CONTROL_SET"", ""null"" ]],
				 ""AlphaControlSet"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""IA64ControlSet"": [ 0, [ ""_IA64_DBGKD_CONTROL_SET"", ""null"" ]],
				 ""Amd64ControlSet"": [ 0, [ ""_AMD64_DBGKD_CONTROL_SET"", ""null"" ]],
				 ""ArmControlSet"": [ 0, [ ""_ARM_DBGKD_CONTROL_SET"", ""null"" ]],
				 ""Arm64ControlSet"": [ 0, [ ""_ARM64_DBGKD_CONTROL_SET"", ""null"" ]],
				 ""ArmCeControlSet"": [ 0, [ ""_ARMCE_DBGKD_CONTROL_SET"", ""null"" ]],
				 ""PpcControlSet"": [ 0, [ ""_PPC_DBGKD_CONTROL_SET"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _X86_DBGKD_CONTROL_SET X86ControlSet
		{
			get
			{
				_X86_DBGKD_CONTROL_SET returnValue = new _X86_DBGKD_CONTROL_SET(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 AlphaControlSet { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _IA64_DBGKD_CONTROL_SET IA64ControlSet
		{
			get
			{
				_IA64_DBGKD_CONTROL_SET returnValue = new _IA64_DBGKD_CONTROL_SET(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _AMD64_DBGKD_CONTROL_SET Amd64ControlSet
		{
			get
			{
				_AMD64_DBGKD_CONTROL_SET returnValue = new _AMD64_DBGKD_CONTROL_SET(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ARM_DBGKD_CONTROL_SET ArmControlSet
		{
			get
			{
				_ARM_DBGKD_CONTROL_SET returnValue = new _ARM_DBGKD_CONTROL_SET(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ARM64_DBGKD_CONTROL_SET Arm64ControlSet
		{
			get
			{
				_ARM64_DBGKD_CONTROL_SET returnValue = new _ARM64_DBGKD_CONTROL_SET(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ARMCE_DBGKD_CONTROL_SET ArmCeControlSet
		{
			get
			{
				_ARMCE_DBGKD_CONTROL_SET returnValue = new _ARMCE_DBGKD_CONTROL_SET(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _PPC_DBGKD_CONTROL_SET PpcControlSet
		{
			get
			{
				_PPC_DBGKD_CONTROL_SET returnValue = new _PPC_DBGKD_CONTROL_SET(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMVAD_FLAGS
 
	public class _MMVAD_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMVAD_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMVAD_FLAGS"": [ 4, {
				 ""Lock"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""LockContended"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""DeleteInProgress"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""NoChange"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""VadType"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""PreferredNode"": [ 0, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""PageSize"": [ 0, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""PrivateMemory"": [ 0, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Lock
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 LockContended
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 DeleteInProgress
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 NoChange
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 VadType
		{
			get
			{
				// start: 4  end: 7  Mask: 0000000001110000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 112) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 Protection
		{
			get
			{
				// start: 7  end: 12  Mask: 0000111110000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 3968) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 PreferredNode
		{
			get
			{
				// start: 12  end: 18  Mask: 111111000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 258048) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 PageSize
		{
			get
			{
				// start: 18  end: 20  Mask: 11000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 786432) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 PrivateMemory
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _HEAP_COUNTERS
 
	public class _HEAP_COUNTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_COUNTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 120; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_COUNTERS"": [ 120, {
				 ""TotalMemoryReserved"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""TotalMemoryCommitted"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""TotalMemoryLargeUCR"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""TotalSizeInVirtualBlocks"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""TotalSegments"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""TotalUCRs"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""CommittOps"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""DeCommitOps"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""LockAcquires"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""LockCollisions"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""CommitRate"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""DecommittRate"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""CommitFailures"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""InBlockCommitFailures"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""PollIntervalCounter"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""DecommitsSinceLastCheck"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""HeapPollInterval"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""AllocAndFreeOps"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""AllocationIndicesActive"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""InBlockDeccommits"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""InBlockDeccomitSize"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""HighWatermarkSize"": [ 104, [ ""UInt64"", ""null"" ]],
				 ""LastPolledSize"": [ 112, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 TotalMemoryReserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 TotalMemoryCommitted { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 TotalMemoryLargeUCR { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 TotalSizeInVirtualBlocks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 TotalSegments { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 TotalUCRs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 CommittOps { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 DeCommitOps { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 LockAcquires { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 LockCollisions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 CommitRate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 DecommittRate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 CommitFailures { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 InBlockCommitFailures { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 PollIntervalCounter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 DecommitsSinceLastCheck { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 HeapPollInterval { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 AllocAndFreeOps { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 AllocationIndicesActive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 InBlockDeccommits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt64 InBlockDeccomitSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 HighWatermarkSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 LastPolledSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
	}
	#endregion
	#region _HEAP_PSEUDO_TAG_ENTRY
 
	public class _HEAP_PSEUDO_TAG_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_PSEUDO_TAG_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_PSEUDO_TAG_ENTRY"": [ 16, {
				 ""Allocs"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Frees"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Size"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Allocs { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Frees { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 Size { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _POP_IRP_WORKER_ENTRY
 
	public class _POP_IRP_WORKER_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_IRP_WORKER_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_IRP_WORKER_ENTRY"": [ 48, {
				 ""Link"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Thread"": [ 16, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""Irp"": [ 24, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""Device"": [ 32, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""Static"": [ 40, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Irp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 Device { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public Byte Static{ get { return _StructureData[_BufferOffset +40]; } }
	}
	#endregion
	#region _POP_IRP_DATA
 
	public class _POP_IRP_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_IRP_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 256; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_IRP_DATA"": [ 256, {
				 ""Link"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Irp"": [ 16, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""Pdo"": [ 24, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""TargetDevice"": [ 32, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""CurrentDevice"": [ 40, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""WatchdogStart"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""WatchdogTimer"": [ 56, [ ""_KTIMER"", ""null"" ]],
				 ""WatchdogDpc"": [ 120, [ ""_KDPC"", ""null"" ]],
				 ""MinorFunction"": [ 184, [ ""Byte"", ""null"" ]],
				 ""PowerStateType"": [ 188, [ ""Enumeration"", ""{\""enum_name\"":\""_POWER_STATE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""PowerState"": [ 192, [ ""_POWER_STATE"", ""null"" ]],
				 ""WatchdogEnabled"": [ 196, [ ""Byte"", ""null"" ]],
				 ""FxDevice"": [ 200, [ ""Pointer"", ""{\""target\"":\""_POP_FX_DEVICE\""}"" ]],
				 ""SystemTransition"": [ 208, [ ""Byte"", ""null"" ]],
				 ""NotifyPEP"": [ 209, [ ""Byte"", ""null"" ]],
				 ""IrpSequenceID"": [ 212, [ ""Int32"", ""null"" ]],
				 ""Device"": [ 216, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""System"": [ 216, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""DStateReason"": [ 248, [ ""Enumeration"", ""{\""enum_name\"":\""_POP_PEP_NOTIFY_DEVICE_DSTATE_REASON\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Irp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Pdo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 TargetDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 CurrentDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 WatchdogStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _KTIMER WatchdogTimer
		{
			get
			{
				_KTIMER returnValue = new _KTIMER(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _KDPC WatchdogDpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
		public Byte MinorFunction{ get { return _StructureData[_BufferOffset +184]; } }
		public _POWER_STATE_TYPE PowerStateType { get { return (_POWER_STATE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public _POWER_STATE PowerState
		{
			get
			{
				_POWER_STATE returnValue = new _POWER_STATE(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public Byte WatchdogEnabled{ get { return _StructureData[_BufferOffset +196]; } }
		public UInt64 FxDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public Byte SystemTransition{ get { return _StructureData[_BufferOffset +208]; } }
		public Byte NotifyPEP{ get { return _StructureData[_BufferOffset +209]; } }
		public Int32 IrpSequenceID { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 212); } }
		public _ANONYMOUS_TAG Device
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 216);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG System
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 216);
				return returnValue;
			}
		}
		public _POP_PEP_NOTIFY_DEVICE_DSTATE_REASON DStateReason { get { return (_POP_PEP_NOTIFY_DEVICE_DSTATE_REASON)BitConverter.ToUInt32(_StructureData, _BufferOffset + 248); } }
	}
	#endregion
	#region _CLIENT_ID
 
	public class _CLIENT_ID
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CLIENT_ID(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CLIENT_ID"": [ 16, {
				 ""UniqueProcess"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UniqueThread"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 UniqueProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 UniqueThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _PROCESS_DISK_COUNTERS
 
	public class _PROCESS_DISK_COUNTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCESS_DISK_COUNTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCESS_DISK_COUNTERS"": [ 40, {
				 ""BytesRead"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""BytesWritten"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ReadOperationCount"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""WriteOperationCount"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""FlushOperationCount"": [ 32, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 BytesRead { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 BytesWritten { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ReadOperationCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 WriteOperationCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 FlushOperationCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _POOL_TRACKER_TABLE
 
	public class _POOL_TRACKER_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POOL_TRACKER_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POOL_TRACKER_TABLE"": [ 56, {
				 ""Key"": [ 0, [ ""Int32"", ""null"" ]],
				 ""NonPagedBytes"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""NonPagedAllocs"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""NonPagedFrees"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""PagedBytes"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""PagedAllocs"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""PagedFrees"": [ 48, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 Key { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 NonPagedBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 NonPagedAllocs { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 NonPagedFrees { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 PagedBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 PagedAllocs { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 PagedFrees { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _KLOCK_ENTRY_BOOST_BITMAP
 
	public class _KLOCK_ENTRY_BOOST_BITMAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KLOCK_ENTRY_BOOST_BITMAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KLOCK_ENTRY_BOOST_BITMAP"": [ 4, {
				 ""AllFields"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""AllBoosts"": [ 0, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""CpuBoostsBitmap"": [ 0, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""IoBoost"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt16\""}"" ]],
				 ""IoQoSBoost"": [ 2, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""IoNormalPriorityWaiterCount"": [ 2, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""IoQoSWaiterCount"": [ 2, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":9,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 AllFields { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 AllBoosts
		{
			get
			{
				// start: 0  end: 17  Mask: 11111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 131071) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 17  end: 32  Mask: 11111111111111100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294836224) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt16 CpuBoostsBitmap
		{
			get
			{
				// start: 0  end: 15  Mask: 0111111111111111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32767) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 IoBoost
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32768) >> 15;
				return (UInt16)value2;
			}
		}
		public UInt16 IoQoSBoost
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 IoNormalPriorityWaiterCount
		{
			get
			{
				// start: 1  end: 9  Mask: 0000000111111110
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 510) >> 1;
				return (UInt16)value2;
			}
		}
		public UInt16 IoQoSWaiterCount
		{
			get
			{
				// start: 9  end: 16  Mask: 1111111000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 65024) >> 9;
				return (UInt16)value2;
			}
		}
	}
	#endregion
	#region _CMP_VOLUME_MANAGER
 
	public class _CMP_VOLUME_MANAGER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CMP_VOLUME_MANAGER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CMP_VOLUME_MANAGER"": [ 24, {
				 ""VolumeContextListLock"": [ 0, [ ""_CMSI_RW_LOCK"", ""null"" ]],
				 ""VolumeContextListHead"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _CMSI_RW_LOCK VolumeContextListLock
		{
			get
			{
				_CMSI_RW_LOCK returnValue = new _CMSI_RW_LOCK(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY VolumeContextListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DBGKD_GET_SET_BUS_DATA
 
	public class _DBGKD_GET_SET_BUS_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_GET_SET_BUS_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_GET_SET_BUS_DATA"": [ 20, {
				 ""BusDataType"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""BusNumber"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""SlotNumber"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Offset"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Length"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BusDataType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 SlotNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Offset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _DBGKP_ERROR_PORT
 
	public class _DBGKP_ERROR_PORT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKP_ERROR_PORT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKP_ERROR_PORT"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _DBGK_SILOSTATE
 
	public class _DBGK_SILOSTATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGK_SILOSTATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGK_SILOSTATE"": [ 32, {
				 ""ErrorPortLock"": [ 0, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""ErrorPort"": [ 8, [ ""Pointer"", ""{\""target\"":\""_DBGKP_ERROR_PORT\""}"" ]],
				 ""ErrorProcess"": [ 16, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""ErrorPortRegisteredEvent"": [ 24, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]] }]
				 }
				)";
			}
		}
		public _EX_PUSH_LOCK ErrorPortLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 ErrorPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ErrorProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 ErrorPortRegisteredEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _STACK_TABLE
 
	public class _STACK_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _STACK_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32904; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_STACK_TABLE"": [ 32904, {
				 ""NumStackTraces"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""TraceCapacity"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""StackTrace"": [ 8, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_OBJECT_REF_TRACE\""}}"" ]],
				 ""StackTableHash"": [ 136, [ ""Array"", ""{\""count\"":16381,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 NumStackTraces { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 TraceCapacity { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public _OBJECT_REF_TRACE[] StackTrace
		{
			get
			{
				_OBJECT_REF_TRACE[] returnValue = new _OBJECT_REF_TRACE[16];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<16; i++ )
					returnValue[i] = new _OBJECT_REF_TRACE(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt16[] StackTableHash
		{
			get
			{
				UInt16[] returnValue = new UInt16[16381];
				for(int i=0; i<16381; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 136);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PPM_IDLE_STATES
 
	public class _PPM_IDLE_STATES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPM_IDLE_STATES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1064; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPM_IDLE_STATES"": [ 1064, {
				 ""InterfaceVersion"": [ 0, [ ""Byte"", ""null"" ]],
				 ""IdleOverride"": [ 1, [ ""Byte"", ""null"" ]],
				 ""EstimateIdleDuration"": [ 2, [ ""Byte"", ""null"" ]],
				 ""ExitLatencyTraceEnabled"": [ 3, [ ""Byte"", ""null"" ]],
				 ""NonInterruptibleTransition"": [ 4, [ ""Byte"", ""null"" ]],
				 ""UnaccountedTransition"": [ 5, [ ""Byte"", ""null"" ]],
				 ""IdleDurationLimited"": [ 6, [ ""Byte"", ""null"" ]],
				 ""IdleCheckLimited"": [ 7, [ ""Byte"", ""null"" ]],
				 ""StrictVetoBias"": [ 8, [ ""Byte"", ""null"" ]],
				 ""ExitLatencyCountdown"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""TargetState"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ActualState"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""OldState"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""OverrideIndex"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""ProcessorIdleCount"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Type"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""LevelId"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""ReasonFlags"": [ 48, [ ""UInt16"", ""null"" ]],
				 ""InitiateWakeStamp"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""PreviousStatus"": [ 64, [ ""Int32"", ""null"" ]],
				 ""PreviousCancelReason"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""PrimaryProcessorMask"": [ 72, [ ""_KAFFINITY_EX"", ""null"" ]],
				 ""SecondaryProcessorMask"": [ 240, [ ""_KAFFINITY_EX"", ""null"" ]],
				 ""IdlePrepare"": [ 408, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IdlePreExecute"": [ 416, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IdleExecute"": [ 424, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IdlePreselect"": [ 432, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IdleTest"": [ 440, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IdleAvailabilityCheck"": [ 448, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IdleComplete"": [ 456, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IdleCancel"": [ 464, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IdleIsHalted"": [ 472, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IdleInitiateWake"": [ 480, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PrepareInfo"": [ 488, [ ""_PROCESSOR_IDLE_PREPARE_INFO"", ""null"" ]],
				 ""DeepIdleSnapshot"": [ 576, [ ""_KAFFINITY_EX"", ""null"" ]],
				 ""Tracing"": [ 744, [ ""Pointer"", ""{\""target\"":\""_PERFINFO_PPM_STATE_SELECTION\""}"" ]],
				 ""CoordinatedTracing"": [ 752, [ ""Pointer"", ""{\""target\"":\""_PERFINFO_PPM_STATE_SELECTION\""}"" ]],
				 ""ProcessorMenu"": [ 760, [ ""_PPM_SELECTION_MENU"", ""null"" ]],
				 ""CoordinatedMenu"": [ 776, [ ""_PPM_SELECTION_MENU"", ""null"" ]],
				 ""CoordinatedSelection"": [ 792, [ ""_PPM_COORDINATED_SELECTION"", ""null"" ]],
				 ""State"": [ 816, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public Byte InterfaceVersion{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte IdleOverride{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte EstimateIdleDuration{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte ExitLatencyTraceEnabled{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte NonInterruptibleTransition{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte UnaccountedTransition{ get { return _StructureData[_BufferOffset +5]; } }
		public Byte IdleDurationLimited{ get { return _StructureData[_BufferOffset +6]; } }
		public Byte IdleCheckLimited{ get { return _StructureData[_BufferOffset +7]; } }
		public Byte StrictVetoBias{ get { return _StructureData[_BufferOffset +8]; } }
		public UInt32 ExitLatencyCountdown { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 TargetState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ActualState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 OldState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 OverrideIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 ProcessorIdleCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 Type { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt64 LevelId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt16 ReasonFlags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 48); } }
		public UInt64 InitiateWakeStamp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public Int32 PreviousStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 PreviousCancelReason { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public _KAFFINITY_EX PrimaryProcessorMask
		{
			get
			{
				_KAFFINITY_EX returnValue = new _KAFFINITY_EX(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _KAFFINITY_EX SecondaryProcessorMask
		{
			get
			{
				_KAFFINITY_EX returnValue = new _KAFFINITY_EX(_StructureData, _BufferOffset + 240);
				return returnValue;
			}
		}
		public UInt64 IdlePrepare { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 408); } }
		public UInt64 IdlePreExecute { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 416); } }
		public UInt64 IdleExecute { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 424); } }
		public UInt64 IdlePreselect { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 432); } }
		public UInt64 IdleTest { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 440); } }
		public UInt64 IdleAvailabilityCheck { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 448); } }
		public UInt64 IdleComplete { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 456); } }
		public UInt64 IdleCancel { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 464); } }
		public UInt64 IdleIsHalted { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 472); } }
		public UInt64 IdleInitiateWake { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 480); } }
		public _PROCESSOR_IDLE_PREPARE_INFO PrepareInfo
		{
			get
			{
				_PROCESSOR_IDLE_PREPARE_INFO returnValue = new _PROCESSOR_IDLE_PREPARE_INFO(_StructureData, _BufferOffset + 488);
				return returnValue;
			}
		}
		public _KAFFINITY_EX DeepIdleSnapshot
		{
			get
			{
				_KAFFINITY_EX returnValue = new _KAFFINITY_EX(_StructureData, _BufferOffset + 576);
				return returnValue;
			}
		}
		public UInt64 Tracing { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 744); } }
		public UInt64 CoordinatedTracing { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 752); } }
		public _PPM_SELECTION_MENU ProcessorMenu
		{
			get
			{
				_PPM_SELECTION_MENU returnValue = new _PPM_SELECTION_MENU(_StructureData, _BufferOffset + 760);
				return returnValue;
			}
		}
		public _PPM_SELECTION_MENU CoordinatedMenu
		{
			get
			{
				_PPM_SELECTION_MENU returnValue = new _PPM_SELECTION_MENU(_StructureData, _BufferOffset + 776);
				return returnValue;
			}
		}
		public _PPM_COORDINATED_SELECTION CoordinatedSelection
		{
			get
			{
				_PPM_COORDINATED_SELECTION returnValue = new _PPM_COORDINATED_SELECTION(_StructureData, _BufferOffset + 792);
				return returnValue;
			}
		}
		public _PPM_IDLE_STATE[] State
		{
			get
			{
				_PPM_IDLE_STATE[] returnValue = new _PPM_IDLE_STATE[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _PPM_IDLE_STATE(_StructureData, (i * size) + _BufferOffset + 816);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMVAD_FLAGS1
 
	public class _MMVAD_FLAGS1
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMVAD_FLAGS1(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMVAD_FLAGS1"": [ 4, {
				 ""CommitCharge"": [ 0, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""MemCommit"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 CommitCharge
		{
			get
			{
				// start: 0  end: 31  Mask: 1111111111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2147483647) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 MemCommit
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _MM_PRIVATE_VAD_FLAGS
 
	public class _MM_PRIVATE_VAD_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MM_PRIVATE_VAD_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MM_PRIVATE_VAD_FLAGS"": [ 4, {
				 ""Lock"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""LockContended"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""DeleteInProgress"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""NoChange"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""VadType"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""PreferredNode"": [ 0, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""PageSize"": [ 0, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""PrivateMemoryAlwaysSet"": [ 0, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""WriteWatch"": [ 0, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""FixedLargePageSize"": [ 0, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""ZeroFillPagesOptional"": [ 0, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]],
				 ""Graphics"": [ 0, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""Enclave"": [ 0, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":25,\""target\"":\""UInt32\""}"" ]],
				 ""ShadowStack"": [ 0, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""PhysicalMemoryPfnsReferenced"": [ 0, [ ""BitField"", ""{\""end_bit\"":28,\""start_bit\"":27,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Lock
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 LockContended
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 DeleteInProgress
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 NoChange
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 VadType
		{
			get
			{
				// start: 4  end: 7  Mask: 0000000001110000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 112) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 Protection
		{
			get
			{
				// start: 7  end: 12  Mask: 0000111110000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 3968) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 PreferredNode
		{
			get
			{
				// start: 12  end: 18  Mask: 111111000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 258048) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 PageSize
		{
			get
			{
				// start: 18  end: 20  Mask: 11000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 786432) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 PrivateMemoryAlwaysSet
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 WriteWatch
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 FixedLargePageSize
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 ZeroFillPagesOptional
		{
			get
			{
				// start: 23  end: 24  Mask: 100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8388608) >> 23;
				return (UInt32)value2;
			}
		}
		public UInt32 Graphics
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16777216) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 Enclave
		{
			get
			{
				// start: 25  end: 26  Mask: 10000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 33554432) >> 25;
				return (UInt32)value2;
			}
		}
		public UInt32 ShadowStack
		{
			get
			{
				// start: 26  end: 27  Mask: 100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 67108864) >> 26;
				return (UInt32)value2;
			}
		}
		public UInt32 PhysicalMemoryPfnsReferenced
		{
			get
			{
				// start: 27  end: 28  Mask: 1000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 134217728) >> 27;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _EVENT_HEADER_EXTENDED_DATA_ITEM
 
	public class _EVENT_HEADER_EXTENDED_DATA_ITEM
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EVENT_HEADER_EXTENDED_DATA_ITEM(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EVENT_HEADER_EXTENDED_DATA_ITEM"": [ 16, {
				 ""Reserved1"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""ExtType"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Linkage"": [ 4, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""Reserved2"": [ 4, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""DataSize"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""DataPtr"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Reserved1 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 ExtType { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 Linkage
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 Reserved2
		{
			get
			{
				// start: 1  end: 16  Mask: 1111111111111110
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 4);
				var value2 = (value & 65534) >> 1;
				return (UInt16)value2;
			}
		}
		public UInt16 DataSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt64 DataPtr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _ETW_HASH_BUCKET
 
	public class _ETW_HASH_BUCKET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_HASH_BUCKET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_HASH_BUCKET"": [ 56, {
				 ""ListHead"": [ 0, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""BucketLock"": [ 48, [ ""_EX_PUSH_LOCK"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY[] ListHead
		{
			get
			{
				_LIST_ENTRY[] returnValue = new _LIST_ENTRY[3];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<3; i++ )
					returnValue[i] = new _LIST_ENTRY(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK BucketLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
	}
	#endregion
	#region _VI_DEADLOCK_RESOURCE
 
	public class _VI_DEADLOCK_RESOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VI_DEADLOCK_RESOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 248; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VI_DEADLOCK_RESOURCE"": [ 248, {
				 ""Type"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_VI_DEADLOCK_RESOURCE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""NodeCount"": [ 4, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""RecursionCount"": [ 4, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""ResourceAddress"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ThreadOwner"": [ 16, [ ""Pointer"", ""{\""target\"":\""_VI_DEADLOCK_THREAD\""}"" ]],
				 ""ResourceList"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""HashChainList"": [ 40, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FreeListEntry"": [ 40, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""StackTrace"": [ 56, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""LastAcquireTrace"": [ 120, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""LastReleaseTrace"": [ 184, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public _VI_DEADLOCK_RESOURCE_TYPE Type { get { return (_VI_DEADLOCK_RESOURCE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 NodeCount
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 65535) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 RecursionCount
		{
			get
			{
				// start: 16  end: 32  Mask: 11111111111111110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4294901760) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt64 ResourceAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ThreadOwner { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _LIST_ENTRY ResourceList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LIST_ENTRY HashChainList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _LIST_ENTRY FreeListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt64[] StackTrace
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				int size = 8;
				for(int i=0; i<8; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt64[] LastAcquireTrace
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				int size = 8;
				for(int i=0; i<8; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 120);
				return returnValue;
			}
		}
		public UInt64[] LastReleaseTrace
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				int size = 8;
				for(int i=0; i<8; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 184);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_HEAP_MEMORY_LIMIT_DATA
 
	public class _RTL_HEAP_MEMORY_LIMIT_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_HEAP_MEMORY_LIMIT_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_HEAP_MEMORY_LIMIT_DATA"": [ 32, {
				 ""CommitLimitBytes"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""CommitLimitFailureCode"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""MaxAllocationSizeBytes"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""AllocationLimitFailureCode"": [ 24, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 CommitLimitBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 CommitLimitFailureCode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 MaxAllocationSizeBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 AllocationLimitFailureCode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _SEP_TOKEN_DIAG_TRACK_ENTRY
 
	public class _SEP_TOKEN_DIAG_TRACK_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEP_TOKEN_DIAG_TRACK_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 288; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEP_TOKEN_DIAG_TRACK_ENTRY"": [ 288, {
				 ""ProcessCid"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ThreadCid"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ImageFileName"": [ 16, [ ""Array"", ""{\""count\"":16,\""target\"":\""Byte\""}"" ]],
				 ""CreateMethod"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""CreateTrace"": [ 40, [ ""Array"", ""{\""count\"":30,\""target\"":\""UInt64\""}"" ]],
				 ""Count"": [ 280, [ ""Int32"", ""null"" ]],
				 ""CaptureCount"": [ 284, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ProcessCid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ThreadCid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public Byte[] ImageFileName
		{
			get
			{
				Byte[] returnValue = new Byte[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 16];
				return returnValue;
			}
		}
		public UInt32 CreateMethod { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64[] CreateTrace
		{
			get
			{
				UInt64[] returnValue = new UInt64[30];
				for(int i=0; i<30; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 40);
				return returnValue;
			}
		}
		public Int32 Count { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 280); } }
		public Int32 CaptureCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 284); } }
	}
	#endregion
	#region _EX_PUSH_LOCK_AUTO_EXPAND_STATE
 
	public class _EX_PUSH_LOCK_AUTO_EXPAND_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_PUSH_LOCK_AUTO_EXPAND_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_PUSH_LOCK_AUTO_EXPAND_STATE"": [ 4, {
				 ""Expanded"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Transitioning"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""Pageable"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""Value"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Expanded
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Transitioning
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 Pageable
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 Value { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _DUMMY_FILE_OBJECT
 
	public class _DUMMY_FILE_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DUMMY_FILE_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 272; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DUMMY_FILE_OBJECT"": [ 272, {
				 ""ObjectHeader"": [ 0, [ ""_OBJECT_HEADER"", ""null"" ]],
				 ""FileObjectBody"": [ 56, [ ""Array"", ""{\""count\"":216,\""target\"":\""Char\""}"" ]] }]
				 }
				)";
			}
		}
		public _OBJECT_HEADER ObjectHeader
		{
			get
			{
				_OBJECT_HEADER returnValue = new _OBJECT_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Char[] FileObjectBody
		{
			get
			{
				Char[] returnValue = new Char[216];
				for(int i=0; i<216; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 56);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PPM_POLICY_SETTINGS_MASK
 
	public class _PPM_POLICY_SETTINGS_MASK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPM_POLICY_SETTINGS_MASK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPM_POLICY_SETTINGS_MASK"": [ 8, {
				 ""Value"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""PerfDecreaseTime"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""PerfIncreaseTime"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""PerfDecreasePolicy"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""PerfIncreasePolicy"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""PerfDecreaseThreshold"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""PerfIncreaseThreshold"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""PerfMinPolicy"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""PerfMaxPolicy"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""PerfTimeCheck"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""PerfBoostPolicy"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""PerfBoostMode"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""AllowThrottling"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""PerfHistoryCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""ParkingPerfState"": [ 0, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""LatencyHintPerf"": [ 0, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""LatencyHintUnpark"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""CoreParkingMinCores"": [ 0, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""CoreParkingMaxCores"": [ 0, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""CoreParkingDecreasePolicy"": [ 0, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""CoreParkingIncreasePolicy"": [ 0, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""CoreParkingDecreaseTime"": [ 0, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""CoreParkingIncreaseTime"": [ 0, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""CoreParkingOverUtilizationThreshold"": [ 0, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""CoreParkingDistributeUtility"": [ 0, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]],
				 ""CoreParkingConcurrencyThreshold"": [ 0, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""CoreParkingHeadroomThreshold"": [ 0, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":25,\""target\"":\""UInt32\""}"" ]],
				 ""CoreParkingDistributionThreshold"": [ 0, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""IdleAllowScaling"": [ 0, [ ""BitField"", ""{\""end_bit\"":28,\""start_bit\"":27,\""target\"":\""UInt32\""}"" ]],
				 ""IdleDisable"": [ 0, [ ""BitField"", ""{\""end_bit\"":29,\""start_bit\"":28,\""target\"":\""UInt32\""}"" ]],
				 ""IdleTimeCheck"": [ 0, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":29,\""target\"":\""UInt32\""}"" ]],
				 ""IdleDemoteThreshold"": [ 0, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]],
				 ""IdlePromoteThreshold"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""HeteroDecreaseTime"": [ 4, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""HeteroIncreaseTime"": [ 4, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""HeteroDecreaseThreshold"": [ 4, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""HeteroIncreaseThreshold"": [ 4, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""Class0FloorPerformance"": [ 4, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""Class1InitialPerformance"": [ 4, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""EnergyPerfPreference"": [ 4, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""AutonomousActivityWindow"": [ 4, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""AutonomousMode"": [ 4, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""DutyCycling"": [ 4, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""FrequencyCap"": [ 4, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""ThreadPolicy"": [ 4, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""ShortThreadPolicy"": [ 4, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""IdleStateMax"": [ 4, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""ResponsivenessDisableThreshold"": [ 4, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""ResponsivenessEnableThreshold"": [ 4, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""ResponsivenessDisableTime"": [ 4, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""ResponsivenessEnableTime"": [ 4, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""ResponsivenessEppCeiling"": [ 4, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""ResponsivenessPerfFloor"": [ 4, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""SoftParkLatency"": [ 4, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""Spare"": [ 4, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Value { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 PerfDecreaseTime
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 PerfIncreaseTime
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 PerfDecreasePolicy
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 PerfIncreasePolicy
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 PerfDecreaseThreshold
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 PerfIncreaseThreshold
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 PerfMinPolicy
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 PerfMaxPolicy
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 PerfTimeCheck
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 PerfBoostPolicy
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 PerfBoostMode
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 AllowThrottling
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 PerfHistoryCount
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 ParkingPerfState
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 LatencyHintPerf
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 LatencyHintUnpark
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 CoreParkingMinCores
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 CoreParkingMaxCores
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 CoreParkingDecreasePolicy
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 262144) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 CoreParkingIncreasePolicy
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 CoreParkingDecreaseTime
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 CoreParkingIncreaseTime
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 CoreParkingOverUtilizationThreshold
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 CoreParkingDistributeUtility
		{
			get
			{
				// start: 23  end: 24  Mask: 100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8388608) >> 23;
				return (UInt32)value2;
			}
		}
		public UInt32 CoreParkingConcurrencyThreshold
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16777216) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 CoreParkingHeadroomThreshold
		{
			get
			{
				// start: 25  end: 26  Mask: 10000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 33554432) >> 25;
				return (UInt32)value2;
			}
		}
		public UInt32 CoreParkingDistributionThreshold
		{
			get
			{
				// start: 26  end: 27  Mask: 100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 67108864) >> 26;
				return (UInt32)value2;
			}
		}
		public UInt32 IdleAllowScaling
		{
			get
			{
				// start: 27  end: 28  Mask: 1000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 134217728) >> 27;
				return (UInt32)value2;
			}
		}
		public UInt32 IdleDisable
		{
			get
			{
				// start: 28  end: 29  Mask: 10000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 268435456) >> 28;
				return (UInt32)value2;
			}
		}
		public UInt32 IdleTimeCheck
		{
			get
			{
				// start: 29  end: 30  Mask: 100000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 536870912) >> 29;
				return (UInt32)value2;
			}
		}
		public UInt32 IdleDemoteThreshold
		{
			get
			{
				// start: 30  end: 31  Mask: 1000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1073741824) >> 30;
				return (UInt32)value2;
			}
		}
		public UInt32 IdlePromoteThreshold
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public UInt32 HeteroDecreaseTime
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 HeteroIncreaseTime
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 HeteroDecreaseThreshold
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 HeteroIncreaseThreshold
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 Class0FloorPerformance
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 Class1InitialPerformance
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 EnergyPerfPreference
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 AutonomousActivityWindow
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 AutonomousMode
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 DutyCycling
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 FrequencyCap
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 ThreadPolicy
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 ShortThreadPolicy
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 IdleStateMax
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 ResponsivenessDisableThreshold
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 ResponsivenessEnableThreshold
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 ResponsivenessDisableTime
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 ResponsivenessEnableTime
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 ResponsivenessEppCeiling
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 262144) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 ResponsivenessPerfFloor
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 SoftParkLatency
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 Spare
		{
			get
			{
				// start: 21  end: 32  Mask: 11111111111000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4292870144) >> 21;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _KSCHEDULING_GROUP
 
	public class _KSCHEDULING_GROUP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KSCHEDULING_GROUP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 576; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KSCHEDULING_GROUP"": [ 576, {
				 ""Policy"": [ 0, [ ""_KSCHEDULING_GROUP_POLICY"", ""null"" ]],
				 ""RelativeWeight"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ChildMinRate"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""ChildMinWeight"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ChildTotalWeight"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""QueryHistoryTimeStamp"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""NotificationCycles"": [ 32, [ ""Int64"", ""null"" ]],
				 ""MaxQuotaLimitCycles"": [ 40, [ ""Int64"", ""null"" ]],
				 ""MaxQuotaCyclesRemaining"": [ 48, [ ""Int64"", ""null"" ]],
				 ""SchedulingGroupList"": [ 56, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Sibling"": [ 56, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""NotificationDpc"": [ 72, [ ""Pointer"", ""{\""target\"":\""_KDPC\""}"" ]],
				 ""ChildList"": [ 80, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Parent"": [ 96, [ ""Pointer"", ""{\""target\"":\""_KSCHEDULING_GROUP\""}"" ]],
				 ""PerProcessor"": [ 128, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public _KSCHEDULING_GROUP_POLICY Policy
		{
			get
			{
				_KSCHEDULING_GROUP_POLICY returnValue = new _KSCHEDULING_GROUP_POLICY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 RelativeWeight { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ChildMinRate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 ChildMinWeight { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ChildTotalWeight { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 QueryHistoryTimeStamp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public Int64 NotificationCycles { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 32); } }
		public Int64 MaxQuotaLimitCycles { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 40); } }
		public Int64 MaxQuotaCyclesRemaining { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 48); } }
		public _LIST_ENTRY SchedulingGroupList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _LIST_ENTRY Sibling
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt64 NotificationDpc { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public _LIST_ENTRY ChildList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt64 Parent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public _KSCB[] PerProcessor
		{
			get
			{
				_KSCB[] returnValue = new _KSCB[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _KSCB(_StructureData, (i * size) + _BufferOffset + 128);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_INTENT_LOCK
 
	public class _CM_INTENT_LOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_INTENT_LOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_INTENT_LOCK"": [ 16, {
				 ""OwnerCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""OwnerTable"": [ 8, [ ""Pointer"", ""{\""target\"":\""_CM_KCB_UOW*\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 OwnerCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 OwnerTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION
 
	public class _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 608; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_AUTHZBASEP_CLAIM_ATTRIBUTES_COLLECTION"": [ 608, {
				 ""DeviceGroupsCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""pDeviceGroups"": [ 8, [ ""Pointer"", ""{\""target\"":\""_SID_AND_ATTRIBUTES\""}"" ]],
				 ""RestrictedDeviceGroupsCount"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""pRestrictedDeviceGroups"": [ 24, [ ""Pointer"", ""{\""target\"":\""_SID_AND_ATTRIBUTES\""}"" ]],
				 ""DeviceGroupsHash"": [ 32, [ ""_SID_AND_ATTRIBUTES_HASH"", ""null"" ]],
				 ""RestrictedDeviceGroupsHash"": [ 304, [ ""_SID_AND_ATTRIBUTES_HASH"", ""null"" ]],
				 ""pUserSecurityAttributes"": [ 576, [ ""Pointer"", ""{\""target\"":\""_AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION\""}"" ]],
				 ""pDeviceSecurityAttributes"": [ 584, [ ""Pointer"", ""{\""target\"":\""_AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION\""}"" ]],
				 ""pRestrictedUserSecurityAttributes"": [ 592, [ ""Pointer"", ""{\""target\"":\""_AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION\""}"" ]],
				 ""pRestrictedDeviceSecurityAttributes"": [ 600, [ ""Pointer"", ""{\""target\"":\""_AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DeviceGroupsCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 pDeviceGroups { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 RestrictedDeviceGroupsCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 pRestrictedDeviceGroups { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _SID_AND_ATTRIBUTES_HASH DeviceGroupsHash
		{
			get
			{
				_SID_AND_ATTRIBUTES_HASH returnValue = new _SID_AND_ATTRIBUTES_HASH(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _SID_AND_ATTRIBUTES_HASH RestrictedDeviceGroupsHash
		{
			get
			{
				_SID_AND_ATTRIBUTES_HASH returnValue = new _SID_AND_ATTRIBUTES_HASH(_StructureData, _BufferOffset + 304);
				return returnValue;
			}
		}
		public UInt64 pUserSecurityAttributes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 576); } }
		public UInt64 pDeviceSecurityAttributes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 584); } }
		public UInt64 pRestrictedUserSecurityAttributes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 592); } }
		public UInt64 pRestrictedDeviceSecurityAttributes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 600); } }
	}
	#endregion
	#region _TEB_ACTIVE_FRAME_CONTEXT
 
	public class _TEB_ACTIVE_FRAME_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TEB_ACTIVE_FRAME_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TEB_ACTIVE_FRAME_CONTEXT"": [ 16, {
				 ""Flags"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""FrameName"": [ 8, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 FrameName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _TEB_ACTIVE_FRAME
 
	public class _TEB_ACTIVE_FRAME
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TEB_ACTIVE_FRAME(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TEB_ACTIVE_FRAME"": [ 24, {
				 ""Flags"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Previous"": [ 8, [ ""Pointer"", ""{\""target\"":\""_TEB_ACTIVE_FRAME\""}"" ]],
				 ""Context"": [ 16, [ ""Pointer"", ""{\""target\"":\""_TEB_ACTIVE_FRAME_CONTEXT\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 Previous { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _JOBOBJECT_ENERGY_TRACKING_STATE
 
	public class _JOBOBJECT_ENERGY_TRACKING_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _JOBOBJECT_ENERGY_TRACKING_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_JOBOBJECT_ENERGY_TRACKING_STATE"": [ 8, {
				 ""Value"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""UpdateMask"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""DesiredState"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Value { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 UpdateMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 DesiredState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _LOCK_HEADER
 
	public class _LOCK_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LOCK_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LOCK_HEADER"": [ 40, {
				 ""LockTree"": [ 0, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""LockMdlSwitchedTree"": [ 8, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""Count"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""Lock"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""Valid"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_AVL_TREE LockTree
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _RTL_AVL_TREE LockMdlSwitchedTree
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 Count { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 Valid { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _SEP_CACHED_HANDLES_ENTRY
 
	public class _SEP_CACHED_HANDLES_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEP_CACHED_HANDLES_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEP_CACHED_HANDLES_ENTRY"": [ 72, {
				 ""HashEntry"": [ 0, [ ""_RTL_DYNAMIC_HASH_TABLE_ENTRY"", ""null"" ]],
				 ""ReferenceCount"": [ 24, [ ""Int64"", ""null"" ]],
				 ""EntryDescriptor"": [ 32, [ ""_SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR"", ""null"" ]],
				 ""HandleCount"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""Handles"": [ 64, [ ""Pointer"", ""{\""target\"":\""void*\""}"" ]] }]
				 }
				)";
			}
		}
		public _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry
		{
			get
			{
				_RTL_DYNAMIC_HASH_TABLE_ENTRY returnValue = new _RTL_DYNAMIC_HASH_TABLE_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int64 ReferenceCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 24); } }
		public _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR EntryDescriptor
		{
			get
			{
				_SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR returnValue = new _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt32 HandleCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt64 Handles { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _PROCESSOR_PROFILE_CONTROL_AREA
 
	public class _PROCESSOR_PROFILE_CONTROL_AREA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCESSOR_PROFILE_CONTROL_AREA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCESSOR_PROFILE_CONTROL_AREA"": [ 160, {
				 ""PebsDsSaveArea"": [ 0, [ ""_PEBS_DS_SAVE_AREA"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _PEBS_DS_SAVE_AREA PebsDsSaveArea
		{
			get
			{
				_PEBS_DS_SAVE_AREA returnValue = new _PEBS_DS_SAVE_AREA(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KHETERO_PROCESSOR_SET
 
	public class _KHETERO_PROCESSOR_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KHETERO_PROCESSOR_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KHETERO_PROCESSOR_SET"": [ 24, {
				 ""IdealMask"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""PreferredMask"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""AvailableMask"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 IdealMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 PreferredMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 AvailableMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _CM_NAME_HASH
 
	public class _CM_NAME_HASH
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_NAME_HASH(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_NAME_HASH"": [ 24, {
				 ""ConvKey"": [ 0, [ ""_CM_COMPONENT_HASH"", ""null"" ]],
				 ""NextHash"": [ 8, [ ""Pointer"", ""{\""target\"":\""_CM_NAME_HASH\""}"" ]],
				 ""NameLength"": [ 16, [ ""UInt16"", ""null"" ]],
				 ""Name"": [ 18, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public _CM_COMPONENT_HASH ConvKey
		{
			get
			{
				_CM_COMPONENT_HASH returnValue = new _CM_COMPONENT_HASH(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 NextHash { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt16 NameLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 16); } }
		public UInt16[] Name
		{
			get
			{
				UInt16[] returnValue = new UInt16[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 18);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMSESSION
 
	public class _MMSESSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMSESSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMSESSION"": [ 32, {
				 ""SystemSpaceViewLock"": [ 0, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""SystemSpaceViewLockPointer"": [ 8, [ ""Pointer"", ""{\""target\"":\""_EX_PUSH_LOCK\""}"" ]],
				 ""ViewRoot"": [ 16, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""ViewCount"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""BitmapFailures"": [ 28, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _EX_PUSH_LOCK SystemSpaceViewLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 SystemSpaceViewLockPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _RTL_AVL_TREE ViewRoot
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 ViewCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 BitmapFailures { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _CC_ASYNC_READ_CONTEXT
 
	public class _CC_ASYNC_READ_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CC_ASYNC_READ_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CC_ASYNC_READ_CONTEXT"": [ 32, {
				 ""CompletionRoutine"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Context"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Mdl"": [ 16, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""RequestorMode"": [ 24, [ ""Char"", ""null"" ]],
				 ""NestingLevel"": [ 28, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 CompletionRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Mdl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Char RequestorMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 24); } }
		public UInt32 NestingLevel { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _CLIENT_ID64
 
	public class _CLIENT_ID64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CLIENT_ID64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CLIENT_ID64"": [ 16, {
				 ""UniqueProcess"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""UniqueThread"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 UniqueProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 UniqueThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _DIRTY_PAGE_STATISTICS
 
	public class _DIRTY_PAGE_STATISTICS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DIRTY_PAGE_STATISTICS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DIRTY_PAGE_STATISTICS"": [ 24, {
				 ""DirtyPages"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""DirtyPagesLastScan"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""DirtyPagesScheduledLastScan"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DirtyPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 DirtyPagesLastScan { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 DirtyPagesScheduledLastScan { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _EPROCESS_VALUES
 
	public class _EPROCESS_VALUES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EPROCESS_VALUES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 104; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EPROCESS_VALUES"": [ 104, {
				 ""KernelTime"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""UserTime"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ReadyTime"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""CycleTime"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""ContextSwitches"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""ReadOperationCount"": [ 40, [ ""Int64"", ""null"" ]],
				 ""WriteOperationCount"": [ 48, [ ""Int64"", ""null"" ]],
				 ""OtherOperationCount"": [ 56, [ ""Int64"", ""null"" ]],
				 ""ReadTransferCount"": [ 64, [ ""Int64"", ""null"" ]],
				 ""WriteTransferCount"": [ 72, [ ""Int64"", ""null"" ]],
				 ""OtherTransferCount"": [ 80, [ ""Int64"", ""null"" ]],
				 ""KernelWaitTime"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""UserWaitTime"": [ 96, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 KernelTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 UserTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ReadyTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 CycleTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ContextSwitches { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public Int64 ReadOperationCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 40); } }
		public Int64 WriteOperationCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 48); } }
		public Int64 OtherOperationCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 56); } }
		public Int64 ReadTransferCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 64); } }
		public Int64 WriteTransferCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 72); } }
		public Int64 OtherTransferCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 KernelWaitTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 UserWaitTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
	}
	#endregion
	#region _ETW_PARTITION_CONTEXT
 
	public class _ETW_PARTITION_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_PARTITION_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_PARTITION_CONTEXT"": [ 8, {
				 ""Partition"": [ 0, [ ""Pointer"", ""{\""target\"":\""_EPARTITION\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Partition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _SK_CRASH_MINIDUMP
 
	public class _SK_CRASH_MINIDUMP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SK_CRASH_MINIDUMP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4096; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SK_CRASH_MINIDUMP"": [ 4096, {
				 ""Size"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Version"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ModuleCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""FrameCount"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Modules"": [ 16, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""StackFrames"": [ 1168, [ ""Array"", ""{\""count\"":366,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ModuleCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 FrameCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _SK_CRASH_MODULE[] Modules
		{
			get
			{
				_SK_CRASH_MODULE[] returnValue = new _SK_CRASH_MODULE[16];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<16; i++ )
					returnValue[i] = new _SK_CRASH_MODULE(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public _SK_CRASH_STACK_FRAME[] StackFrames
		{
			get
			{
				_SK_CRASH_STACK_FRAME[] returnValue = new _SK_CRASH_STACK_FRAME[366];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<366; i++ )
					returnValue[i] = new _SK_CRASH_STACK_FRAME(_StructureData, (i * size) + _BufferOffset + 1168);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SID_AND_ATTRIBUTES
 
	public class _SID_AND_ATTRIBUTES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SID_AND_ATTRIBUTES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SID_AND_ATTRIBUTES"": [ 16, {
				 ""Sid"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Attributes"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Sid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Attributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _SK_CRASH_STACK_FRAME
 
	public class _SK_CRASH_STACK_FRAME
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SK_CRASH_STACK_FRAME(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SK_CRASH_STACK_FRAME"": [ 8, {
				 ""ModuleId"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Rva"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Pc"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ModuleId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Rva { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 Pc { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _DEVICE_MAP
 
	public class _DEVICE_MAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_MAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_MAP"": [ 72, {
				 ""DosDevicesDirectory"": [ 0, [ ""Pointer"", ""{\""target\"":\""_OBJECT_DIRECTORY\""}"" ]],
				 ""GlobalDosDevicesDirectory"": [ 8, [ ""Pointer"", ""{\""target\"":\""_OBJECT_DIRECTORY\""}"" ]],
				 ""DosDevicesDirectoryHandle"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReferenceCount"": [ 24, [ ""Int32"", ""null"" ]],
				 ""DriveMap"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""DriveType"": [ 32, [ ""Array"", ""{\""count\"":32,\""target\"":\""Byte\""}"" ]],
				 ""ServerSilo"": [ 64, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DosDevicesDirectory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 GlobalDosDevicesDirectory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 DosDevicesDirectoryHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Int32 ReferenceCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 DriveMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public Byte[] DriveType
		{
			get
			{
				Byte[] returnValue = new Byte[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 32];
				return returnValue;
			}
		}
		public UInt64 ServerSilo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _RTL_BITMAP_EX
 
	public class _RTL_BITMAP_EX
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_BITMAP_EX(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_BITMAP_EX"": [ 16, {
				 ""SizeOfBitMap"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Buffer"": [ 8, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SizeOfBitMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Buffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _MMPTE_SUBSECTION
 
	public class _MMPTE_SUBSECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPTE_SUBSECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPTE_SUBSECTION"": [ 8, {
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Unused0"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""SwizzleBit"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""Prototype"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""ColdPage"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""Unused1"": [ 0, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""ExecutePrivilege"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt64\""}"" ]],
				 ""SubsectionAddress"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":16,\""target\"":\""Int64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Valid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Unused0
		{
			get
			{
				// start: 1  end: 4  Mask: 0000000000001110
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 14) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 SwizzleBit
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt64)value2;
			}
		}
		public UInt64 Protection
		{
			get
			{
				// start: 5  end: 10  Mask: 0000001111100000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 992) >> 5;
				return (UInt64)value2;
			}
		}
		public UInt64 Prototype
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 ColdPage
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 Unused1
		{
			get
			{
				// start: 12  end: 15  Mask: 0111000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 28672) >> 12;
				return (UInt64)value2;
			}
		}
		public UInt64 ExecutePrivilege
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32768) >> 15;
				return (UInt64)value2;
			}
		}
		public UInt64 SubsectionAddress
		{
			get
			{
				// start: 16  end: 64  Mask: 1111111111111111111111111111111111111111111111110000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744073709486080) >> 16;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _TRIAGE_9F_PNP
 
	public class _TRIAGE_9F_PNP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TRIAGE_9F_PNP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TRIAGE_9F_PNP"": [ 32, {
				 ""Signature"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Revision"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""CompletionQueue"": [ 8, [ ""Pointer"", ""{\""target\"":\""_TRIAGE_PNP_DEVICE_COMPLETION_QUEUE\""}"" ]],
				 ""DelayedWorkQueue"": [ 16, [ ""Pointer"", ""{\""target\"":\""_TRIAGE_EX_WORK_QUEUE\""}"" ]],
				 ""DelayedIoWorkQueue"": [ 24, [ ""Pointer"", ""{\""target\"":\""_TRIAGE_EX_WORK_QUEUE\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Signature { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Revision { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 CompletionQueue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 DelayedWorkQueue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 DelayedIoWorkQueue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _CM_KEY_SECURITY_CACHE_ENTRY
 
	public class _CM_KEY_SECURITY_CACHE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_SECURITY_CACHE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_SECURITY_CACHE_ENTRY"": [ 16, {
				 ""Cell"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""CachedSecurity"": [ 8, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_SECURITY_CACHE\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Cell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 CachedSecurity { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _POP_CURRENT_BROADCAST
 
	public class _POP_CURRENT_BROADCAST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_CURRENT_BROADCAST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_CURRENT_BROADCAST"": [ 24, {
				 ""InProgress"": [ 0, [ ""Byte"", ""null"" ]],
				 ""SystemContext"": [ 4, [ ""_SYSTEM_POWER_STATE_CONTEXT"", ""null"" ]],
				 ""PowerAction"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""POWER_ACTION\"",\""target\"":\""UInt32\""}"" ]],
				 ""DeviceState"": [ 16, [ ""Pointer"", ""{\""target\"":\""_POP_DEVICE_SYS_STATE\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte InProgress{ get { return _StructureData[_BufferOffset +0]; } }
		public _SYSTEM_POWER_STATE_CONTEXT SystemContext
		{
			get
			{
				_SYSTEM_POWER_STATE_CONTEXT returnValue = new _SYSTEM_POWER_STATE_CONTEXT(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public POWER_ACTION PowerAction { get { return (POWER_ACTION)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 DeviceState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _PHYSICAL_MEMORY_DESCRIPTOR
 
	public class _PHYSICAL_MEMORY_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PHYSICAL_MEMORY_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PHYSICAL_MEMORY_DESCRIPTOR"": [ 32, {
				 ""NumberOfRuns"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""NumberOfPages"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Run"": [ 16, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 NumberOfRuns { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 NumberOfPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _PHYSICAL_MEMORY_RUN[] Run
		{
			get
			{
				_PHYSICAL_MEMORY_RUN[] returnValue = new _PHYSICAL_MEMORY_RUN[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _PHYSICAL_MEMORY_RUN(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMPTE_HARDWARE
 
	public class _MMPTE_HARDWARE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPTE_HARDWARE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPTE_HARDWARE"": [ 8, {
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Dirty1"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""Owner"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""WriteThrough"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""CacheDisable"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""Accessed"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""Dirty"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt64\""}"" ]],
				 ""LargePage"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt64\""}"" ]],
				 ""Global"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""CopyOnWrite"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt64\""}"" ]],
				 ""Unused"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""Write"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""PageFrameNumber"": [ 0, [ ""BitField"", ""{\""end_bit\"":48,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""ReservedForHardware"": [ 0, [ ""BitField"", ""{\""end_bit\"":52,\""start_bit\"":48,\""target\"":\""UInt64\""}"" ]],
				 ""ReservedForSoftware"": [ 0, [ ""BitField"", ""{\""end_bit\"":56,\""start_bit\"":52,\""target\"":\""UInt64\""}"" ]],
				 ""WsleAge"": [ 0, [ ""BitField"", ""{\""end_bit\"":60,\""start_bit\"":56,\""target\"":\""UInt64\""}"" ]],
				 ""WsleProtection"": [ 0, [ ""BitField"", ""{\""end_bit\"":63,\""start_bit\"":60,\""target\"":\""UInt64\""}"" ]],
				 ""NoExecute"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":63,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Valid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Dirty1
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 Owner
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 WriteThrough
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt64)value2;
			}
		}
		public UInt64 CacheDisable
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt64)value2;
			}
		}
		public UInt64 Accessed
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt64)value2;
			}
		}
		public UInt64 Dirty
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt64)value2;
			}
		}
		public UInt64 LargePage
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt64)value2;
			}
		}
		public UInt64 Global
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt64)value2;
			}
		}
		public UInt64 CopyOnWrite
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt64)value2;
			}
		}
		public UInt64 Unused
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 Write
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 PageFrameNumber
		{
			get
			{
				// start: 12  end: 48  Mask: 111111111111111111111111111111111111000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 281474976706560) >> 12;
				return (UInt64)value2;
			}
		}
		public UInt64 ReservedForHardware
		{
			get
			{
				// start: 48  end: 52  Mask: 1111000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4222124650659840) >> 48;
				return (UInt64)value2;
			}
		}
		public UInt64 ReservedForSoftware
		{
			get
			{
				// start: 52  end: 56  Mask: 11110000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 67553994410557440) >> 52;
				return (UInt64)value2;
			}
		}
		public UInt64 WsleAge
		{
			get
			{
				// start: 56  end: 60  Mask: 111100000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1080863910568919040) >> 56;
				return (UInt64)value2;
			}
		}
		public UInt64 WsleProtection
		{
			get
			{
				// start: 60  end: 63  Mask: 111000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8070450532247928832) >> 60;
				return (UInt64)value2;
			}
		}
		public UInt64 NoExecute
		{
			get
			{
				// start: 63  end: 64  Mask: 1000000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 9223372036854775808) >> 63;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _MM_SESSION_SPACE_FLAGS
 
	public class _MM_SESSION_SPACE_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MM_SESSION_SPACE_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MM_SESSION_SPACE_FLAGS"": [ 4, {
				 ""Initialized"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""DeletePending"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""PoolInitialized"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""DynamicVaInitialized"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""WsInitialized"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""PoolDestroyed"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""ObjectInitialized"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""SessionHeapInitialized"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""SessionHeapDestroyed"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""LeakedPoolDeliberately"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""Filler"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Initialized
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 DeletePending
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 PoolInitialized
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 DynamicVaInitialized
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 WsInitialized
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 PoolDestroyed
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 ObjectInitialized
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 SessionHeapInitialized
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 SessionHeapDestroyed
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 LeakedPoolDeliberately
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 Filler
		{
			get
			{
				// start: 10  end: 32  Mask: 11111111111111111111110000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294966272) >> 10;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _OBJECT_HANDLE_COUNT_DATABASE
 
	public class _OBJECT_HANDLE_COUNT_DATABASE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_HANDLE_COUNT_DATABASE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_HANDLE_COUNT_DATABASE"": [ 24, {
				 ""CountEntries"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HandleCountEntries"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 CountEntries { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _OBJECT_HANDLE_COUNT_ENTRY[] HandleCountEntries
		{
			get
			{
				_OBJECT_HANDLE_COUNT_ENTRY[] returnValue = new _OBJECT_HANDLE_COUNT_ENTRY[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _OBJECT_HANDLE_COUNT_ENTRY(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _JOB_RATE_CONTROL_HEADER
 
	public class _JOB_RATE_CONTROL_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _JOB_RATE_CONTROL_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_JOB_RATE_CONTROL_HEADER"": [ 40, {
				 ""RateControlQuotaReference"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OverQuotaHistory"": [ 8, [ ""_RTL_BITMAP"", ""null"" ]],
				 ""BitMapBuffer"": [ 24, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""BitMapBufferSize"": [ 32, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 RateControlQuotaReference { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _RTL_BITMAP OverQuotaHistory
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 BitMapBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 BitMapBufferSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _OBJECT_NAME_INFORMATION
 
	public class _OBJECT_NAME_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_NAME_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_NAME_INFORMATION"": [ 16, {
				 ""Name"": [ 0, [ ""_UNICODE_STRING"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _UNICODE_STRING Name
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PROCESSOR_NUMBER
 
	public class _PROCESSOR_NUMBER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCESSOR_NUMBER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCESSOR_NUMBER"": [ 4, {
				 ""Group"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Number"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 3, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Group { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Number{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +3]; } }
	}
	#endregion
	#region _DBGKD_SET_CONTEXT
 
	public class _DBGKD_SET_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_SET_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_SET_CONTEXT"": [ 4, {
				 ""ContextFlags"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ContextFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _GDI_TEB_BATCH64
 
	public class _GDI_TEB_BATCH64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _GDI_TEB_BATCH64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1256; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_GDI_TEB_BATCH64"": [ 1256, {
				 ""Offset"": [ 0, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""HasRenderingCommand"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""HDC"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Buffer"": [ 16, [ ""Array"", ""{\""count\"":310,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Offset
		{
			get
			{
				// start: 0  end: 31  Mask: 1111111111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2147483647) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 HasRenderingCommand
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public UInt64 HDC { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32[] Buffer
		{
			get
			{
				UInt32[] returnValue = new UInt32[310];
				for(int i=0; i<310; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_TUNING_PARAMETERS
 
	public class _HEAP_TUNING_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_TUNING_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_TUNING_PARAMETERS"": [ 16, {
				 ""CommittThresholdShift"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""MaxPreCommittThreshold"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 CommittThresholdShift { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 MaxPreCommittThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _LPCP_MESSAGE
 
	public class _LPCP_MESSAGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LPCP_MESSAGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LPCP_MESSAGE"": [ 80, {
				 ""Entry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FreeEntry"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""Reserved0"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SenderPort"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RepliedToThread"": [ 24, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""PortContext"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Request"": [ 40, [ ""_PORT_MESSAGE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Entry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY FreeEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Reserved0 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 SenderPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 RepliedToThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 PortContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _PORT_MESSAGE Request
		{
			get
			{
				_PORT_MESSAGE returnValue = new _PORT_MESSAGE(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PCW_MASK_INFORMATION
 
	public class _PCW_MASK_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCW_MASK_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCW_MASK_INFORMATION"": [ 40, {
				 ""CounterMask"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""InstanceMask"": [ 8, [ ""Pointer"", ""{\""target\"":\""_UNICODE_STRING\""}"" ]],
				 ""InstanceId"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""CollectMultiple"": [ 20, [ ""Byte"", ""null"" ]],
				 ""Buffer"": [ 24, [ ""Pointer"", ""{\""target\"":\""_PCW_BUFFER\""}"" ]],
				 ""CancelEvent"": [ 32, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 CounterMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 InstanceMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 InstanceId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Byte CollectMultiple{ get { return _StructureData[_BufferOffset +20]; } }
		public UInt64 Buffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 CancelEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _PO_DIRECTED_DRIPS_STATE
 
	public class _PO_DIRECTED_DRIPS_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_DIRECTED_DRIPS_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_DIRECTED_DRIPS_STATE"": [ 56, {
				 ""QueueLink"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""VisitedQueueLink"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Flags"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""CachedFlags"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""DeviceUsageCount"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""Diagnostic"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY QueueLink
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY VisitedQueueLink
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 CachedFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 DeviceUsageCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt64 Diagnostic { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _DBGKD_WRITE_CUSTOM_BREAKPOINT
 
	public class _DBGKD_WRITE_CUSTOM_BREAKPOINT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_WRITE_CUSTOM_BREAKPOINT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_WRITE_CUSTOM_BREAKPOINT"": [ 24, {
				 ""BreakPointAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""BreakPointInstruction"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""BreakPointHandle"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""BreakPointInstructionSize"": [ 20, [ ""Byte"", ""null"" ]],
				 ""BreakPointInstructionAlignment"": [ 21, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 BreakPointAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 BreakPointInstruction { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 BreakPointHandle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Byte BreakPointInstructionSize{ get { return _StructureData[_BufferOffset +20]; } }
		public Byte BreakPointInstructionAlignment{ get { return _StructureData[_BufferOffset +21]; } }
	}
	#endregion
	#region _DBGKD_QUERY_MEMORY
 
	public class _DBGKD_QUERY_MEMORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_QUERY_MEMORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_QUERY_MEMORY"": [ 24, {
				 ""Address"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Reserved"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""AddressSpace"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 20, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Address { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Reserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 AddressSpace { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _OBJECT_REF_INFO
 
	public class _OBJECT_REF_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_REF_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_REF_INFO"": [ 40, {
				 ""ObjectHeader"": [ 0, [ ""Pointer"", ""{\""target\"":\""_OBJECT_HEADER\""}"" ]],
				 ""NextRef"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ImageFileName"": [ 16, [ ""Array"", ""{\""count\"":16,\""target\"":\""Byte\""}"" ]],
				 ""NextPos"": [ 32, [ ""UInt16"", ""null"" ]],
				 ""MaxStacks"": [ 34, [ ""UInt16"", ""null"" ]],
				 ""StackInfo"": [ 36, [ ""Array"", ""{\""count\"":0,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ObjectHeader { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 NextRef { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public Byte[] ImageFileName
		{
			get
			{
				Byte[] returnValue = new Byte[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 16];
				return returnValue;
			}
		}
		public UInt16 NextPos { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 32); } }
		public UInt16 MaxStacks { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 34); } }
		public _OBJECT_REF_STACK_INFO[] StackInfo
		{
			get
			{
				_OBJECT_REF_STACK_INFO[] returnValue = new _OBJECT_REF_STACK_INFO[0];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<0; i++ )
					returnValue[i] = new _OBJECT_REF_STACK_INFO(_StructureData, (i * size) + _BufferOffset + 36);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KQOS_GROUPING_SETS
 
	public class _KQOS_GROUPING_SETS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KQOS_GROUPING_SETS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KQOS_GROUPING_SETS"": [ 16, {
				 ""SingleCoreSet"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""SmtSet"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SingleCoreSet { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 SmtSet { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _MI_PARTITION_STORES
 
	public class _MI_PARTITION_STORES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PARTITION_STORES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 144; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PARTITION_STORES"": [ 144, {
				 ""WriteAllStoreHintedPages"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""VirtualPageFileNumber"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Registered"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ReadClusterSizeMax"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""EvictFlushRequestCount"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ModifiedWriteDisableCount"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""WriteIssueFailures"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""WritesOutstanding"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""EvictFlushLock"": [ 32, [ ""Int32"", ""null"" ]],
				 ""EvictionThread"": [ 40, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""EvictEvent"": [ 48, [ ""_KEVENT"", ""null"" ]],
				 ""WriteSupportSListHead"": [ 80, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""EvictFlushCompleteEvent"": [ 96, [ ""_KEVENT"", ""null"" ]],
				 ""ModifiedWriteFailedBitmap"": [ 120, [ ""Pointer"", ""{\""target\"":\""_RTL_BITMAP\""}"" ]],
				 ""StoreProcess"": [ 128, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""DeleteStoredPages"": [ 136, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG WriteAllStoreHintedPages
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 VirtualPageFileNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Registered { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ReadClusterSizeMax { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 EvictFlushRequestCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ModifiedWriteDisableCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 WriteIssueFailures { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 WritesOutstanding { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public Int32 EvictFlushLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 EvictionThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _KEVENT EvictEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _SLIST_HEADER WriteSupportSListHead
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public _KEVENT EvictFlushCompleteEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt64 ModifiedWriteFailedBitmap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 StoreProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt32 DeleteStoredPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
	}
	#endregion
	#region _PS_PROPERTY_SET
 
	public class _PS_PROPERTY_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_PROPERTY_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_PROPERTY_SET"": [ 24, {
				 ""ListHead"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Lock"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _TRIAGE_EX_WORK_QUEUE
 
	public class _TRIAGE_EX_WORK_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TRIAGE_EX_WORK_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 688; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TRIAGE_EX_WORK_QUEUE"": [ 688, {
				 ""WorkPriQueue"": [ 0, [ ""_KPRIQUEUE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KPRIQUEUE WorkPriQueue
		{
			get
			{
				_KPRIQUEUE returnValue = new _KPRIQUEUE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PROCESSOR_IDLE_CONSTRAINTS
 
	public class _PROCESSOR_IDLE_CONSTRAINTS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCESSOR_IDLE_CONSTRAINTS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCESSOR_IDLE_CONSTRAINTS"": [ 48, {
				 ""TotalTime"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""IdleTime"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ExpectedIdleDuration"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""MaxIdleDuration"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""OverrideState"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""TimeCheck"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""PromotePercent"": [ 40, [ ""Byte"", ""null"" ]],
				 ""DemotePercent"": [ 41, [ ""Byte"", ""null"" ]],
				 ""Parked"": [ 42, [ ""Byte"", ""null"" ]],
				 ""Interruptible"": [ 43, [ ""Byte"", ""null"" ]],
				 ""PlatformIdle"": [ 44, [ ""Byte"", ""null"" ]],
				 ""ExpectedWakeReason"": [ 45, [ ""Byte"", ""null"" ]],
				 ""IdleStateMax"": [ 46, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 TotalTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 IdleTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ExpectedIdleDuration { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 MaxIdleDuration { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 OverrideState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 TimeCheck { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public Byte PromotePercent{ get { return _StructureData[_BufferOffset +40]; } }
		public Byte DemotePercent{ get { return _StructureData[_BufferOffset +41]; } }
		public Byte Parked{ get { return _StructureData[_BufferOffset +42]; } }
		public Byte Interruptible{ get { return _StructureData[_BufferOffset +43]; } }
		public Byte PlatformIdle{ get { return _StructureData[_BufferOffset +44]; } }
		public Byte ExpectedWakeReason{ get { return _StructureData[_BufferOffset +45]; } }
		public Byte IdleStateMax{ get { return _StructureData[_BufferOffset +46]; } }
	}
	#endregion
	#region _ALPC_PORT_ATTRIBUTES
 
	public class _ALPC_PORT_ATTRIBUTES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ALPC_PORT_ATTRIBUTES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ALPC_PORT_ATTRIBUTES"": [ 72, {
				 ""Flags"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SecurityQos"": [ 4, [ ""_SECURITY_QUALITY_OF_SERVICE"", ""null"" ]],
				 ""MaxMessageLength"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""MemoryBandwidth"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""MaxPoolUsage"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""MaxSectionSize"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""MaxViewSize"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""MaxTotalSectionSize"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""DupObjectTypes"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 68, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _SECURITY_QUALITY_OF_SERVICE SecurityQos
		{
			get
			{
				_SECURITY_QUALITY_OF_SERVICE returnValue = new _SECURITY_QUALITY_OF_SERVICE(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt64 MaxMessageLength { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 MemoryBandwidth { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 MaxPoolUsage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 MaxSectionSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 MaxViewSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 MaxTotalSectionSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt32 DupObjectTypes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
	}
	#endregion
	#region _THREAD_ENERGY_VALUES
 
	public class _THREAD_ENERGY_VALUES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _THREAD_ENERGY_VALUES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 200; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_THREAD_ENERGY_VALUES"": [ 200, {
				 ""Cycles"": [ 0, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""UInt64\""}}"" ]],
				 ""AttributedCycles"": [ 64, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""UInt64\""}}"" ]],
				 ""WorkOnBehalfCycles"": [ 128, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""UInt64\""}}"" ]],
				 ""CpuTimeline"": [ 192, [ ""_TIMELINE_BITMAP"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64[] Cycles
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				int size = 8;
				for(int i=0; i<8; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64[] AttributedCycles
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				int size = 8;
				for(int i=0; i<8; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt64[] WorkOnBehalfCycles
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				int size = 8;
				for(int i=0; i<8; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 128);
				return returnValue;
			}
		}
		public _TIMELINE_BITMAP CpuTimeline
		{
			get
			{
				_TIMELINE_BITMAP returnValue = new _TIMELINE_BITMAP(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEAP_WORK_QUEUE
 
	public class _WHEAP_WORK_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEAP_WORK_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 136; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEAP_WORK_QUEUE"": [ 136, {
				 ""ListHead"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ListLock"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""ItemCount"": [ 24, [ ""Int32"", ""null"" ]],
				 ""Dpc"": [ 32, [ ""_KDPC"", ""null"" ]],
				 ""WorkItem"": [ 96, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""WorkRoutine"": [ 128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 ListLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Int32 ItemCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 24); } }
		public _KDPC Dpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _WORK_QUEUE_ITEM WorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt64 WorkRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
	}
	#endregion
	#region _RTL_RUN_ONCE
 
	public class _RTL_RUN_ONCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_RUN_ONCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_RUN_ONCE"": [ 8, {
				 ""Ptr"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Value"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""State"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Ptr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Value { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 State
		{
			get
			{
				// start: 0  end: 2  Mask: 0000000000000011
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 3) >> 0;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _CM_PATH_HASH
 
	public class _CM_PATH_HASH
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_PATH_HASH(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_PATH_HASH"": [ 4, {
				 ""Hash"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Hash { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _RTL_HP_VS_CONFIG
 
	public class _RTL_HP_VS_CONFIG
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_HP_VS_CONFIG(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_HP_VS_CONFIG"": [ 4, {
				 ""Flags"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG Flags
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EXHANDLE
 
	public class _EXHANDLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXHANDLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXHANDLE"": [ 8, {
				 ""TagBits"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Index"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""GenericHandleOverlay"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Value"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 TagBits
		{
			get
			{
				// start: 0  end: 2  Mask: 0000000000000011
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 3) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Index
		{
			get
			{
				// start: 2  end: 32  Mask: 11111111111111111111111111111100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967292) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt64 GenericHandleOverlay { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Value { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _COUNTER_READING
 
	public class _COUNTER_READING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _COUNTER_READING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_COUNTER_READING"": [ 24, {
				 ""Type"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_HARDWARE_COUNTER_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Index"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Start"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Total"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _HARDWARE_COUNTER_TYPE Type { get { return (_HARDWARE_COUNTER_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Index { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 Start { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Total { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _SECURITY_DESCRIPTOR
 
	public class _SECURITY_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECURITY_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECURITY_DESCRIPTOR"": [ 40, {
				 ""Revision"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Sbz1"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Control"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Owner"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Group"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Sacl"": [ 24, [ ""Pointer"", ""{\""target\"":\""_ACL\""}"" ]],
				 ""Dacl"": [ 32, [ ""Pointer"", ""{\""target\"":\""_ACL\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte Revision{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Sbz1{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt16 Control { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 Owner { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Group { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Sacl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 Dacl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _PNP_DEVICE_EVENT_LIST
 
	public class _PNP_DEVICE_EVENT_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PNP_DEVICE_EVENT_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 136; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PNP_DEVICE_EVENT_LIST"": [ 136, {
				 ""Status"": [ 0, [ ""Int32"", ""null"" ]],
				 ""EventQueueMutex"": [ 8, [ ""_KMUTANT"", ""null"" ]],
				 ""Lock"": [ 64, [ ""_FAST_MUTEX"", ""null"" ]],
				 ""List"": [ 120, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public _KMUTANT EventQueueMutex
		{
			get
			{
				_KMUTANT returnValue = new _KMUTANT(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _FAST_MUTEX Lock
		{
			get
			{
				_FAST_MUTEX returnValue = new _FAST_MUTEX(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _LIST_ENTRY List
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PO_DEVICE_NOTIFY
 
	public class _PO_DEVICE_NOTIFY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_DEVICE_NOTIFY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 104; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_DEVICE_NOTIFY"": [ 104, {
				 ""Link"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PowerChildren"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PowerParents"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""TargetDevice"": [ 48, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""OrderLevel"": [ 56, [ ""Byte"", ""null"" ]],
				 ""DeviceObject"": [ 64, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""DeviceName"": [ 72, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""DriverName"": [ 80, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""ChildCount"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""ActiveChild"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""ParentCount"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""ActiveParent"": [ 100, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY PowerChildren
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LIST_ENTRY PowerParents
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 TargetDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public Byte OrderLevel{ get { return _StructureData[_BufferOffset +56]; } }
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 DeviceName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 DriverName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt32 ChildCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 ActiveChild { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 ParentCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 ActiveParent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
	}
	#endregion
	#region _DUAL
 
	public class _DUAL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DUAL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 632; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DUAL"": [ 632, {
				 ""Length"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Map"": [ 8, [ ""Pointer"", ""{\""target\"":\""_HMAP_DIRECTORY\""}"" ]],
				 ""SmallDir"": [ 16, [ ""Pointer"", ""{\""target\"":\""_HMAP_TABLE\""}"" ]],
				 ""Guard"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""FreeDisplay"": [ 32, [ ""Array"", ""{\""count\"":24,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""FreeBins"": [ 608, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FreeSummary"": [ 624, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 Map { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 SmallDir { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 Guard { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _FREE_DISPLAY[] FreeDisplay
		{
			get
			{
				_FREE_DISPLAY[] returnValue = new _FREE_DISPLAY[24];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<24; i++ )
					returnValue[i] = new _FREE_DISPLAY(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
		public _LIST_ENTRY FreeBins
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 608);
				return returnValue;
			}
		}
		public UInt32 FreeSummary { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 624); } }
	}
	#endregion
	#region _MI_VAD_EVENT_BLOCK
 
	public class _MI_VAD_EVENT_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_VAD_EVENT_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_VAD_EVENT_BLOCK"": [ 72, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_MI_VAD_EVENT_BLOCK\""}"" ]],
				 ""Gate"": [ 8, [ ""_KGATE"", ""null"" ]],
				 ""SecureInfo"": [ 8, [ ""_MMADDRESS_LIST"", ""null"" ]],
				 ""BitMap"": [ 8, [ ""_RTL_BITMAP_EX"", ""null"" ]],
				 ""InPageSupport"": [ 8, [ ""Pointer"", ""{\""target\"":\""_MMINPAGE_SUPPORT\""}"" ]],
				 ""LargePage"": [ 8, [ ""_MI_LARGEPAGE_VAD_INFO"", ""null"" ]],
				 ""AweView"": [ 8, [ ""_MI_PHYSICAL_VIEW"", ""null"" ]],
				 ""CreatingThread"": [ 8, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""PebTeb"": [ 8, [ ""_MI_SUB64K_FREE_RANGES"", ""null"" ]],
				 ""PlaceholderVad"": [ 8, [ ""Pointer"", ""{\""target\"":\""_MMVAD_SHORT\""}"" ]],
				 ""WaitReason"": [ 64, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _KGATE Gate
		{
			get
			{
				_KGATE returnValue = new _KGATE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _MMADDRESS_LIST SecureInfo
		{
			get
			{
				_MMADDRESS_LIST returnValue = new _MMADDRESS_LIST(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _RTL_BITMAP_EX BitMap
		{
			get
			{
				_RTL_BITMAP_EX returnValue = new _RTL_BITMAP_EX(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 InPageSupport { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _MI_LARGEPAGE_VAD_INFO LargePage
		{
			get
			{
				_MI_LARGEPAGE_VAD_INFO returnValue = new _MI_LARGEPAGE_VAD_INFO(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _MI_PHYSICAL_VIEW AweView
		{
			get
			{
				_MI_PHYSICAL_VIEW returnValue = new _MI_PHYSICAL_VIEW(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 CreatingThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _MI_SUB64K_FREE_RANGES PebTeb
		{
			get
			{
				_MI_SUB64K_FREE_RANGES returnValue = new _MI_SUB64K_FREE_RANGES(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 PlaceholderVad { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 WaitReason { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _SUBSECTION
 
	public class _SUBSECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SUBSECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SUBSECTION"": [ 56, {
				 ""ControlArea"": [ 0, [ ""Pointer"", ""{\""target\"":\""_CONTROL_AREA\""}"" ]],
				 ""SubsectionBase"": [ 8, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""NextSubsection"": [ 16, [ ""Pointer"", ""{\""target\"":\""_SUBSECTION\""}"" ]],
				 ""GlobalPerSessionHead"": [ 24, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""CreationWaitList"": [ 24, [ ""Pointer"", ""{\""target\"":\""_MI_CONTROL_AREA_WAIT_BLOCK\""}"" ]],
				 ""SessionDriverProtos"": [ 24, [ ""Pointer"", ""{\""target\"":\""_MI_PER_SESSION_PROTOS\""}"" ]],
				 ""u"": [ 32, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""StartingSector"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""NumberOfFullSectors"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""PtesInSubsection"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""u1"": [ 48, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""UnusedPtes"": [ 52, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ExtentQueryNeeded"": [ 52, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]],
				 ""DirtyPages"": [ 52, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ControlArea { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 SubsectionBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 NextSubsection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _RTL_AVL_TREE GlobalPerSessionHead
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 CreationWaitList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 SessionDriverProtos { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt32 StartingSector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 NumberOfFullSectors { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 PtesInSubsection { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 UnusedPtes
		{
			get
			{
				// start: 0  end: 30  Mask: 111111111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 52);
				var value2 = (value & 1073741823) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ExtentQueryNeeded
		{
			get
			{
				// start: 30  end: 31  Mask: 1000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 52);
				var value2 = (value & 1073741824) >> 30;
				return (UInt32)value2;
			}
		}
		public UInt32 DirtyPages
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 52);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _KUMS_CONTEXT_HEADER
 
	public class _KUMS_CONTEXT_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KUMS_CONTEXT_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KUMS_CONTEXT_HEADER"": [ 112, {
				 ""P1Home"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""P2Home"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""P3Home"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""P4Home"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""StackTop"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StackSize"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""RspOffset"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""Rip"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""FltSave"": [ 64, [ ""Pointer"", ""{\""target\"":\""_XSAVE_FORMAT\""}"" ]],
				 ""Volatile"": [ 72, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Reserved"": [ 72, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""Flags"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""TrapFrame"": [ 80, [ ""Pointer"", ""{\""target\"":\""_KTRAP_FRAME\""}"" ]],
				 ""ExceptionFrame"": [ 88, [ ""Pointer"", ""{\""target\"":\""_KEXCEPTION_FRAME\""}"" ]],
				 ""SourceThread"": [ 96, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""Return"": [ 104, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 P1Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 P2Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 P3Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 P4Home { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 StackTop { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 StackSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 RspOffset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Rip { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 FltSave { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 Volatile
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 72);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Reserved
		{
			get
			{
				// start: 1  end: 64  Mask: 1111111111111111111111111111111111111111111111111111111111111110
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 72);
				var value2 = (value & 18446744073709551614) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 Flags { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 TrapFrame { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 ExceptionFrame { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 SourceThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 Return { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
	}
	#endregion
	#region _REQUEST_MAILBOX
 
	public class _REQUEST_MAILBOX
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _REQUEST_MAILBOX(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_REQUEST_MAILBOX"": [ 64, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_REQUEST_MAILBOX\""}"" ]],
				 ""RequestSummary"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""RequestPacket"": [ 16, [ ""_KREQUEST_PACKET"", ""null"" ]],
				 ""NodeTargetCountAddr"": [ 48, [ ""Pointer"", ""{\""target\"":\""long\""}"" ]],
				 ""NodeTargetCount"": [ 56, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 RequestSummary { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _KREQUEST_PACKET RequestPacket
		{
			get
			{
				_KREQUEST_PACKET returnValue = new _KREQUEST_PACKET(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 NodeTargetCountAddr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public Int32 NodeTargetCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 56); } }
	}
	#endregion
	#region _ACTIVATION_CONTEXT_STACK
 
	public class _ACTIVATION_CONTEXT_STACK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ACTIVATION_CONTEXT_STACK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ACTIVATION_CONTEXT_STACK"": [ 40, {
				 ""ActiveFrame"": [ 0, [ ""Pointer"", ""{\""target\"":\""_RTL_ACTIVATION_CONTEXT_STACK_FRAME\""}"" ]],
				 ""FrameListCache"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Flags"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""NextCookieSequenceNumber"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""StackId"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ActiveFrame { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _LIST_ENTRY FrameListCache
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 NextCookieSequenceNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 StackId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region CMP_OFFSET_ARRAY
 
	public class CMP_OFFSET_ARRAY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public CMP_OFFSET_ARRAY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""CMP_OFFSET_ARRAY"": [ 24, {
				 ""FileOffset"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""DataBuffer"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DataLength"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 FileOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 DataBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 DataLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _FAST_ERESOURCE
 
	public class _FAST_ERESOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FAST_ERESOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 104; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FAST_ERESOURCE"": [ 104, {
				 ""Reserved1"": [ 0, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""Reserved2"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Reserved3"": [ 32, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""Reserved4"": [ 64, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved5"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Reserved6"": [ 88, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64[] Reserved1
		{
			get
			{
				UInt64[] returnValue = new UInt64[3];
				int size = 8;
				for(int i=0; i<3; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Reserved2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt64[] Reserved3
		{
			get
			{
				UInt64[] returnValue = new UInt64[4];
				int size = 8;
				for(int i=0; i<4; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt32[] Reserved4
		{
			get
			{
				UInt32[] returnValue = new UInt32[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt64 Reserved5 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64[] Reserved6
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				int size = 8;
				for(int i=0; i<2; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 88);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KEXECUTE_OPTIONS
 
	public class _KEXECUTE_OPTIONS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KEXECUTE_OPTIONS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KEXECUTE_OPTIONS"": [ 1, {
				 ""ExecuteDisable"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""ExecuteEnable"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""DisableThunkEmulation"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""Permanent"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""ExecuteDispatchEnable"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""ImageDispatchEnable"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""DisableExceptionChainValidation"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""Spare"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""Byte\""}"" ]],
				 ""ExecuteOptions"": [ 0, [ ""Byte"", ""null"" ]],
				 ""ExecuteOptionsNV"": [ 0, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte ExecuteDisable
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte ExecuteEnable
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte DisableThunkEmulation
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte Permanent
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte ExecuteDispatchEnable
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte ImageDispatchEnable
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte DisableExceptionChainValidation
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 64) >> 6;
				return (Byte)value2;
			}
		}
		public Byte Spare
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 128) >> 7;
				return (Byte)value2;
			}
		}
		public Byte ExecuteOptions{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte ExecuteOptionsNV{ get { return _StructureData[_BufferOffset +0]; } }
	}
	#endregion
	#region _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE
 
	public class _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TRIAGE_PNP_DEVICE_COMPLETION_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TRIAGE_PNP_DEVICE_COMPLETION_QUEUE"": [ 16, {
				 ""DispatchedList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY DispatchedList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_STOP_ON_VALUES
 
	public class _HEAP_STOP_ON_VALUES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_STOP_ON_VALUES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_STOP_ON_VALUES"": [ 48, {
				 ""AllocAddress"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""AllocTag"": [ 8, [ ""_HEAP_STOP_ON_TAG"", ""null"" ]],
				 ""ReAllocAddress"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""ReAllocTag"": [ 24, [ ""_HEAP_STOP_ON_TAG"", ""null"" ]],
				 ""FreeAddress"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""FreeTag"": [ 40, [ ""_HEAP_STOP_ON_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 AllocAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _HEAP_STOP_ON_TAG AllocTag
		{
			get
			{
				_HEAP_STOP_ON_TAG returnValue = new _HEAP_STOP_ON_TAG(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 ReAllocAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _HEAP_STOP_ON_TAG ReAllocTag
		{
			get
			{
				_HEAP_STOP_ON_TAG returnValue = new _HEAP_STOP_ON_TAG(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 FreeAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _HEAP_STOP_ON_TAG FreeTag
		{
			get
			{
				_HEAP_STOP_ON_TAG returnValue = new _HEAP_STOP_ON_TAG(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SEP_RM_LSA_CONNECTION_STATE
 
	public class _SEP_RM_LSA_CONNECTION_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEP_RM_LSA_CONNECTION_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEP_RM_LSA_CONNECTION_STATE"": [ 80, {
				 ""LsaProcessHandle"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LsaCommandPortHandle"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SepRmThreadHandle"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RmCommandPortHandle"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RmCommandServerPortHandle"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LsaCommandPortSectionHandle"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LsaCommandPortSectionSize"": [ 48, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""LsaViewPortMemory"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RmViewPortMemory"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LsaCommandPortMemoryDelta"": [ 72, [ ""Int32"", ""null"" ]],
				 ""LsaCommandPortActive"": [ 76, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 LsaProcessHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 LsaCommandPortHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 SepRmThreadHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 RmCommandPortHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 RmCommandServerPortHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 LsaCommandPortSectionHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _LARGE_INTEGER LsaCommandPortSectionSize
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt64 LsaViewPortMemory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 RmViewPortMemory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public Int32 LsaCommandPortMemoryDelta { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 72); } }
		public Byte LsaCommandPortActive{ get { return _StructureData[_BufferOffset +76]; } }
	}
	#endregion
	#region _MM_GRAPHICS_VAD_FLAGS
 
	public class _MM_GRAPHICS_VAD_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MM_GRAPHICS_VAD_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MM_GRAPHICS_VAD_FLAGS"": [ 4, {
				 ""Lock"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""LockContended"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""DeleteInProgress"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""NoChange"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""VadType"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""PreferredNode"": [ 0, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""PageSize"": [ 0, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""PrivateMemoryAlwaysSet"": [ 0, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""WriteWatch"": [ 0, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""FixedLargePageSize"": [ 0, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""ZeroFillPagesOptional"": [ 0, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]],
				 ""GraphicsAlwaysSet"": [ 0, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""GraphicsUseCoherentBus"": [ 0, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":25,\""target\"":\""UInt32\""}"" ]],
				 ""GraphicsNoCache"": [ 0, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""GraphicsPageProtection"": [ 0, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":27,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Lock
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 LockContended
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 DeleteInProgress
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 NoChange
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 VadType
		{
			get
			{
				// start: 4  end: 7  Mask: 0000000001110000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 112) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 Protection
		{
			get
			{
				// start: 7  end: 12  Mask: 0000111110000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 3968) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 PreferredNode
		{
			get
			{
				// start: 12  end: 18  Mask: 111111000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 258048) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 PageSize
		{
			get
			{
				// start: 18  end: 20  Mask: 11000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 786432) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 PrivateMemoryAlwaysSet
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 WriteWatch
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 FixedLargePageSize
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 ZeroFillPagesOptional
		{
			get
			{
				// start: 23  end: 24  Mask: 100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8388608) >> 23;
				return (UInt32)value2;
			}
		}
		public UInt32 GraphicsAlwaysSet
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16777216) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 GraphicsUseCoherentBus
		{
			get
			{
				// start: 25  end: 26  Mask: 10000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 33554432) >> 25;
				return (UInt32)value2;
			}
		}
		public UInt32 GraphicsNoCache
		{
			get
			{
				// start: 26  end: 27  Mask: 100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 67108864) >> 26;
				return (UInt32)value2;
			}
		}
		public UInt32 GraphicsPageProtection
		{
			get
			{
				// start: 27  end: 30  Mask: 111000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 939524096) >> 27;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _KTIMER_TABLE_STATE
 
	public class _KTIMER_TABLE_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTIMER_TABLE_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTIMER_TABLE_STATE"": [ 24, {
				 ""LastTimerExpiration"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""LastTimerHand"": [ 16, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64[] LastTimerExpiration
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32[] LastTimerHand
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_KCB_LAYER_INFO
 
	public class _CM_KCB_LAYER_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KCB_LAYER_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KCB_LAYER_INFO"": [ 48, {
				 ""LayerListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Kcb"": [ 16, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""LowerLayer"": [ 24, [ ""Pointer"", ""{\""target\"":\""_CM_KCB_LAYER_INFO\""}"" ]],
				 ""UpperLayerListHead"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY LayerListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Kcb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 LowerLayer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _LIST_ENTRY UpperLayerListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_RM
 
	public class _CM_RM
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_RM(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 136; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_RM"": [ 136, {
				 ""RmListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""TransactionListHead"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""TmHandle"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Tm"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RmHandle"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KtmRm"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RefCount"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""ContainerNum"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""ContainerSize"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""CmHive"": [ 80, [ ""Pointer"", ""{\""target\"":\""_CMHIVE\""}"" ]],
				 ""LogFileObject"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MarshallingContext"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RmFlags"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""LogStartStatus1"": [ 108, [ ""Int32"", ""null"" ]],
				 ""LogStartStatus2"": [ 112, [ ""Int32"", ""null"" ]],
				 ""BaseLsn"": [ 120, [ ""UInt64"", ""null"" ]],
				 ""RmLock"": [ 128, [ ""Pointer"", ""{\""target\"":\""_ERESOURCE\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY RmListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY TransactionListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 TmHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 Tm { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 RmHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 KtmRm { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt32 RefCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 ContainerNum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt64 ContainerSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 CmHive { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 LogFileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 MarshallingContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt32 RmFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public Int32 LogStartStatus1 { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 108); } }
		public Int32 LogStartStatus2 { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 112); } }
		public UInt64 BaseLsn { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 RmLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
	}
	#endregion
	#region _MMWORKING_SET_EXPANSION_HEAD
 
	public class _MMWORKING_SET_EXPANSION_HEAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMWORKING_SET_EXPANSION_HEAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMWORKING_SET_EXPANSION_HEAD"": [ 16, {
				 ""ListHead"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MM_PAGED_POOL_INFO
 
	public class _MM_PAGED_POOL_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MM_PAGED_POOL_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MM_PAGED_POOL_INFO"": [ 24, {
				 ""Lock"": [ 0, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""MaximumSize"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""AllocatedPagedPool"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _EX_PUSH_LOCK Lock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 MaximumSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 AllocatedPagedPool { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _PPM_IDLE_STATE
 
	public class _PPM_IDLE_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPM_IDLE_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 248; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPM_IDLE_STATE"": [ 248, {
				 ""DomainMembers"": [ 0, [ ""_KAFFINITY_EX"", ""null"" ]],
				 ""Name"": [ 168, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""Latency"": [ 184, [ ""UInt32"", ""null"" ]],
				 ""BreakEvenDuration"": [ 188, [ ""UInt32"", ""null"" ]],
				 ""Power"": [ 192, [ ""UInt32"", ""null"" ]],
				 ""StateFlags"": [ 196, [ ""UInt32"", ""null"" ]],
				 ""VetoAccounting"": [ 200, [ ""_PPM_VETO_ACCOUNTING"", ""null"" ]],
				 ""StateType"": [ 240, [ ""Byte"", ""null"" ]],
				 ""InterruptsEnabled"": [ 241, [ ""Byte"", ""null"" ]],
				 ""Interruptible"": [ 242, [ ""Byte"", ""null"" ]],
				 ""ContextRetained"": [ 243, [ ""Byte"", ""null"" ]],
				 ""CacheCoherent"": [ 244, [ ""Byte"", ""null"" ]],
				 ""WakesSpuriously"": [ 245, [ ""Byte"", ""null"" ]],
				 ""PlatformOnly"": [ 246, [ ""Byte"", ""null"" ]],
				 ""NoCState"": [ 247, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KAFFINITY_EX DomainMembers
		{
			get
			{
				_KAFFINITY_EX returnValue = new _KAFFINITY_EX(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _UNICODE_STRING Name
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 168);
				return returnValue;
			}
		}
		public UInt32 Latency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 184); } }
		public UInt32 BreakEvenDuration { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public UInt32 Power { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public UInt32 StateFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 196); } }
		public _PPM_VETO_ACCOUNTING VetoAccounting
		{
			get
			{
				_PPM_VETO_ACCOUNTING returnValue = new _PPM_VETO_ACCOUNTING(_StructureData, _BufferOffset + 200);
				return returnValue;
			}
		}
		public Byte StateType{ get { return _StructureData[_BufferOffset +240]; } }
		public Byte InterruptsEnabled{ get { return _StructureData[_BufferOffset +241]; } }
		public Byte Interruptible{ get { return _StructureData[_BufferOffset +242]; } }
		public Byte ContextRetained{ get { return _StructureData[_BufferOffset +243]; } }
		public Byte CacheCoherent{ get { return _StructureData[_BufferOffset +244]; } }
		public Byte WakesSpuriously{ get { return _StructureData[_BufferOffset +245]; } }
		public Byte PlatformOnly{ get { return _StructureData[_BufferOffset +246]; } }
		public Byte NoCState{ get { return _StructureData[_BufferOffset +247]; } }
	}
	#endregion
	#region _CLIENT_ID32
 
	public class _CLIENT_ID32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CLIENT_ID32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CLIENT_ID32"": [ 8, {
				 ""UniqueProcess"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""UniqueThread"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 UniqueProcess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 UniqueThread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _EX_HEAP_SESSION_STATE
 
	public class _EX_HEAP_SESSION_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_HEAP_SESSION_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 14576; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_HEAP_SESSION_STATE"": [ 14576, {
				 ""HeapManager"": [ 0, [ ""_RTLP_HP_HEAP_MANAGER"", ""null"" ]],
				 ""PagedEnv"": [ 14544, [ ""RTL_HP_ENV_HANDLE"", ""null"" ]],
				 ""PagedHeap"": [ 14560, [ ""Pointer"", ""{\""target\"":\""_SEGMENT_HEAP\""}"" ]],
				 ""SpecialPoolHeap"": [ 14568, [ ""Pointer"", ""{\""target\"":\""_SEGMENT_HEAP\""}"" ]] }]
				 }
				)";
			}
		}
		public _RTLP_HP_HEAP_MANAGER HeapManager
		{
			get
			{
				_RTLP_HP_HEAP_MANAGER returnValue = new _RTLP_HP_HEAP_MANAGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public RTL_HP_ENV_HANDLE PagedEnv
		{
			get
			{
				RTL_HP_ENV_HANDLE returnValue = new RTL_HP_ENV_HANDLE(_StructureData, _BufferOffset + 14544);
				return returnValue;
			}
		}
		public UInt64 PagedHeap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 14560); } }
		public UInt64 SpecialPoolHeap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 14568); } }
	}
	#endregion
	#region _ARMCE_DBGKD_CONTROL_SET
 
	public class _ARMCE_DBGKD_CONTROL_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARMCE_DBGKD_CONTROL_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARMCE_DBGKD_CONTROL_SET"": [ 12, {
				 ""Continue"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""CurrentSymbolStart"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""CurrentSymbolEnd"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Continue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 CurrentSymbolStart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 CurrentSymbolEnd { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _GDI_TEB_BATCH32
 
	public class _GDI_TEB_BATCH32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _GDI_TEB_BATCH32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1248; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_GDI_TEB_BATCH32"": [ 1248, {
				 ""Offset"": [ 0, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""HasRenderingCommand"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""HDC"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Buffer"": [ 8, [ ""Array"", ""{\""count\"":310,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Offset
		{
			get
			{
				// start: 0  end: 31  Mask: 1111111111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2147483647) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 HasRenderingCommand
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public UInt32 HDC { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32[] Buffer
		{
			get
			{
				UInt32[] returnValue = new UInt32[310];
				for(int i=0; i<310; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _VF_TARGET_VERIFIED_DRIVER_DATA
 
	public class _VF_TARGET_VERIFIED_DRIVER_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VF_TARGET_VERIFIED_DRIVER_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 304; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VF_TARGET_VERIFIED_DRIVER_DATA"": [ 304, {
				 ""SuspectDriverEntry"": [ 0, [ ""Pointer"", ""{\""target\"":\""_VF_SUSPECT_DRIVER_ENTRY\""}"" ]],
				 ""WMICallback"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EtwHandlesListHead"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""u1"": [ 32, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""Signature"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""SeSigningLevel"": [ 48, [ ""Byte"", ""null"" ]],
				 ""PoolPageHeaders"": [ 64, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""PoolTrackers"": [ 80, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""DifPluginData"": [ 96, [ ""Pointer"", ""{\""target\"":\""void*\""}"" ]],
				 ""CurrentPagedPoolAllocations"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""CurrentNonPagedPoolAllocations"": [ 108, [ ""UInt32"", ""null"" ]],
				 ""PeakPagedPoolAllocations"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""PeakNonPagedPoolAllocations"": [ 116, [ ""UInt32"", ""null"" ]],
				 ""PagedBytes"": [ 120, [ ""UInt64"", ""null"" ]],
				 ""NonPagedBytes"": [ 128, [ ""UInt64"", ""null"" ]],
				 ""PeakPagedBytes"": [ 136, [ ""UInt64"", ""null"" ]],
				 ""PeakNonPagedBytes"": [ 144, [ ""UInt64"", ""null"" ]],
				 ""RaiseIrqls"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""AcquireSpinLocks"": [ 156, [ ""UInt32"", ""null"" ]],
				 ""SynchronizeExecutions"": [ 160, [ ""UInt32"", ""null"" ]],
				 ""AllocationsWithNoTag"": [ 164, [ ""UInt32"", ""null"" ]],
				 ""AllocationsFailed"": [ 168, [ ""UInt32"", ""null"" ]],
				 ""AllocationsFailedDeliberately"": [ 172, [ ""UInt32"", ""null"" ]],
				 ""LockedBytes"": [ 176, [ ""UInt64"", ""null"" ]],
				 ""PeakLockedBytes"": [ 184, [ ""UInt64"", ""null"" ]],
				 ""MappedLockedBytes"": [ 192, [ ""UInt64"", ""null"" ]],
				 ""PeakMappedLockedBytes"": [ 200, [ ""UInt64"", ""null"" ]],
				 ""MappedIoSpaceBytes"": [ 208, [ ""UInt64"", ""null"" ]],
				 ""PeakMappedIoSpaceBytes"": [ 216, [ ""UInt64"", ""null"" ]],
				 ""PagesForMdlBytes"": [ 224, [ ""UInt64"", ""null"" ]],
				 ""PeakPagesForMdlBytes"": [ 232, [ ""UInt64"", ""null"" ]],
				 ""ContiguousMemoryBytes"": [ 240, [ ""UInt64"", ""null"" ]],
				 ""PeakContiguousMemoryBytes"": [ 248, [ ""UInt64"", ""null"" ]],
				 ""ContiguousMemoryListHead"": [ 256, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ExecutePoolTypes"": [ 272, [ ""UInt32"", ""null"" ]],
				 ""ExecutePageProtections"": [ 276, [ ""UInt32"", ""null"" ]],
				 ""ExecutePageMappings"": [ 280, [ ""UInt32"", ""null"" ]],
				 ""ExecuteWriteSections"": [ 284, [ ""UInt32"", ""null"" ]],
				 ""SectionAlignmentFailures"": [ 288, [ ""UInt32"", ""null"" ]],
				 ""IATInExecutableSection"": [ 292, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SuspectDriverEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 WMICallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY EtwHandlesListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 Signature { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public Byte SeSigningLevel{ get { return _StructureData[_BufferOffset +48]; } }
		public _SLIST_HEADER PoolPageHeaders
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _SLIST_HEADER PoolTrackers
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt64 DifPluginData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt32 CurrentPagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 CurrentNonPagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public UInt32 PeakPagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public UInt32 PeakNonPagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 116); } }
		public UInt64 PagedBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 NonPagedBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 PeakPagedBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 PeakNonPagedBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt32 RaiseIrqls { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public UInt32 AcquireSpinLocks { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 156); } }
		public UInt32 SynchronizeExecutions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 160); } }
		public UInt32 AllocationsWithNoTag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
		public UInt32 AllocationsFailed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public UInt32 AllocationsFailedDeliberately { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 172); } }
		public UInt64 LockedBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 PeakLockedBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public UInt64 MappedLockedBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt64 PeakMappedLockedBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 MappedIoSpaceBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 PeakMappedIoSpaceBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 PagesForMdlBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 PeakPagesForMdlBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 ContiguousMemoryBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 PeakContiguousMemoryBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public _LIST_ENTRY ContiguousMemoryListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
		public UInt32 ExecutePoolTypes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 272); } }
		public UInt32 ExecutePageProtections { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 276); } }
		public UInt32 ExecutePageMappings { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 280); } }
		public UInt32 ExecuteWriteSections { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 284); } }
		public UInt32 SectionAlignmentFailures { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 288); } }
		public UInt32 IATInExecutableSection { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 292); } }
	}
	#endregion
	#region _SEP_LUID_TO_INDEX_MAP_ENTRY
 
	public class _SEP_LUID_TO_INDEX_MAP_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEP_LUID_TO_INDEX_MAP_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEP_LUID_TO_INDEX_MAP_ENTRY"": [ 56, {
				 ""HashEntry"": [ 0, [ ""_RTL_DYNAMIC_HASH_TABLE_ENTRY"", ""null"" ]],
				 ""ReferenceCount"": [ 24, [ ""Int64"", ""null"" ]],
				 ""Luid"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""IndexIntoGlobalSingletonTable"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""MarkedForDeletion"": [ 48, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry
		{
			get
			{
				_RTL_DYNAMIC_HASH_TABLE_ENTRY returnValue = new _RTL_DYNAMIC_HASH_TABLE_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int64 ReferenceCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 Luid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 IndexIntoGlobalSingletonTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public Byte MarkedForDeletion{ get { return _StructureData[_BufferOffset +48]; } }
	}
	#endregion
	#region _MI_IMAGE_SECURITY_REFERENCE
 
	public class _MI_IMAGE_SECURITY_REFERENCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_IMAGE_SECURITY_REFERENCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_IMAGE_SECURITY_REFERENCE"": [ 64, {
				 ""ProtosNode"": [ 0, [ ""_MI_PROTOTYPE_PTES_NODE"", ""null"" ]],
				 ""DynamicRelocations"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SecurityContext"": [ 40, [ ""_IMAGE_SECURITY_CONTEXT"", ""null"" ]],
				 ""u1"": [ 48, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""StrongImageReference"": [ 56, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _MI_PROTOTYPE_PTES_NODE ProtosNode
		{
			get
			{
				_MI_PROTOTYPE_PTES_NODE returnValue = new _MI_PROTOTYPE_PTES_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 DynamicRelocations { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _IMAGE_SECURITY_CONTEXT SecurityContext
		{
			get
			{
				_IMAGE_SECURITY_CONTEXT returnValue = new _IMAGE_SECURITY_CONTEXT(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt64 StrongImageReference { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
	}
	#endregion
	#region _MEMORY_ALLOCATION_DESCRIPTOR
 
	public class _MEMORY_ALLOCATION_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MEMORY_ALLOCATION_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MEMORY_ALLOCATION_DESCRIPTOR"": [ 40, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""MemoryType"": [ 16, [ ""Enumeration"", ""{\""enum_name\"":\""_TYPE_OF_MEMORY\"",\""target\"":\""UInt32\""}"" ]],
				 ""BasePage"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""PageCount"": [ 32, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _TYPE_OF_MEMORY MemoryType { get { return (_TYPE_OF_MEMORY)BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 BasePage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 PageCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _SYSTEM_POWER_POLICY
 
	public class _SYSTEM_POWER_POLICY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SYSTEM_POWER_POLICY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 232; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SYSTEM_POWER_POLICY"": [ 232, {
				 ""Revision"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""PowerButton"": [ 4, [ ""POWER_ACTION_POLICY"", ""null"" ]],
				 ""SleepButton"": [ 16, [ ""POWER_ACTION_POLICY"", ""null"" ]],
				 ""LidClose"": [ 28, [ ""POWER_ACTION_POLICY"", ""null"" ]],
				 ""LidOpenWake"": [ 40, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""Idle"": [ 48, [ ""POWER_ACTION_POLICY"", ""null"" ]],
				 ""IdleTimeout"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""IdleSensitivity"": [ 64, [ ""Byte"", ""null"" ]],
				 ""DynamicThrottle"": [ 65, [ ""Byte"", ""null"" ]],
				 ""Spare2"": [ 66, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""MinSleep"": [ 68, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""MaxSleep"": [ 72, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ReducedLatencySleep"": [ 76, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""WinLogonFlags"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""Spare3"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""DozeS4Timeout"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""BroadcastCapacityResolution"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""DischargePolicy"": [ 96, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""VideoTimeout"": [ 192, [ ""UInt32"", ""null"" ]],
				 ""VideoDimDisplay"": [ 196, [ ""Byte"", ""null"" ]],
				 ""VideoReserved"": [ 200, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""SpindownTimeout"": [ 212, [ ""UInt32"", ""null"" ]],
				 ""OptimizeForPower"": [ 216, [ ""Byte"", ""null"" ]],
				 ""FanThrottleTolerance"": [ 217, [ ""Byte"", ""null"" ]],
				 ""ForcedThrottle"": [ 218, [ ""Byte"", ""null"" ]],
				 ""MinThrottle"": [ 219, [ ""Byte"", ""null"" ]],
				 ""OverThrottled"": [ 220, [ ""POWER_ACTION_POLICY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Revision { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public POWER_ACTION_POLICY PowerButton
		{
			get
			{
				POWER_ACTION_POLICY returnValue = new POWER_ACTION_POLICY(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public POWER_ACTION_POLICY SleepButton
		{
			get
			{
				POWER_ACTION_POLICY returnValue = new POWER_ACTION_POLICY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public POWER_ACTION_POLICY LidClose
		{
			get
			{
				POWER_ACTION_POLICY returnValue = new POWER_ACTION_POLICY(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public _SYSTEM_POWER_STATE LidOpenWake { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public POWER_ACTION_POLICY Idle
		{
			get
			{
				POWER_ACTION_POLICY returnValue = new POWER_ACTION_POLICY(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 IdleTimeout { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public Byte IdleSensitivity{ get { return _StructureData[_BufferOffset +64]; } }
		public Byte DynamicThrottle{ get { return _StructureData[_BufferOffset +65]; } }
		public Byte[] Spare2
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 66];
				return returnValue;
			}
		}
		public _SYSTEM_POWER_STATE MinSleep { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public _SYSTEM_POWER_STATE MaxSleep { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public _SYSTEM_POWER_STATE ReducedLatencySleep { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 WinLogonFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 Spare3 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 DozeS4Timeout { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 BroadcastCapacityResolution { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public SYSTEM_POWER_LEVEL[] DischargePolicy
		{
			get
			{
				SYSTEM_POWER_LEVEL[] returnValue = new SYSTEM_POWER_LEVEL[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new SYSTEM_POWER_LEVEL(_StructureData, (i * size) + _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt32 VideoTimeout { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public Byte VideoDimDisplay{ get { return _StructureData[_BufferOffset +196]; } }
		public UInt32[] VideoReserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 200);
				return returnValue;
			}
		}
		public UInt32 SpindownTimeout { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 212); } }
		public Byte OptimizeForPower{ get { return _StructureData[_BufferOffset +216]; } }
		public Byte FanThrottleTolerance{ get { return _StructureData[_BufferOffset +217]; } }
		public Byte ForcedThrottle{ get { return _StructureData[_BufferOffset +218]; } }
		public Byte MinThrottle{ get { return _StructureData[_BufferOffset +219]; } }
		public POWER_ACTION_POLICY OverThrottled
		{
			get
			{
				POWER_ACTION_POLICY returnValue = new POWER_ACTION_POLICY(_StructureData, _BufferOffset + 220);
				return returnValue;
			}
		}
	}
	#endregion
	#region _OBP_SYSTEM_DOS_DEVICE_STATE
 
	public class _OBP_SYSTEM_DOS_DEVICE_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBP_SYSTEM_DOS_DEVICE_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 108; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBP_SYSTEM_DOS_DEVICE_STATE"": [ 108, {
				 ""GlobalDeviceMap"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""LocalDeviceCount"": [ 4, [ ""Array"", ""{\""count\"":26,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 GlobalDeviceMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32[] LocalDeviceCount
		{
			get
			{
				UInt32[] returnValue = new UInt32[26];
				for(int i=0; i<26; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DELAY_ACK_FO
 
	public class _DELAY_ACK_FO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DELAY_ACK_FO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DELAY_ACK_FO"": [ 24, {
				 ""Links"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""OriginalFileObject"": [ 16, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Links
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 OriginalFileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _WNF_SCOPE_MAP
 
	public class _WNF_SCOPE_MAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WNF_SCOPE_MAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 176; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WNF_SCOPE_MAP"": [ 176, {
				 ""Header"": [ 0, [ ""_WNF_NODE_HEADER"", ""null"" ]],
				 ""SystemScopeInstance"": [ 8, [ ""Pointer"", ""{\""target\"":\""_WNF_SCOPE_INSTANCE\""}"" ]],
				 ""MachineScopeInstance"": [ 16, [ ""Pointer"", ""{\""target\"":\""_WNF_SCOPE_INSTANCE\""}"" ]],
				 ""PhysicalMachineScopeInstance"": [ 24, [ ""Pointer"", ""{\""target\"":\""_WNF_SCOPE_INSTANCE\""}"" ]],
				 ""ByDataScope"": [ 32, [ ""Array"", ""{\""count\"":6,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public _WNF_NODE_HEADER Header
		{
			get
			{
				_WNF_NODE_HEADER returnValue = new _WNF_NODE_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 SystemScopeInstance { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 MachineScopeInstance { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 PhysicalMachineScopeInstance { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _WNF_SCOPE_MAP_ENTRY[] ByDataScope
		{
			get
			{
				_WNF_SCOPE_MAP_ENTRY[] returnValue = new _WNF_SCOPE_MAP_ENTRY[6];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<6; i++ )
					returnValue[i] = new _WNF_SCOPE_MAP_ENTRY(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_KEY_REFERENCE
 
	public class _CM_KEY_REFERENCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_REFERENCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_REFERENCE"": [ 16, {
				 ""KeyCell"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""KeyHive"": [ 8, [ ""Pointer"", ""{\""target\"":\""_HHIVE\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 KeyCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 KeyHive { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _PEBS_DS_SAVE_AREA
 
	public class _PEBS_DS_SAVE_AREA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEBS_DS_SAVE_AREA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEBS_DS_SAVE_AREA"": [ 160, {
				 ""As32Bit"": [ 0, [ ""_PEBS_DS_SAVE_AREA32"", ""null"" ]],
				 ""As64Bit"": [ 0, [ ""_PEBS_DS_SAVE_AREA64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _PEBS_DS_SAVE_AREA32 As32Bit
		{
			get
			{
				_PEBS_DS_SAVE_AREA32 returnValue = new _PEBS_DS_SAVE_AREA32(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _PEBS_DS_SAVE_AREA64 As64Bit
		{
			get
			{
				_PEBS_DS_SAVE_AREA64 returnValue = new _PEBS_DS_SAVE_AREA64(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _OB_HANDLE_REVOCATION_BLOCK
 
	public class _OB_HANDLE_REVOCATION_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OB_HANDLE_REVOCATION_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OB_HANDLE_REVOCATION_BLOCK"": [ 32, {
				 ""RevocationInfos"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Lock"": [ 16, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""Rundown"": [ 24, [ ""_EX_RUNDOWN_REF"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY RevocationInfos
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK Lock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _EX_RUNDOWN_REF Rundown
		{
			get
			{
				_EX_RUNDOWN_REF returnValue = new _EX_RUNDOWN_REF(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DIRTY_PAGE_THRESHOLDS
 
	public class _DIRTY_PAGE_THRESHOLDS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DIRTY_PAGE_THRESHOLDS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DIRTY_PAGE_THRESHOLDS"": [ 56, {
				 ""DirtyPageThreshold"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""DirtyPageThresholdTop"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""DirtyPageThresholdBottom"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""DirtyPageTarget"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""AggregateAvailablePages"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""AggregateDirtyPages"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""AvailableHistory"": [ 48, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DirtyPageThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 DirtyPageThresholdTop { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 DirtyPageThresholdBottom { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 DirtyPageTarget { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt64 AggregateAvailablePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 AggregateDirtyPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt32 AvailableHistory { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _LOCK_TRACKER
 
	public class _LOCK_TRACKER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LOCK_TRACKER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 144; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LOCK_TRACKER"": [ 144, {
				 ""LockTrackerNode"": [ 0, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""Mdl"": [ 24, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""StartVa"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Count"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""Offset"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""Length"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""Who"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""Hash"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""Page"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""StackTrace"": [ 72, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""Process"": [ 136, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BALANCED_NODE LockTrackerNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Mdl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 StartVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 Count { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt32 Offset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 Who { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 Hash { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt64 Page { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64[] StackTrace
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				int size = 8;
				for(int i=0; i<8; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 72);
				return returnValue;
			}
		}
		public UInt64 Process { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
	}
	#endregion
	#region _WNF_STATE_NAME_REGISTRATION
 
	public class _WNF_STATE_NAME_REGISTRATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WNF_STATE_NAME_REGISTRATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WNF_STATE_NAME_REGISTRATION"": [ 24, {
				 ""MaxStateSize"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TypeId"": [ 8, [ ""Pointer"", ""{\""target\"":\""_WNF_TYPE_ID\""}"" ]],
				 ""SecurityDescriptor"": [ 16, [ ""Pointer"", ""{\""target\"":\""_SECURITY_DESCRIPTOR\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 MaxStateSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 TypeId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 SecurityDescriptor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _MMSECTION_FLAGS2
 
	public class _MMSECTION_FLAGS2
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMSECTION_FLAGS2(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMSECTION_FLAGS2"": [ 4, {
				 ""PartitionId"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""NoCrossPartitionAccess"": [ 2, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""SubsectionCrossPartitionReferenceOverflow"": [ 2, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 PartitionId
		{
			get
			{
				// start: 0  end: 10  Mask: 0000001111111111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1023) >> 0;
				return (UInt16)value2;
			}
		}
		public Byte NoCrossPartitionAccess
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte SubsectionCrossPartitionReferenceOverflow
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
	}
	#endregion
	#region _HANDLE_TRACE_DEBUG_INFO
 
	public class _HANDLE_TRACE_DEBUG_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HANDLE_TRACE_DEBUG_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 240; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HANDLE_TRACE_DEBUG_INFO"": [ 240, {
				 ""RefCount"": [ 0, [ ""Int32"", ""null"" ]],
				 ""TableSize"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""BitMaskFlags"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""CloseCompactionLock"": [ 16, [ ""_FAST_MUTEX"", ""null"" ]],
				 ""CurrentStackIndex"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""TraceDb"": [ 80, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public Int32 RefCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 TableSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 BitMaskFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _FAST_MUTEX CloseCompactionLock
		{
			get
			{
				_FAST_MUTEX returnValue = new _FAST_MUTEX(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 CurrentStackIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public _HANDLE_TRACE_DB_ENTRY[] TraceDb
		{
			get
			{
				_HANDLE_TRACE_DB_ENTRY[] returnValue = new _HANDLE_TRACE_DB_ENTRY[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _HANDLE_TRACE_DB_ENTRY(_StructureData, (i * size) + _BufferOffset + 80);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ALPC_HANDLE_TABLE
 
	public class _ALPC_HANDLE_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ALPC_HANDLE_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ALPC_HANDLE_TABLE"": [ 24, {
				 ""Handles"": [ 0, [ ""Pointer"", ""{\""target\"":\""_ALPC_HANDLE_ENTRY\""}"" ]],
				 ""TotalHandles"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Lock"": [ 16, [ ""_EX_PUSH_LOCK"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Handles { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 TotalHandles { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _EX_PUSH_LOCK Lock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region HAL_PRIVATE_DISPATCH
 
	public class HAL_PRIVATE_DISPATCH
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public HAL_PRIVATE_DISPATCH(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1200; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""HAL_PRIVATE_DISPATCH"": [ 1200, {
				 ""Version"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HalHandlerForBus"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalHandlerForConfigSpace"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalLocateHiberRanges"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalRegisterBusHandler"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalSetWakeEnable"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalSetWakeAlarm"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalPciTranslateBusAddress"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalPciAssignSlotResources"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalHaltSystem"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalFindBusAddressTranslation"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalResetDisplay"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalAllocateMapRegisters"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KdSetupPciDeviceForDebugging"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KdReleasePciDeviceForDebugging"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KdGetAcpiTablePhase0"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KdCheckPowerButton"": [ 128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalVectorToIDTEntry"": [ 136, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KdMapPhysicalMemory64"": [ 144, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KdUnmapVirtualAddress"": [ 152, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KdGetPciDataByOffset"": [ 160, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KdSetPciDataByOffset"": [ 168, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalGetInterruptVectorOverride"": [ 176, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalGetVectorInputOverride"": [ 184, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalLoadMicrocode"": [ 192, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalUnloadMicrocode"": [ 200, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalPostMicrocodeUpdate"": [ 208, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalAllocateMessageTargetOverride"": [ 216, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalFreeMessageTargetOverride"": [ 224, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalDpReplaceBegin"": [ 232, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalDpReplaceTarget"": [ 240, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalDpReplaceControl"": [ 248, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalDpReplaceEnd"": [ 256, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalPrepareForBugcheck"": [ 264, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalQueryWakeTime"": [ 272, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalReportIdleStateUsage"": [ 280, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalTscSynchronization"": [ 288, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalWheaInitProcessorGenericSection"": [ 296, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalStopLegacyUsbInterrupts"": [ 304, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalReadWheaPhysicalMemory"": [ 312, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalWriteWheaPhysicalMemory"": [ 320, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalDpMaskLevelTriggeredInterrupts"": [ 328, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalDpUnmaskLevelTriggeredInterrupts"": [ 336, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalDpGetInterruptReplayState"": [ 344, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalDpReplayInterrupts"": [ 352, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalQueryIoPortAccessSupported"": [ 360, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KdSetupIntegratedDeviceForDebugging"": [ 368, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KdReleaseIntegratedDeviceForDebugging"": [ 376, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalGetEnlightenmentInformation"": [ 384, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalAllocateEarlyPages"": [ 392, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalMapEarlyPages"": [ 400, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Dummy1"": [ 408, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Dummy2"": [ 416, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalNotifyProcessorFreeze"": [ 424, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalPrepareProcessorForIdle"": [ 432, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalRegisterLogRoutine"": [ 440, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalResumeProcessorFromIdle"": [ 448, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Dummy"": [ 456, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalVectorToIDTEntryEx"": [ 464, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalSecondaryInterruptQueryPrimaryInformation"": [ 472, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalMaskInterrupt"": [ 480, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalUnmaskInterrupt"": [ 488, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIsInterruptTypeSecondary"": [ 496, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalAllocateGsivForSecondaryInterrupt"": [ 504, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalAddInterruptRemapping"": [ 512, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalRemoveInterruptRemapping"": [ 520, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalSaveAndDisableHvEnlightenment"": [ 528, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalRestoreHvEnlightenment"": [ 536, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalFlushIoBuffersExternalCache"": [ 544, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalFlushExternalCache"": [ 552, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalPciEarlyRestore"": [ 560, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalGetProcessorId"": [ 568, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalAllocatePmcCounterSet"": [ 576, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalCollectPmcCounters"": [ 584, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalFreePmcCounterSet"": [ 592, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalProcessorHalt"": [ 600, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalTimerQueryCycleCounter"": [ 608, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Dummy3"": [ 616, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalPciMarkHiberPhase"": [ 624, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalQueryProcessorRestartEntryPoint"": [ 632, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalRequestInterrupt"": [ 640, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalEnumerateUnmaskedInterrupts"": [ 648, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalFlushAndInvalidatePageExternalCache"": [ 656, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KdEnumerateDebuggingDevices"": [ 664, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalFlushIoRectangleExternalCache"": [ 672, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalPowerEarlyRestore"": [ 680, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalQueryCapsuleCapabilities"": [ 688, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalUpdateCapsule"": [ 696, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalPciMultiStageResumeCapable"": [ 704, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalDmaFreeCrashDumpRegisters"": [ 712, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalAcpiAoacCapable"": [ 720, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalInterruptSetDestination"": [ 728, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalGetClockConfiguration"": [ 736, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalClockTimerActivate"": [ 744, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalClockTimerInitialize"": [ 752, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalClockTimerStop"": [ 760, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalClockTimerArm"": [ 768, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalTimerOnlyClockInterruptPending"": [ 776, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalAcpiGetMultiNode"": [ 784, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalPowerSetRebootHandler"": [ 792, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuRegisterDispatchTable"": [ 800, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalTimerWatchdogStart"": [ 808, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalTimerWatchdogResetCountdown"": [ 816, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalTimerWatchdogStop"": [ 824, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalTimerWatchdogGeneratedLastReset"": [ 832, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalTimerWatchdogTriggerSystemReset"": [ 840, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalInterruptVectorDataToGsiv"": [ 848, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalInterruptGetHighestPriorityInterrupt"": [ 856, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalProcessorOn"": [ 864, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalProcessorOff"": [ 872, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalProcessorFreeze"": [ 880, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalDmaLinkDeviceObjectByToken"": [ 888, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalDmaCheckAdapterToken"": [ 896, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Dummy4"": [ 904, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalTimerConvertPerformanceCounterToAuxiliaryCounter"": [ 912, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalTimerConvertAuxiliaryCounterToPerformanceCounter"": [ 920, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalTimerQueryAuxiliaryCounterFrequency"": [ 928, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalConnectThermalInterrupt"": [ 936, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIsEFIRuntimeActive"": [ 944, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalTimerQueryAndResetRtcErrors"": [ 952, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalAcpiLateRestore"": [ 960, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KdWatchdogDelayExpiration"": [ 968, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalGetProcessorStats"": [ 976, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalTimerWatchdogQueryDueTime"": [ 984, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalConnectSyntheticInterrupt"": [ 992, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalPreprocessNmi"": [ 1000, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalEnumerateEnvironmentVariablesWithFilter"": [ 1008, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalCaptureLastBranchRecordStack"": [ 1016, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalClearLastBranchRecordStack"": [ 1024, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalConfigureLastBranchRecord"": [ 1032, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalGetLastBranchInformation"": [ 1040, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalResumeLastBranchRecord"": [ 1048, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalStartLastBranchRecord"": [ 1056, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalStopLastBranchRecord"": [ 1064, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuBlockDevice"": [ 1072, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuUnblockDevice"": [ 1080, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalGetIommuInterface"": [ 1088, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalRequestGenericErrorRecovery"": [ 1096, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalTimerQueryHostPerformanceCounter"": [ 1104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalTopologyQueryProcessorRelationships"": [ 1112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalInitPlatformDebugTriggers"": [ 1120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalRunPlatformDebugTriggers"": [ 1128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalTimerGetReferencePage"": [ 1136, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalGetHiddenProcessorPowerInterface"": [ 1144, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalGetHiddenProcessorPackageId"": [ 1152, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalGetHiddenPackageProcessorCount"": [ 1160, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalGetHiddenProcessorApicIdByIndex"": [ 1168, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalRegisterHiddenProcessorIdleState"": [ 1176, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuReportIommuFault"": [ 1184, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuDmaRemappingCapable"": [ 1192, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 HalHandlerForBus { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 HalHandlerForConfigSpace { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 HalLocateHiberRanges { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 HalRegisterBusHandler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 HalSetWakeEnable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 HalSetWakeAlarm { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 HalPciTranslateBusAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 HalPciAssignSlotResources { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 HalHaltSystem { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 HalFindBusAddressTranslation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 HalResetDisplay { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 HalAllocateMapRegisters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 KdSetupPciDeviceForDebugging { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 KdReleasePciDeviceForDebugging { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 KdGetAcpiTablePhase0 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 KdCheckPowerButton { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 HalVectorToIDTEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 KdMapPhysicalMemory64 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 KdUnmapVirtualAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 KdGetPciDataByOffset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 KdSetPciDataByOffset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 HalGetInterruptVectorOverride { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 HalGetVectorInputOverride { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public UInt64 HalLoadMicrocode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt64 HalUnloadMicrocode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 HalPostMicrocodeUpdate { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 HalAllocateMessageTargetOverride { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 HalFreeMessageTargetOverride { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 HalDpReplaceBegin { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 HalDpReplaceTarget { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 HalDpReplaceControl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public UInt64 HalDpReplaceEnd { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public UInt64 HalPrepareForBugcheck { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 264); } }
		public UInt64 HalQueryWakeTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public UInt64 HalReportIdleStateUsage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 280); } }
		public UInt64 HalTscSynchronization { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 288); } }
		public UInt64 HalWheaInitProcessorGenericSection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 296); } }
		public UInt64 HalStopLegacyUsbInterrupts { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 304); } }
		public UInt64 HalReadWheaPhysicalMemory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 312); } }
		public UInt64 HalWriteWheaPhysicalMemory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 320); } }
		public UInt64 HalDpMaskLevelTriggeredInterrupts { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 328); } }
		public UInt64 HalDpUnmaskLevelTriggeredInterrupts { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 336); } }
		public UInt64 HalDpGetInterruptReplayState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 344); } }
		public UInt64 HalDpReplayInterrupts { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 352); } }
		public UInt64 HalQueryIoPortAccessSupported { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 360); } }
		public UInt64 KdSetupIntegratedDeviceForDebugging { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 368); } }
		public UInt64 KdReleaseIntegratedDeviceForDebugging { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 376); } }
		public UInt64 HalGetEnlightenmentInformation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 384); } }
		public UInt64 HalAllocateEarlyPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 392); } }
		public UInt64 HalMapEarlyPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 400); } }
		public UInt64 Dummy1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 408); } }
		public UInt64 Dummy2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 416); } }
		public UInt64 HalNotifyProcessorFreeze { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 424); } }
		public UInt64 HalPrepareProcessorForIdle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 432); } }
		public UInt64 HalRegisterLogRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 440); } }
		public UInt64 HalResumeProcessorFromIdle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 448); } }
		public UInt64 Dummy { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 456); } }
		public UInt64 HalVectorToIDTEntryEx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 464); } }
		public UInt64 HalSecondaryInterruptQueryPrimaryInformation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 472); } }
		public UInt64 HalMaskInterrupt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 480); } }
		public UInt64 HalUnmaskInterrupt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 488); } }
		public UInt64 HalIsInterruptTypeSecondary { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 496); } }
		public UInt64 HalAllocateGsivForSecondaryInterrupt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 504); } }
		public UInt64 HalAddInterruptRemapping { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 512); } }
		public UInt64 HalRemoveInterruptRemapping { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 520); } }
		public UInt64 HalSaveAndDisableHvEnlightenment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 528); } }
		public UInt64 HalRestoreHvEnlightenment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 536); } }
		public UInt64 HalFlushIoBuffersExternalCache { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 544); } }
		public UInt64 HalFlushExternalCache { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 552); } }
		public UInt64 HalPciEarlyRestore { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 560); } }
		public UInt64 HalGetProcessorId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 568); } }
		public UInt64 HalAllocatePmcCounterSet { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 576); } }
		public UInt64 HalCollectPmcCounters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 584); } }
		public UInt64 HalFreePmcCounterSet { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 592); } }
		public UInt64 HalProcessorHalt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 600); } }
		public UInt64 HalTimerQueryCycleCounter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 608); } }
		public UInt64 Dummy3 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 616); } }
		public UInt64 HalPciMarkHiberPhase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 624); } }
		public UInt64 HalQueryProcessorRestartEntryPoint { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 632); } }
		public UInt64 HalRequestInterrupt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 640); } }
		public UInt64 HalEnumerateUnmaskedInterrupts { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 648); } }
		public UInt64 HalFlushAndInvalidatePageExternalCache { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 656); } }
		public UInt64 KdEnumerateDebuggingDevices { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 664); } }
		public UInt64 HalFlushIoRectangleExternalCache { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 672); } }
		public UInt64 HalPowerEarlyRestore { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 680); } }
		public UInt64 HalQueryCapsuleCapabilities { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 688); } }
		public UInt64 HalUpdateCapsule { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 696); } }
		public UInt64 HalPciMultiStageResumeCapable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 704); } }
		public UInt64 HalDmaFreeCrashDumpRegisters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 712); } }
		public UInt64 HalAcpiAoacCapable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 720); } }
		public UInt64 HalInterruptSetDestination { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 728); } }
		public UInt64 HalGetClockConfiguration { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 736); } }
		public UInt64 HalClockTimerActivate { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 744); } }
		public UInt64 HalClockTimerInitialize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 752); } }
		public UInt64 HalClockTimerStop { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 760); } }
		public UInt64 HalClockTimerArm { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 768); } }
		public UInt64 HalTimerOnlyClockInterruptPending { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 776); } }
		public UInt64 HalAcpiGetMultiNode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 784); } }
		public UInt64 HalPowerSetRebootHandler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 792); } }
		public UInt64 HalIommuRegisterDispatchTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 800); } }
		public UInt64 HalTimerWatchdogStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 808); } }
		public UInt64 HalTimerWatchdogResetCountdown { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 816); } }
		public UInt64 HalTimerWatchdogStop { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 824); } }
		public UInt64 HalTimerWatchdogGeneratedLastReset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 832); } }
		public UInt64 HalTimerWatchdogTriggerSystemReset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 840); } }
		public UInt64 HalInterruptVectorDataToGsiv { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 848); } }
		public UInt64 HalInterruptGetHighestPriorityInterrupt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 856); } }
		public UInt64 HalProcessorOn { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 864); } }
		public UInt64 HalProcessorOff { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 872); } }
		public UInt64 HalProcessorFreeze { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 880); } }
		public UInt64 HalDmaLinkDeviceObjectByToken { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 888); } }
		public UInt64 HalDmaCheckAdapterToken { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 896); } }
		public UInt64 Dummy4 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 904); } }
		public UInt64 HalTimerConvertPerformanceCounterToAuxiliaryCounter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 912); } }
		public UInt64 HalTimerConvertAuxiliaryCounterToPerformanceCounter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 920); } }
		public UInt64 HalTimerQueryAuxiliaryCounterFrequency { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 928); } }
		public UInt64 HalConnectThermalInterrupt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 936); } }
		public UInt64 HalIsEFIRuntimeActive { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 944); } }
		public UInt64 HalTimerQueryAndResetRtcErrors { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 952); } }
		public UInt64 HalAcpiLateRestore { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 960); } }
		public UInt64 KdWatchdogDelayExpiration { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 968); } }
		public UInt64 HalGetProcessorStats { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 976); } }
		public UInt64 HalTimerWatchdogQueryDueTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 984); } }
		public UInt64 HalConnectSyntheticInterrupt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 992); } }
		public UInt64 HalPreprocessNmi { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1000); } }
		public UInt64 HalEnumerateEnvironmentVariablesWithFilter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1008); } }
		public UInt64 HalCaptureLastBranchRecordStack { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1016); } }
		public UInt64 HalClearLastBranchRecordStack { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1024); } }
		public UInt64 HalConfigureLastBranchRecord { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1032); } }
		public UInt64 HalGetLastBranchInformation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1040); } }
		public UInt64 HalResumeLastBranchRecord { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1048); } }
		public UInt64 HalStartLastBranchRecord { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1056); } }
		public UInt64 HalStopLastBranchRecord { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1064); } }
		public UInt64 HalIommuBlockDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1072); } }
		public UInt64 HalIommuUnblockDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1080); } }
		public UInt64 HalGetIommuInterface { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1088); } }
		public UInt64 HalRequestGenericErrorRecovery { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1096); } }
		public UInt64 HalTimerQueryHostPerformanceCounter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1104); } }
		public UInt64 HalTopologyQueryProcessorRelationships { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1112); } }
		public UInt64 HalInitPlatformDebugTriggers { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1120); } }
		public UInt64 HalRunPlatformDebugTriggers { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1128); } }
		public UInt64 HalTimerGetReferencePage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1136); } }
		public UInt64 HalGetHiddenProcessorPowerInterface { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1144); } }
		public UInt64 HalGetHiddenProcessorPackageId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1152); } }
		public UInt64 HalGetHiddenPackageProcessorCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1160); } }
		public UInt64 HalGetHiddenProcessorApicIdByIndex { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1168); } }
		public UInt64 HalRegisterHiddenProcessorIdleState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1176); } }
		public UInt64 HalIommuReportIommuFault { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1184); } }
		public UInt64 HalIommuDmaRemappingCapable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1192); } }
	}
	#endregion
	#region _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS
 
	public class _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_TRUSTLET_ATTRIBUTE_ACCESSRIGHTS"": [ 1, {
				 ""Trustlet"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Ntos"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""WriteHandle"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""ReadHandle"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""AccessRights"": [ 0, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Trustlet
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Ntos
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte WriteHandle
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte ReadHandle
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte Reserved
		{
			get
			{
				// start: 4  end: 8  Mask: 0000000011110000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 240) >> 4;
				return (Byte)value2;
			}
		}
		public Byte AccessRights{ get { return _StructureData[_BufferOffset +0]; } }
	}
	#endregion
	#region _KSECURE_FAULT_INFORMATION
 
	public class _KSECURE_FAULT_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KSECURE_FAULT_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KSECURE_FAULT_INFORMATION"": [ 16, {
				 ""FaultCode"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""FaultVa"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 FaultCode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 FaultVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _WNF_STATE_DATA
 
	public class _WNF_STATE_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WNF_STATE_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WNF_STATE_DATA"": [ 16, {
				 ""Header"": [ 0, [ ""_WNF_NODE_HEADER"", ""null"" ]],
				 ""AllocatedSize"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DataSize"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ChangeStamp"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _WNF_NODE_HEADER Header
		{
			get
			{
				_WNF_NODE_HEADER returnValue = new _WNF_NODE_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 AllocatedSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DataSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ChangeStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _KREQUEST_PACKET
 
	public class _KREQUEST_PACKET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KREQUEST_PACKET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KREQUEST_PACKET"": [ 32, {
				 ""CurrentPacket"": [ 0, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""WorkerRoutine"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64[] CurrentPacket
		{
			get
			{
				UInt64[] returnValue = new UInt64[3];
				int size = 8;
				for(int i=0; i<3; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 WorkerRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _PS_PROCESS_WAKE_INFORMATION
 
	public class _PS_PROCESS_WAKE_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_PROCESS_WAKE_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_PROCESS_WAKE_INFORMATION"": [ 48, {
				 ""NotificationChannel"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""WakeCounters"": [ 8, [ ""Array"", ""{\""count\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""WakeFilter"": [ 36, [ ""_JOBOBJECT_WAKE_FILTER"", ""null"" ]],
				 ""NoWakeCounter"": [ 44, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 NotificationChannel { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32[] WakeCounters
		{
			get
			{
				UInt32[] returnValue = new UInt32[7];
				for(int i=0; i<7; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 8);
				return returnValue;
			}
		}
		public _JOBOBJECT_WAKE_FILTER WakeFilter
		{
			get
			{
				_JOBOBJECT_WAKE_FILTER returnValue = new _JOBOBJECT_WAKE_FILTER(_StructureData, _BufferOffset + 36);
				return returnValue;
			}
		}
		public UInt32 NoWakeCounter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
	}
	#endregion
	#region _HBASE_BLOCK
 
	public class _HBASE_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HBASE_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4096; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HBASE_BLOCK"": [ 4096, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Sequence1"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Sequence2"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""TimeStamp"": [ 12, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Major"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Minor"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Type"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""Format"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""RootCell"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Length"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""Cluster"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""FileName"": [ 48, [ ""Array"", ""{\""count\"":64,\""target\"":\""Byte\""}"" ]],
				 ""RmId"": [ 112, [ ""_GUID"", ""null"" ]],
				 ""LogId"": [ 128, [ ""_GUID"", ""null"" ]],
				 ""Flags"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""TmId"": [ 148, [ ""_GUID"", ""null"" ]],
				 ""GuidSignature"": [ 164, [ ""UInt32"", ""null"" ]],
				 ""LastReorganizeTime"": [ 168, [ ""UInt64"", ""null"" ]],
				 ""Reserved1"": [ 176, [ ""Array"", ""{\""count\"":83,\""target\"":\""UInt32\""}"" ]],
				 ""CheckSum"": [ 508, [ ""UInt32"", ""null"" ]],
				 ""Reserved2"": [ 512, [ ""Array"", ""{\""count\"":882,\""target\"":\""UInt32\""}"" ]],
				 ""ThawTmId"": [ 4040, [ ""_GUID"", ""null"" ]],
				 ""ThawRmId"": [ 4056, [ ""_GUID"", ""null"" ]],
				 ""ThawLogId"": [ 4072, [ ""_GUID"", ""null"" ]],
				 ""BootType"": [ 4088, [ ""UInt32"", ""null"" ]],
				 ""BootRecover"": [ 4092, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Sequence1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Sequence2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _LARGE_INTEGER TimeStamp
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public UInt32 Major { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 Minor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 Type { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 Format { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 RootCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 Cluster { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public Byte[] FileName
		{
			get
			{
				Byte[] returnValue = new Byte[64];
				for(int i=0; i<64; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 48];
				return returnValue;
			}
		}
		public _GUID RmId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public _GUID LogId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public _GUID TmId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 148);
				return returnValue;
			}
		}
		public UInt32 GuidSignature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
		public UInt64 LastReorganizeTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt32[] Reserved1
		{
			get
			{
				UInt32[] returnValue = new UInt32[83];
				for(int i=0; i<83; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 176);
				return returnValue;
			}
		}
		public UInt32 CheckSum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 508); } }
		public UInt32[] Reserved2
		{
			get
			{
				UInt32[] returnValue = new UInt32[882];
				for(int i=0; i<882; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 512);
				return returnValue;
			}
		}
		public _GUID ThawTmId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 4040);
				return returnValue;
			}
		}
		public _GUID ThawRmId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 4056);
				return returnValue;
			}
		}
		public _GUID ThawLogId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 4072);
				return returnValue;
			}
		}
		public UInt32 BootType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4088); } }
		public UInt32 BootRecover { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4092); } }
	}
	#endregion
	#region _PROCESS_ENERGY_VALUES
 
	public class _PROCESS_ENERGY_VALUES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCESS_ENERGY_VALUES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 272; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCESS_ENERGY_VALUES"": [ 272, {
				 ""Cycles"": [ 0, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""UInt64\""}}"" ]],
				 ""DiskEnergy"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""NetworkTailEnergy"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""MBBTailEnergy"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""NetworkTxRxBytes"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""MBBTxRxBytes"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""Durations"": [ 104, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""ForegroundDuration"": [ 104, [ ""_ENERGY_STATE_DURATION"", ""null"" ]],
				 ""DesktopVisibleDuration"": [ 112, [ ""_ENERGY_STATE_DURATION"", ""null"" ]],
				 ""PSMForegroundDuration"": [ 120, [ ""_ENERGY_STATE_DURATION"", ""null"" ]],
				 ""CompositionRendered"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""CompositionDirtyGenerated"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""CompositionDirtyPropagated"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""Reserved1"": [ 140, [ ""UInt32"", ""null"" ]],
				 ""AttributedCycles"": [ 144, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""UInt64\""}}"" ]],
				 ""WorkOnBehalfCycles"": [ 208, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""UInt64\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64[] Cycles
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				int size = 8;
				for(int i=0; i<8; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 DiskEnergy { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 NetworkTailEnergy { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 MBBTailEnergy { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 NetworkTxRxBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 MBBTxRxBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public _ENERGY_STATE_DURATION[] Durations
		{
			get
			{
				_ENERGY_STATE_DURATION[] returnValue = new _ENERGY_STATE_DURATION[3];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<3; i++ )
					returnValue[i] = new _ENERGY_STATE_DURATION(_StructureData, (i * size) + _BufferOffset + 104);
				return returnValue;
			}
		}
		public _ENERGY_STATE_DURATION ForegroundDuration
		{
			get
			{
				_ENERGY_STATE_DURATION returnValue = new _ENERGY_STATE_DURATION(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public _ENERGY_STATE_DURATION DesktopVisibleDuration
		{
			get
			{
				_ENERGY_STATE_DURATION returnValue = new _ENERGY_STATE_DURATION(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public _ENERGY_STATE_DURATION PSMForegroundDuration
		{
			get
			{
				_ENERGY_STATE_DURATION returnValue = new _ENERGY_STATE_DURATION(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
		public UInt32 CompositionRendered { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 CompositionDirtyGenerated { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt32 CompositionDirtyPropagated { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public UInt32 Reserved1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 140); } }
		public UInt64[] AttributedCycles
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				int size = 8;
				for(int i=0; i<8; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 144);
				return returnValue;
			}
		}
		public UInt64[] WorkOnBehalfCycles
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				int size = 8;
				for(int i=0; i<8; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 208);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMCLONE_HEADER
 
	public class _MMCLONE_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMCLONE_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMCLONE_HEADER"": [ 32, {
				 ""NumberOfPtes"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""NumberOfProcessReferences"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ClonePtes"": [ 16, [ ""Pointer"", ""{\""target\"":\""_MMCLONE_BLOCK\""}"" ]],
				 ""Partition"": [ 24, [ ""Pointer"", ""{\""target\"":\""_MI_PARTITION\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 NumberOfPtes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 NumberOfProcessReferences { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ClonePtes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Partition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _MI_SYSTEM_INFORMATION
 
	public class _MI_SYSTEM_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SYSTEM_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12992; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SYSTEM_INFORMATION"": [ 12992, {
				 ""Pools"": [ 0, [ ""_MI_POOL_STATE"", ""null"" ]],
				 ""Sections"": [ 192, [ ""_MI_SECTION_STATE"", ""null"" ]],
				 ""SystemImages"": [ 1024, [ ""_MI_SYSTEM_IMAGE_STATE"", ""null"" ]],
				 ""Sessions"": [ 1192, [ ""_MI_SESSION_STATE"", ""null"" ]],
				 ""Processes"": [ 5456, [ ""_MI_PROCESS_STATE"", ""null"" ]],
				 ""Hardware"": [ 5568, [ ""_MI_HARDWARE_STATE"", ""null"" ]],
				 ""SystemVa"": [ 6016, [ ""_MI_SYSTEM_VA_STATE"", ""null"" ]],
				 ""PageCombines"": [ 7232, [ ""_MI_COMBINE_STATE"", ""null"" ]],
				 ""PageLists"": [ 7264, [ ""_MI_PAGELIST_STATE"", ""null"" ]],
				 ""Partitions"": [ 7424, [ ""_MI_PARTITION_STATE"", ""null"" ]],
				 ""Shutdowns"": [ 7616, [ ""_MI_SHUTDOWN_STATE"", ""null"" ]],
				 ""Errors"": [ 7736, [ ""_MI_ERROR_STATE"", ""null"" ]],
				 ""AccessLog"": [ 7936, [ ""_MI_ACCESS_LOG_STATE"", ""null"" ]],
				 ""Debugger"": [ 8064, [ ""_MI_DEBUGGER_STATE"", ""null"" ]],
				 ""Standby"": [ 8352, [ ""_MI_STANDBY_STATE"", ""null"" ]],
				 ""SystemPtes"": [ 8512, [ ""_MI_SYSTEM_PTE_STATE"", ""null"" ]],
				 ""IoPages"": [ 9024, [ ""_MI_IO_PAGE_STATE"", ""null"" ]],
				 ""PagingIo"": [ 9136, [ ""_MI_PAGING_IO_STATE"", ""null"" ]],
				 ""CommonPages"": [ 9312, [ ""_MI_COMMON_PAGE_STATE"", ""null"" ]],
				 ""Trims"": [ 9536, [ ""_MI_SYSTEM_TRIM_STATE"", ""null"" ]],
				 ""Enclaves"": [ 9600, [ ""_MI_ENCLAVE_STATE"", ""null"" ]],
				 ""Cookie"": [ 9672, [ ""UInt64"", ""null"" ]],
				 ""BootRegistryRuns"": [ 9680, [ ""Pointer"", ""{\""target\"":\""void*\""}"" ]],
				 ""ZeroingDisabled"": [ 9688, [ ""Int32"", ""null"" ]],
				 ""FullyInitialized"": [ 9692, [ ""Byte"", ""null"" ]],
				 ""SafeBooted"": [ 9693, [ ""Byte"", ""null"" ]],
				 ""TraceLogging"": [ 9696, [ ""Pointer"", ""{\""target\"":\""_tlgProvider_t\""}"" ]],
				 ""Vs"": [ 9728, [ ""_MI_VISIBLE_STATE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _MI_POOL_STATE Pools
		{
			get
			{
				_MI_POOL_STATE returnValue = new _MI_POOL_STATE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _MI_SECTION_STATE Sections
		{
			get
			{
				_MI_SECTION_STATE returnValue = new _MI_SECTION_STATE(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public _MI_SYSTEM_IMAGE_STATE SystemImages
		{
			get
			{
				_MI_SYSTEM_IMAGE_STATE returnValue = new _MI_SYSTEM_IMAGE_STATE(_StructureData, _BufferOffset + 1024);
				return returnValue;
			}
		}
		public _MI_SESSION_STATE Sessions
		{
			get
			{
				_MI_SESSION_STATE returnValue = new _MI_SESSION_STATE(_StructureData, _BufferOffset + 1192);
				return returnValue;
			}
		}
		public _MI_PROCESS_STATE Processes
		{
			get
			{
				_MI_PROCESS_STATE returnValue = new _MI_PROCESS_STATE(_StructureData, _BufferOffset + 5456);
				return returnValue;
			}
		}
		public _MI_HARDWARE_STATE Hardware
		{
			get
			{
				_MI_HARDWARE_STATE returnValue = new _MI_HARDWARE_STATE(_StructureData, _BufferOffset + 5568);
				return returnValue;
			}
		}
		public _MI_SYSTEM_VA_STATE SystemVa
		{
			get
			{
				_MI_SYSTEM_VA_STATE returnValue = new _MI_SYSTEM_VA_STATE(_StructureData, _BufferOffset + 6016);
				return returnValue;
			}
		}
		public _MI_COMBINE_STATE PageCombines
		{
			get
			{
				_MI_COMBINE_STATE returnValue = new _MI_COMBINE_STATE(_StructureData, _BufferOffset + 7232);
				return returnValue;
			}
		}
		public _MI_PAGELIST_STATE PageLists
		{
			get
			{
				_MI_PAGELIST_STATE returnValue = new _MI_PAGELIST_STATE(_StructureData, _BufferOffset + 7264);
				return returnValue;
			}
		}
		public _MI_PARTITION_STATE Partitions
		{
			get
			{
				_MI_PARTITION_STATE returnValue = new _MI_PARTITION_STATE(_StructureData, _BufferOffset + 7424);
				return returnValue;
			}
		}
		public _MI_SHUTDOWN_STATE Shutdowns
		{
			get
			{
				_MI_SHUTDOWN_STATE returnValue = new _MI_SHUTDOWN_STATE(_StructureData, _BufferOffset + 7616);
				return returnValue;
			}
		}
		public _MI_ERROR_STATE Errors
		{
			get
			{
				_MI_ERROR_STATE returnValue = new _MI_ERROR_STATE(_StructureData, _BufferOffset + 7736);
				return returnValue;
			}
		}
		public _MI_ACCESS_LOG_STATE AccessLog
		{
			get
			{
				_MI_ACCESS_LOG_STATE returnValue = new _MI_ACCESS_LOG_STATE(_StructureData, _BufferOffset + 7936);
				return returnValue;
			}
		}
		public _MI_DEBUGGER_STATE Debugger
		{
			get
			{
				_MI_DEBUGGER_STATE returnValue = new _MI_DEBUGGER_STATE(_StructureData, _BufferOffset + 8064);
				return returnValue;
			}
		}
		public _MI_STANDBY_STATE Standby
		{
			get
			{
				_MI_STANDBY_STATE returnValue = new _MI_STANDBY_STATE(_StructureData, _BufferOffset + 8352);
				return returnValue;
			}
		}
		public _MI_SYSTEM_PTE_STATE SystemPtes
		{
			get
			{
				_MI_SYSTEM_PTE_STATE returnValue = new _MI_SYSTEM_PTE_STATE(_StructureData, _BufferOffset + 8512);
				return returnValue;
			}
		}
		public _MI_IO_PAGE_STATE IoPages
		{
			get
			{
				_MI_IO_PAGE_STATE returnValue = new _MI_IO_PAGE_STATE(_StructureData, _BufferOffset + 9024);
				return returnValue;
			}
		}
		public _MI_PAGING_IO_STATE PagingIo
		{
			get
			{
				_MI_PAGING_IO_STATE returnValue = new _MI_PAGING_IO_STATE(_StructureData, _BufferOffset + 9136);
				return returnValue;
			}
		}
		public _MI_COMMON_PAGE_STATE CommonPages
		{
			get
			{
				_MI_COMMON_PAGE_STATE returnValue = new _MI_COMMON_PAGE_STATE(_StructureData, _BufferOffset + 9312);
				return returnValue;
			}
		}
		public _MI_SYSTEM_TRIM_STATE Trims
		{
			get
			{
				_MI_SYSTEM_TRIM_STATE returnValue = new _MI_SYSTEM_TRIM_STATE(_StructureData, _BufferOffset + 9536);
				return returnValue;
			}
		}
		public _MI_ENCLAVE_STATE Enclaves
		{
			get
			{
				_MI_ENCLAVE_STATE returnValue = new _MI_ENCLAVE_STATE(_StructureData, _BufferOffset + 9600);
				return returnValue;
			}
		}
		public UInt64 Cookie { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 9672); } }
		public UInt64 BootRegistryRuns { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 9680); } }
		public Int32 ZeroingDisabled { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 9688); } }
		public Byte FullyInitialized{ get { return _StructureData[_BufferOffset +9692]; } }
		public Byte SafeBooted{ get { return _StructureData[_BufferOffset +9693]; } }
		public UInt64 TraceLogging { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 9696); } }
		public _MI_VISIBLE_STATE Vs
		{
			get
			{
				_MI_VISIBLE_STATE returnValue = new _MI_VISIBLE_STATE(_StructureData, _BufferOffset + 9728);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CMSI_RW_LOCK
 
	public class _CMSI_RW_LOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CMSI_RW_LOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CMSI_RW_LOCK"": [ 8, {
				 ""Reserved"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Reserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _ETW_SILO_TRACING_BLOCK
 
	public class _ETW_SILO_TRACING_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_SILO_TRACING_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_SILO_TRACING_BLOCK"": [ 64, {
				 ""ProcessorBuffers"": [ 0, [ ""Pointer"", ""{\""target\"":\""_EX_FAST_REF\""}"" ]],
				 ""EventsLoggedCount"": [ 8, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]],
				 ""QpcDelta"": [ 16, [ ""Pointer"", ""{\""target\"":\""Int64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ProcessorBuffers { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 EventsLoggedCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 QpcDelta { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _MI_VISIBLE_PARTITION
 
	public class _MI_VISIBLE_PARTITION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_VISIBLE_PARTITION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4608; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_VISIBLE_PARTITION"": [ 4608, {
				 ""LowestPhysicalPage"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""HighestPhysicalPage"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""NumberOfPhysicalPages"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""NumberOfPagingFiles"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""SystemCacheInitialized"": [ 28, [ ""Byte"", ""null"" ]],
				 ""PagingFile"": [ 32, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_MMPAGING_FILE\""}}"" ]],
				 ""AvailablePages"": [ 192, [ ""UInt64"", ""null"" ]],
				 ""ResidentAvailablePages"": [ 256, [ ""UInt64"", ""null"" ]],
				 ""PartitionWs"": [ 320, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""PartitionWorkingSetLists"": [ 512, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""TotalCommittedPages"": [ 552, [ ""UInt64"", ""null"" ]],
				 ""ModifiedPageListHead"": [ 576, [ ""_MMPFNLIST"", ""null"" ]],
				 ""ModifiedNoWritePageListHead"": [ 640, [ ""_MMPFNLIST"", ""null"" ]],
				 ""TotalCommitLimit"": [ 680, [ ""UInt64"", ""null"" ]],
				 ""TotalPagesForPagingFile"": [ 688, [ ""UInt64"", ""null"" ]],
				 ""VadPhysicalPages"": [ 696, [ ""UInt64"", ""null"" ]],
				 ""ProcessLockedFilePages"": [ 704, [ ""UInt64"", ""null"" ]],
				 ""SharedCommit"": [ 712, [ ""UInt64"", ""null"" ]],
				 ""SlabAllocatorPages"": [ 720, [ ""UInt64"", ""null"" ]],
				 ""ChargeCommitmentFailures"": [ 728, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""PageFileTraceIndex"": [ 744, [ ""Int32"", ""null"" ]],
				 ""PageFileTraces"": [ 752, [ ""Array"", ""{\""count\"":32,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 LowestPhysicalPage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 HighestPhysicalPage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 NumberOfPhysicalPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 NumberOfPagingFiles { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Byte SystemCacheInitialized{ get { return _StructureData[_BufferOffset +28]; } }
		public _MMPAGING_FILE[] PagingFile
		{
			get
			{
				_MMPAGING_FILE[] returnValue = new _MMPAGING_FILE[16];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<16; i++ )
					returnValue[i] = new _MMPAGING_FILE(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 AvailablePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt64 ResidentAvailablePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public _MMSUPPORT_INSTANCE[] PartitionWs
		{
			get
			{
				_MMSUPPORT_INSTANCE[] returnValue = new _MMSUPPORT_INSTANCE[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _MMSUPPORT_INSTANCE(_StructureData, (i * size) + _BufferOffset + 320);
				return returnValue;
			}
		}
		public _MMWSL_INSTANCE[] PartitionWorkingSetLists
		{
			get
			{
				_MMWSL_INSTANCE[] returnValue = new _MMWSL_INSTANCE[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _MMWSL_INSTANCE(_StructureData, (i * size) + _BufferOffset + 512);
				return returnValue;
			}
		}
		public UInt64 TotalCommittedPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 552); } }
		public _MMPFNLIST ModifiedPageListHead
		{
			get
			{
				_MMPFNLIST returnValue = new _MMPFNLIST(_StructureData, _BufferOffset + 576);
				return returnValue;
			}
		}
		public _MMPFNLIST ModifiedNoWritePageListHead
		{
			get
			{
				_MMPFNLIST returnValue = new _MMPFNLIST(_StructureData, _BufferOffset + 640);
				return returnValue;
			}
		}
		public UInt64 TotalCommitLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 680); } }
		public UInt64 TotalPagesForPagingFile { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 688); } }
		public UInt64 VadPhysicalPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 696); } }
		public UInt64 ProcessLockedFilePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 704); } }
		public UInt64 SharedCommit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 712); } }
		public UInt64 SlabAllocatorPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 720); } }
		public UInt32[] ChargeCommitmentFailures
		{
			get
			{
				UInt32[] returnValue = new UInt32[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 728);
				return returnValue;
			}
		}
		public Int32 PageFileTraceIndex { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 744); } }
		public _MI_PAGEFILE_TRACES[] PageFileTraces
		{
			get
			{
				_MI_PAGEFILE_TRACES[] returnValue = new _MI_PAGEFILE_TRACES[32];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<32; i++ )
					returnValue[i] = new _MI_PAGEFILE_TRACES(_StructureData, (i * size) + _BufferOffset + 752);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEAP_ERROR_SOURCE_TABLE
 
	public class _WHEAP_ERROR_SOURCE_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEAP_ERROR_SOURCE_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEAP_ERROR_SOURCE_TABLE"": [ 56, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Count"": [ 4, [ ""Int32"", ""null"" ]],
				 ""NextId"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Items"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""InsertLock"": [ 32, [ ""_KEVENT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 Count { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 NextId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY Items
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _KEVENT InsertLock
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ETW_DECODE_CONTROL_ENTRY
 
	public class _ETW_DECODE_CONTROL_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_DECODE_CONTROL_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_DECODE_CONTROL_ENTRY"": [ 48, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_ETW_DECODE_CONTROL_ENTRY\""}"" ]],
				 ""Decode"": [ 8, [ ""_GUID"", ""null"" ]],
				 ""Control"": [ 24, [ ""_GUID"", ""null"" ]],
				 ""ConsumersNotified"": [ 40, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _GUID Decode
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _GUID Control
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public Byte ConsumersNotified{ get { return _StructureData[_BufferOffset +40]; } }
	}
	#endregion
	#region _HCELL
 
	public class _HCELL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HCELL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HCELL"": [ 8, {
				 ""Size"": [ 0, [ ""Int32"", ""null"" ]],
				 ""u"": [ 4, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 Size { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HMAP_DIRECTORY
 
	public class _HMAP_DIRECTORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HMAP_DIRECTORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8192; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HMAP_DIRECTORY"": [ 8192, {
				 ""Directory"": [ 0, [ ""Array"", ""{\""count\"":1024,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_HMAP_TABLE\""}}"" ]] }]
				 }
				)";
			}
		}
		public _HMAP_TABLE[] Directory
		{
			get
			{
				_HMAP_TABLE[] returnValue = new _HMAP_TABLE[1024];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1024; i++ )
					returnValue[i] = new _HMAP_TABLE(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region PROCESSOR_IDLESTATE_POLICY
 
	public class PROCESSOR_IDLESTATE_POLICY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public PROCESSOR_IDLESTATE_POLICY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""PROCESSOR_IDLESTATE_POLICY"": [ 32, {
				 ""Revision"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 2, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""PolicyCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Policy"": [ 8, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Revision { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public _ANONYMOUS_TAG Flags
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 2);
				return returnValue;
			}
		}
		public UInt32 PolicyCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public PROCESSOR_IDLESTATE_INFO[] Policy
		{
			get
			{
				PROCESSOR_IDLESTATE_INFO[] returnValue = new PROCESSOR_IDLESTATE_INFO[3];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<3; i++ )
					returnValue[i] = new PROCESSOR_IDLESTATE_INFO(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _LOGGED_STREAM_CALLBACK_V1
 
	public class _LOGGED_STREAM_CALLBACK_V1
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LOGGED_STREAM_CALLBACK_V1(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LOGGED_STREAM_CALLBACK_V1"": [ 16, {
				 ""LogHandle"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FlushToLsnRoutine"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 LogHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 FlushToLsnRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _VF_AVL_TREE
 
	public class _VF_AVL_TREE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VF_AVL_TREE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VF_AVL_TREE"": [ 40, {
				 ""NodeRangeSize"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""NodeCount"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Tables"": [ 16, [ ""Pointer"", ""{\""target\"":\""_VF_AVL_TABLE\""}"" ]],
				 ""TablesNo"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""UseSessionId"": [ 28, [ ""Byte"", ""null"" ]],
				 ""u1"": [ 32, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 NodeRangeSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 NodeCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Tables { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 TablesNo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Byte UseSessionId{ get { return _StructureData[_BufferOffset +28]; } }
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IMAGE_FILE_HEADER
 
	public class _IMAGE_FILE_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_FILE_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_FILE_HEADER"": [ 20, {
				 ""Machine"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""NumberOfSections"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""TimeDateStamp"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""PointerToSymbolTable"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""NumberOfSymbols"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""SizeOfOptionalHeader"": [ 16, [ ""UInt16"", ""null"" ]],
				 ""Characteristics"": [ 18, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Machine { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 NumberOfSections { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 TimeDateStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 PointerToSymbolTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 NumberOfSymbols { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt16 SizeOfOptionalHeader { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 16); } }
		public UInt16 Characteristics { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 18); } }
	}
	#endregion
	#region _CACHE_MANAGER_CALLBACKS
 
	public class _CACHE_MANAGER_CALLBACKS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CACHE_MANAGER_CALLBACKS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CACHE_MANAGER_CALLBACKS"": [ 32, {
				 ""AcquireForLazyWrite"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReleaseFromLazyWrite"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AcquireForReadAhead"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReleaseFromReadAhead"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 AcquireForLazyWrite { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ReleaseFromLazyWrite { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 AcquireForReadAhead { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 ReleaseFromReadAhead { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _MMSUPPORT_FULL
 
	public class _MMSUPPORT_FULL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMSUPPORT_FULL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 320; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMSUPPORT_FULL"": [ 320, {
				 ""Instance"": [ 0, [ ""_MMSUPPORT_INSTANCE"", ""null"" ]],
				 ""Shared"": [ 192, [ ""_MMSUPPORT_SHARED"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _MMSUPPORT_INSTANCE Instance
		{
			get
			{
				_MMSUPPORT_INSTANCE returnValue = new _MMSUPPORT_INSTANCE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _MMSUPPORT_SHARED Shared
		{
			get
			{
				_MMSUPPORT_SHARED returnValue = new _MMSUPPORT_SHARED(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
	}
	#endregion
	#region _JOBOBJECT_WAKE_FILTER
 
	public class _JOBOBJECT_WAKE_FILTER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _JOBOBJECT_WAKE_FILTER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_JOBOBJECT_WAKE_FILTER"": [ 8, {
				 ""HighEdgeFilter"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""LowEdgeFilter"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 HighEdgeFilter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 LowEdgeFilter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _MI_PROCESS_STATE
 
	public class _MI_PROCESS_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PROCESS_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PROCESS_STATE"": [ 72, {
				 ""SystemDllBase"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ColorSeed"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""RotatingUniprocessorNumber"": [ 12, [ ""Int32"", ""null"" ]],
				 ""CriticalSectionTimeout"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ProcessList"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SharedUserDataPte"": [ 40, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_MMPTE\""}}"" ]],
				 ""HypervisorSharedVa"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VadSecureCookie"": [ 64, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SystemDllBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 ColorSeed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Int32 RotatingUniprocessorNumber { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 12); } }
		public _LARGE_INTEGER CriticalSectionTimeout
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LIST_ENTRY ProcessList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _MMPTE[] SharedUserDataPte
		{
			get
			{
				_MMPTE[] returnValue = new _MMPTE[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _MMPTE(_StructureData, (i * size) + _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt64 HypervisorSharedVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 VadSecureCookie { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _MMSUPPORT_AGGREGATION
 
	public class _MMSUPPORT_AGGREGATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMSUPPORT_AGGREGATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMSUPPORT_AGGREGATION"": [ 32, {
				 ""PageFaultCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""WorkingSetSize"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""WorkingSetLeafSize"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""PeakWorkingSetSize"": [ 24, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PageFaultCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 WorkingSetSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 WorkingSetLeafSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 PeakWorkingSetSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _IO_TIMER
 
	public class _IO_TIMER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_TIMER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_TIMER"": [ 48, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""TimerFlag"": [ 2, [ ""Int16"", ""null"" ]],
				 ""TimerList"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""TimerRoutine"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Context"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeviceObject"": [ 40, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 TimerFlag { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public _LIST_ENTRY TimerList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 TimerRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _EXCEPTION_POINTERS
 
	public class _EXCEPTION_POINTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EXCEPTION_POINTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EXCEPTION_POINTERS"": [ 16, {
				 ""ExceptionRecord"": [ 0, [ ""Pointer"", ""{\""target\"":\""_EXCEPTION_RECORD\""}"" ]],
				 ""ContextRecord"": [ 8, [ ""Pointer"", ""{\""target\"":\""_CONTEXT\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ExceptionRecord { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ContextRecord { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _PRIVATE_CACHE_MAP
 
	public class _PRIVATE_CACHE_MAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PRIVATE_CACHE_MAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 120; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PRIVATE_CACHE_MAP"": [ 120, {
				 ""NodeTypeCode"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Flags"": [ 0, [ ""_PRIVATE_CACHE_MAP_FLAGS"", ""null"" ]],
				 ""ReadAheadMask"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""FileObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""FileOffset1"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""BeyondLastByte1"": [ 24, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""FileOffset2"": [ 32, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""BeyondLastByte2"": [ 40, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""SequentialReadCount"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""ReadAheadLength"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""ReadAheadOffset"": [ 56, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ReadAheadBeyondLastByte"": [ 64, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""PrevReadAheadBeyondLastByte"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""ReadAheadSpinLock"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""PipelinedReadAheadRequestSize"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""ReadAheadGrowth"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""PrivateLinks"": [ 96, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ReadAheadWorkItem"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 NodeTypeCode { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public _PRIVATE_CACHE_MAP_FLAGS Flags
		{
			get
			{
				_PRIVATE_CACHE_MAP_FLAGS returnValue = new _PRIVATE_CACHE_MAP_FLAGS(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 ReadAheadMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 FileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _LARGE_INTEGER FileOffset1
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LARGE_INTEGER BeyondLastByte1
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LARGE_INTEGER FileOffset2
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _LARGE_INTEGER BeyondLastByte2
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt32 SequentialReadCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 ReadAheadLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public _LARGE_INTEGER ReadAheadOffset
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ReadAheadBeyondLastByte
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt64 PrevReadAheadBeyondLastByte { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 ReadAheadSpinLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt32 PipelinedReadAheadRequestSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 ReadAheadGrowth { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public _LIST_ENTRY PrivateLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt64 ReadAheadWorkItem { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
	}
	#endregion
	#region _ETW_GUID_ENTRY
 
	public class _ETW_GUID_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_GUID_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 424; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_GUID_ENTRY"": [ 424, {
				 ""GuidList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SiloGuidList"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""RefCount"": [ 32, [ ""Int64"", ""null"" ]],
				 ""Guid"": [ 40, [ ""_GUID"", ""null"" ]],
				 ""RegListHead"": [ 56, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SecurityDescriptor"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LastEnable"": [ 80, [ ""_ETW_LAST_ENABLE_INFO"", ""null"" ]],
				 ""MatchId"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""ProviderEnableInfo"": [ 96, [ ""_TRACE_ENABLE_INFO"", ""null"" ]],
				 ""EnableInfo"": [ 128, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""FilterData"": [ 384, [ ""Pointer"", ""{\""target\"":\""_ETW_FILTER_HEADER\""}"" ]],
				 ""SiloState"": [ 392, [ ""Pointer"", ""{\""target\"":\""_ETW_SILODRIVERSTATE\""}"" ]],
				 ""HostEntry"": [ 400, [ ""Pointer"", ""{\""target\"":\""_ETW_GUID_ENTRY\""}"" ]],
				 ""Lock"": [ 408, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""LockOwner"": [ 416, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY GuidList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY SiloGuidList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public Int64 RefCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 32); } }
		public _GUID Guid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _LIST_ENTRY RegListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt64 SecurityDescriptor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public _ETW_LAST_ENABLE_INFO LastEnable
		{
			get
			{
				_ETW_LAST_ENABLE_INFO returnValue = new _ETW_LAST_ENABLE_INFO(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt64 MatchId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public _TRACE_ENABLE_INFO ProviderEnableInfo
		{
			get
			{
				_TRACE_ENABLE_INFO returnValue = new _TRACE_ENABLE_INFO(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public _TRACE_ENABLE_INFO[] EnableInfo
		{
			get
			{
				_TRACE_ENABLE_INFO[] returnValue = new _TRACE_ENABLE_INFO[8];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<8; i++ )
					returnValue[i] = new _TRACE_ENABLE_INFO(_StructureData, (i * size) + _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt64 FilterData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 384); } }
		public UInt64 SiloState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 392); } }
		public UInt64 HostEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 400); } }
		public _EX_PUSH_LOCK Lock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 408);
				return returnValue;
			}
		}
		public UInt64 LockOwner { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 416); } }
	}
	#endregion
	#region _ARBITER_INSTANCE
 
	public class _ARBITER_INSTANCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_INSTANCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 344; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_INSTANCE"": [ 344, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""MutexEvent"": [ 8, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""Name"": [ 16, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""OrderingName"": [ 24, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""ResourceType"": [ 32, [ ""Int32"", ""null"" ]],
				 ""Allocation"": [ 40, [ ""Pointer"", ""{\""target\"":\""_RTL_RANGE_LIST\""}"" ]],
				 ""PossibleAllocation"": [ 48, [ ""Pointer"", ""{\""target\"":\""_RTL_RANGE_LIST\""}"" ]],
				 ""OrderingList"": [ 56, [ ""_ARBITER_ORDERING_LIST"", ""null"" ]],
				 ""ReservedList"": [ 72, [ ""_ARBITER_ORDERING_LIST"", ""null"" ]],
				 ""ReferenceCount"": [ 88, [ ""Int32"", ""null"" ]],
				 ""Interface"": [ 96, [ ""Pointer"", ""{\""target\"":\""_ARBITER_INTERFACE\""}"" ]],
				 ""AllocationStackMaxSize"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""AllocationStack"": [ 112, [ ""Pointer"", ""{\""target\"":\""_ARBITER_ALLOCATION_STATE\""}"" ]],
				 ""UnpackRequirement"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PackResource"": [ 128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UnpackResource"": [ 136, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ScoreRequirement"": [ 144, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TestAllocation"": [ 152, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RetestAllocation"": [ 160, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CommitAllocation"": [ 168, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RollbackAllocation"": [ 176, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BootAllocation"": [ 184, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""QueryArbitrate"": [ 192, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""QueryConflict"": [ 200, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AddReserved"": [ 208, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StartArbiter"": [ 216, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PreprocessEntry"": [ 224, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AllocateEntry"": [ 232, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetNextAllocationRange"": [ 240, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FindSuitableRange"": [ 248, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AddAllocation"": [ 256, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BacktrackAllocation"": [ 264, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OverrideConflict"": [ 272, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InitializeRangeList"": [ 280, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeleteOwnerRanges"": [ 288, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TransactionInProgress"": [ 296, [ ""Byte"", ""null"" ]],
				 ""TransactionEvent"": [ 304, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""Extension"": [ 312, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BusDeviceObject"": [ 320, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""ConflictCallbackContext"": [ 328, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ConflictCallback"": [ 336, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 MutexEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Name { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 OrderingName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public Int32 ResourceType { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 Allocation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 PossibleAllocation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _ARBITER_ORDERING_LIST OrderingList
		{
			get
			{
				_ARBITER_ORDERING_LIST returnValue = new _ARBITER_ORDERING_LIST(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _ARBITER_ORDERING_LIST ReservedList
		{
			get
			{
				_ARBITER_ORDERING_LIST returnValue = new _ARBITER_ORDERING_LIST(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public Int32 ReferenceCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 88); } }
		public UInt64 Interface { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt32 AllocationStackMaxSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt64 AllocationStack { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 UnpackRequirement { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 PackResource { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 UnpackResource { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 ScoreRequirement { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 TestAllocation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 RetestAllocation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 CommitAllocation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 RollbackAllocation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 BootAllocation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public UInt64 QueryArbitrate { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt64 QueryConflict { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 AddReserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 StartArbiter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 PreprocessEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 AllocateEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 GetNextAllocationRange { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 FindSuitableRange { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public UInt64 AddAllocation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public UInt64 BacktrackAllocation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 264); } }
		public UInt64 OverrideConflict { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public UInt64 InitializeRangeList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 280); } }
		public UInt64 DeleteOwnerRanges { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 288); } }
		public Byte TransactionInProgress{ get { return _StructureData[_BufferOffset +296]; } }
		public UInt64 TransactionEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 304); } }
		public UInt64 Extension { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 312); } }
		public UInt64 BusDeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 320); } }
		public UInt64 ConflictCallbackContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 328); } }
		public UInt64 ConflictCallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 336); } }
	}
	#endregion
	#region _SECURITY_CLIENT_CONTEXT
 
	public class _SECURITY_CLIENT_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECURITY_CLIENT_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECURITY_CLIENT_CONTEXT"": [ 72, {
				 ""SecurityQos"": [ 0, [ ""_SECURITY_QUALITY_OF_SERVICE"", ""null"" ]],
				 ""ClientToken"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DirectlyAccessClientToken"": [ 24, [ ""Byte"", ""null"" ]],
				 ""DirectAccessEffectiveOnly"": [ 25, [ ""Byte"", ""null"" ]],
				 ""ServerIsRemote"": [ 26, [ ""Byte"", ""null"" ]],
				 ""ClientTokenControl"": [ 28, [ ""_TOKEN_CONTROL"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SECURITY_QUALITY_OF_SERVICE SecurityQos
		{
			get
			{
				_SECURITY_QUALITY_OF_SERVICE returnValue = new _SECURITY_QUALITY_OF_SERVICE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 ClientToken { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Byte DirectlyAccessClientToken{ get { return _StructureData[_BufferOffset +24]; } }
		public Byte DirectAccessEffectiveOnly{ get { return _StructureData[_BufferOffset +25]; } }
		public Byte ServerIsRemote{ get { return _StructureData[_BufferOffset +26]; } }
		public _TOKEN_CONTROL ClientTokenControl
		{
			get
			{
				_TOKEN_CONTROL returnValue = new _TOKEN_CONTROL(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
	}
	#endregion
	#region _VF_POOL_TRACE
 
	public class _VF_POOL_TRACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VF_POOL_TRACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VF_POOL_TRACE"": [ 128, {
				 ""Address"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Size"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Thread"": [ 16, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""StackTrace"": [ 24, [ ""Array"", ""{\""count\"":13,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Address { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Size { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64[] StackTrace
		{
			get
			{
				UInt64[] returnValue = new UInt64[13];
				int size = 8;
				for(int i=0; i<13; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTLP_HP_HEAP_GLOBALS
 
	public class _RTLP_HP_HEAP_GLOBALS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTLP_HP_HEAP_GLOBALS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTLP_HP_HEAP_GLOBALS"": [ 56, {
				 ""HeapKey"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""LfhKey"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""FailureInfo"": [ 16, [ ""Pointer"", ""{\""target\"":\""_HEAP_FAILURE_INFORMATION\""}"" ]],
				 ""CommitLimitData"": [ 24, [ ""_RTL_HEAP_MEMORY_LIMIT_DATA"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 HeapKey { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 LfhKey { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 FailureInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _RTL_HEAP_MEMORY_LIMIT_DATA CommitLimitData
		{
			get
			{
				_RTL_HEAP_MEMORY_LIMIT_DATA returnValue = new _RTL_HEAP_MEMORY_LIMIT_DATA(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_SYSTEM_IMAGE_STATE
 
	public class _MI_SYSTEM_IMAGE_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SYSTEM_IMAGE_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 168; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SYSTEM_IMAGE_STATE"": [ 168, {
				 ""FixupList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LoadLock"": [ 16, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""LoadLockOwner"": [ 24, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""LoadLockCount"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""FixupLock"": [ 36, [ ""Int32"", ""null"" ]],
				 ""FirstLoadEver"": [ 40, [ ""Byte"", ""null"" ]],
				 ""LargePageAll"": [ 41, [ ""Byte"", ""null"" ]],
				 ""LastPage"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""LargePageList"": [ 56, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""StrongCodeLoadFailureList"": [ 72, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SystemBase"": [ 88, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_KLDR_DATA_TABLE_ENTRY\""}}"" ]],
				 ""BeingDeleted"": [ 96, [ ""Pointer"", ""{\""target\"":\""_KLDR_DATA_TABLE_ENTRY\""}"" ]],
				 ""MappingRangesPushLock"": [ 104, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""MappingRanges"": [ 112, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_MI_DRIVER_VA\""}}"" ]],
				 ""PageCount"": [ 128, [ ""UInt64"", ""null"" ]],
				 ""PageCounts"": [ 136, [ ""_MM_SYSTEM_PAGE_COUNTS"", ""null"" ]],
				 ""CollidedLock"": [ 152, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""ImageTree"": [ 160, [ ""_RTL_AVL_TREE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY FixupList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK LoadLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 LoadLockOwner { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 LoadLockCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public Int32 FixupLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 36); } }
		public Byte FirstLoadEver{ get { return _StructureData[_BufferOffset +40]; } }
		public Byte LargePageAll{ get { return _StructureData[_BufferOffset +41]; } }
		public UInt64 LastPage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _LIST_ENTRY LargePageList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _LIST_ENTRY StrongCodeLoadFailureList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _KLDR_DATA_TABLE_ENTRY[] SystemBase
		{
			get
			{
				_KLDR_DATA_TABLE_ENTRY[] returnValue = new _KLDR_DATA_TABLE_ENTRY[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _KLDR_DATA_TABLE_ENTRY(_StructureData, (i * size) + _BufferOffset + 88);
				return returnValue;
			}
		}
		public UInt64 BeingDeleted { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public _EX_PUSH_LOCK MappingRangesPushLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public _MI_DRIVER_VA[] MappingRanges
		{
			get
			{
				_MI_DRIVER_VA[] returnValue = new _MI_DRIVER_VA[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _MI_DRIVER_VA(_StructureData, (i * size) + _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt64 PageCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public _MM_SYSTEM_PAGE_COUNTS PageCounts
		{
			get
			{
				_MM_SYSTEM_PAGE_COUNTS returnValue = new _MM_SYSTEM_PAGE_COUNTS(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK CollidedLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 152);
				return returnValue;
			}
		}
		public _RTL_AVL_TREE ImageTree
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 160);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMPFNENTRY1
 
	public class _MMPFNENTRY1
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPFNENTRY1(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPFNENTRY1"": [ 1, {
				 ""PageLocation"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""WriteInProgress"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""Modified"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""ReadInProgress"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""CacheAttribute"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte PageLocation
		{
			get
			{
				// start: 0  end: 3  Mask: 0000000000000111
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 7) >> 0;
				return (Byte)value2;
			}
		}
		public Byte WriteInProgress
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte Modified
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte ReadInProgress
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte CacheAttribute
		{
			get
			{
				// start: 6  end: 8  Mask: 0000000011000000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 192) >> 6;
				return (Byte)value2;
			}
		}
	}
	#endregion
	#region _VI_FAULT_TRACE
 
	public class _VI_FAULT_TRACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VI_FAULT_TRACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VI_FAULT_TRACE"": [ 72, {
				 ""Thread"": [ 0, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""StackTrace"": [ 8, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64[] StackTrace
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				int size = 8;
				for(int i=0; i<8; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_FLAGS
 
	public class _MI_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_FLAGS"": [ 4, {
				 ""EntireFlags"": [ 0, [ ""Int32"", ""null"" ]],
				 ""VerifierEnabled"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""KernelVerifierEnabled"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""LargePageKernel"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""StopOn4d"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""InitializationPhase"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""PageKernelStacks"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""CheckZeroPages"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessorPrewalks"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessorPostwalks"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""CoverageBuild"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""AccessBitReplacementDisabled"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""CheckExecute"": [ 0, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""ProtectedPagesEnabled"": [ 0, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""SecureRelocations"": [ 0, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""StrongPageIdentity"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""StrongCodeGuarantees"": [ 0, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""HardCodeGuarantees"": [ 0, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""ExecutePagePrivilegeRequired"": [ 0, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""SecureKernelCfgEnabled"": [ 0, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""FullHvci"": [ 0, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""BootDebuggerActive"": [ 0, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""ExceptionHandlingReady"": [ 0, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""ShadowStacksSupported"": [ 0, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]],
				 ""AccessBitFenceRequired"": [ 0, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""PfnDatabaseExists"": [ 0, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":25,\""target\"":\""UInt32\""}"" ]],
				 ""DeferredHotAddsCompleted"": [ 0, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""SystemPtesReady"": [ 0, [ ""BitField"", ""{\""end_bit\"":28,\""start_bit\"":27,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 EntireFlags { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 VerifierEnabled
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 KernelVerifierEnabled
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 LargePageKernel
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 StopOn4d
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 InitializationPhase
		{
			get
			{
				// start: 4  end: 6  Mask: 0000000000110000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 48) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 PageKernelStacks
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 CheckZeroPages
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessorPrewalks
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessorPostwalks
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 CoverageBuild
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 AccessBitReplacementDisabled
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 CheckExecute
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 ProtectedPagesEnabled
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 SecureRelocations
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 StrongPageIdentity
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 StrongCodeGuarantees
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 HardCodeGuarantees
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 ExecutePagePrivilegeRequired
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 262144) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 SecureKernelCfgEnabled
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 FullHvci
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 BootDebuggerActive
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 ExceptionHandlingReady
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 ShadowStacksSupported
		{
			get
			{
				// start: 23  end: 24  Mask: 100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8388608) >> 23;
				return (UInt32)value2;
			}
		}
		public UInt32 AccessBitFenceRequired
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16777216) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 PfnDatabaseExists
		{
			get
			{
				// start: 25  end: 26  Mask: 10000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 33554432) >> 25;
				return (UInt32)value2;
			}
		}
		public UInt32 DeferredHotAddsCompleted
		{
			get
			{
				// start: 26  end: 27  Mask: 100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 67108864) >> 26;
				return (UInt32)value2;
			}
		}
		public UInt32 SystemPtesReady
		{
			get
			{
				// start: 27  end: 28  Mask: 1000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 134217728) >> 27;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _ACL
 
	public class _ACL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ACL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ACL"": [ 8, {
				 ""AclRevision"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Sbz1"": [ 1, [ ""Byte"", ""null"" ]],
				 ""AclSize"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""AceCount"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Sbz2"": [ 6, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte AclRevision{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Sbz1{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt16 AclSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 AceCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Sbz2 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
	}
	#endregion
	#region _HEAP_VS_DELAY_FREE_CONTEXT
 
	public class _HEAP_VS_DELAY_FREE_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_VS_DELAY_FREE_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_VS_DELAY_FREE_CONTEXT"": [ 16, {
				 ""ListHead"": [ 0, [ ""_SLIST_HEADER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SLIST_HEADER ListHead
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PENDING_RELATIONS_LIST_ENTRY
 
	public class _PENDING_RELATIONS_LIST_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PENDING_RELATIONS_LIST_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PENDING_RELATIONS_LIST_ENTRY"": [ 112, {
				 ""Link"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""WorkItem"": [ 16, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""DeviceEvent"": [ 48, [ ""Pointer"", ""{\""target\"":\""_PNP_DEVICE_EVENT_ENTRY\""}"" ]],
				 ""DeviceObject"": [ 56, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""RelationsList"": [ 64, [ ""Pointer"", ""{\""target\"":\""_RELATION_LIST\""}"" ]],
				 ""EjectIrp"": [ 72, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""Lock"": [ 80, [ ""Enumeration"", ""{\""enum_name\"":\""IRPLOCK\"",\""target\"":\""UInt32\""}"" ]],
				 ""Problem"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""ProfileChangingEject"": [ 88, [ ""Byte"", ""null"" ]],
				 ""DisplaySafeRemovalDialog"": [ 89, [ ""Byte"", ""null"" ]],
				 ""LightestSleepState"": [ 92, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""DockInterface"": [ 96, [ ""Pointer"", ""{\""target\"":\""DOCK_INTERFACE\""}"" ]],
				 ""DequeuePending"": [ 104, [ ""Byte"", ""null"" ]],
				 ""DeleteType"": [ 108, [ ""Enumeration"", ""{\""enum_name\"":\""_PNP_DEVICE_DELETE_TYPE\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _WORK_QUEUE_ITEM WorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 DeviceEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 RelationsList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 EjectIrp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public IRPLOCK Lock { get { return (IRPLOCK)BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 Problem { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public Byte ProfileChangingEject{ get { return _StructureData[_BufferOffset +88]; } }
		public Byte DisplaySafeRemovalDialog{ get { return _StructureData[_BufferOffset +89]; } }
		public _SYSTEM_POWER_STATE LightestSleepState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt64 DockInterface { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public Byte DequeuePending{ get { return _StructureData[_BufferOffset +104]; } }
		public _PNP_DEVICE_DELETE_TYPE DeleteType { get { return (_PNP_DEVICE_DELETE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
	}
	#endregion
	#region _PS_DYNAMIC_ENFORCED_ADDRESS_RANGES
 
	public class _PS_DYNAMIC_ENFORCED_ADDRESS_RANGES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_DYNAMIC_ENFORCED_ADDRESS_RANGES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_DYNAMIC_ENFORCED_ADDRESS_RANGES"": [ 16, {
				 ""Tree"": [ 0, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""Lock"": [ 8, [ ""_EX_PUSH_LOCK"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_AVL_TREE Tree
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK Lock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION
 
	public class _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_AUTHZBASEP_SECURITY_ATTRIBUTES_INFORMATION"": [ 48, {
				 ""SecurityAttributeCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SecurityAttributesList"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""WorkingSecurityAttributeCount"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""WorkingSecurityAttributesList"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SecurityAttributeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _LIST_ENTRY SecurityAttributesList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 WorkingSecurityAttributeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _LIST_ENTRY WorkingSecurityAttributesList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region SYSTEM_POWER_CAPABILITIES
 
	public class SYSTEM_POWER_CAPABILITIES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public SYSTEM_POWER_CAPABILITIES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 76; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""SYSTEM_POWER_CAPABILITIES"": [ 76, {
				 ""PowerButtonPresent"": [ 0, [ ""Byte"", ""null"" ]],
				 ""SleepButtonPresent"": [ 1, [ ""Byte"", ""null"" ]],
				 ""LidPresent"": [ 2, [ ""Byte"", ""null"" ]],
				 ""SystemS1"": [ 3, [ ""Byte"", ""null"" ]],
				 ""SystemS2"": [ 4, [ ""Byte"", ""null"" ]],
				 ""SystemS3"": [ 5, [ ""Byte"", ""null"" ]],
				 ""SystemS4"": [ 6, [ ""Byte"", ""null"" ]],
				 ""SystemS5"": [ 7, [ ""Byte"", ""null"" ]],
				 ""HiberFilePresent"": [ 8, [ ""Byte"", ""null"" ]],
				 ""FullWake"": [ 9, [ ""Byte"", ""null"" ]],
				 ""VideoDimPresent"": [ 10, [ ""Byte"", ""null"" ]],
				 ""ApmPresent"": [ 11, [ ""Byte"", ""null"" ]],
				 ""UpsPresent"": [ 12, [ ""Byte"", ""null"" ]],
				 ""ThermalControl"": [ 13, [ ""Byte"", ""null"" ]],
				 ""ProcessorThrottle"": [ 14, [ ""Byte"", ""null"" ]],
				 ""ProcessorMinThrottle"": [ 15, [ ""Byte"", ""null"" ]],
				 ""ProcessorMaxThrottle"": [ 16, [ ""Byte"", ""null"" ]],
				 ""FastSystemS4"": [ 17, [ ""Byte"", ""null"" ]],
				 ""Hiberboot"": [ 18, [ ""Byte"", ""null"" ]],
				 ""WakeAlarmPresent"": [ 19, [ ""Byte"", ""null"" ]],
				 ""AoAc"": [ 20, [ ""Byte"", ""null"" ]],
				 ""DiskSpinDown"": [ 21, [ ""Byte"", ""null"" ]],
				 ""HiberFileType"": [ 22, [ ""Byte"", ""null"" ]],
				 ""AoAcConnectivitySupported"": [ 23, [ ""Byte"", ""null"" ]],
				 ""spare3"": [ 24, [ ""Array"", ""{\""count\"":6,\""target\"":\""Byte\""}"" ]],
				 ""SystemBatteriesPresent"": [ 30, [ ""Byte"", ""null"" ]],
				 ""BatteriesAreShortTerm"": [ 31, [ ""Byte"", ""null"" ]],
				 ""BatteryScale"": [ 32, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""AcOnLineWake"": [ 56, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""SoftLidWake"": [ 60, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""RtcWake"": [ 64, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""MinDeviceWakeState"": [ 68, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""DefaultLowLatencyWake"": [ 72, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte PowerButtonPresent{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte SleepButtonPresent{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte LidPresent{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte SystemS1{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte SystemS2{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte SystemS3{ get { return _StructureData[_BufferOffset +5]; } }
		public Byte SystemS4{ get { return _StructureData[_BufferOffset +6]; } }
		public Byte SystemS5{ get { return _StructureData[_BufferOffset +7]; } }
		public Byte HiberFilePresent{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte FullWake{ get { return _StructureData[_BufferOffset +9]; } }
		public Byte VideoDimPresent{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte ApmPresent{ get { return _StructureData[_BufferOffset +11]; } }
		public Byte UpsPresent{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte ThermalControl{ get { return _StructureData[_BufferOffset +13]; } }
		public Byte ProcessorThrottle{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte ProcessorMinThrottle{ get { return _StructureData[_BufferOffset +15]; } }
		public Byte ProcessorMaxThrottle{ get { return _StructureData[_BufferOffset +16]; } }
		public Byte FastSystemS4{ get { return _StructureData[_BufferOffset +17]; } }
		public Byte Hiberboot{ get { return _StructureData[_BufferOffset +18]; } }
		public Byte WakeAlarmPresent{ get { return _StructureData[_BufferOffset +19]; } }
		public Byte AoAc{ get { return _StructureData[_BufferOffset +20]; } }
		public Byte DiskSpinDown{ get { return _StructureData[_BufferOffset +21]; } }
		public Byte HiberFileType{ get { return _StructureData[_BufferOffset +22]; } }
		public Byte AoAcConnectivitySupported{ get { return _StructureData[_BufferOffset +23]; } }
		public Byte[] spare3
		{
			get
			{
				Byte[] returnValue = new Byte[6];
				for(int i=0; i<6; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 24];
				return returnValue;
			}
		}
		public Byte SystemBatteriesPresent{ get { return _StructureData[_BufferOffset +30]; } }
		public Byte BatteriesAreShortTerm{ get { return _StructureData[_BufferOffset +31]; } }
		public BATTERY_REPORTING_SCALE[] BatteryScale
		{
			get
			{
				BATTERY_REPORTING_SCALE[] returnValue = new BATTERY_REPORTING_SCALE[3];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<3; i++ )
					returnValue[i] = new BATTERY_REPORTING_SCALE(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
		public _SYSTEM_POWER_STATE AcOnLineWake { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public _SYSTEM_POWER_STATE SoftLidWake { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public _SYSTEM_POWER_STATE RtcWake { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public _SYSTEM_POWER_STATE MinDeviceWakeState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public _SYSTEM_POWER_STATE DefaultLowLatencyWake { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
	}
	#endregion
	#region _KWAIT_CHAIN
 
	public class _KWAIT_CHAIN
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KWAIT_CHAIN(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KWAIT_CHAIN"": [ 8, {
				 ""Head"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Head { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _ALPC_COMPLETION_PACKET_LOOKASIDE
 
	public class _ALPC_COMPLETION_PACKET_LOOKASIDE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ALPC_COMPLETION_PACKET_LOOKASIDE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ALPC_COMPLETION_PACKET_LOOKASIDE"": [ 80, {
				 ""Lock"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Size"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ActiveCount"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""PendingNullCount"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""PendingCheckCompletionListCount"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""PendingDelete"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""FreeListHead"": [ 32, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""CompletionPort"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CompletionKey"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Entry"": [ 56, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ActiveCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 PendingNullCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 PendingCheckCompletionListCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 PendingDelete { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _SINGLE_LIST_ENTRY FreeListHead
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 CompletionPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 CompletionKey { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY[] Entry
		{
			get
			{
				_ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY[] returnValue = new _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY(_StructureData, (i * size) + _BufferOffset + 56);
				return returnValue;
			}
		}
	}
	#endregion
	#region _VF_DRIVER_IO_CALLBACKS
 
	public class _VF_DRIVER_IO_CALLBACKS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VF_DRIVER_IO_CALLBACKS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 256; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VF_DRIVER_IO_CALLBACKS"": [ 256, {
				 ""DriverInit"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DriverStartIo"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DriverUnload"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AddDevice"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MajorFunction"": [ 32, [ ""Array"", ""{\""count\"":28,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DriverInit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 DriverStartIo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 DriverUnload { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 AddDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64[] MajorFunction
		{
			get
			{
				UInt64[] returnValue = new UInt64[28];
				int size = 8;
				for(int i=0; i<28; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_UOW_SET_VALUE_KEY_DATA
 
	public class _CM_UOW_SET_VALUE_KEY_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_UOW_SET_VALUE_KEY_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_UOW_SET_VALUE_KEY_DATA"": [ 16, {
				 ""PreparedCell"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""OldValueCell"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""NameLength"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""DataSize"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PreparedCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 OldValueCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt16 NameLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt32 DataSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _MI_PARTITION_STATE
 
	public class _MI_PARTITION_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PARTITION_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 192; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PARTITION_STATE"": [ 192, {
				 ""PartitionLock"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""PartitionIdLock"": [ 8, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""InitialPartitionIdBits"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""PartitionList"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PartitionIdBitmap"": [ 40, [ ""Pointer"", ""{\""target\"":\""_RTL_BITMAP\""}"" ]],
				 ""InitialPartitionIdBitmap"": [ 48, [ ""_RTL_BITMAP"", ""null"" ]],
				 ""TempPartitionPointers"": [ 64, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_MI_PARTITION\""}}"" ]],
				 ""Partition"": [ 72, [ ""Pointer"", ""{\""target\"":\""_MI_PARTITION*\""}"" ]],
				 ""TotalPagesInChildPartitions"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""CrossPartitionDenials"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""MultiplePartitionsExist"": [ 92, [ ""Byte"", ""null"" ]],
				 ""HugeIoPfnBitMap"": [ 96, [ ""_RTL_BITMAP_EX"", ""null"" ]],
				 ""HugePfnDatabase"": [ 112, [ ""Pointer"", ""{\""target\"":\""_MI_HUGE_PFN\""}"" ]],
				 ""HugeRangesLock"": [ 128, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PartitionLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _EX_PUSH_LOCK PartitionIdLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 InitialPartitionIdBits { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _LIST_ENTRY PartitionList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 PartitionIdBitmap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _RTL_BITMAP InitialPartitionIdBitmap
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _MI_PARTITION[] TempPartitionPointers
		{
			get
			{
				_MI_PARTITION[] returnValue = new _MI_PARTITION[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _MI_PARTITION(_StructureData, (i * size) + _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt64 Partition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 TotalPagesInChildPartitions { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt32 CrossPartitionDenials { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public Byte MultiplePartitionsExist{ get { return _StructureData[_BufferOffset +92]; } }
		public _RTL_BITMAP_EX HugeIoPfnBitMap
		{
			get
			{
				_RTL_BITMAP_EX returnValue = new _RTL_BITMAP_EX(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt64 HugePfnDatabase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 HugeRangesLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
	}
	#endregion
	#region _MI_ENCLAVE_STATE
 
	public class _MI_ENCLAVE_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_ENCLAVE_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_ENCLAVE_STATE"": [ 72, {
				 ""EnclaveRegions"": [ 0, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""EnclaveMetadataPage"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EnclaveMetadataBitMap"": [ 16, [ ""Pointer"", ""{\""target\"":\""_RTL_BITMAP\""}"" ]],
				 ""EnclaveMetadataEntryLock"": [ 24, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""EnclaveMetadataPageLock"": [ 32, [ ""Int32"", ""null"" ]],
				 ""EnclaveList"": [ 40, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""EnclaveListLock"": [ 56, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""ShutdownRundown"": [ 64, [ ""_EX_RUNDOWN_REF"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_AVL_TREE EnclaveRegions
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 EnclaveMetadataPage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 EnclaveMetadataBitMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _EX_PUSH_LOCK EnclaveMetadataEntryLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public Int32 EnclaveMetadataPageLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 32); } }
		public _LIST_ENTRY EnclaveList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK EnclaveListLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _EX_RUNDOWN_REF ShutdownRundown
		{
			get
			{
				_EX_RUNDOWN_REF returnValue = new _EX_RUNDOWN_REF(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _POP_THERMAL_ZONE
 
	public class _POP_THERMAL_ZONE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_THERMAL_ZONE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1056; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_THERMAL_ZONE"": [ 1056, {
				 ""PolicyDevice"": [ 0, [ ""_POP_POLICY_DEVICE"", ""null"" ]],
				 ""Link"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeviceType"": [ 16, [ ""Enumeration"", ""{\""enum_name\"":\""POWER_POLICY_DEVICE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Notification"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Name"": [ 32, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""Device"": [ 48, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""Irp"": [ 56, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""State"": [ 64, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 65, [ ""Byte"", ""null"" ]],
				 ""Removing"": [ 66, [ ""Byte"", ""null"" ]],
				 ""Mode"": [ 67, [ ""Byte"", ""null"" ]],
				 ""PendingMode"": [ 68, [ ""Byte"", ""null"" ]],
				 ""ActivePoint"": [ 69, [ ""Byte"", ""null"" ]],
				 ""PendingActivePoint"": [ 70, [ ""Byte"", ""null"" ]],
				 ""Critical"": [ 71, [ ""Byte"", ""null"" ]],
				 ""ThermalStandby"": [ 72, [ ""Byte"", ""null"" ]],
				 ""OverThrottled"": [ 73, [ ""Byte"", ""null"" ]],
				 ""HighPrecisionThrottle"": [ 76, [ ""Int32"", ""null"" ]],
				 ""Throttle"": [ 80, [ ""Int32"", ""null"" ]],
				 ""PendingThrottle"": [ 84, [ ""Int32"", ""null"" ]],
				 ""ThrottleReasons"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""LastPassiveTime"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""SampleRate"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""LastTemp"": [ 108, [ ""UInt32"", ""null"" ]],
				 ""Info"": [ 112, [ ""_THERMAL_INFORMATION_EX"", ""null"" ]],
				 ""Policy"": [ 204, [ ""_THERMAL_POLICY"", ""null"" ]],
				 ""PolicyDriver"": [ 228, [ ""Byte"", ""null"" ]],
				 ""PollingRate"": [ 232, [ ""UInt32"", ""null"" ]],
				 ""LastTemperatureTime"": [ 240, [ ""UInt64"", ""null"" ]],
				 ""LastActiveStartTime"": [ 248, [ ""UInt64"", ""null"" ]],
				 ""LastPassiveStartTime"": [ 256, [ ""UInt64"", ""null"" ]],
				 ""WorkItem"": [ 264, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""ZoneUpdateTimer"": [ 296, [ ""_KTIMER2"", ""null"" ]],
				 ""Lock"": [ 432, [ ""_POP_RW_LOCK"", ""null"" ]],
				 ""ZoneStopped"": [ 448, [ ""_KEVENT"", ""null"" ]],
				 ""TemperatureUpdated"": [ 472, [ ""_KEVENT"", ""null"" ]],
				 ""InstanceId"": [ 496, [ ""UInt32"", ""null"" ]],
				 ""TelemetryTracker"": [ 504, [ ""_POP_THERMAL_TELEMETRY_TRACKER"", ""null"" ]],
				 ""Description"": [ 1040, [ ""_UNICODE_STRING"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _POP_POLICY_DEVICE PolicyDevice
		{
			get
			{
				_POP_POLICY_DEVICE returnValue = new _POP_POLICY_DEVICE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public POWER_POLICY_DEVICE_TYPE DeviceType { get { return (POWER_POLICY_DEVICE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 Notification { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _UNICODE_STRING Name
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 Device { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Irp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public Byte State{ get { return _StructureData[_BufferOffset +64]; } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +65]; } }
		public Byte Removing{ get { return _StructureData[_BufferOffset +66]; } }
		public Byte Mode{ get { return _StructureData[_BufferOffset +67]; } }
		public Byte PendingMode{ get { return _StructureData[_BufferOffset +68]; } }
		public Byte ActivePoint{ get { return _StructureData[_BufferOffset +69]; } }
		public Byte PendingActivePoint{ get { return _StructureData[_BufferOffset +70]; } }
		public Byte Critical{ get { return _StructureData[_BufferOffset +71]; } }
		public Byte ThermalStandby{ get { return _StructureData[_BufferOffset +72]; } }
		public Byte OverThrottled{ get { return _StructureData[_BufferOffset +73]; } }
		public Int32 HighPrecisionThrottle { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 76); } }
		public Int32 Throttle { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 80); } }
		public Int32 PendingThrottle { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 ThrottleReasons { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt64 LastPassiveTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt32 SampleRate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 LastTemp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public _THERMAL_INFORMATION_EX Info
		{
			get
			{
				_THERMAL_INFORMATION_EX returnValue = new _THERMAL_INFORMATION_EX(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public _THERMAL_POLICY Policy
		{
			get
			{
				_THERMAL_POLICY returnValue = new _THERMAL_POLICY(_StructureData, _BufferOffset + 204);
				return returnValue;
			}
		}
		public Byte PolicyDriver{ get { return _StructureData[_BufferOffset +228]; } }
		public UInt32 PollingRate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 232); } }
		public UInt64 LastTemperatureTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 LastActiveStartTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public UInt64 LastPassiveStartTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public _WORK_QUEUE_ITEM WorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 264);
				return returnValue;
			}
		}
		public _KTIMER2 ZoneUpdateTimer
		{
			get
			{
				_KTIMER2 returnValue = new _KTIMER2(_StructureData, _BufferOffset + 296);
				return returnValue;
			}
		}
		public _POP_RW_LOCK Lock
		{
			get
			{
				_POP_RW_LOCK returnValue = new _POP_RW_LOCK(_StructureData, _BufferOffset + 432);
				return returnValue;
			}
		}
		public _KEVENT ZoneStopped
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 448);
				return returnValue;
			}
		}
		public _KEVENT TemperatureUpdated
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 472);
				return returnValue;
			}
		}
		public UInt32 InstanceId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 496); } }
		public _POP_THERMAL_TELEMETRY_TRACKER TelemetryTracker
		{
			get
			{
				_POP_THERMAL_TELEMETRY_TRACKER returnValue = new _POP_THERMAL_TELEMETRY_TRACKER(_StructureData, _BufferOffset + 504);
				return returnValue;
			}
		}
		public _UNICODE_STRING Description
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 1040);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_DIRTY_VECTOR_LOG
 
	public class _CM_DIRTY_VECTOR_LOG
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_DIRTY_VECTOR_LOG(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_DIRTY_VECTOR_LOG"": [ 1160, {
				 ""Next"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Size"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Log"": [ 8, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Next { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _CM_DIRTY_VECTOR_LOG_ENTRY[] Log
		{
			get
			{
				_CM_DIRTY_VECTOR_LOG_ENTRY[] returnValue = new _CM_DIRTY_VECTOR_LOG_ENTRY[16];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<16; i++ )
					returnValue[i] = new _CM_DIRTY_VECTOR_LOG_ENTRY(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PCI_BUSMASTER_DESCRIPTOR
 
	public class _PCI_BUSMASTER_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCI_BUSMASTER_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCI_BUSMASTER_DESCRIPTOR"": [ 12, {
				 ""Type"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_PCI_BUSMASTER_RID_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Segment"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DeviceRid"": [ 8, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""BridgeRid"": [ 8, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""MultipleBridges"": [ 8, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _PCI_BUSMASTER_RID_TYPE Type { get { return (_PCI_BUSMASTER_RID_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Segment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _ANONYMOUS_TAG DeviceRid
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG BridgeRid
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG MultipleBridges
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HVP_VIEW_MAP
 
	public class _HVP_VIEW_MAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HVP_VIEW_MAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HVP_VIEW_MAP"": [ 56, {
				 ""SectionReference"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StorageEndFileOffset"": [ 8, [ ""Int64"", ""null"" ]],
				 ""SectionEndFileOffset"": [ 16, [ ""Int64"", ""null"" ]],
				 ""ProcessTuple"": [ 24, [ ""Pointer"", ""{\""target\"":\""_CMSI_PROCESS_TUPLE\""}"" ]],
				 ""Flags"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""ViewTree"": [ 40, [ ""_RTL_RB_TREE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SectionReference { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Int64 StorageEndFileOffset { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 8); } }
		public Int64 SectionEndFileOffset { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 ProcessTuple { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public _RTL_RB_TREE ViewTree
		{
			get
			{
				_RTL_RB_TREE returnValue = new _RTL_RB_TREE(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
	}
	#endregion
	#region _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST
 
	public class _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TRIAGE_PNP_DEVICE_COMPLETION_REQUEST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TRIAGE_PNP_DEVICE_COMPLETION_REQUEST"": [ 24, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeviceNode"": [ 16, [ ""Pointer"", ""{\""target\"":\""_TRIAGE_DEVICE_NODE\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 DeviceNode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _HIVE_WRITE_WAIT_QUEUE
 
	public class _HIVE_WRITE_WAIT_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HIVE_WRITE_WAIT_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HIVE_WRITE_WAIT_QUEUE"": [ 16, {
				 ""ActiveThread"": [ 0, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""WaitList"": [ 8, [ ""Pointer"", ""{\""target\"":\""_HIVE_WAIT_PACKET\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ActiveThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 WaitList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _BUS_EXTENSION_LIST
 
	public class _BUS_EXTENSION_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _BUS_EXTENSION_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_BUS_EXTENSION_LIST"": [ 16, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BusExtension"": [ 8, [ ""Pointer"", ""{\""target\"":\""_PI_BUS_EXTENSION\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 BusExtension { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _HAL_LOG_REGISTER_CONTEXT
 
	public class _HAL_LOG_REGISTER_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HAL_LOG_REGISTER_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HAL_LOG_REGISTER_CONTEXT"": [ 16, {
				 ""LogRoutine"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Flag"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 LogRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Flag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _DEVICE_OBJECT_LIST_ENTRY
 
	public class _DEVICE_OBJECT_LIST_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_OBJECT_LIST_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_OBJECT_LIST_ENTRY"": [ 24, {
				 ""DeviceObject"": [ 0, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""RelationLevel"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_DEVICE_RELATION_LEVEL\"",\""target\"":\""UInt32\""}"" ]],
				 ""Ordinal"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _DEVICE_RELATION_LEVEL RelationLevel { get { return (_DEVICE_RELATION_LEVEL)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Ordinal { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _HBIN
 
	public class _HBIN
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HBIN(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HBIN"": [ 32, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""FileOffset"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Size"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Reserved1"": [ 12, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""TimeStamp"": [ 20, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Spare"": [ 28, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 FileOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32[] Reserved1
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 12);
				return returnValue;
			}
		}
		public _LARGE_INTEGER TimeStamp
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
		public UInt32 Spare { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _PS_PROTECTION
 
	public class _PS_PROTECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_PROTECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_PROTECTION"": [ 1, {
				 ""Level"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Type"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Audit"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""Signer"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte Level{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Type
		{
			get
			{
				// start: 0  end: 3  Mask: 0000000000000111
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 7) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Audit
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte Signer
		{
			get
			{
				// start: 4  end: 8  Mask: 0000000011110000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 240) >> 4;
				return (Byte)value2;
			}
		}
	}
	#endregion
	#region _MMPFNENTRY3
 
	public class _MMPFNENTRY3
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPFNENTRY3(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPFNENTRY3"": [ 1, {
				 ""Priority"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""OnProtectedStandby"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""InPageError"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""SystemChargedPage"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""RemovalRequested"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""ParityError"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte Priority
		{
			get
			{
				// start: 0  end: 3  Mask: 0000000000000111
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 7) >> 0;
				return (Byte)value2;
			}
		}
		public Byte OnProtectedStandby
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte InPageError
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte SystemChargedPage
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte RemovalRequested
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 64) >> 6;
				return (Byte)value2;
			}
		}
		public Byte ParityError
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 128) >> 7;
				return (Byte)value2;
			}
		}
	}
	#endregion
	#region _SEP_SID_VALUES_BLOCK
 
	public class _SEP_SID_VALUES_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEP_SID_VALUES_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEP_SID_VALUES_BLOCK"": [ 32, {
				 ""BlockLength"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ReferenceCount"": [ 8, [ ""Int64"", ""null"" ]],
				 ""SidCount"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""SidValuesStart"": [ 24, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BlockLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int64 ReferenceCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 SidCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 SidValuesStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _MM_PAGE_ACCESS_INFO
 
	public class _MM_PAGE_ACCESS_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MM_PAGE_ACCESS_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MM_PAGE_ACCESS_INFO"": [ 8, {
				 ""Flags"": [ 0, [ ""_MM_PAGE_ACCESS_INFO_FLAGS"", ""null"" ]],
				 ""FileOffset"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""VirtualAddress"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PointerProtoPte"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _MM_PAGE_ACCESS_INFO_FLAGS Flags
		{
			get
			{
				_MM_PAGE_ACCESS_INFO_FLAGS returnValue = new _MM_PAGE_ACCESS_INFO_FLAGS(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 FileOffset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 VirtualAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 PointerProtoPte { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _NT_TIB64
 
	public class _NT_TIB64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _NT_TIB64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_NT_TIB64"": [ 56, {
				 ""ExceptionList"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""StackBase"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""StackLimit"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""SubSystemTib"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""FiberData"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""Version"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""ArbitraryUserPointer"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""Self"": [ 48, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ExceptionList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 StackBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 StackLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 SubSystemTib { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 FiberData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 ArbitraryUserPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 Self { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _EX_RUNDOWN_REF_CACHE_AWARE
 
	public class _EX_RUNDOWN_REF_CACHE_AWARE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_RUNDOWN_REF_CACHE_AWARE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_RUNDOWN_REF_CACHE_AWARE"": [ 24, {
				 ""RunRefs"": [ 0, [ ""Pointer"", ""{\""target\"":\""_EX_RUNDOWN_REF\""}"" ]],
				 ""PoolToFree"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RunRefSize"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Number"": [ 20, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 RunRefs { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 PoolToFree { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 RunRefSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Number { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _MI_SESSION_DRIVER_UNLOAD
 
	public class _MI_SESSION_DRIVER_UNLOAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SESSION_DRIVER_UNLOAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SESSION_DRIVER_UNLOAD"": [ 8, {
				 ""Function"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FunctionValue"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Function { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 FunctionValue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _MM_PAGE_ACCESS_INFO_FLAGS
 
	public class _MM_PAGE_ACCESS_INFO_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MM_PAGE_ACCESS_INFO_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MM_PAGE_ACCESS_INFO_FLAGS"": [ 4, {
				 ""File"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""Private"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG File
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG Private
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MM_SHARED_VAD_FLAGS
 
	public class _MM_SHARED_VAD_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MM_SHARED_VAD_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MM_SHARED_VAD_FLAGS"": [ 4, {
				 ""Lock"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""LockContended"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""DeleteInProgress"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""NoChange"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""VadType"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""PreferredNode"": [ 0, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""PageSize"": [ 0, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""PrivateMemoryAlwaysClear"": [ 0, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""PrivateFixup"": [ 0, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""HotPatchAllowed"": [ 0, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Lock
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 LockContended
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 DeleteInProgress
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 NoChange
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 VadType
		{
			get
			{
				// start: 4  end: 7  Mask: 0000000001110000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 112) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 Protection
		{
			get
			{
				// start: 7  end: 12  Mask: 0000111110000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 3968) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 PreferredNode
		{
			get
			{
				// start: 12  end: 18  Mask: 111111000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 258048) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 PageSize
		{
			get
			{
				// start: 18  end: 20  Mask: 11000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 786432) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 PrivateMemoryAlwaysClear
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 PrivateFixup
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 HotPatchAllowed
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _CM_TRANS_PTR
 
	public class _CM_TRANS_PTR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_TRANS_PTR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_TRANS_PTR"": [ 8, {
				 ""LightWeight"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""TransPtr"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 LightWeight
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 TransPtr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _CM_WORKITEM
 
	public class _CM_WORKITEM
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_WORKITEM(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_WORKITEM"": [ 40, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Private"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""WorkerRoutine"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Parameter"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Private { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 WorkerRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 Parameter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _CM_KEY_HASH
 
	public class _CM_KEY_HASH
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_HASH(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_HASH"": [ 32, {
				 ""ConvKey"": [ 0, [ ""_CM_PATH_HASH"", ""null"" ]],
				 ""NextHash"": [ 8, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_HASH\""}"" ]],
				 ""KeyHive"": [ 16, [ ""Pointer"", ""{\""target\"":\""_HHIVE\""}"" ]],
				 ""KeyCell"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _CM_PATH_HASH ConvKey
		{
			get
			{
				_CM_PATH_HASH returnValue = new _CM_PATH_HASH(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 NextHash { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 KeyHive { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 KeyCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _KGATE
 
	public class _KGATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KGATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KGATE"": [ 24, {
				 ""Header"": [ 0, [ ""_DISPATCHER_HEADER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _DISPATCHER_HEADER Header
		{
			get
			{
				_DISPATCHER_HEADER returnValue = new _DISPATCHER_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _flags
 
	public class _flags
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _flags(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_flags"": [ 1, {
				 ""Removable"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""GroupAssigned"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""GroupCommitted"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""GroupAssignmentFixed"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""ProcessorOnly"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""SmtSetsPresent"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""Fill"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte Removable
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte GroupAssigned
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte GroupCommitted
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte GroupAssignmentFixed
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte ProcessorOnly
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte SmtSetsPresent
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte Fill
		{
			get
			{
				// start: 6  end: 8  Mask: 0000000011000000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 192) >> 6;
				return (Byte)value2;
			}
		}
	}
	#endregion
	#region _AMD64_DBGKD_CONTROL_SET
 
	public class _AMD64_DBGKD_CONTROL_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _AMD64_DBGKD_CONTROL_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_AMD64_DBGKD_CONTROL_SET"": [ 28, {
				 ""TraceFlag"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Dr7"": [ 4, [ ""UInt64"", ""null"" ]],
				 ""CurrentSymbolStart"": [ 12, [ ""UInt64"", ""null"" ]],
				 ""CurrentSymbolEnd"": [ 20, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 TraceFlag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 Dr7 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4); } }
		public UInt64 CurrentSymbolStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 12); } }
		public UInt64 CurrentSymbolEnd { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _PS_IO_CONTROL_ENTRY
 
	public class _PS_IO_CONTROL_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_IO_CONTROL_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_IO_CONTROL_ENTRY"": [ 56, {
				 ""VolumeTreeNode"": [ 0, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""FreeListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ReservedForParentValue"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""VolumeKey"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""Rundown"": [ 32, [ ""_EX_RUNDOWN_REF"", ""null"" ]],
				 ""IoControl"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VolumeIoAttribution"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BALANCED_NODE VolumeTreeNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY FreeListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 ReservedForParentValue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 VolumeKey { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _EX_RUNDOWN_REF Rundown
		{
			get
			{
				_EX_RUNDOWN_REF returnValue = new _EX_RUNDOWN_REF(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 IoControl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 VolumeIoAttribution { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _MI_HUGE_PFN
 
	public class _MI_HUGE_PFN
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_HUGE_PFN(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_HUGE_PFN"": [ 8, {
				 ""u1"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_HP_LFH_CONFIG
 
	public class _RTL_HP_LFH_CONFIG
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_HP_LFH_CONFIG(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_HP_LFH_CONFIG"": [ 4, {
				 ""MaxBlockSize"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""WitholdPageCrossingBlocks"": [ 2, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""DisableRandomization"": [ 2, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 MaxBlockSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 WitholdPageCrossingBlocks
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 DisableRandomization
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 2) >> 1;
				return (UInt16)value2;
			}
		}
	}
	#endregion
	#region _CM_UOW_SET_VALUE_LIST_DATA
 
	public class _CM_UOW_SET_VALUE_LIST_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_UOW_SET_VALUE_LIST_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_UOW_SET_VALUE_LIST_DATA"": [ 12, {
				 ""RefCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ValueList"": [ 4, [ ""_CHILD_LIST"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 RefCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _CHILD_LIST ValueList
		{
			get
			{
				_CHILD_LIST returnValue = new _CHILD_LIST(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _VF_TRACKER_STAMP
 
	public class _VF_TRACKER_STAMP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VF_TRACKER_STAMP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VF_TRACKER_STAMP"": [ 16, {
				 ""Thread"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Flags"": [ 8, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""OldIrql"": [ 9, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""NewIrql"": [ 10, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Processor"": [ 11, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Byte Flags
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				Byte value = _StructureData[_BufferOffset + 8];
				var value2 = (value & 255) >> 0;
				return (Byte)value2;
			}
		}
		public Byte OldIrql
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				Byte value = _StructureData[_BufferOffset + 9];
				var value2 = (value & 255) >> 0;
				return (Byte)value2;
			}
		}
		public Byte NewIrql
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				Byte value = _StructureData[_BufferOffset + 10];
				var value2 = (value & 255) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Processor
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				Byte value = _StructureData[_BufferOffset + 11];
				var value2 = (value & 255) >> 0;
				return (Byte)value2;
			}
		}
	}
	#endregion
	#region _HEAP_LFH_AFFINITY_SLOT
 
	public class _HEAP_LFH_AFFINITY_SLOT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_LFH_AFFINITY_SLOT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_LFH_AFFINITY_SLOT"": [ 64, {
				 ""State"": [ 0, [ ""_HEAP_LFH_SUBSEGMENT_OWNER"", ""null"" ]],
				 ""ActiveSubsegment"": [ 56, [ ""_HEAP_LFH_FAST_REF"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _HEAP_LFH_SUBSEGMENT_OWNER State
		{
			get
			{
				_HEAP_LFH_SUBSEGMENT_OWNER returnValue = new _HEAP_LFH_SUBSEGMENT_OWNER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _HEAP_LFH_FAST_REF ActiveSubsegment
		{
			get
			{
				_HEAP_LFH_FAST_REF returnValue = new _HEAP_LFH_FAST_REF(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
	}
	#endregion
	#region _VI_DEADLOCK_THREAD
 
	public class _VI_DEADLOCK_THREAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VI_DEADLOCK_THREAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VI_DEADLOCK_THREAD"": [ 56, {
				 ""Thread"": [ 0, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""CurrentSpinNode"": [ 8, [ ""Pointer"", ""{\""target\"":\""_VI_DEADLOCK_NODE\""}"" ]],
				 ""CurrentOtherNode"": [ 16, [ ""Pointer"", ""{\""target\"":\""_VI_DEADLOCK_NODE\""}"" ]],
				 ""ListEntry"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FreeListEntry"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""NodeCount"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""PagingCount"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""ThreadUsesEresources"": [ 48, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 CurrentSpinNode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 CurrentOtherNode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LIST_ENTRY FreeListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 NodeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 PagingCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public Byte ThreadUsesEresources{ get { return _StructureData[_BufferOffset +48]; } }
	}
	#endregion
	#region _ARBITER_RETEST_ALLOCATION_PARAMETERS
 
	public class _ARBITER_RETEST_ALLOCATION_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_RETEST_ALLOCATION_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_RETEST_ALLOCATION_PARAMETERS"": [ 24, {
				 ""ArbitrationList"": [ 0, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""AllocateFromCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""AllocateFrom"": [ 16, [ ""Pointer"", ""{\""target\"":\""_CM_PARTIAL_RESOURCE_DESCRIPTOR\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ArbitrationList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 AllocateFromCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 AllocateFrom { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _KPRCBFLAG
 
	public class _KPRCBFLAG
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KPRCBFLAG(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KPRCBFLAG"": [ 4, {
				 ""PrcbFlags"": [ 0, [ ""Int32"", ""null"" ]],
				 ""BamQosLevel"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""PendingQosUpdate"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""CacheIsolationEnabled"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""TracepointActive"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""PrcbFlagsReserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 PrcbFlags { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 BamQosLevel
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 255) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 PendingQosUpdate
		{
			get
			{
				// start: 8  end: 10  Mask: 0000001100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 768) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 CacheIsolationEnabled
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 TracepointActive
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 PrcbFlagsReserved
		{
			get
			{
				// start: 12  end: 32  Mask: 11111111111111111111000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294963200) >> 12;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _MI_SUBSECTION_ENTRY1
 
	public class _MI_SUBSECTION_ENTRY1
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SUBSECTION_ENTRY1(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SUBSECTION_ENTRY1"": [ 4, {
				 ""CrossPartitionReferences"": [ 0, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""SubsectionMappedLarge"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 CrossPartitionReferences
		{
			get
			{
				// start: 0  end: 30  Mask: 111111111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1073741823) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 SubsectionMappedLarge
		{
			get
			{
				// start: 30  end: 32  Mask: 11000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 3221225472) >> 30;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _POP_ACTION_TRIGGER
 
	public class _POP_ACTION_TRIGGER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_ACTION_TRIGGER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_ACTION_TRIGGER"": [ 24, {
				 ""Type"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""POWER_POLICY_DEVICE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Wait"": [ 8, [ ""Pointer"", ""{\""target\"":\""_POP_TRIGGER_WAIT\""}"" ]],
				 ""Battery"": [ 16, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""Button"": [ 16, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public POWER_POLICY_DEVICE_TYPE Type { get { return (POWER_POLICY_DEVICE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 Wait { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _ANONYMOUS_TAG Battery
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG Button
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_ATOM_TABLE
 
	public class _RTL_ATOM_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_ATOM_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_ATOM_TABLE"": [ 40, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ReferenceCount"": [ 4, [ ""Int32"", ""null"" ]],
				 ""PushLock"": [ 8, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""ExHandleTable"": [ 16, [ ""Pointer"", ""{\""target\"":\""_HANDLE_TABLE\""}"" ]],
				 ""Flags"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""NumberOfBuckets"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""Buckets"": [ 32, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_RTL_ATOM_TABLE_ENTRY\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 ReferenceCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public _EX_PUSH_LOCK PushLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 ExHandleTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 NumberOfBuckets { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public _RTL_ATOM_TABLE_ENTRY[] Buckets
		{
			get
			{
				_RTL_ATOM_TABLE_ENTRY[] returnValue = new _RTL_ATOM_TABLE_ENTRY[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _RTL_ATOM_TABLE_ENTRY(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KTIMER2
 
	public class _KTIMER2
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTIMER2(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 136; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTIMER2"": [ 136, {
				 ""Header"": [ 0, [ ""_DISPATCHER_HEADER"", ""null"" ]],
				 ""RbNodes"": [ 24, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""ListEntry"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DueTime"": [ 72, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""Period"": [ 88, [ ""Int64"", ""null"" ]],
				 ""Callback"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CallbackContext"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DisableCallback"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DisableContext"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AbsoluteSystemTime"": [ 128, [ ""Byte"", ""null"" ]],
				 ""TypeFlags"": [ 129, [ ""Byte"", ""null"" ]],
				 ""Unused"": [ 129, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""IdleResilient"": [ 129, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""HighResolution"": [ 129, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""NoWake"": [ 129, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""PseudoHighRes"": [ 129, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""Unused1"": [ 129, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""CollectionIndex"": [ 130, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public _DISPATCHER_HEADER Header
		{
			get
			{
				_DISPATCHER_HEADER returnValue = new _DISPATCHER_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _RTL_BALANCED_NODE[] RbNodes
		{
			get
			{
				_RTL_BALANCED_NODE[] returnValue = new _RTL_BALANCED_NODE[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _RTL_BALANCED_NODE(_StructureData, (i * size) + _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64[] DueTime
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 72);
				return returnValue;
			}
		}
		public Int64 Period { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 Callback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 CallbackContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 DisableCallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 DisableContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public Byte AbsoluteSystemTime{ get { return _StructureData[_BufferOffset +128]; } }
		public Byte TypeFlags{ get { return _StructureData[_BufferOffset +129]; } }
		public Byte Unused
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 129];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte IdleResilient
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 129];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte HighResolution
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 129];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte NoWake
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 129];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte PseudoHighRes
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 129];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte Unused1
		{
			get
			{
				// start: 5  end: 8  Mask: 0000000011100000
				Byte value = _StructureData[_BufferOffset + 129];
				var value2 = (value & 224) >> 5;
				return (Byte)value2;
			}
		}
		public Byte[] CollectionIndex
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 130];
				return returnValue;
			}
		}
	}
	#endregion
	#region _ALPC_PROCESS_CONTEXT
 
	public class _ALPC_PROCESS_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ALPC_PROCESS_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ALPC_PROCESS_CONTEXT"": [ 32, {
				 ""Lock"": [ 0, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""ViewListHead"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PagedPoolQuotaCache"": [ 24, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _EX_PUSH_LOCK Lock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY ViewListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 PagedPoolQuotaCache { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region __WIL__WNF_USER_SUBSCRIPTION
 
	public class __WIL__WNF_USER_SUBSCRIPTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public __WIL__WNF_USER_SUBSCRIPTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""__WIL__WNF_USER_SUBSCRIPTION"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _MI_SESSION_STATE
 
	public class _MI_SESSION_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SESSION_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4264; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SESSION_STATE"": [ 4264, {
				 ""SystemSession"": [ 0, [ ""_MMSESSION"", ""null"" ]],
				 ""CodePageEdited"": [ 32, [ ""Byte"", ""null"" ]],
				 ""DynamicVaBitBuffer"": [ 40, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]],
				 ""DynamicVaBitBufferPages"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""DynamicVaStart"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ImageVaStart"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SystemViewBuckets"": [ 72, [ ""Array"", ""{\""count\"":256,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""DynamicPtesBitBuffer"": [ 4168, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""IdLock"": [ 4176, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""LeaderProcess"": [ 4184, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""InitializeLock"": [ 4192, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""WorkingSetList"": [ 4200, [ ""Pointer"", ""{\""target\"":\""_MMWSL_INSTANCE\""}"" ]],
				 ""SessionBase"": [ 4208, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SessionCore"": [ 4216, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SessionIdNodes"": [ 4224, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""DeleteInProgressEvent"": [ 4232, [ ""_KEVENT"", ""null"" ]],
				 ""DeleteInProgressCount"": [ 4256, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _MMSESSION SystemSession
		{
			get
			{
				_MMSESSION returnValue = new _MMSESSION(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte CodePageEdited{ get { return _StructureData[_BufferOffset +32]; } }
		public UInt64 DynamicVaBitBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 DynamicVaBitBufferPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 DynamicVaStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 ImageVaStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public _MI_HUGE_SYSTEM_VIEW_HEAD[] SystemViewBuckets
		{
			get
			{
				_MI_HUGE_SYSTEM_VIEW_HEAD[] returnValue = new _MI_HUGE_SYSTEM_VIEW_HEAD[256];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<256; i++ )
					returnValue[i] = new _MI_HUGE_SYSTEM_VIEW_HEAD(_StructureData, (i * size) + _BufferOffset + 72);
				return returnValue;
			}
		}
		public UInt64 DynamicPtesBitBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4168); } }
		public _EX_PUSH_LOCK IdLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 4176);
				return returnValue;
			}
		}
		public UInt64 LeaderProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4184); } }
		public _EX_PUSH_LOCK InitializeLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 4192);
				return returnValue;
			}
		}
		public UInt64 WorkingSetList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4200); } }
		public UInt64 SessionBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4208); } }
		public UInt64 SessionCore { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4216); } }
		public _RTL_AVL_TREE SessionIdNodes
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 4224);
				return returnValue;
			}
		}
		public _KEVENT DeleteInProgressEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 4232);
				return returnValue;
			}
		}
		public UInt32 DeleteInProgressCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4256); } }
	}
	#endregion
	#region _XSTATE_CONFIGURATION
 
	public class _XSTATE_CONFIGURATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _XSTATE_CONFIGURATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 824; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_XSTATE_CONFIGURATION"": [ 824, {
				 ""EnabledFeatures"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""EnabledVolatileFeatures"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Size"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ControlFlags"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""OptimizedSave"": [ 20, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""CompactionEnabled"": [ 20, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""Features"": [ 24, [ ""Array"", ""{\""count\"":64,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""EnabledSupervisorFeatures"": [ 536, [ ""UInt64"", ""null"" ]],
				 ""AlignedFeatures"": [ 544, [ ""UInt64"", ""null"" ]],
				 ""AllFeatureSize"": [ 552, [ ""UInt32"", ""null"" ]],
				 ""AllFeatures"": [ 556, [ ""Array"", ""{\""count\"":64,\""target\"":\""UInt32\""}"" ]],
				 ""EnabledUserVisibleSupervisorFeatures"": [ 816, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 EnabledFeatures { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 EnabledVolatileFeatures { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ControlFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 OptimizedSave
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 20);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 CompactionEnabled
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 20);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public _XSTATE_FEATURE[] Features
		{
			get
			{
				_XSTATE_FEATURE[] returnValue = new _XSTATE_FEATURE[64];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<64; i++ )
					returnValue[i] = new _XSTATE_FEATURE(_StructureData, (i * size) + _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 EnabledSupervisorFeatures { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 536); } }
		public UInt64 AlignedFeatures { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 544); } }
		public UInt32 AllFeatureSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 552); } }
		public UInt32[] AllFeatures
		{
			get
			{
				UInt32[] returnValue = new UInt32[64];
				for(int i=0; i<64; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 556);
				return returnValue;
			}
		}
		public UInt64 EnabledUserVisibleSupervisorFeatures { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 816); } }
	}
	#endregion
	#region _OBJECT_SYMBOLIC_LINK
 
	public class _OBJECT_SYMBOLIC_LINK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_SYMBOLIC_LINK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_SYMBOLIC_LINK"": [ 40, {
				 ""CreationTime"": [ 0, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""LinkTarget"": [ 8, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""Callback"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CallbackContext"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DosDeviceDriveIndex"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""AccessMask"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LARGE_INTEGER CreationTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _UNICODE_STRING LinkTarget
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 Callback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 CallbackContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 DosDeviceDriveIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 AccessMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _MI_SECTION_STATE
 
	public class _MI_SECTION_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SECTION_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 832; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SECTION_STATE"": [ 832, {
				 ""SectionObjectPointersLock"": [ 0, [ ""Int32"", ""null"" ]],
				 ""SectionBasedRoot"": [ 8, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""SectionBasedLock"": [ 16, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""UnusedSegmentPagedPool"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""DataSectionProtectionMask"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""HighSectionBase"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PhysicalSubsection"": [ 48, [ ""_MSUBSECTION"", ""null"" ]],
				 ""PhysicalControlArea"": [ 192, [ ""_CONTROL_AREA"", ""null"" ]],
				 ""PurgingExtentPages"": [ 320, [ ""_MMPFNLIST"", ""null"" ]],
				 ""DanglingExtentPages"": [ 360, [ ""Pointer"", ""{\""target\"":\""_MMPFN\""}"" ]],
				 ""DanglingExtentsWorkItem"": [ 368, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""DanglingExtentsDeletionWaitList"": [ 400, [ ""_MI_EXTENT_DELETION_WAIT_BLOCK"", ""null"" ]],
				 ""FileOnlyMemoryPfnsCreated"": [ 432, [ ""Byte"", ""null"" ]],
				 ""DanglingExtentsWorkerActive"": [ 433, [ ""Byte"", ""null"" ]],
				 ""PurgingExtentsNeedWatchdog"": [ 434, [ ""Byte"", ""null"" ]],
				 ""PrototypePtesTree"": [ 440, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""PrototypePtesTreeSpinLock"": [ 448, [ ""Int32"", ""null"" ]],
				 ""RelocateBitmapsLock"": [ 456, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""ImageBitMapNative"": [ 464, [ ""_RTL_BITMAP_EX"", ""null"" ]],
				 ""ImageBiasNative"": [ 480, [ ""UInt64"", ""null"" ]],
				 ""OverflowArea"": [ 488, [ ""_MI_DLL_OVERFLOW_AREA"", ""null"" ]],
				 ""Wow"": [ 520, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""ImageBiasWow"": [ 584, [ ""UInt64"", ""null"" ]],
				 ""ImageBitMapWowScratch"": [ 592, [ ""_RTL_BITMAP_EX"", ""null"" ]],
				 ""ImageBitMap64Low"": [ 608, [ ""_RTL_BITMAP_EX"", ""null"" ]],
				 ""ImageBias64Low"": [ 624, [ ""UInt64"", ""null"" ]],
				 ""ApiSetSection"": [ 632, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ApiSetSchema"": [ 640, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ApiSetSchemaSize"": [ 648, [ ""UInt64"", ""null"" ]],
				 ""LostDataFiles"": [ 656, [ ""UInt32"", ""null"" ]],
				 ""LostDataPages"": [ 660, [ ""UInt32"", ""null"" ]],
				 ""ImageFailureReason"": [ 664, [ ""UInt32"", ""null"" ]],
				 ""CfgBitMapSection"": [ 672, [ ""Pointer"", ""{\""target\"":\""_SECTION\""}"" ]],
				 ""CfgBitMapControlArea"": [ 680, [ ""Pointer"", ""{\""target\"":\""_CONTROL_AREA\""}"" ]],
				 ""KernelCfgBitMap"": [ 688, [ ""_RTL_BITMAP_EX"", ""null"" ]],
				 ""KernelCfgBitMapLock"": [ 704, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""ImageCfgFailure"": [ 712, [ ""UInt32"", ""null"" ]],
				 ""RetpolineReservePages"": [ 716, [ ""UInt32"", ""null"" ]],
				 ""RetpolineStubMdl"": [ 720, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""KernelRetpolineBitMap"": [ 728, [ ""_RTL_BITMAP_EX"", ""null"" ]],
				 ""RetpolineRoutines"": [ 744, [ ""Pointer"", ""{\""target\"":\""_RTL_RETPOLINE_ROUTINES\""}"" ]],
				 ""RetpolineRevertPte"": [ 752, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""NonRetpolineImageLoadList"": [ 760, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""RetpolineStubPages"": [ 776, [ ""UInt32"", ""null"" ]],
				 ""RetpolineBootStatus"": [ 780, [ ""Int32"", ""null"" ]],
				 ""ImageBreakpointEnabled"": [ 784, [ ""UInt32"", ""null"" ]],
				 ""ImageBreakpointChecksum"": [ 788, [ ""UInt32"", ""null"" ]],
				 ""ImageBreakpointSize"": [ 792, [ ""UInt32"", ""null"" ]],
				 ""ImageValidationFailed"": [ 796, [ ""Int32"", ""null"" ]],
				 ""ImageExtentTree"": [ 800, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""ImageExtentTreeLock"": [ 808, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""HotPatchReserveSize"": [ 816, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 SectionObjectPointersLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public _RTL_AVL_TREE SectionBasedRoot
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK SectionBasedLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 UnusedSegmentPagedPool { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 DataSectionProtectionMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 HighSectionBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _MSUBSECTION PhysicalSubsection
		{
			get
			{
				_MSUBSECTION returnValue = new _MSUBSECTION(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _CONTROL_AREA PhysicalControlArea
		{
			get
			{
				_CONTROL_AREA returnValue = new _CONTROL_AREA(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public _MMPFNLIST PurgingExtentPages
		{
			get
			{
				_MMPFNLIST returnValue = new _MMPFNLIST(_StructureData, _BufferOffset + 320);
				return returnValue;
			}
		}
		public UInt64 DanglingExtentPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 360); } }
		public _WORK_QUEUE_ITEM DanglingExtentsWorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 368);
				return returnValue;
			}
		}
		public _MI_EXTENT_DELETION_WAIT_BLOCK DanglingExtentsDeletionWaitList
		{
			get
			{
				_MI_EXTENT_DELETION_WAIT_BLOCK returnValue = new _MI_EXTENT_DELETION_WAIT_BLOCK(_StructureData, _BufferOffset + 400);
				return returnValue;
			}
		}
		public Byte FileOnlyMemoryPfnsCreated{ get { return _StructureData[_BufferOffset +432]; } }
		public Byte DanglingExtentsWorkerActive{ get { return _StructureData[_BufferOffset +433]; } }
		public Byte PurgingExtentsNeedWatchdog{ get { return _StructureData[_BufferOffset +434]; } }
		public _RTL_AVL_TREE PrototypePtesTree
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 440);
				return returnValue;
			}
		}
		public Int32 PrototypePtesTreeSpinLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 448); } }
		public _EX_PUSH_LOCK RelocateBitmapsLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 456);
				return returnValue;
			}
		}
		public _RTL_BITMAP_EX ImageBitMapNative
		{
			get
			{
				_RTL_BITMAP_EX returnValue = new _RTL_BITMAP_EX(_StructureData, _BufferOffset + 464);
				return returnValue;
			}
		}
		public UInt64 ImageBiasNative { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 480); } }
		public _MI_DLL_OVERFLOW_AREA OverflowArea
		{
			get
			{
				_MI_DLL_OVERFLOW_AREA returnValue = new _MI_DLL_OVERFLOW_AREA(_StructureData, _BufferOffset + 488);
				return returnValue;
			}
		}
		public _MI_SECTION_WOW_STATE[] Wow
		{
			get
			{
				_MI_SECTION_WOW_STATE[] returnValue = new _MI_SECTION_WOW_STATE[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _MI_SECTION_WOW_STATE(_StructureData, (i * size) + _BufferOffset + 520);
				return returnValue;
			}
		}
		public UInt64 ImageBiasWow { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 584); } }
		public _RTL_BITMAP_EX ImageBitMapWowScratch
		{
			get
			{
				_RTL_BITMAP_EX returnValue = new _RTL_BITMAP_EX(_StructureData, _BufferOffset + 592);
				return returnValue;
			}
		}
		public _RTL_BITMAP_EX ImageBitMap64Low
		{
			get
			{
				_RTL_BITMAP_EX returnValue = new _RTL_BITMAP_EX(_StructureData, _BufferOffset + 608);
				return returnValue;
			}
		}
		public UInt64 ImageBias64Low { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 624); } }
		public UInt64 ApiSetSection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 632); } }
		public UInt64 ApiSetSchema { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 640); } }
		public UInt64 ApiSetSchemaSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 648); } }
		public UInt32 LostDataFiles { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 656); } }
		public UInt32 LostDataPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 660); } }
		public UInt32 ImageFailureReason { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 664); } }
		public UInt64 CfgBitMapSection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 672); } }
		public UInt64 CfgBitMapControlArea { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 680); } }
		public _RTL_BITMAP_EX KernelCfgBitMap
		{
			get
			{
				_RTL_BITMAP_EX returnValue = new _RTL_BITMAP_EX(_StructureData, _BufferOffset + 688);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK KernelCfgBitMapLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 704);
				return returnValue;
			}
		}
		public UInt32 ImageCfgFailure { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 712); } }
		public UInt32 RetpolineReservePages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 716); } }
		public UInt64 RetpolineStubMdl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 720); } }
		public _RTL_BITMAP_EX KernelRetpolineBitMap
		{
			get
			{
				_RTL_BITMAP_EX returnValue = new _RTL_BITMAP_EX(_StructureData, _BufferOffset + 728);
				return returnValue;
			}
		}
		public UInt64 RetpolineRoutines { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 744); } }
		public UInt64 RetpolineRevertPte { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 752); } }
		public _LIST_ENTRY NonRetpolineImageLoadList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 760);
				return returnValue;
			}
		}
		public UInt32 RetpolineStubPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 776); } }
		public Int32 RetpolineBootStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 780); } }
		public UInt32 ImageBreakpointEnabled { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 784); } }
		public UInt32 ImageBreakpointChecksum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 788); } }
		public UInt32 ImageBreakpointSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 792); } }
		public Int32 ImageValidationFailed { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 796); } }
		public _RTL_AVL_TREE ImageExtentTree
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 800);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK ImageExtentTreeLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 808);
				return returnValue;
			}
		}
		public UInt32 HotPatchReserveSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 816); } }
	}
	#endregion
	#region _RTL_ATOM_TABLE_ENTRY
 
	public class _RTL_ATOM_TABLE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_ATOM_TABLE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_ATOM_TABLE_ENTRY"": [ 48, {
				 ""HashLink"": [ 0, [ ""Pointer"", ""{\""target\"":\""_RTL_ATOM_TABLE_ENTRY\""}"" ]],
				 ""HandleIndex"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""Atom"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""Reference"": [ 16, [ ""_RTL_ATOM_TABLE_REFERENCE"", ""null"" ]],
				 ""NameLength"": [ 40, [ ""Byte"", ""null"" ]],
				 ""Name"": [ 42, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 HashLink { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt16 HandleIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 Atom { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public _RTL_ATOM_TABLE_REFERENCE Reference
		{
			get
			{
				_RTL_ATOM_TABLE_REFERENCE returnValue = new _RTL_ATOM_TABLE_REFERENCE(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public Byte NameLength{ get { return _StructureData[_BufferOffset +40]; } }
		public UInt16[] Name
		{
			get
			{
				UInt16[] returnValue = new UInt16[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 42);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WHEAP_ERROR_RECORD_WRAPPER_FLAGS
 
	public class _WHEAP_ERROR_RECORD_WRAPPER_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEAP_ERROR_RECORD_WRAPPER_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEAP_ERROR_RECORD_WRAPPER_FLAGS"": [ 4, {
				 ""Preallocated"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""FromPersistentStore"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""PlatformPfaControl"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""PlatformDirectedOffline"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""AsULONG"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Preallocated
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 FromPersistentStore
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 PlatformPfaControl
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 PlatformDirectedOffline
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 4  end: 32  Mask: 11111111111111111111111111110000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967280) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 AsULONG { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _CM_UOW_KEY_STATE_MODIFICATION
 
	public class _CM_UOW_KEY_STATE_MODIFICATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_UOW_KEY_STATE_MODIFICATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_UOW_KEY_STATE_MODIFICATION"": [ 20, {
				 ""RefCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SubKeyListCount"": [ 4, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""NewSubKeyList"": [ 12, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 RefCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32[] SubKeyListCount
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32[] NewSubKeyList
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 12);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_CONTROL_AREA_WAIT_BLOCK
 
	public class _MI_CONTROL_AREA_WAIT_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_CONTROL_AREA_WAIT_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_CONTROL_AREA_WAIT_BLOCK"": [ 40, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_MI_CONTROL_AREA_WAIT_BLOCK\""}"" ]],
				 ""WaitReason"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""WaitResponse"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Gate"": [ 16, [ ""_KGATE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 WaitReason { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 WaitResponse { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _KGATE Gate
		{
			get
			{
				_KGATE returnValue = new _KGATE(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_CRITICAL_SECTION
 
	public class _RTL_CRITICAL_SECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_CRITICAL_SECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_CRITICAL_SECTION"": [ 40, {
				 ""DebugInfo"": [ 0, [ ""Pointer"", ""{\""target\"":\""_RTL_CRITICAL_SECTION_DEBUG\""}"" ]],
				 ""LockCount"": [ 8, [ ""Int32"", ""null"" ]],
				 ""RecursionCount"": [ 12, [ ""Int32"", ""null"" ]],
				 ""OwningThread"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LockSemaphore"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SpinCount"": [ 32, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DebugInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Int32 LockCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public Int32 RecursionCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 OwningThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 LockSemaphore { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 SpinCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _PI_RESOURCE_ARBITER_ENTRY
 
	public class _PI_RESOURCE_ARBITER_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PI_RESOURCE_ARBITER_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PI_RESOURCE_ARBITER_ENTRY"": [ 112, {
				 ""DeviceArbiterList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ResourceType"": [ 16, [ ""Byte"", ""null"" ]],
				 ""ArbiterInterface"": [ 24, [ ""Pointer"", ""{\""target\"":\""_ARBITER_INTERFACE\""}"" ]],
				 ""DeviceNode"": [ 32, [ ""Pointer"", ""{\""target\"":\""_DEVICE_NODE\""}"" ]],
				 ""ResourceList"": [ 40, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""BestResourceList"": [ 56, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""BestConfig"": [ 72, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ActiveArbiterList"": [ 88, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""State"": [ 104, [ ""Byte"", ""null"" ]],
				 ""ResourcesChanged"": [ 105, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY DeviceArbiterList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte ResourceType{ get { return _StructureData[_BufferOffset +16]; } }
		public UInt64 ArbiterInterface { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 DeviceNode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _LIST_ENTRY ResourceList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _LIST_ENTRY BestResourceList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _LIST_ENTRY BestConfig
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _LIST_ENTRY ActiveArbiterList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public Byte State{ get { return _StructureData[_BufferOffset +104]; } }
		public Byte ResourcesChanged{ get { return _StructureData[_BufferOffset +105]; } }
	}
	#endregion
	#region _ETW_PERFECT_HASH_FUNCTION
 
	public class _ETW_PERFECT_HASH_FUNCTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_PERFECT_HASH_FUNCTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_PERFECT_HASH_FUNCTION"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _ETW_FILTER_HEADER
 
	public class _ETW_FILTER_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_FILTER_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 104; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_FILTER_HEADER"": [ 104, {
				 ""FilterFlags"": [ 0, [ ""Int32"", ""null"" ]],
				 ""PidFilter"": [ 8, [ ""Pointer"", ""{\""target\"":\""_ETW_FILTER_PID\""}"" ]],
				 ""ExeFilter"": [ 16, [ ""Pointer"", ""{\""target\"":\""_ETW_FILTER_STRING_TOKEN\""}"" ]],
				 ""PkgIdFilter"": [ 24, [ ""Pointer"", ""{\""target\"":\""_ETW_FILTER_STRING_TOKEN\""}"" ]],
				 ""PkgAppIdFilter"": [ 32, [ ""Pointer"", ""{\""target\"":\""_ETW_FILTER_STRING_TOKEN\""}"" ]],
				 ""ContainerFilter"": [ 40, [ ""Pointer"", ""{\""target\"":\""_ETW_FILTER_STRING_TOKEN\""}"" ]],
				 ""StackWalkIdFilter"": [ 48, [ ""Pointer"", ""{\""target\"":\""_ETW_PERFECT_HASH_FUNCTION\""}"" ]],
				 ""StackWalkNameFilter"": [ 56, [ ""Pointer"", ""{\""target\"":\""_ETW_FILTER_EVENT_NAME_DATA\""}"" ]],
				 ""StackWalkLevelKwFilter"": [ 64, [ ""Pointer"", ""{\""target\"":\""_EVENT_FILTER_LEVEL_KW\""}"" ]],
				 ""EventIdFilter"": [ 72, [ ""Pointer"", ""{\""target\"":\""_ETW_PERFECT_HASH_FUNCTION\""}"" ]],
				 ""PayloadFilter"": [ 80, [ ""Pointer"", ""{\""target\"":\""_ETW_PAYLOAD_FILTER\""}"" ]],
				 ""ProviderSideFilter"": [ 88, [ ""Pointer"", ""{\""target\"":\""_EVENT_FILTER_HEADER\""}"" ]],
				 ""EventNameFilter"": [ 96, [ ""Pointer"", ""{\""target\"":\""_ETW_FILTER_EVENT_NAME_DATA\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 FilterFlags { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 PidFilter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ExeFilter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 PkgIdFilter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 PkgAppIdFilter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 ContainerFilter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 StackWalkIdFilter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 StackWalkNameFilter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 StackWalkLevelKwFilter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 EventIdFilter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 PayloadFilter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 ProviderSideFilter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 EventNameFilter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
	}
	#endregion
	#region _MMPTE_SOFTWARE
 
	public class _MMPTE_SOFTWARE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPTE_SOFTWARE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPTE_SOFTWARE"": [ 8, {
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""PageFileReserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""PageFileAllocated"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""ColdPage"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""SwizzleBit"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""Prototype"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""Transition"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""PageFileLow"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""UsedPageTableEntries"": [ 0, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":16,\""target\"":\""UInt64\""}"" ]],
				 ""ShadowStack"": [ 0, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":26,\""target\"":\""UInt64\""}"" ]],
				 ""Unused"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":27,\""target\"":\""UInt64\""}"" ]],
				 ""PageFileHigh"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":32,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Valid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 PageFileReserved
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 PageFileAllocated
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 ColdPage
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt64)value2;
			}
		}
		public UInt64 SwizzleBit
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt64)value2;
			}
		}
		public UInt64 Protection
		{
			get
			{
				// start: 5  end: 10  Mask: 0000001111100000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 992) >> 5;
				return (UInt64)value2;
			}
		}
		public UInt64 Prototype
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 Transition
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 PageFileLow
		{
			get
			{
				// start: 12  end: 16  Mask: 1111000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 61440) >> 12;
				return (UInt64)value2;
			}
		}
		public UInt64 UsedPageTableEntries
		{
			get
			{
				// start: 16  end: 26  Mask: 11111111110000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 67043328) >> 16;
				return (UInt64)value2;
			}
		}
		public UInt64 ShadowStack
		{
			get
			{
				// start: 26  end: 27  Mask: 100000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 67108864) >> 26;
				return (UInt64)value2;
			}
		}
		public UInt64 Unused
		{
			get
			{
				// start: 27  end: 32  Mask: 11111000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4160749568) >> 27;
				return (UInt64)value2;
			}
		}
		public UInt64 PageFileHigh
		{
			get
			{
				// start: 32  end: 64  Mask: 1111111111111111111111111111111100000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744069414584320) >> 32;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _MM_DRIVER_VERIFIER_DATA
 
	public class _MM_DRIVER_VERIFIER_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MM_DRIVER_VERIFIER_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 168; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MM_DRIVER_VERIFIER_DATA"": [ 168, {
				 ""Level"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""RaiseIrqls"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""AcquireSpinLocks"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SynchronizeExecutions"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""AllocationsAttempted"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""AllocationsSucceeded"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""AllocationsSucceededSpecialPool"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""AllocationsWithNoTag"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""TrimRequests"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Trims"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""AllocationsFailed"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""AllocationsFailedDeliberately"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""Loads"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""Unloads"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""UnTrackedPool"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""UserTrims"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""CurrentPagedPoolAllocations"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""CurrentNonPagedPoolAllocations"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""PeakPagedPoolAllocations"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""PeakNonPagedPoolAllocations"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""PagedBytes"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""NonPagedBytes"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""PeakPagedBytes"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""PeakNonPagedBytes"": [ 104, [ ""UInt64"", ""null"" ]],
				 ""BurstAllocationsFailedDeliberately"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""SessionTrims"": [ 116, [ ""UInt32"", ""null"" ]],
				 ""OptionChanges"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""VerifyMode"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""PreviousBucketName"": [ 128, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ExecutePoolTypes"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""ExecutePageProtections"": [ 148, [ ""UInt32"", ""null"" ]],
				 ""ExecutePageMappings"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""ExecuteWriteSections"": [ 156, [ ""UInt32"", ""null"" ]],
				 ""SectionAlignmentFailures"": [ 160, [ ""UInt32"", ""null"" ]],
				 ""IATInExecutableSection"": [ 164, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Level { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 RaiseIrqls { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 AcquireSpinLocks { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 SynchronizeExecutions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 AllocationsAttempted { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 AllocationsSucceeded { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 AllocationsSucceededSpecialPool { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 AllocationsWithNoTag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 TrimRequests { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 Trims { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 AllocationsFailed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 AllocationsFailedDeliberately { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 Loads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 Unloads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 UnTrackedPool { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 UserTrims { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 CurrentPagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 CurrentNonPagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 PeakPagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 PeakNonPagedPoolAllocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt64 PagedBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 NonPagedBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 PeakPagedBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 PeakNonPagedBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt32 BurstAllocationsFailedDeliberately { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public UInt32 SessionTrims { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 116); } }
		public UInt32 OptionChanges { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 VerifyMode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public _UNICODE_STRING PreviousBucketName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt32 ExecutePoolTypes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt32 ExecutePageProtections { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 148); } }
		public UInt32 ExecutePageMappings { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public UInt32 ExecuteWriteSections { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 156); } }
		public UInt32 SectionAlignmentFailures { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 160); } }
		public UInt32 IATInExecutableSection { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
	}
	#endregion
	#region _HEAP_SEGMENT_MGR_COMMIT_STATE
 
	public class _HEAP_SEGMENT_MGR_COMMIT_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_SEGMENT_MGR_COMMIT_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_SEGMENT_MGR_COMMIT_STATE"": [ 2, {
				 ""CommittedPageCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""Spare"": [ 0, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":11,\""target\"":\""UInt16\""}"" ]],
				 ""LargePageOperationInProgress"": [ 0, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt16\""}"" ]],
				 ""LargePageCommit"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt16\""}"" ]],
				 ""EntireUShortV"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""EntireUShort"": [ 0, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 CommittedPageCount
		{
			get
			{
				// start: 0  end: 11  Mask: 0000011111111111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2047) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 Spare
		{
			get
			{
				// start: 11  end: 14  Mask: 0011100000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 14336) >> 11;
				return (UInt16)value2;
			}
		}
		public UInt16 LargePageOperationInProgress
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16384) >> 14;
				return (UInt16)value2;
			}
		}
		public UInt16 LargePageCommit
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32768) >> 15;
				return (UInt16)value2;
			}
		}
		public UInt16 EntireUShortV { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 EntireUShort { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _SID_IDENTIFIER_AUTHORITY
 
	public class _SID_IDENTIFIER_AUTHORITY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SID_IDENTIFIER_AUTHORITY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 6; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SID_IDENTIFIER_AUTHORITY"": [ 6, {
				 ""Value"": [ 0, [ ""Array"", ""{\""count\"":6,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte[] Value
		{
			get
			{
				Byte[] returnValue = new Byte[6];
				for(int i=0; i<6; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 0];
				return returnValue;
			}
		}
	}
	#endregion
	#region _ACTIVATION_CONTEXT_DATA
 
	public class _ACTIVATION_CONTEXT_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ACTIVATION_CONTEXT_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ACTIVATION_CONTEXT_DATA"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _ASSEMBLY_STORAGE_MAP
 
	public class _ASSEMBLY_STORAGE_MAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ASSEMBLY_STORAGE_MAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ASSEMBLY_STORAGE_MAP"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _PEB
 
	public class _PEB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1992; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEB"": [ 1992, {
				 ""InheritedAddressSpace"": [ 0, [ ""Byte"", ""null"" ]],
				 ""ReadImageFileExecOptions"": [ 1, [ ""Byte"", ""null"" ]],
				 ""BeingDebugged"": [ 2, [ ""Byte"", ""null"" ]],
				 ""BitField"": [ 3, [ ""Byte"", ""null"" ]],
				 ""ImageUsesLargePages"": [ 3, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""IsProtectedProcess"": [ 3, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""IsImageDynamicallyRelocated"": [ 3, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""SkipPatchingUser32Forwarders"": [ 3, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""IsPackagedProcess"": [ 3, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""IsAppContainer"": [ 3, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""IsProtectedProcessLight"": [ 3, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""IsLongPathAwareProcess"": [ 3, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""Byte\""}"" ]],
				 ""Padding0"": [ 4, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""Mutant"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ImageBaseAddress"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Ldr"": [ 24, [ ""Pointer"", ""{\""target\"":\""_PEB_LDR_DATA\""}"" ]],
				 ""ProcessParameters"": [ 32, [ ""Pointer"", ""{\""target\"":\""_RTL_USER_PROCESS_PARAMETERS\""}"" ]],
				 ""SubSystemData"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProcessHeap"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FastPebLock"": [ 56, [ ""Pointer"", ""{\""target\"":\""_RTL_CRITICAL_SECTION\""}"" ]],
				 ""AtlThunkSListPtr"": [ 64, [ ""Pointer"", ""{\""target\"":\""_SLIST_HEADER\""}"" ]],
				 ""IFEOKey"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CrossProcessFlags"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""ProcessInJob"": [ 80, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessInitializing"": [ 80, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessUsingVEH"": [ 80, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessUsingVCH"": [ 80, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessUsingFTH"": [ 80, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessPreviouslyThrottled"": [ 80, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessCurrentlyThrottled"": [ 80, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessImagesHotPatched"": [ 80, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""ReservedBits0"": [ 80, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""Padding1"": [ 84, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""KernelCallbackTable"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UserSharedInfoPtr"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SystemReserved"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""AtlThunkSListPtr32"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""ApiSetMap"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TlsExpansionCounter"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""Padding2"": [ 116, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""TlsBitmap"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TlsBitmapBits"": [ 128, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ReadOnlySharedMemoryBase"": [ 136, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SharedData"": [ 144, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReadOnlyStaticServerData"": [ 152, [ ""Pointer"", ""{\""target\"":\""void*\""}"" ]],
				 ""AnsiCodePageData"": [ 160, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OemCodePageData"": [ 168, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UnicodeCaseTableData"": [ 176, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberOfProcessors"": [ 184, [ ""UInt32"", ""null"" ]],
				 ""NtGlobalFlag"": [ 188, [ ""UInt32"", ""null"" ]],
				 ""CriticalSectionTimeout"": [ 192, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""HeapSegmentReserve"": [ 200, [ ""UInt64"", ""null"" ]],
				 ""HeapSegmentCommit"": [ 208, [ ""UInt64"", ""null"" ]],
				 ""HeapDeCommitTotalFreeThreshold"": [ 216, [ ""UInt64"", ""null"" ]],
				 ""HeapDeCommitFreeBlockThreshold"": [ 224, [ ""UInt64"", ""null"" ]],
				 ""NumberOfHeaps"": [ 232, [ ""UInt32"", ""null"" ]],
				 ""MaximumNumberOfHeaps"": [ 236, [ ""UInt32"", ""null"" ]],
				 ""ProcessHeaps"": [ 240, [ ""Pointer"", ""{\""target\"":\""void*\""}"" ]],
				 ""GdiSharedHandleTable"": [ 248, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProcessStarterHelper"": [ 256, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GdiDCAttributeList"": [ 264, [ ""UInt32"", ""null"" ]],
				 ""Padding3"": [ 268, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""LoaderLock"": [ 272, [ ""Pointer"", ""{\""target\"":\""_RTL_CRITICAL_SECTION\""}"" ]],
				 ""OSMajorVersion"": [ 280, [ ""UInt32"", ""null"" ]],
				 ""OSMinorVersion"": [ 284, [ ""UInt32"", ""null"" ]],
				 ""OSBuildNumber"": [ 288, [ ""UInt16"", ""null"" ]],
				 ""OSCSDVersion"": [ 290, [ ""UInt16"", ""null"" ]],
				 ""OSPlatformId"": [ 292, [ ""UInt32"", ""null"" ]],
				 ""ImageSubsystem"": [ 296, [ ""UInt32"", ""null"" ]],
				 ""ImageSubsystemMajorVersion"": [ 300, [ ""UInt32"", ""null"" ]],
				 ""ImageSubsystemMinorVersion"": [ 304, [ ""UInt32"", ""null"" ]],
				 ""Padding4"": [ 308, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""ActiveProcessAffinityMask"": [ 312, [ ""UInt64"", ""null"" ]],
				 ""GdiHandleBuffer"": [ 320, [ ""Array"", ""{\""count\"":60,\""target\"":\""UInt32\""}"" ]],
				 ""PostProcessInitRoutine"": [ 560, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TlsExpansionBitmap"": [ 568, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TlsExpansionBitmapBits"": [ 576, [ ""Array"", ""{\""count\"":32,\""target\"":\""UInt32\""}"" ]],
				 ""SessionId"": [ 704, [ ""UInt32"", ""null"" ]],
				 ""Padding5"": [ 708, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""AppCompatFlags"": [ 712, [ ""_ULARGE_INTEGER"", ""null"" ]],
				 ""AppCompatFlagsUser"": [ 720, [ ""_ULARGE_INTEGER"", ""null"" ]],
				 ""pShimData"": [ 728, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AppCompatInfo"": [ 736, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CSDVersion"": [ 744, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ActivationContextData"": [ 760, [ ""Pointer"", ""{\""target\"":\""_ACTIVATION_CONTEXT_DATA\""}"" ]],
				 ""ProcessAssemblyStorageMap"": [ 768, [ ""Pointer"", ""{\""target\"":\""_ASSEMBLY_STORAGE_MAP\""}"" ]],
				 ""SystemDefaultActivationContextData"": [ 776, [ ""Pointer"", ""{\""target\"":\""_ACTIVATION_CONTEXT_DATA\""}"" ]],
				 ""SystemAssemblyStorageMap"": [ 784, [ ""Pointer"", ""{\""target\"":\""_ASSEMBLY_STORAGE_MAP\""}"" ]],
				 ""MinimumStackCommit"": [ 792, [ ""UInt64"", ""null"" ]],
				 ""SparePointers"": [ 800, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""SpareUlongs"": [ 832, [ ""Array"", ""{\""count\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""WerRegistrationData"": [ 856, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WerShipAssertPtr"": [ 864, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""pUnused"": [ 872, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""pImageHeaderHash"": [ 880, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TracingFlags"": [ 888, [ ""UInt32"", ""null"" ]],
				 ""HeapTracingEnabled"": [ 888, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""CritSecTracingEnabled"": [ 888, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""LibLoaderTracingEnabled"": [ 888, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""SpareTracingBits"": [ 888, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""Padding6"": [ 892, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""CsrServerReadOnlySharedMemoryBase"": [ 896, [ ""UInt64"", ""null"" ]],
				 ""TppWorkerpListLock"": [ 904, [ ""UInt64"", ""null"" ]],
				 ""TppWorkerpList"": [ 912, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""WaitOnAddressHashTable"": [ 928, [ ""Array"", ""{\""count\"":128,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""TelemetryCoverageHeader"": [ 1952, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CloudFileFlags"": [ 1960, [ ""UInt32"", ""null"" ]],
				 ""CloudFileDiagFlags"": [ 1964, [ ""UInt32"", ""null"" ]],
				 ""PlaceholderCompatibilityMode"": [ 1968, [ ""Char"", ""null"" ]],
				 ""PlaceholderCompatibilityModeReserved"": [ 1969, [ ""Array"", ""{\""count\"":7,\""target\"":\""Char\""}"" ]],
				 ""LeapSecondData"": [ 1976, [ ""Pointer"", ""{\""target\"":\""_LEAP_SECOND_DATA\""}"" ]],
				 ""LeapSecondFlags"": [ 1984, [ ""UInt32"", ""null"" ]],
				 ""SixtySecondEnabled"": [ 1984, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 1984, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""NtGlobalFlag2"": [ 1988, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte InheritedAddressSpace{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte ReadImageFileExecOptions{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte BeingDebugged{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte BitField{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte ImageUsesLargePages
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte IsProtectedProcess
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte IsImageDynamicallyRelocated
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte SkipPatchingUser32Forwarders
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte IsPackagedProcess
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte IsAppContainer
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte IsProtectedProcessLight
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 64) >> 6;
				return (Byte)value2;
			}
		}
		public Byte IsLongPathAwareProcess
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 128) >> 7;
				return (Byte)value2;
			}
		}
		public Byte[] Padding0
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 4];
				return returnValue;
			}
		}
		public UInt64 Mutant { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ImageBaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Ldr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ProcessParameters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 SubSystemData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 ProcessHeap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 FastPebLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 AtlThunkSListPtr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 IFEOKey { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt32 CrossProcessFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 ProcessInJob
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessInitializing
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessUsingVEH
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessUsingVCH
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessUsingFTH
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessPreviouslyThrottled
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessCurrentlyThrottled
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessImagesHotPatched
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 ReservedBits0
		{
			get
			{
				// start: 8  end: 32  Mask: 11111111111111111111111100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 4294967040) >> 8;
				return (UInt32)value2;
			}
		}
		public Byte[] Padding1
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 84];
				return returnValue;
			}
		}
		public UInt64 KernelCallbackTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 UserSharedInfoPtr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt32 SystemReserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 AtlThunkSListPtr32 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt64 ApiSetMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt32 TlsExpansionCounter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public Byte[] Padding2
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 116];
				return returnValue;
			}
		}
		public UInt64 TlsBitmap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt32[] TlsBitmapBits
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt64 ReadOnlySharedMemoryBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 SharedData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 ReadOnlyStaticServerData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 AnsiCodePageData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 OemCodePageData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 UnicodeCaseTableData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt32 NumberOfProcessors { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 184); } }
		public UInt32 NtGlobalFlag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public _LARGE_INTEGER CriticalSectionTimeout
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public UInt64 HeapSegmentReserve { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 HeapSegmentCommit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 HeapDeCommitTotalFreeThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 HeapDeCommitFreeBlockThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt32 NumberOfHeaps { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 232); } }
		public UInt32 MaximumNumberOfHeaps { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 236); } }
		public UInt64 ProcessHeaps { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 GdiSharedHandleTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public UInt64 ProcessStarterHelper { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public UInt32 GdiDCAttributeList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 264); } }
		public Byte[] Padding3
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 268];
				return returnValue;
			}
		}
		public UInt64 LoaderLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public UInt32 OSMajorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 280); } }
		public UInt32 OSMinorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 284); } }
		public UInt16 OSBuildNumber { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 288); } }
		public UInt16 OSCSDVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 290); } }
		public UInt32 OSPlatformId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 292); } }
		public UInt32 ImageSubsystem { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 296); } }
		public UInt32 ImageSubsystemMajorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 300); } }
		public UInt32 ImageSubsystemMinorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 304); } }
		public Byte[] Padding4
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 308];
				return returnValue;
			}
		}
		public UInt64 ActiveProcessAffinityMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 312); } }
		public UInt32[] GdiHandleBuffer
		{
			get
			{
				UInt32[] returnValue = new UInt32[60];
				for(int i=0; i<60; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 320);
				return returnValue;
			}
		}
		public UInt64 PostProcessInitRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 560); } }
		public UInt64 TlsExpansionBitmap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 568); } }
		public UInt32[] TlsExpansionBitmapBits
		{
			get
			{
				UInt32[] returnValue = new UInt32[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 576);
				return returnValue;
			}
		}
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 704); } }
		public Byte[] Padding5
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 708];
				return returnValue;
			}
		}
		public _ULARGE_INTEGER AppCompatFlags
		{
			get
			{
				_ULARGE_INTEGER returnValue = new _ULARGE_INTEGER(_StructureData, _BufferOffset + 712);
				return returnValue;
			}
		}
		public _ULARGE_INTEGER AppCompatFlagsUser
		{
			get
			{
				_ULARGE_INTEGER returnValue = new _ULARGE_INTEGER(_StructureData, _BufferOffset + 720);
				return returnValue;
			}
		}
		public UInt64 pShimData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 728); } }
		public UInt64 AppCompatInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 736); } }
		public _UNICODE_STRING CSDVersion
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 744);
				return returnValue;
			}
		}
		public UInt64 ActivationContextData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 760); } }
		public UInt64 ProcessAssemblyStorageMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 768); } }
		public UInt64 SystemDefaultActivationContextData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 776); } }
		public UInt64 SystemAssemblyStorageMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 784); } }
		public UInt64 MinimumStackCommit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 792); } }
		public UInt64[] SparePointers
		{
			get
			{
				UInt64[] returnValue = new UInt64[4];
				int size = 8;
				for(int i=0; i<4; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 800);
				return returnValue;
			}
		}
		public UInt32[] SpareUlongs
		{
			get
			{
				UInt32[] returnValue = new UInt32[5];
				for(int i=0; i<5; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 832);
				return returnValue;
			}
		}
		public UInt64 WerRegistrationData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 856); } }
		public UInt64 WerShipAssertPtr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 864); } }
		public UInt64 pUnused { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 872); } }
		public UInt64 pImageHeaderHash { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 880); } }
		public UInt32 TracingFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 888); } }
		public UInt32 HeapTracingEnabled
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 888);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 CritSecTracingEnabled
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 888);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 LibLoaderTracingEnabled
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 888);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 SpareTracingBits
		{
			get
			{
				// start: 3  end: 32  Mask: 11111111111111111111111111111000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 888);
				var value2 = (value & 4294967288) >> 3;
				return (UInt32)value2;
			}
		}
		public Byte[] Padding6
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 892];
				return returnValue;
			}
		}
		public UInt64 CsrServerReadOnlySharedMemoryBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 896); } }
		public UInt64 TppWorkerpListLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 904); } }
		public _LIST_ENTRY TppWorkerpList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 912);
				return returnValue;
			}
		}
		public UInt64[] WaitOnAddressHashTable
		{
			get
			{
				UInt64[] returnValue = new UInt64[128];
				int size = 8;
				for(int i=0; i<128; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 928);
				return returnValue;
			}
		}
		public UInt64 TelemetryCoverageHeader { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1952); } }
		public UInt32 CloudFileFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1960); } }
		public UInt32 CloudFileDiagFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1964); } }
		public Char PlaceholderCompatibilityMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 1968); } }
		public Char[] PlaceholderCompatibilityModeReserved
		{
			get
			{
				Char[] returnValue = new Char[7];
				for(int i=0; i<7; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 1969);
				return returnValue;
			}
		}
		public UInt64 LeapSecondData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1976); } }
		public UInt32 LeapSecondFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1984); } }
		public UInt32 SixtySecondEnabled
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1984);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 1  end: 32  Mask: 11111111111111111111111111111110
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1984);
				var value2 = (value & 4294967294) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 NtGlobalFlag2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1988); } }
	}
	#endregion
	#region _RTL_HP_SEG_ALLOC_POLICY
 
	public class _RTL_HP_SEG_ALLOC_POLICY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_HP_SEG_ALLOC_POLICY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_HP_SEG_ALLOC_POLICY"": [ 24, {
				 ""MinLargePages"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""MaxLargePages"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""MinUtilization"": [ 16, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 MinLargePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 MaxLargePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public Byte MinUtilization{ get { return _StructureData[_BufferOffset +16]; } }
	}
	#endregion
	#region _VF_SUSPECT_DRIVER_ENTRY
 
	public class _VF_SUSPECT_DRIVER_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VF_SUSPECT_DRIVER_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VF_SUSPECT_DRIVER_ENTRY"": [ 40, {
				 ""Links"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Loads"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Unloads"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""BaseName"": [ 24, [ ""_UNICODE_STRING"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Links
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Loads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Unloads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _UNICODE_STRING BaseName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _VI_VERIFIER_ISSUE
 
	public class _VI_VERIFIER_ISSUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VI_VERIFIER_ISSUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VI_VERIFIER_ISSUE"": [ 32, {
				 ""IssueType"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Address"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Parameters"": [ 16, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 IssueType { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Address { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64[] Parameters
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ARBITER_ALLOCATION_STATE
 
	public class _ARBITER_ALLOCATION_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_ALLOCATION_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_ALLOCATION_STATE"": [ 80, {
				 ""Start"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""End"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""CurrentMinimum"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""CurrentMaximum"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""Entry"": [ 32, [ ""Pointer"", ""{\""target\"":\""_ARBITER_LIST_ENTRY\""}"" ]],
				 ""CurrentAlternative"": [ 40, [ ""Pointer"", ""{\""target\"":\""_ARBITER_ALTERNATIVE\""}"" ]],
				 ""AlternativeCount"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""Alternatives"": [ 56, [ ""Pointer"", ""{\""target\"":\""_ARBITER_ALTERNATIVE\""}"" ]],
				 ""Flags"": [ 64, [ ""UInt16"", ""null"" ]],
				 ""RangeAttributes"": [ 66, [ ""Byte"", ""null"" ]],
				 ""RangeAvailableAttributes"": [ 67, [ ""Byte"", ""null"" ]],
				 ""WorkSpace"": [ 72, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Start { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 End { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 CurrentMinimum { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 CurrentMaximum { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 Entry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 CurrentAlternative { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt32 AlternativeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt64 Alternatives { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 64); } }
		public Byte RangeAttributes{ get { return _StructureData[_BufferOffset +66]; } }
		public Byte RangeAvailableAttributes{ get { return _StructureData[_BufferOffset +67]; } }
		public UInt64 WorkSpace { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
	}
	#endregion
	#region _PHYSICAL_MEMORY_RUN
 
	public class _PHYSICAL_MEMORY_RUN
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PHYSICAL_MEMORY_RUN(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PHYSICAL_MEMORY_RUN"": [ 16, {
				 ""BasePage"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""PageCount"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 BasePage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 PageCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _ETW_SYSTEM_LOGGER_SETTINGS
 
	public class _ETW_SYSTEM_LOGGER_SETTINGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_SYSTEM_LOGGER_SETTINGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 372; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_SYSTEM_LOGGER_SETTINGS"": [ 372, {
				 ""EtwpSystemLogger"": [ 0, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""EtwpActiveSystemLoggers"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""SiloGlobalGroupMask"": [ 20, [ ""_PERFINFO_GROUPMASK"", ""null"" ]],
				 ""EtwpGroupMasks"": [ 52, [ ""Array"", ""{\""count\"":10,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public _ETW_SYSTEM_LOGGER[] EtwpSystemLogger
		{
			get
			{
				_ETW_SYSTEM_LOGGER[] returnValue = new _ETW_SYSTEM_LOGGER[8];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<8; i++ )
					returnValue[i] = new _ETW_SYSTEM_LOGGER(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 EtwpActiveSystemLoggers { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _PERFINFO_GROUPMASK SiloGlobalGroupMask
		{
			get
			{
				_PERFINFO_GROUPMASK returnValue = new _PERFINFO_GROUPMASK(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
		public _PERFINFO_GROUPMASK[] EtwpGroupMasks
		{
			get
			{
				_PERFINFO_GROUPMASK[] returnValue = new _PERFINFO_GROUPMASK[10];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<10; i++ )
					returnValue[i] = new _PERFINFO_GROUPMASK(_StructureData, (i * size) + _BufferOffset + 52);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_SUB64K_FREE_RANGES
 
	public class _MI_SUB64K_FREE_RANGES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SUB64K_FREE_RANGES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SUB64K_FREE_RANGES"": [ 56, {
				 ""BitMap"": [ 0, [ ""_RTL_BITMAP_EX"", ""null"" ]],
				 ""ListEntry"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Vad"": [ 32, [ ""Pointer"", ""{\""target\"":\""_MMVAD_SHORT\""}"" ]],
				 ""SetBits"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""FullSetBits"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""SubListIndex"": [ 48, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Hint"": [ 48, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BITMAP_EX BitMap
		{
			get
			{
				_RTL_BITMAP_EX returnValue = new _RTL_BITMAP_EX(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 Vad { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt32 SetBits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 FullSetBits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 SubListIndex
		{
			get
			{
				// start: 0  end: 2  Mask: 0000000000000011
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 3) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Hint
		{
			get
			{
				// start: 2  end: 32  Mask: 11111111111111111111111111111100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 4294967292) >> 2;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _MMINPAGE_SUPPORT
 
	public class _MMINPAGE_SUPPORT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMINPAGE_SUPPORT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 448; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMINPAGE_SUPPORT"": [ 448, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SListEntry"": [ 0, [ ""_SLIST_ENTRY"", ""null"" ]],
				 ""ListHead"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Event"": [ 32, [ ""_KEVENT"", ""null"" ]],
				 ""CollidedEvent"": [ 56, [ ""_KEVENT"", ""null"" ]],
				 ""IoStatus"": [ 80, [ ""_IO_STATUS_BLOCK"", ""null"" ]],
				 ""ReadOffset"": [ 96, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""u2"": [ 104, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""Thread"": [ 152, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""LockedProtoPfn"": [ 160, [ ""Pointer"", ""{\""target\"":\""_MMPFN\""}"" ]],
				 ""PteContents"": [ 168, [ ""_MMPTE"", ""null"" ]],
				 ""WaitCount"": [ 176, [ ""Int32"", ""null"" ]],
				 ""InjectRetry"": [ 180, [ ""Int32"", ""null"" ]],
				 ""ByteCount"": [ 184, [ ""UInt32"", ""null"" ]],
				 ""u3"": [ 188, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""u1"": [ 192, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""FilePointer"": [ 200, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""PagingFile"": [ 200, [ ""Pointer"", ""{\""target\"":\""_MMPAGING_FILE\""}"" ]],
				 ""ControlArea"": [ 208, [ ""Pointer"", ""{\""target\"":\""_CONTROL_AREA\""}"" ]],
				 ""Subsection"": [ 208, [ ""Pointer"", ""{\""target\"":\""_SUBSECTION\""}"" ]],
				 ""Autoboost"": [ 216, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FaultingAddress"": [ 224, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PointerPte"": [ 232, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""BasePte"": [ 240, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""Pfn"": [ 248, [ ""Pointer"", ""{\""target\"":\""_MMPFN\""}"" ]],
				 ""PrefetchMdl"": [ 256, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""ProbeCount"": [ 264, [ ""Int64"", ""null"" ]],
				 ""Mdl"": [ 272, [ ""_MDL"", ""null"" ]],
				 ""Page"": [ 320, [ ""Array"", ""{\""count\"":16,\""target\"":\""UInt64\""}"" ]],
				 ""FlowThrough"": [ 320, [ ""_MMINPAGE_SUPPORT_FLOW_THROUGH"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _SLIST_ENTRY SListEntry
		{
			get
			{
				_SLIST_ENTRY returnValue = new _SLIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY ListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _KEVENT CollidedEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _IO_STATUS_BLOCK IoStatus
		{
			get
			{
				_IO_STATUS_BLOCK returnValue = new _IO_STATUS_BLOCK(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public _LARGE_INTEGER ReadOffset
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u2
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 LockedProtoPfn { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public _MMPTE PteContents
		{
			get
			{
				_MMPTE returnValue = new _MMPTE(_StructureData, _BufferOffset + 168);
				return returnValue;
			}
		}
		public Int32 WaitCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 176); } }
		public Int32 InjectRetry { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 180); } }
		public UInt32 ByteCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 184); } }
		public _ANONYMOUS_TAG u3
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 188);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public UInt64 FilePointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 PagingFile { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 ControlArea { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 Subsection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 Autoboost { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 FaultingAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 PointerPte { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 BasePte { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 Pfn { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public UInt64 PrefetchMdl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public Int64 ProbeCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 264); } }
		public _MDL Mdl
		{
			get
			{
				_MDL returnValue = new _MDL(_StructureData, _BufferOffset + 272);
				return returnValue;
			}
		}
		public UInt64[] Page
		{
			get
			{
				UInt64[] returnValue = new UInt64[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 320);
				return returnValue;
			}
		}
		public _MMINPAGE_SUPPORT_FLOW_THROUGH FlowThrough
		{
			get
			{
				_MMINPAGE_SUPPORT_FLOW_THROUGH returnValue = new _MMINPAGE_SUPPORT_FLOW_THROUGH(_StructureData, _BufferOffset + 320);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EVENT_FILTER_HEADER
 
	public class _EVENT_FILTER_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EVENT_FILTER_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EVENT_FILTER_HEADER"": [ 24, {
				 ""Id"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Version"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 3, [ ""Array"", ""{\""count\"":5,\""target\"":\""Byte\""}"" ]],
				 ""InstanceId"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Size"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""NextOffset"": [ 20, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Id { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Version{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte[] Reserved
		{
			get
			{
				Byte[] returnValue = new Byte[5];
				for(int i=0; i<5; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 3];
				return returnValue;
			}
		}
		public UInt64 InstanceId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 NextOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _CM_DIRTY_VECTOR_LOG_ENTRY
 
	public class _CM_DIRTY_VECTOR_LOG_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_DIRTY_VECTOR_LOG_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_DIRTY_VECTOR_LOG_ENTRY"": [ 72, {
				 ""Thread"": [ 0, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""Operation"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_CM_DIRTY_VECTOR_OPERATION\"",\""target\"":\""UInt32\""}"" ]],
				 ""Data"": [ 12, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""Stack"": [ 24, [ ""Array"", ""{\""count\"":6,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _CM_DIRTY_VECTOR_OPERATION Operation { get { return (_CM_DIRTY_VECTOR_OPERATION)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _ANONYMOUS_TAG Data
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public UInt64[] Stack
		{
			get
			{
				UInt64[] returnValue = new UInt64[6];
				int size = 8;
				for(int i=0; i<6; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT
 
	public class _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CMP_DISCARD_AND_REPLACE_KCB_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CMP_DISCARD_AND_REPLACE_KCB_CONTEXT"": [ 32, {
				 ""BaseKcb"": [ 0, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""PrepareStatus"": [ 8, [ ""Int32"", ""null"" ]],
				 ""ClonedKcbListHead"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 BaseKcb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Int32 PrepareStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY ClonedKcbListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PNP_DEVICE_ACTION_ENTRY
 
	public class _PNP_DEVICE_ACTION_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PNP_DEVICE_ACTION_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PNP_DEVICE_ACTION_ENTRY"": [ 96, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeviceObject"": [ 16, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""RequestType"": [ 24, [ ""Enumeration"", ""{\""enum_name\"":\""_PNP_DEVICE_ACTION_REQUEST\"",\""target\"":\""UInt32\""}"" ]],
				 ""ReorderingBarrier"": [ 28, [ ""Byte"", ""null"" ]],
				 ""RequestArgument"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""CompletionEvent"": [ 40, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""CompletionStatus"": [ 48, [ ""Pointer"", ""{\""target\"":\""long\""}"" ]],
				 ""ActivityId"": [ 56, [ ""_GUID"", ""null"" ]],
				 ""RefCount"": [ 72, [ ""Int32"", ""null"" ]],
				 ""Dequeued"": [ 76, [ ""Byte"", ""null"" ]],
				 ""CancelLock"": [ 80, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""CancelRequested"": [ 88, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _PNP_DEVICE_ACTION_REQUEST RequestType { get { return (_PNP_DEVICE_ACTION_REQUEST)BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Byte ReorderingBarrier{ get { return _StructureData[_BufferOffset +28]; } }
		public UInt64 RequestArgument { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 CompletionEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 CompletionStatus { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _GUID ActivityId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public Int32 RefCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 72); } }
		public Byte Dequeued{ get { return _StructureData[_BufferOffset +76]; } }
		public _EX_PUSH_LOCK CancelLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public Byte CancelRequested{ get { return _StructureData[_BufferOffset +88]; } }
	}
	#endregion
	#region _PPM_COORDINATED_SYNCHRONIZATION
 
	public class _PPM_COORDINATED_SYNCHRONIZATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPM_COORDINATED_SYNCHRONIZATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPM_COORDINATED_SYNCHRONIZATION"": [ 4, {
				 ""AsLong"": [ 0, [ ""Int32"", ""null"" ]],
				 ""EnterProcessor"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ExitProcessor"": [ 0, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""Transition"": [ 0, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""Entered"": [ 0, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""EntryPriority"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":27,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 AsLong { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 EnterProcessor
		{
			get
			{
				// start: 0  end: 12  Mask: 0000111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4095) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ExitProcessor
		{
			get
			{
				// start: 12  end: 24  Mask: 111111111111000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16773120) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 Transition
		{
			get
			{
				// start: 24  end: 26  Mask: 11000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 50331648) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 Entered
		{
			get
			{
				// start: 26  end: 27  Mask: 100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 67108864) >> 26;
				return (UInt32)value2;
			}
		}
		public UInt32 EntryPriority
		{
			get
			{
				// start: 27  end: 32  Mask: 11111000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4160749568) >> 27;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _PPM_PLATFORM_STATE
 
	public class _PPM_PLATFORM_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPM_PLATFORM_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 384; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPM_PLATFORM_STATE"": [ 384, {
				 ""LevelId"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Latency"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""BreakEvenDuration"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""VetoAccounting"": [ 16, [ ""_PPM_VETO_ACCOUNTING"", ""null"" ]],
				 ""TransitionDebugger"": [ 56, [ ""Byte"", ""null"" ]],
				 ""Platform"": [ 57, [ ""Byte"", ""null"" ]],
				 ""DependencyListCount"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""Processors"": [ 64, [ ""_KAFFINITY_EX"", ""null"" ]],
				 ""Name"": [ 232, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""DependencyLists"": [ 248, [ ""Pointer"", ""{\""target\"":\""_PPM_SELECTION_DEPENDENCY\""}"" ]],
				 ""Synchronization"": [ 256, [ ""_PPM_COORDINATED_SYNCHRONIZATION"", ""null"" ]],
				 ""EnterTime"": [ 264, [ ""UInt64"", ""null"" ]],
				 ""RefCount"": [ 320, [ ""Int32"", ""null"" ]],
				 ""CacheAlign0"": [ 320, [ ""Array"", ""{\""count\"":64,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 LevelId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Latency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 BreakEvenDuration { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _PPM_VETO_ACCOUNTING VetoAccounting
		{
			get
			{
				_PPM_VETO_ACCOUNTING returnValue = new _PPM_VETO_ACCOUNTING(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public Byte TransitionDebugger{ get { return _StructureData[_BufferOffset +56]; } }
		public Byte Platform{ get { return _StructureData[_BufferOffset +57]; } }
		public UInt32 DependencyListCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public _KAFFINITY_EX Processors
		{
			get
			{
				_KAFFINITY_EX returnValue = new _KAFFINITY_EX(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _UNICODE_STRING Name
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 232);
				return returnValue;
			}
		}
		public UInt64 DependencyLists { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public _PPM_COORDINATED_SYNCHRONIZATION Synchronization
		{
			get
			{
				_PPM_COORDINATED_SYNCHRONIZATION returnValue = new _PPM_COORDINATED_SYNCHRONIZATION(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
		public UInt64 EnterTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 264); } }
		public Int32 RefCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 320); } }
		public Byte[] CacheAlign0
		{
			get
			{
				Byte[] returnValue = new Byte[64];
				for(int i=0; i<64; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 320];
				return returnValue;
			}
		}
	}
	#endregion
	#region _PEB_LDR_DATA
 
	public class _PEB_LDR_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEB_LDR_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEB_LDR_DATA"": [ 88, {
				 ""Length"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Initialized"": [ 4, [ ""Byte"", ""null"" ]],
				 ""SsHandle"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InLoadOrderModuleList"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""InMemoryOrderModuleList"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""InInitializationOrderModuleList"": [ 48, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""EntryInProgress"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ShutdownInProgress"": [ 72, [ ""Byte"", ""null"" ]],
				 ""ShutdownThreadId"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte Initialized{ get { return _StructureData[_BufferOffset +4]; } }
		public UInt64 SsHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY InLoadOrderModuleList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LIST_ENTRY InMemoryOrderModuleList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _LIST_ENTRY InInitializationOrderModuleList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt64 EntryInProgress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public Byte ShutdownInProgress{ get { return _StructureData[_BufferOffset +72]; } }
		public UInt64 ShutdownThreadId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
	}
	#endregion
	#region _MI_PARTITION_PAGE_LISTS
 
	public class _MI_PARTITION_PAGE_LISTS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PARTITION_PAGE_LISTS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4032; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PARTITION_PAGE_LISTS"": [ 4032, {
				 ""FreePagesByColor"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_MMPFNLIST\""}}"" ]],
				 ""ZeroedPageListHead"": [ 64, [ ""_MMPFNLIST"", ""null"" ]],
				 ""FreePageListHead"": [ 128, [ ""_MMPFNLIST"", ""null"" ]],
				 ""StandbyPageListHead"": [ 192, [ ""_MMPFNLIST"", ""null"" ]],
				 ""StandbyPageListByPriority"": [ 256, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""ModifiedPageListNoReservation"": [ 576, [ ""_MMPFNLIST"", ""null"" ]],
				 ""ModifiedPageListByReservation"": [ 640, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""MappedPageListHead"": [ 1280, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""BadPageListHead"": [ 1920, [ ""_MMPFNLIST"", ""null"" ]],
				 ""EnclavePageListHead"": [ 1984, [ ""_MMPFNLIST"", ""null"" ]],
				 ""FreePageSlist"": [ 2024, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_SLIST_HEADER\""}}"" ]],
				 ""PageLocationList"": [ 2040, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_MMPFNLIST\""}}"" ]],
				 ""StandbyRepurposedByPriority"": [ 2104, [ ""Array"", ""{\""count\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""TransitionSharedPages"": [ 2176, [ ""UInt64"", ""null"" ]],
				 ""TransitionSharedPagesPeak"": [ 2184, [ ""Array"", ""{\""count\"":6,\""target\"":\""UInt64\""}"" ]],
				 ""MappedPageListHeadEvent"": [ 2232, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""DecayClusterTimerHeads"": [ 2616, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""DecayHand"": [ 2648, [ ""UInt32"", ""null"" ]],
				 ""StandbyListDiscard"": [ 2652, [ ""Byte"", ""null"" ]],
				 ""FreeListDiscard"": [ 2653, [ ""Byte"", ""null"" ]],
				 ""PfnBitMapsReady"": [ 2654, [ ""Byte"", ""null"" ]],
				 ""LastDecayHandUpdateTime"": [ 2656, [ ""UInt64"", ""null"" ]],
				 ""LastChanceLdwContext"": [ 2664, [ ""_MI_LDW_WORK_CONTEXT"", ""null"" ]],
				 ""HugePfnBadPages"": [ 2720, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""AvailableEventsLock"": [ 2752, [ ""UInt64"", ""null"" ]],
				 ""AvailablePageWaitStates"": [ 2760, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""MirrorListLocks"": [ 2856, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TransitionPrivatePages"": [ 2880, [ ""UInt64"", ""null"" ]],
				 ""LargePfnBitMap"": [ 2888, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""LargePageListHeads"": [ 2920, [ ""Pointer"", ""{\""target\"":\""_MI_FREE_LARGE_PAGE_LIST\""}"" ]],
				 ""MediumPagesOnFreeZeroList"": [ 2928, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""LargePageRebuildCandidates"": [ 2936, [ ""_RTL_BITMAP_EX"", ""null"" ]],
				 ""LargePagesOnFreeZeroList"": [ 2952, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""HugePageRebuildCandidatesExist"": [ 2960, [ ""Int32"", ""null"" ]],
				 ""LargePageCandidatesExistEvent"": [ 2968, [ ""_KEVENT"", ""null"" ]],
				 ""LowMemoryThreshold"": [ 2992, [ ""UInt64"", ""null"" ]],
				 ""HighMemoryThreshold"": [ 3000, [ ""UInt64"", ""null"" ]],
				 ""SlabContexts"": [ 3008, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_MI_SLAB_ALLOCATOR_CONTEXT\""}}"" ]],
				 ""SlabPfnBitMap"": [ 3968, [ ""_RTL_BITMAP_EX"", ""null"" ]],
				 ""HugePfnLists"": [ 3984, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AvailableHugeIoRanges"": [ 3992, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _MMPFNLIST[] FreePagesByColor
		{
			get
			{
				_MMPFNLIST[] returnValue = new _MMPFNLIST[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _MMPFNLIST(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public _MMPFNLIST ZeroedPageListHead
		{
			get
			{
				_MMPFNLIST returnValue = new _MMPFNLIST(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _MMPFNLIST FreePageListHead
		{
			get
			{
				_MMPFNLIST returnValue = new _MMPFNLIST(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public _MMPFNLIST StandbyPageListHead
		{
			get
			{
				_MMPFNLIST returnValue = new _MMPFNLIST(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public _MMPFNLIST[] StandbyPageListByPriority
		{
			get
			{
				_MMPFNLIST[] returnValue = new _MMPFNLIST[8];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<8; i++ )
					returnValue[i] = new _MMPFNLIST(_StructureData, (i * size) + _BufferOffset + 256);
				return returnValue;
			}
		}
		public _MMPFNLIST ModifiedPageListNoReservation
		{
			get
			{
				_MMPFNLIST returnValue = new _MMPFNLIST(_StructureData, _BufferOffset + 576);
				return returnValue;
			}
		}
		public _MMPFNLIST[] ModifiedPageListByReservation
		{
			get
			{
				_MMPFNLIST[] returnValue = new _MMPFNLIST[16];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<16; i++ )
					returnValue[i] = new _MMPFNLIST(_StructureData, (i * size) + _BufferOffset + 640);
				return returnValue;
			}
		}
		public _MMPFNLIST[] MappedPageListHead
		{
			get
			{
				_MMPFNLIST[] returnValue = new _MMPFNLIST[16];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<16; i++ )
					returnValue[i] = new _MMPFNLIST(_StructureData, (i * size) + _BufferOffset + 1280);
				return returnValue;
			}
		}
		public _MMPFNLIST BadPageListHead
		{
			get
			{
				_MMPFNLIST returnValue = new _MMPFNLIST(_StructureData, _BufferOffset + 1920);
				return returnValue;
			}
		}
		public _MMPFNLIST EnclavePageListHead
		{
			get
			{
				_MMPFNLIST returnValue = new _MMPFNLIST(_StructureData, _BufferOffset + 1984);
				return returnValue;
			}
		}
		public _SLIST_HEADER[] FreePageSlist
		{
			get
			{
				_SLIST_HEADER[] returnValue = new _SLIST_HEADER[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _SLIST_HEADER(_StructureData, (i * size) + _BufferOffset + 2024);
				return returnValue;
			}
		}
		public _MMPFNLIST[] PageLocationList
		{
			get
			{
				_MMPFNLIST[] returnValue = new _MMPFNLIST[8];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<8; i++ )
					returnValue[i] = new _MMPFNLIST(_StructureData, (i * size) + _BufferOffset + 2040);
				return returnValue;
			}
		}
		public UInt32[] StandbyRepurposedByPriority
		{
			get
			{
				UInt32[] returnValue = new UInt32[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 2104);
				return returnValue;
			}
		}
		public UInt64 TransitionSharedPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2176); } }
		public UInt64[] TransitionSharedPagesPeak
		{
			get
			{
				UInt64[] returnValue = new UInt64[6];
				for(int i=0; i<6; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 2184);
				return returnValue;
			}
		}
		public _KEVENT[] MappedPageListHeadEvent
		{
			get
			{
				_KEVENT[] returnValue = new _KEVENT[16];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<16; i++ )
					returnValue[i] = new _KEVENT(_StructureData, (i * size) + _BufferOffset + 2232);
				return returnValue;
			}
		}
		public _MI_DECAY_TIMER_LINK[] DecayClusterTimerHeads
		{
			get
			{
				_MI_DECAY_TIMER_LINK[] returnValue = new _MI_DECAY_TIMER_LINK[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new _MI_DECAY_TIMER_LINK(_StructureData, (i * size) + _BufferOffset + 2616);
				return returnValue;
			}
		}
		public UInt32 DecayHand { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2648); } }
		public Byte StandbyListDiscard{ get { return _StructureData[_BufferOffset +2652]; } }
		public Byte FreeListDiscard{ get { return _StructureData[_BufferOffset +2653]; } }
		public Byte PfnBitMapsReady{ get { return _StructureData[_BufferOffset +2654]; } }
		public UInt64 LastDecayHandUpdateTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2656); } }
		public _MI_LDW_WORK_CONTEXT LastChanceLdwContext
		{
			get
			{
				_MI_LDW_WORK_CONTEXT returnValue = new _MI_LDW_WORK_CONTEXT(_StructureData, _BufferOffset + 2664);
				return returnValue;
			}
		}
		public _RTL_AVL_TREE HugePfnBadPages
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 2720);
				return returnValue;
			}
		}
		public UInt64 AvailableEventsLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2752); } }
		public _MI_AVAILABLE_PAGE_WAIT_STATES[] AvailablePageWaitStates
		{
			get
			{
				_MI_AVAILABLE_PAGE_WAIT_STATES[] returnValue = new _MI_AVAILABLE_PAGE_WAIT_STATES[3];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<3; i++ )
					returnValue[i] = new _MI_AVAILABLE_PAGE_WAIT_STATES(_StructureData, (i * size) + _BufferOffset + 2760);
				return returnValue;
			}
		}
		public UInt64 MirrorListLocks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2856); } }
		public UInt64 TransitionPrivatePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2880); } }
		public _RTL_BITMAP_EX[] LargePfnBitMap
		{
			get
			{
				_RTL_BITMAP_EX[] returnValue = new _RTL_BITMAP_EX[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _RTL_BITMAP_EX(_StructureData, (i * size) + _BufferOffset + 2888);
				return returnValue;
			}
		}
		public UInt64 LargePageListHeads { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2920); } }
		public UInt64 MediumPagesOnFreeZeroList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2928); } }
		public _RTL_BITMAP_EX LargePageRebuildCandidates
		{
			get
			{
				_RTL_BITMAP_EX returnValue = new _RTL_BITMAP_EX(_StructureData, _BufferOffset + 2936);
				return returnValue;
			}
		}
		public UInt64 LargePagesOnFreeZeroList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2952); } }
		public Int32 HugePageRebuildCandidatesExist { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 2960); } }
		public _KEVENT LargePageCandidatesExistEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 2968);
				return returnValue;
			}
		}
		public UInt64 LowMemoryThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2992); } }
		public UInt64 HighMemoryThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 3000); } }
		public _MI_SLAB_ALLOCATOR_CONTEXT[] SlabContexts
		{
			get
			{
				_MI_SLAB_ALLOCATOR_CONTEXT[] returnValue = new _MI_SLAB_ALLOCATOR_CONTEXT[8];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<8; i++ )
					returnValue[i] = new _MI_SLAB_ALLOCATOR_CONTEXT(_StructureData, (i * size) + _BufferOffset + 3008);
				return returnValue;
			}
		}
		public _RTL_BITMAP_EX SlabPfnBitMap
		{
			get
			{
				_RTL_BITMAP_EX returnValue = new _RTL_BITMAP_EX(_StructureData, _BufferOffset + 3968);
				return returnValue;
			}
		}
		public UInt64 HugePfnLists { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 3984); } }
		public UInt64 AvailableHugeIoRanges { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 3992); } }
	}
	#endregion
	#region _MI_DECAY_TIMER_LINK
 
	public class _MI_DECAY_TIMER_LINK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_DECAY_TIMER_LINK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_DECAY_TIMER_LINK"": [ 8, {
				 ""u1"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_LFH_SUBSEGMENT_STATS
 
	public class _HEAP_LFH_SUBSEGMENT_STATS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_LFH_SUBSEGMENT_STATS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_LFH_SUBSEGMENT_STATS"": [ 8, {
				 ""Buckets"": [ 0, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""AllStats"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _HEAP_LFH_SUBSEGMENT_STAT[] Buckets
		{
			get
			{
				_HEAP_LFH_SUBSEGMENT_STAT[] returnValue = new _HEAP_LFH_SUBSEGMENT_STAT[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new _HEAP_LFH_SUBSEGMENT_STAT(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 AllStats { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _HIDDEN_PROCESSOR_POWER_INTERFACE
 
	public class _HIDDEN_PROCESSOR_POWER_INTERFACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HIDDEN_PROCESSOR_POWER_INTERFACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HIDDEN_PROCESSOR_POWER_INTERFACE"": [ 40, {
				 ""Version"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ReadPerfMsr"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WritePerfMsr"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReadPerfIoPort"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WritePerfIoPort"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 ReadPerfMsr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 WritePerfMsr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 ReadPerfIoPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 WritePerfIoPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _CACHE_DESCRIPTOR
 
	public class _CACHE_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CACHE_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CACHE_DESCRIPTOR"": [ 12, {
				 ""Level"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Associativity"": [ 1, [ ""Byte"", ""null"" ]],
				 ""LineSize"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Size"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Type"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_PROCESSOR_CACHE_TYPE\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte Level{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Associativity{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt16 LineSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _PROCESSOR_CACHE_TYPE Type { get { return (_PROCESSOR_CACHE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region __WIL__WNF_TYPE_ID
 
	public class __WIL__WNF_TYPE_ID
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public __WIL__WNF_TYPE_ID(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""__WIL__WNF_TYPE_ID"": [ 16, {
				 ""TypeId"": [ 0, [ ""_GUID"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _GUID TypeId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_PROTOTYPE_PTES_NODE
 
	public class _MI_PROTOTYPE_PTES_NODE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PROTOTYPE_PTES_NODE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PROTOTYPE_PTES_NODE"": [ 32, {
				 ""Node"": [ 0, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""u1"": [ 24, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BALANCED_NODE Node
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ETW_COUNTERS
 
	public class _ETW_COUNTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_COUNTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_COUNTERS"": [ 16, {
				 ""GuidCount"": [ 0, [ ""Int32"", ""null"" ]],
				 ""PoolUsage"": [ 4, [ ""Array"", ""{\""count\"":2,\""target\"":\""Int32\""}"" ]],
				 ""SessionCount"": [ 12, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 GuidCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public Int32[] PoolUsage
		{
			get
			{
				Int32[] returnValue = new Int32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToInt32(_StructureData, (i * sizeof(Int32)) + _BufferOffset + 4);
				return returnValue;
			}
		}
		public Int32 SessionCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _ARM_DBGKD_CONTROL_SET
 
	public class _ARM_DBGKD_CONTROL_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARM_DBGKD_CONTROL_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARM_DBGKD_CONTROL_SET"": [ 12, {
				 ""Continue"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""CurrentSymbolStart"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""CurrentSymbolEnd"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Continue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 CurrentSymbolStart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 CurrentSymbolEnd { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _PCW_COUNTER_INFORMATION
 
	public class _PCW_COUNTER_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCW_COUNTER_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCW_COUNTER_INFORMATION"": [ 16, {
				 ""CounterMask"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""InstanceMask"": [ 8, [ ""Pointer"", ""{\""target\"":\""_UNICODE_STRING\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 CounterMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 InstanceMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _WNF_DELIVERY_DESCRIPTOR
 
	public class _WNF_DELIVERY_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WNF_DELIVERY_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WNF_DELIVERY_DESCRIPTOR"": [ 48, {
				 ""SubscriptionId"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""StateName"": [ 8, [ ""_WNF_STATE_NAME"", ""null"" ]],
				 ""ChangeStamp"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""StateDataSize"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""EventMask"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""TypeId"": [ 28, [ ""_WNF_TYPE_ID"", ""null"" ]],
				 ""StateDataOffset"": [ 44, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SubscriptionId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _WNF_STATE_NAME StateName
		{
			get
			{
				_WNF_STATE_NAME returnValue = new _WNF_STATE_NAME(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 ChangeStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 StateDataSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 EventMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _WNF_TYPE_ID TypeId
		{
			get
			{
				_WNF_TYPE_ID returnValue = new _WNF_TYPE_ID(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public UInt32 StateDataOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
	}
	#endregion
	#region _MI_PAGE_COMBINING_SUPPORT
 
	public class _MI_PAGE_COMBINING_SUPPORT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PAGE_COMBINING_SUPPORT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 400; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PAGE_COMBINING_SUPPORT"": [ 400, {
				 ""Partition"": [ 0, [ ""Pointer"", ""{\""target\"":\""_MI_PARTITION\""}"" ]],
				 ""ArbitraryPfnMapList"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FreeCombinePoolItem"": [ 24, [ ""_MI_COMBINE_WORKITEM"", ""null"" ]],
				 ""CombiningThreadCount"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""CombinePageFreeList"": [ 72, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CombineFreeListLock"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""CombinePageListHeads"": [ 96, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""CommonPageCombineDomain"": [ 352, [ ""UInt64"", ""null"" ]],
				 ""PageCombineStats"": [ 360, [ ""_MI_PAGE_COMBINE_STATISTICS"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Partition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _LIST_ENTRY ArbitraryPfnMapList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _MI_COMBINE_WORKITEM FreeCombinePoolItem
		{
			get
			{
				_MI_COMBINE_WORKITEM returnValue = new _MI_COMBINE_WORKITEM(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 CombiningThreadCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public _LIST_ENTRY CombinePageFreeList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public UInt64 CombineFreeListLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public _MI_COMBINE_PAGE_LISTHEAD[] CombinePageListHeads
		{
			get
			{
				_MI_COMBINE_PAGE_LISTHEAD[] returnValue = new _MI_COMBINE_PAGE_LISTHEAD[16];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<16; i++ )
					returnValue[i] = new _MI_COMBINE_PAGE_LISTHEAD(_StructureData, (i * size) + _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt64 CommonPageCombineDomain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 352); } }
		public _MI_PAGE_COMBINE_STATISTICS PageCombineStats
		{
			get
			{
				_MI_PAGE_COMBINE_STATISTICS returnValue = new _MI_PAGE_COMBINE_STATISTICS(_StructureData, _BufferOffset + 360);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SEP_LOWBOX_NUMBER_ENTRY
 
	public class _SEP_LOWBOX_NUMBER_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEP_LOWBOX_NUMBER_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEP_LOWBOX_NUMBER_ENTRY"": [ 56, {
				 ""HashEntry"": [ 0, [ ""_RTL_DYNAMIC_HASH_TABLE_ENTRY"", ""null"" ]],
				 ""ReferenceCount"": [ 24, [ ""Int64"", ""null"" ]],
				 ""PackageSid"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LowboxNumber"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""AtomTable"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _RTL_DYNAMIC_HASH_TABLE_ENTRY HashEntry
		{
			get
			{
				_RTL_DYNAMIC_HASH_TABLE_ENTRY returnValue = new _RTL_DYNAMIC_HASH_TABLE_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int64 ReferenceCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 PackageSid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt32 LowboxNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt64 AtomTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _PPM_SELECTION_MENU
 
	public class _PPM_SELECTION_MENU
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPM_SELECTION_MENU(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPM_SELECTION_MENU"": [ 16, {
				 ""Count"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Entries"": [ 8, [ ""Pointer"", ""{\""target\"":\""_PPM_SELECTION_MENU_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 Entries { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _TraceLoggingMetadata_t
 
	public class _TraceLoggingMetadata_t
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TraceLoggingMetadata_t(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TraceLoggingMetadata_t"": [ 16, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Size"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Version"": [ 6, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 7, [ ""Byte"", ""null"" ]],
				 ""Magic"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public Byte Version{ get { return _StructureData[_BufferOffset +6]; } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +7]; } }
		public UInt64 Magic { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _INTERRUPT_VECTOR_DATA
 
	public class _INTERRUPT_VECTOR_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _INTERRUPT_VECTOR_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_INTERRUPT_VECTOR_DATA"": [ 88, {
				 ""Type"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""INTERRUPT_CONNECTION_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Vector"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Irql"": [ 8, [ ""Byte"", ""null"" ]],
				 ""Polarity"": [ 12, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_POLARITY\"",\""target\"":\""UInt32\""}"" ]],
				 ""Mode"": [ 16, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_MODE\"",\""target\"":\""UInt32\""}"" ]],
				 ""TargetProcessors"": [ 24, [ ""_GROUP_AFFINITY"", ""null"" ]],
				 ""IntRemapInfo"": [ 40, [ ""_INTERRUPT_REMAPPING_INFO"", ""null"" ]],
				 ""ControllerInput"": [ 56, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""HvDeviceId"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""XapicMessage"": [ 72, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""Hypertransport"": [ 72, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""GenericMessage"": [ 72, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""MessageRequest"": [ 72, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public INTERRUPT_CONNECTION_TYPE Type { get { return (INTERRUPT_CONNECTION_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Vector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public Byte Irql{ get { return _StructureData[_BufferOffset +8]; } }
		public _KINTERRUPT_POLARITY Polarity { get { return (_KINTERRUPT_POLARITY)BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _KINTERRUPT_MODE Mode { get { return (_KINTERRUPT_MODE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _GROUP_AFFINITY TargetProcessors
		{
			get
			{
				_GROUP_AFFINITY returnValue = new _GROUP_AFFINITY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _INTERRUPT_REMAPPING_INFO IntRemapInfo
		{
			get
			{
				_INTERRUPT_REMAPPING_INFO returnValue = new _INTERRUPT_REMAPPING_INFO(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG ControllerInput
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt64 HvDeviceId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public _ANONYMOUS_TAG XapicMessage
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG Hypertransport
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG GenericMessage
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG MessageRequest
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
	}
	#endregion
	#region _INTERRUPT_HT_INTR_INFO
 
	public class _INTERRUPT_HT_INTR_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _INTERRUPT_HT_INTR_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_INTERRUPT_HT_INTR_INFO"": [ 8, {
				 ""LowPart"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""HighPart"": [ 4, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG LowPart
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG HighPart
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CHILD_LIST
 
	public class _CHILD_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CHILD_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CHILD_LIST"": [ 8, {
				 ""Count"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""List"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 List { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _EVENT_HEADER
 
	public class _EVENT_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EVENT_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EVENT_HEADER"": [ 80, {
				 ""Size"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""HeaderType"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""EventProperty"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""ThreadId"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ProcessId"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""TimeStamp"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ProviderId"": [ 24, [ ""_GUID"", ""null"" ]],
				 ""EventDescriptor"": [ 40, [ ""_EVENT_DESCRIPTOR"", ""null"" ]],
				 ""KernelTime"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""UserTime"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""ProcessorTime"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""ActivityId"": [ 64, [ ""_GUID"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 HeaderType { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 EventProperty { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt32 ThreadId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ProcessId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _LARGE_INTEGER TimeStamp
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _GUID ProviderId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _EVENT_DESCRIPTOR EventDescriptor
		{
			get
			{
				_EVENT_DESCRIPTOR returnValue = new _EVENT_DESCRIPTOR(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt32 KernelTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 UserTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt64 ProcessorTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public _GUID ActivityId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KINTERRUPT
 
	public class _KINTERRUPT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KINTERRUPT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 288; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KINTERRUPT"": [ 288, {
				 ""Type"": [ 0, [ ""Int16"", ""null"" ]],
				 ""Size"": [ 2, [ ""Int16"", ""null"" ]],
				 ""InterruptListEntry"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ServiceRoutine"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MessageServiceRoutine"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MessageIndex"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""ServiceContext"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SpinLock"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""TickCount"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""ActualLock"": [ 72, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]],
				 ""DispatchAddress"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Vector"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""Irql"": [ 92, [ ""Byte"", ""null"" ]],
				 ""SynchronizeIrql"": [ 93, [ ""Byte"", ""null"" ]],
				 ""FloatingSave"": [ 94, [ ""Byte"", ""null"" ]],
				 ""Connected"": [ 95, [ ""Byte"", ""null"" ]],
				 ""Number"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""ShareVector"": [ 100, [ ""Byte"", ""null"" ]],
				 ""EmulateActiveBoth"": [ 101, [ ""Byte"", ""null"" ]],
				 ""ActiveCount"": [ 102, [ ""UInt16"", ""null"" ]],
				 ""InternalState"": [ 104, [ ""Int32"", ""null"" ]],
				 ""Mode"": [ 108, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_MODE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Polarity"": [ 112, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_POLARITY\"",\""target\"":\""UInt32\""}"" ]],
				 ""ServiceCount"": [ 116, [ ""UInt32"", ""null"" ]],
				 ""DispatchCount"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""PassiveEvent"": [ 128, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""TrapFrame"": [ 136, [ ""Pointer"", ""{\""target\"":\""_KTRAP_FRAME\""}"" ]],
				 ""DisconnectData"": [ 144, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ServiceThread"": [ 152, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""ConnectionData"": [ 160, [ ""Pointer"", ""{\""target\"":\""_INTERRUPT_CONNECTION_DATA\""}"" ]],
				 ""IntTrackEntry"": [ 168, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IsrDpcStats"": [ 176, [ ""_ISRDPCSTATS"", ""null"" ]],
				 ""RedirectObject"": [ 272, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PhysicalDeviceObject"": [ 280, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public Int16 Type { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 0); } }
		public Int16 Size { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 2); } }
		public _LIST_ENTRY InterruptListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 ServiceRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 MessageServiceRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt32 MessageIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt64 ServiceContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 SpinLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt32 TickCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt64 ActualLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 DispatchAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt32 Vector { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public Byte Irql{ get { return _StructureData[_BufferOffset +92]; } }
		public Byte SynchronizeIrql{ get { return _StructureData[_BufferOffset +93]; } }
		public Byte FloatingSave{ get { return _StructureData[_BufferOffset +94]; } }
		public Byte Connected{ get { return _StructureData[_BufferOffset +95]; } }
		public UInt32 Number { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public Byte ShareVector{ get { return _StructureData[_BufferOffset +100]; } }
		public Byte EmulateActiveBoth{ get { return _StructureData[_BufferOffset +101]; } }
		public UInt16 ActiveCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 102); } }
		public Int32 InternalState { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 104); } }
		public _KINTERRUPT_MODE Mode { get { return (_KINTERRUPT_MODE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public _KINTERRUPT_POLARITY Polarity { get { return (_KINTERRUPT_POLARITY)BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public UInt32 ServiceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 116); } }
		public UInt32 DispatchCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt64 PassiveEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 TrapFrame { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 DisconnectData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 ServiceThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 ConnectionData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 IntTrackEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public _ISRDPCSTATS IsrDpcStats
		{
			get
			{
				_ISRDPCSTATS returnValue = new _ISRDPCSTATS(_StructureData, _BufferOffset + 176);
				return returnValue;
			}
		}
		public UInt64 RedirectObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public UInt64 PhysicalDeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 280); } }
	}
	#endregion
	#region _IO_WORKITEM
 
	public class _IO_WORKITEM
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_WORKITEM(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_WORKITEM"": [ 88, {
				 ""WorkItem"": [ 0, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""Routine"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IoObject"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Context"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WorkOnBehalfThread"": [ 56, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""Type"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""ActivityId"": [ 68, [ ""_GUID"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _WORK_QUEUE_ITEM WorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Routine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 IoObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 WorkOnBehalfThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt32 Type { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public _GUID ActivityId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 68);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DISALLOWED_GUIDS
 
	public class _DISALLOWED_GUIDS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DISALLOWED_GUIDS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DISALLOWED_GUIDS"": [ 16, {
				 ""Count"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Guids"": [ 8, [ ""Pointer"", ""{\""target\"":\""_GUID\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Count { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt64 Guids { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _MMWSL_INSTANCE
 
	public class _MMWSL_INSTANCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMWSL_INSTANCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMWSL_INSTANCE"": [ 40, {
				 ""NextPteToTrim"": [ 0, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""NextPteToAge"": [ 8, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""NextPteToAccessClear"": [ 16, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""LastAccessClearingRemainder"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""LastAgingRemainder"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""LockedEntries"": [ 32, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 NextPteToTrim { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 NextPteToAge { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 NextPteToAccessClear { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 LastAccessClearingRemainder { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 LastAgingRemainder { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt64 LockedEntries { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _PI_BUS_EXTENSION
 
	public class _PI_BUS_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PI_BUS_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PI_BUS_EXTENSION"": [ 112, {
				 ""Flags"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""NumberCSNs"": [ 4, [ ""Byte"", ""null"" ]],
				 ""ReadDataPort"": [ 8, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""DataPortMapped"": [ 16, [ ""Byte"", ""null"" ]],
				 ""AddressPort"": [ 24, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""AddrPortMapped"": [ 32, [ ""Byte"", ""null"" ]],
				 ""CommandPort"": [ 40, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""CmdPortMapped"": [ 48, [ ""Byte"", ""null"" ]],
				 ""NextSlotNumber"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""DeviceList"": [ 56, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""CardList"": [ 64, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""PhysicalBusDevice"": [ 72, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""FunctionalBusDevice"": [ 80, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""AttachedDevice"": [ 88, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""BusNumber"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""SystemPowerState"": [ 100, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""DevicePowerState"": [ 104, [ ""Enumeration"", ""{\""enum_name\"":\""_DEVICE_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte NumberCSNs{ get { return _StructureData[_BufferOffset +4]; } }
		public UInt64 ReadDataPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public Byte DataPortMapped{ get { return _StructureData[_BufferOffset +16]; } }
		public UInt64 AddressPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public Byte AddrPortMapped{ get { return _StructureData[_BufferOffset +32]; } }
		public UInt64 CommandPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public Byte CmdPortMapped{ get { return _StructureData[_BufferOffset +48]; } }
		public UInt32 NextSlotNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public _SINGLE_LIST_ENTRY DeviceList
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY CardList
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt64 PhysicalBusDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 FunctionalBusDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 AttachedDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public _SYSTEM_POWER_STATE SystemPowerState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public _DEVICE_POWER_STATE DevicePowerState { get { return (_DEVICE_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
	}
	#endregion
	#region _WHEA_MEMORY_ERROR_SECTION
 
	public class _WHEA_MEMORY_ERROR_SECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_MEMORY_ERROR_SECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_MEMORY_ERROR_SECTION"": [ 80, {
				 ""ValidBits"": [ 0, [ ""_WHEA_MEMORY_ERROR_SECTION_VALIDBITS"", ""null"" ]],
				 ""ErrorStatus"": [ 8, [ ""_WHEA_ERROR_STATUS"", ""null"" ]],
				 ""PhysicalAddress"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""PhysicalAddressMask"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""Node"": [ 32, [ ""UInt16"", ""null"" ]],
				 ""Card"": [ 34, [ ""UInt16"", ""null"" ]],
				 ""Module"": [ 36, [ ""UInt16"", ""null"" ]],
				 ""Bank"": [ 38, [ ""UInt16"", ""null"" ]],
				 ""Device"": [ 40, [ ""UInt16"", ""null"" ]],
				 ""Row"": [ 42, [ ""UInt16"", ""null"" ]],
				 ""Column"": [ 44, [ ""UInt16"", ""null"" ]],
				 ""BitPosition"": [ 46, [ ""UInt16"", ""null"" ]],
				 ""RequesterId"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""ResponderId"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""TargetId"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""ErrorType"": [ 72, [ ""Byte"", ""null"" ]],
				 ""Extended"": [ 73, [ ""Byte"", ""null"" ]],
				 ""RankNumber"": [ 74, [ ""UInt16"", ""null"" ]],
				 ""CardHandle"": [ 76, [ ""UInt16"", ""null"" ]],
				 ""ModuleHandle"": [ 78, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _WHEA_MEMORY_ERROR_SECTION_VALIDBITS ValidBits
		{
			get
			{
				_WHEA_MEMORY_ERROR_SECTION_VALIDBITS returnValue = new _WHEA_MEMORY_ERROR_SECTION_VALIDBITS(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _WHEA_ERROR_STATUS ErrorStatus
		{
			get
			{
				_WHEA_ERROR_STATUS returnValue = new _WHEA_ERROR_STATUS(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 PhysicalAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 PhysicalAddressMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt16 Node { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 32); } }
		public UInt16 Card { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 34); } }
		public UInt16 Module { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 36); } }
		public UInt16 Bank { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 38); } }
		public UInt16 Device { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 40); } }
		public UInt16 Row { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 42); } }
		public UInt16 Column { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 44); } }
		public UInt16 BitPosition { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 46); } }
		public UInt64 RequesterId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 ResponderId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 TargetId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public Byte ErrorType{ get { return _StructureData[_BufferOffset +72]; } }
		public Byte Extended{ get { return _StructureData[_BufferOffset +73]; } }
		public UInt16 RankNumber { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 74); } }
		public UInt16 CardHandle { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 76); } }
		public UInt16 ModuleHandle { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 78); } }
	}
	#endregion
	#region _EX_POOL_HEAP_MANAGER_STATE
 
	public class _EX_POOL_HEAP_MANAGER_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_POOL_HEAP_MANAGER_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 551232; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_POOL_HEAP_MANAGER_STATE"": [ 551232, {
				 ""HeapManager"": [ 0, [ ""_RTLP_HP_HEAP_MANAGER"", ""null"" ]],
				 ""NumberOfPools"": [ 14544, [ ""UInt32"", ""null"" ]],
				 ""PoolNode"": [ 14592, [ ""Array"", ""{\""count\"":64,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""SpecialHeaps"": [ 551168, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_SEGMENT_HEAP\""}}"" ]] }]
				 }
				)";
			}
		}
		public _RTLP_HP_HEAP_MANAGER HeapManager
		{
			get
			{
				_RTLP_HP_HEAP_MANAGER returnValue = new _RTLP_HP_HEAP_MANAGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 NumberOfPools { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 14544); } }
		public _EX_HEAP_POOL_NODE[] PoolNode
		{
			get
			{
				_EX_HEAP_POOL_NODE[] returnValue = new _EX_HEAP_POOL_NODE[64];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<64; i++ )
					returnValue[i] = new _EX_HEAP_POOL_NODE(_StructureData, (i * size) + _BufferOffset + 14592);
				return returnValue;
			}
		}
		public _SEGMENT_HEAP[] SpecialHeaps
		{
			get
			{
				_SEGMENT_HEAP[] returnValue = new _SEGMENT_HEAP[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new _SEGMENT_HEAP(_StructureData, (i * size) + _BufferOffset + 551168);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SK_CRASH_MODULE
 
	public class _SK_CRASH_MODULE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SK_CRASH_MODULE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SK_CRASH_MODULE"": [ 72, {
				 ""ImageName"": [ 0, [ ""Array"", ""{\""count\"":32,\""target\"":\""UInt16\""}"" ]],
				 ""SizeOfImage"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""TimeDateStamp"": [ 68, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16[] ImageName
		{
			get
			{
				UInt16[] returnValue = new UInt16[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 SizeOfImage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 TimeDateStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
	}
	#endregion
	#region _KAPC_STATE
 
	public class _KAPC_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KAPC_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KAPC_STATE"": [ 48, {
				 ""ApcListHead"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""Process"": [ 32, [ ""Pointer"", ""{\""target\"":\""_KPROCESS\""}"" ]],
				 ""InProgressFlags"": [ 40, [ ""Byte"", ""null"" ]],
				 ""KernelApcInProgress"": [ 40, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""SpecialApcInProgress"": [ 40, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""KernelApcPending"": [ 41, [ ""Byte"", ""null"" ]],
				 ""UserApcPendingAll"": [ 42, [ ""Byte"", ""null"" ]],
				 ""SpecialUserApcPending"": [ 42, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""UserApcPending"": [ 42, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY[] ApcListHead
		{
			get
			{
				_LIST_ENTRY[] returnValue = new _LIST_ENTRY[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _LIST_ENTRY(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Process { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public Byte InProgressFlags{ get { return _StructureData[_BufferOffset +40]; } }
		public Byte KernelApcInProgress
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 40];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte SpecialApcInProgress
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 40];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte KernelApcPending{ get { return _StructureData[_BufferOffset +41]; } }
		public Byte UserApcPendingAll{ get { return _StructureData[_BufferOffset +42]; } }
		public Byte SpecialUserApcPending
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 42];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte UserApcPending
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 42];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
	}
	#endregion
	#region _PEP_ACPI_RESOURCE_FLAGS
 
	public class _PEP_ACPI_RESOURCE_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_ACPI_RESOURCE_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_ACPI_RESOURCE_FLAGS"": [ 4, {
				 ""AsULong"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Shared"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Wake"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""ResourceUsage"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""SlaveMode"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""AddressingMode"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""SharedMode"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 AsULong { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Shared
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Wake
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 ResourceUsage
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 SlaveMode
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 AddressingMode
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 SharedMode
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 6  end: 32  Mask: 11111111111111111111111111000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967232) >> 6;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _ETW_REF_CLOCK
 
	public class _ETW_REF_CLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_REF_CLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_REF_CLOCK"": [ 16, {
				 ""StartTime"": [ 0, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""StartPerfClock"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LARGE_INTEGER StartTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LARGE_INTEGER StartPerfClock
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IO_ADAPTER_CRYPTO_PARAMETERS
 
	public class _IO_ADAPTER_CRYPTO_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_ADAPTER_CRYPTO_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_ADAPTER_CRYPTO_PARAMETERS"": [ 16, {
				 ""Tweak"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""KeyDescriptor"": [ 8, [ ""Pointer"", ""{\""target\"":\""_IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Tweak { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 KeyDescriptor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _HEAP_VAMGR_CTX
 
	public class _HEAP_VAMGR_CTX
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_VAMGR_CTX(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 14400; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_VAMGR_CTX"": [ 14400, {
				 ""VaSpace"": [ 0, [ ""_HEAP_VAMGR_VASPACE"", ""null"" ]],
				 ""AllocatorLock"": [ 2144, [ ""UInt64"", ""null"" ]],
				 ""AllocatorCount"": [ 2152, [ ""UInt32"", ""null"" ]],
				 ""Allocators"": [ 2160, [ ""Array"", ""{\""count\"":255,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public _HEAP_VAMGR_VASPACE VaSpace
		{
			get
			{
				_HEAP_VAMGR_VASPACE returnValue = new _HEAP_VAMGR_VASPACE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 AllocatorLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2144); } }
		public UInt32 AllocatorCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2152); } }
		public _HEAP_VAMGR_ALLOCATOR[] Allocators
		{
			get
			{
				_HEAP_VAMGR_ALLOCATOR[] returnValue = new _HEAP_VAMGR_ALLOCATOR[255];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<255; i++ )
					returnValue[i] = new _HEAP_VAMGR_ALLOCATOR(_StructureData, (i * size) + _BufferOffset + 2160);
				return returnValue;
			}
		}
	}
	#endregion
	#region _TOKEN_SOURCE
 
	public class _TOKEN_SOURCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TOKEN_SOURCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TOKEN_SOURCE"": [ 16, {
				 ""SourceName"": [ 0, [ ""Array"", ""{\""count\"":8,\""target\"":\""Char\""}"" ]],
				 ""SourceIdentifier"": [ 8, [ ""_LUID"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Char[] SourceName
		{
			get
			{
				Char[] returnValue = new Char[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LUID SourceIdentifier
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DEBUG_DEVICE_DESCRIPTOR
 
	public class _DEBUG_DEVICE_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEBUG_DEVICE_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 248; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEBUG_DEVICE_DESCRIPTOR"": [ 248, {
				 ""Bus"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Slot"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Segment"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""VendorID"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""DeviceID"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""BaseClass"": [ 14, [ ""Byte"", ""null"" ]],
				 ""SubClass"": [ 15, [ ""Byte"", ""null"" ]],
				 ""ProgIf"": [ 16, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 17, [ ""Byte"", ""null"" ]],
				 ""DbgHalScratchAllocated"": [ 17, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""DbgBarsMapped"": [ 17, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""DbgScratchAllocated"": [ 17, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""Initialized"": [ 18, [ ""Byte"", ""null"" ]],
				 ""Configured"": [ 19, [ ""Byte"", ""null"" ]],
				 ""BaseAddress"": [ 24, [ ""Array"", ""{\""count\"":6,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""Memory"": [ 168, [ ""DEBUG_MEMORY_REQUIREMENTS"", ""null"" ]],
				 ""Dbg2TableIndex"": [ 200, [ ""UInt32"", ""null"" ]],
				 ""PortType"": [ 204, [ ""UInt16"", ""null"" ]],
				 ""PortSubtype"": [ 206, [ ""UInt16"", ""null"" ]],
				 ""OemData"": [ 208, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OemDataLength"": [ 216, [ ""UInt32"", ""null"" ]],
				 ""NameSpace"": [ 220, [ ""Enumeration"", ""{\""enum_name\"":\""KD_NAMESPACE_ENUM\"",\""target\"":\""UInt32\""}"" ]],
				 ""NameSpacePath"": [ 224, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""NameSpacePathLength"": [ 232, [ ""UInt32"", ""null"" ]],
				 ""TransportType"": [ 236, [ ""UInt32"", ""null"" ]],
				 ""TransportData"": [ 240, [ ""_DEBUG_TRANSPORT_DATA"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Bus { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Slot { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt16 Segment { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 VendorID { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public UInt16 DeviceID { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public Byte BaseClass{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte SubClass{ get { return _StructureData[_BufferOffset +15]; } }
		public Byte ProgIf{ get { return _StructureData[_BufferOffset +16]; } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +17]; } }
		public Byte DbgHalScratchAllocated
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 17];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte DbgBarsMapped
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 17];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte DbgScratchAllocated
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 17];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte Initialized{ get { return _StructureData[_BufferOffset +18]; } }
		public Byte Configured{ get { return _StructureData[_BufferOffset +19]; } }
		public DEBUG_DEVICE_ADDRESS[] BaseAddress
		{
			get
			{
				DEBUG_DEVICE_ADDRESS[] returnValue = new DEBUG_DEVICE_ADDRESS[6];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<6; i++ )
					returnValue[i] = new DEBUG_DEVICE_ADDRESS(_StructureData, (i * size) + _BufferOffset + 24);
				return returnValue;
			}
		}
		public DEBUG_MEMORY_REQUIREMENTS Memory
		{
			get
			{
				DEBUG_MEMORY_REQUIREMENTS returnValue = new DEBUG_MEMORY_REQUIREMENTS(_StructureData, _BufferOffset + 168);
				return returnValue;
			}
		}
		public UInt32 Dbg2TableIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 200); } }
		public UInt16 PortType { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 204); } }
		public UInt16 PortSubtype { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 206); } }
		public UInt64 OemData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt32 OemDataLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 216); } }
		public KD_NAMESPACE_ENUM NameSpace { get { return (KD_NAMESPACE_ENUM)BitConverter.ToUInt32(_StructureData, _BufferOffset + 220); } }
		public UInt64 NameSpacePath { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt32 NameSpacePathLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 232); } }
		public UInt32 TransportType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 236); } }
		public _DEBUG_TRANSPORT_DATA TransportData
		{
			get
			{
				_DEBUG_TRANSPORT_DATA returnValue = new _DEBUG_TRANSPORT_DATA(_StructureData, _BufferOffset + 240);
				return returnValue;
			}
		}
	}
	#endregion
	#region _THERMAL_INFORMATION_EX
 
	public class _THERMAL_INFORMATION_EX
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _THERMAL_INFORMATION_EX(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 92; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_THERMAL_INFORMATION_EX"": [ 92, {
				 ""ThermalStamp"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ThermalConstant1"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ThermalConstant2"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SamplingPeriod"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""CurrentTemperature"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""PassiveTripPoint"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""ThermalStandbyTripPoint"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""CriticalTripPoint"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""ActiveTripPointCount"": [ 32, [ ""Byte"", ""null"" ]],
				 ""PassiveCoolingDevicesPresent"": [ 33, [ ""Byte"", ""null"" ]],
				 ""ActiveTripPoint"": [ 36, [ ""Array"", ""{\""count\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""S4TransitionTripPoint"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""MinimumThrottle"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""OverThrottleThreshold"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""PollingPeriod"": [ 88, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ThermalStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ThermalConstant1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ThermalConstant2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 SamplingPeriod { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 CurrentTemperature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 PassiveTripPoint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 ThermalStandbyTripPoint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 CriticalTripPoint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public Byte ActiveTripPointCount{ get { return _StructureData[_BufferOffset +32]; } }
		public Byte PassiveCoolingDevicesPresent{ get { return _StructureData[_BufferOffset +33]; } }
		public UInt32[] ActiveTripPoint
		{
			get
			{
				UInt32[] returnValue = new UInt32[10];
				for(int i=0; i<10; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 36);
				return returnValue;
			}
		}
		public UInt32 S4TransitionTripPoint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 MinimumThrottle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 OverThrottleThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 PollingPeriod { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
	}
	#endregion
	#region _LOGGED_STREAM_CALLBACK_V2
 
	public class _LOGGED_STREAM_CALLBACK_V2
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LOGGED_STREAM_CALLBACK_V2(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LOGGED_STREAM_CALLBACK_V2"": [ 8, {
				 ""LogHandleContext"": [ 0, [ ""Pointer"", ""{\""target\"":\""_LOG_HANDLE_CONTEXT\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 LogHandleContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _KPRIQUEUE
 
	public class _KPRIQUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KPRIQUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 688; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KPRIQUEUE"": [ 688, {
				 ""Header"": [ 0, [ ""_DISPATCHER_HEADER"", ""null"" ]],
				 ""EntryListHead"": [ 24, [ ""Array"", ""{\""count\"":32,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""CurrentCount"": [ 536, [ ""Array"", ""{\""count\"":32,\""target\"":\""Int32\""}"" ]],
				 ""MaximumCount"": [ 664, [ ""UInt32"", ""null"" ]],
				 ""ThreadListHead"": [ 672, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _DISPATCHER_HEADER Header
		{
			get
			{
				_DISPATCHER_HEADER returnValue = new _DISPATCHER_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY[] EntryListHead
		{
			get
			{
				_LIST_ENTRY[] returnValue = new _LIST_ENTRY[32];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<32; i++ )
					returnValue[i] = new _LIST_ENTRY(_StructureData, (i * size) + _BufferOffset + 24);
				return returnValue;
			}
		}
		public Int32[] CurrentCount
		{
			get
			{
				Int32[] returnValue = new Int32[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = BitConverter.ToInt32(_StructureData, (i * sizeof(Int32)) + _BufferOffset + 536);
				return returnValue;
			}
		}
		public UInt32 MaximumCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 664); } }
		public _LIST_ENTRY ThreadListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 672);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IOP_IRP_EXTENSION_STATUS
 
	public class _IOP_IRP_EXTENSION_STATUS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IOP_IRP_EXTENSION_STATUS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IOP_IRP_EXTENSION_STATUS"": [ 12, {
				 ""Flags"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ActivityId"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""IoTracking"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ActivityId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 IoTracking { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _CM_KEY_SECURITY_CACHE
 
	public class _CM_KEY_SECURITY_CACHE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_SECURITY_CACHE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_SECURITY_CACHE"": [ 56, {
				 ""Cell"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ConvKey"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""List"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DescriptorLength"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""RealRefCount"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""Descriptor"": [ 32, [ ""_SECURITY_DESCRIPTOR_RELATIVE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Cell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ConvKey { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LIST_ENTRY List
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 DescriptorLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 RealRefCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public _SECURITY_DESCRIPTOR_RELATIVE Descriptor
		{
			get
			{
				_SECURITY_DESCRIPTOR_RELATIVE returnValue = new _SECURITY_DESCRIPTOR_RELATIVE(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_SRWLOCK
 
	public class _RTL_SRWLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_SRWLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_SRWLOCK"": [ 8, {
				 ""Locked"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Waiting"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""Waking"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""MultipleShared"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""Shared"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""Value"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Ptr"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Locked
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Waiting
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 Waking
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 MultipleShared
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt64)value2;
			}
		}
		public UInt64 Shared
		{
			get
			{
				// start: 4  end: 64  Mask: 1111111111111111111111111111111111111111111111111111111111110000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744073709551600) >> 4;
				return (UInt64)value2;
			}
		}
		public UInt64 Value { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Ptr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _EX_WORK_QUEUE
 
	public class _EX_WORK_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_WORK_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 736; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_WORK_QUEUE"": [ 736, {
				 ""WorkPriQueue"": [ 0, [ ""_KPRIQUEUE"", ""null"" ]],
				 ""Partition"": [ 688, [ ""Pointer"", ""{\""target\"":\""_EX_PARTITION\""}"" ]],
				 ""Node"": [ 696, [ ""Pointer"", ""{\""target\"":\""_ENODE\""}"" ]],
				 ""WorkItemsProcessed"": [ 704, [ ""UInt32"", ""null"" ]],
				 ""WorkItemsProcessedLastPass"": [ 708, [ ""UInt32"", ""null"" ]],
				 ""ThreadCount"": [ 712, [ ""Int32"", ""null"" ]],
				 ""MinThreads"": [ 716, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":0,\""target\"":\""Int32\""}"" ]],
				 ""TryFailed"": [ 716, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""MaxThreads"": [ 720, [ ""Int32"", ""null"" ]],
				 ""QueueIndex"": [ 724, [ ""Enumeration"", ""{\""enum_name\"":\""_EXQUEUEINDEX\"",\""target\"":\""UInt32\""}"" ]],
				 ""AllThreadsExitedEvent"": [ 728, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]] }]
				 }
				)";
			}
		}
		public _KPRIQUEUE WorkPriQueue
		{
			get
			{
				_KPRIQUEUE returnValue = new _KPRIQUEUE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Partition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 688); } }
		public UInt64 Node { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 696); } }
		public UInt32 WorkItemsProcessed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 704); } }
		public UInt32 WorkItemsProcessedLastPass { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 708); } }
		public Int32 ThreadCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 712); } }
		public UInt32 MinThreads
		{
			get
			{
				// start: 0  end: 31  Mask: 1111111111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 716);
				var value2 = (value & 2147483647) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 TryFailed
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 716);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public Int32 MaxThreads { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 720); } }
		public _EXQUEUEINDEX QueueIndex { get { return (_EXQUEUEINDEX)BitConverter.ToUInt32(_StructureData, _BufferOffset + 724); } }
		public UInt64 AllThreadsExitedEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 728); } }
	}
	#endregion
	#region _KSCB
 
	public class _KSCB
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KSCB(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 424; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KSCB"": [ 424, {
				 ""GenerationCycles"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""MinQuotaCycleTarget"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""MaxQuotaCycleTarget"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""RankCycleTarget"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""LongTermCycles"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""LastReportedCycles"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""OverQuotaHistory"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""ReadyTime"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""InsertTime"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""PerProcessorList"": [ 72, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""QueueNode"": [ 88, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""Inserted"": [ 112, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""MaxOverQuota"": [ 112, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""MinOverQuota"": [ 112, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""RankBias"": [ 112, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""SoftCap"": [ 112, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""ShareRankOwner"": [ 112, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""Spare1"": [ 112, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""Depth"": [ 113, [ ""Byte"", ""null"" ]],
				 ""ReadySummary"": [ 114, [ ""UInt16"", ""null"" ]],
				 ""Rank"": [ 116, [ ""UInt32"", ""null"" ]],
				 ""ShareRank"": [ 120, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""OwnerShareRank"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""ReadyListHead"": [ 136, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""ChildScbQueue"": [ 392, [ ""_RTL_RB_TREE"", ""null"" ]],
				 ""Parent"": [ 408, [ ""Pointer"", ""{\""target\"":\""_KSCB\""}"" ]],
				 ""Root"": [ 416, [ ""Pointer"", ""{\""target\"":\""_KSCB\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 GenerationCycles { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 MinQuotaCycleTarget { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 MaxQuotaCycleTarget { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 RankCycleTarget { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 LongTermCycles { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 LastReportedCycles { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 OverQuotaHistory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 ReadyTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 InsertTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public _LIST_ENTRY PerProcessorList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _RTL_BALANCED_NODE QueueNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public Byte Inserted
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 112];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte MaxOverQuota
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 112];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte MinOverQuota
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 112];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte RankBias
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 112];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte SoftCap
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 112];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte ShareRankOwner
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 112];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte Spare1
		{
			get
			{
				// start: 6  end: 8  Mask: 0000000011000000
				Byte value = _StructureData[_BufferOffset + 112];
				var value2 = (value & 192) >> 6;
				return (Byte)value2;
			}
		}
		public Byte Depth{ get { return _StructureData[_BufferOffset +113]; } }
		public UInt16 ReadySummary { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 114); } }
		public UInt32 Rank { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 116); } }
		public UInt64 ShareRank { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt32 OwnerShareRank { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public _LIST_ENTRY[] ReadyListHead
		{
			get
			{
				_LIST_ENTRY[] returnValue = new _LIST_ENTRY[16];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<16; i++ )
					returnValue[i] = new _LIST_ENTRY(_StructureData, (i * size) + _BufferOffset + 136);
				return returnValue;
			}
		}
		public _RTL_RB_TREE ChildScbQueue
		{
			get
			{
				_RTL_RB_TREE returnValue = new _RTL_RB_TREE(_StructureData, _BufferOffset + 392);
				return returnValue;
			}
		}
		public UInt64 Parent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 408); } }
		public UInt64 Root { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 416); } }
	}
	#endregion
	#region _KLDR_DATA_TABLE_ENTRY
 
	public class _KLDR_DATA_TABLE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KLDR_DATA_TABLE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KLDR_DATA_TABLE_ENTRY"": [ 160, {
				 ""InLoadOrderLinks"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ExceptionTable"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ExceptionTableSize"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""GpValue"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NonPagedDebugInfo"": [ 40, [ ""Pointer"", ""{\""target\"":\""_NON_PAGED_DEBUG_INFO\""}"" ]],
				 ""DllBase"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EntryPoint"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SizeOfImage"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""FullDllName"": [ 72, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""BaseDllName"": [ 88, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""Flags"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""LoadCount"": [ 108, [ ""UInt16"", ""null"" ]],
				 ""u1"": [ 110, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""SectionPointer"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CheckSum"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""CoverageSectionSize"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""CoverageSection"": [ 128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LoadedImports"": [ 136, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Spare"": [ 144, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SizeOfImageNotRounded"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""TimeDateStamp"": [ 156, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY InLoadOrderLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 ExceptionTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 ExceptionTableSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt64 GpValue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 NonPagedDebugInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 DllBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 EntryPoint { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt32 SizeOfImage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public _UNICODE_STRING FullDllName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _UNICODE_STRING BaseDllName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt16 LoadCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 108); } }
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 110);
				return returnValue;
			}
		}
		public UInt64 SectionPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt32 CheckSum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 CoverageSectionSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt64 CoverageSection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 LoadedImports { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 Spare { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt32 SizeOfImageNotRounded { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public UInt32 TimeDateStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 156); } }
	}
	#endregion
	#region _VF_TRACKER
 
	public class _VF_TRACKER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VF_TRACKER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VF_TRACKER"": [ 16, {
				 ""TrackerFlags"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TrackerSize"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""TrackerIndex"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""TraceDepth"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 TrackerFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 TrackerSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 TrackerIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 TraceDepth { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _MI_SYSTEM_TRIM_STATE
 
	public class _MI_SYSTEM_TRIM_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SYSTEM_TRIM_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SYSTEM_TRIM_STATE"": [ 64, {
				 ""ExpansionLock"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""TrimInProgressCount"": [ 8, [ ""Int32"", ""null"" ]],
				 ""PeriodicWorkingSetEvent"": [ 16, [ ""_KEVENT"", ""null"" ]],
				 ""TrimAllPageFaultCount"": [ 40, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ExpansionLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Int32 TrimInProgressCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public _KEVENT PeriodicWorkingSetEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32[] TrimAllPageFaultCount
		{
			get
			{
				UInt32[] returnValue = new UInt32[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 40);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTLP_HP_METADATA_HEAP_CTX
 
	public class _RTLP_HP_METADATA_HEAP_CTX
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTLP_HP_METADATA_HEAP_CTX(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTLP_HP_METADATA_HEAP_CTX"": [ 16, {
				 ""Heap"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SEGMENT_HEAP\""}"" ]],
				 ""InitOnce"": [ 8, [ ""_RTL_RUN_ONCE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Heap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _RTL_RUN_ONCE InitOnce
		{
			get
			{
				_RTL_RUN_ONCE returnValue = new _RTL_RUN_ONCE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_RETPOLINE_ROUTINES
 
	public class _RTL_RETPOLINE_ROUTINES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_RETPOLINE_ROUTINES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_RETPOLINE_ROUTINES"": [ 80, {
				 ""UnwindDataOffset"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SwitchtableJump"": [ 4, [ ""Array"", ""{\""count\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""CfgIndirectRax"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""NonCfgIndirectRax"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""ImportR10"": [ 76, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 UnwindDataOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32[] SwitchtableJump
		{
			get
			{
				UInt32[] returnValue = new UInt32[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 CfgIndirectRax { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 NonCfgIndirectRax { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 ImportR10 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
	}
	#endregion
	#region _KMUTANT
 
	public class _KMUTANT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KMUTANT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KMUTANT"": [ 56, {
				 ""Header"": [ 0, [ ""_DISPATCHER_HEADER"", ""null"" ]],
				 ""MutantListEntry"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""OwnerThread"": [ 40, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""MutantFlags"": [ 48, [ ""Byte"", ""null"" ]],
				 ""Abandoned"": [ 48, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Spare1"": [ 48, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""Abandoned2"": [ 48, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""AbEnabled"": [ 48, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""Spare2"": [ 48, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""ApcDisable"": [ 49, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _DISPATCHER_HEADER Header
		{
			get
			{
				_DISPATCHER_HEADER returnValue = new _DISPATCHER_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY MutantListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 OwnerThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public Byte MutantFlags{ get { return _StructureData[_BufferOffset +48]; } }
		public Byte Abandoned
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 48];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Spare1
		{
			get
			{
				// start: 1  end: 8  Mask: 0000000011111110
				Byte value = _StructureData[_BufferOffset + 48];
				var value2 = (value & 254) >> 1;
				return (Byte)value2;
			}
		}
		public Byte Abandoned2
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 48];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte AbEnabled
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 48];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte Spare2
		{
			get
			{
				// start: 2  end: 8  Mask: 0000000011111100
				Byte value = _StructureData[_BufferOffset + 48];
				var value2 = (value & 252) >> 2;
				return (Byte)value2;
			}
		}
		public Byte ApcDisable{ get { return _StructureData[_BufferOffset +49]; } }
	}
	#endregion
	#region _MI_ACTIVE_PFN
 
	public class _MI_ACTIVE_PFN
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_ACTIVE_PFN(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_ACTIVE_PFN"": [ 8, {
				 ""Leaf"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""PageTable"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""EntireActiveField"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG Leaf
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG PageTable
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 EntireActiveField { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _TRACE_ENABLE_INFO
 
	public class _TRACE_ENABLE_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TRACE_ENABLE_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TRACE_ENABLE_INFO"": [ 32, {
				 ""IsEnabled"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Level"": [ 4, [ ""Byte"", ""null"" ]],
				 ""Reserved1"": [ 5, [ ""Byte"", ""null"" ]],
				 ""LoggerId"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""EnableProperty"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Reserved2"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""MatchAnyKeyword"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""MatchAllKeyword"": [ 24, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 IsEnabled { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte Level{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte Reserved1{ get { return _StructureData[_BufferOffset +5]; } }
		public UInt16 LoggerId { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt32 EnableProperty { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Reserved2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 MatchAnyKeyword { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 MatchAllKeyword { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _OBJECT_REF_STACK_INFO
 
	public class _OBJECT_REF_STACK_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_REF_STACK_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_REF_STACK_INFO"": [ 12, {
				 ""Sequence"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Index"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""NumTraces"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""Tag"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Sequence { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16 Index { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 NumTraces { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt32 Tag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _ETW_FILTER_STRING_TOKEN
 
	public class _ETW_FILTER_STRING_TOKEN
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_FILTER_STRING_TOKEN(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_FILTER_STRING_TOKEN"": [ 24, {
				 ""Count"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Tokens"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Count { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public _ETW_FILTER_STRING_TOKEN_ELEMENT[] Tokens
		{
			get
			{
				_ETW_FILTER_STRING_TOKEN_ELEMENT[] returnValue = new _ETW_FILTER_STRING_TOKEN_ELEMENT[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _ETW_FILTER_STRING_TOKEN_ELEMENT(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MM_SYSTEM_PAGE_COUNTS
 
	public class _MM_SYSTEM_PAGE_COUNTS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MM_SYSTEM_PAGE_COUNTS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MM_SYSTEM_PAGE_COUNTS"": [ 16, {
				 ""SystemCodePage"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SystemDriverPage"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""TotalSystemCodePages"": [ 8, [ ""Int32"", ""null"" ]],
				 ""TotalSystemDriverPages"": [ 12, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SystemCodePage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SystemDriverPage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public Int32 TotalSystemCodePages { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public Int32 TotalSystemDriverPages { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _KTMNOTIFICATION_PACKET
 
	public class _KTMNOTIFICATION_PACKET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTMNOTIFICATION_PACKET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTMNOTIFICATION_PACKET"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _KENLISTMENT
 
	public class _KENLISTMENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KENLISTMENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 480; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KENLISTMENT"": [ 480, {
				 ""cookie"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""NamespaceLink"": [ 8, [ ""_KTMOBJECT_NAMESPACE_LINK"", ""null"" ]],
				 ""EnlistmentId"": [ 48, [ ""_GUID"", ""null"" ]],
				 ""Mutex"": [ 64, [ ""_KMUTANT"", ""null"" ]],
				 ""NextSameTx"": [ 120, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""NextSameRm"": [ 136, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ResourceManager"": [ 152, [ ""Pointer"", ""{\""target\"":\""_KRESOURCEMANAGER\""}"" ]],
				 ""Transaction"": [ 160, [ ""Pointer"", ""{\""target\"":\""_KTRANSACTION\""}"" ]],
				 ""State"": [ 168, [ ""Enumeration"", ""{\""enum_name\"":\""_KENLISTMENT_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 172, [ ""UInt32"", ""null"" ]],
				 ""NotificationMask"": [ 176, [ ""UInt32"", ""null"" ]],
				 ""Key"": [ 184, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KeyRefCount"": [ 192, [ ""UInt32"", ""null"" ]],
				 ""RecoveryInformation"": [ 200, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RecoveryInformationLength"": [ 208, [ ""UInt32"", ""null"" ]],
				 ""DynamicNameInformation"": [ 216, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DynamicNameInformationLength"": [ 224, [ ""UInt32"", ""null"" ]],
				 ""FinalNotification"": [ 232, [ ""Pointer"", ""{\""target\"":\""_KTMNOTIFICATION_PACKET\""}"" ]],
				 ""SupSubEnlistment"": [ 240, [ ""Pointer"", ""{\""target\"":\""_KENLISTMENT\""}"" ]],
				 ""SupSubEnlHandle"": [ 248, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SubordinateTxHandle"": [ 256, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CrmEnlistmentEnId"": [ 264, [ ""_GUID"", ""null"" ]],
				 ""CrmEnlistmentTmId"": [ 280, [ ""_GUID"", ""null"" ]],
				 ""CrmEnlistmentRmId"": [ 296, [ ""_GUID"", ""null"" ]],
				 ""NextHistory"": [ 312, [ ""UInt32"", ""null"" ]],
				 ""History"": [ 316, [ ""Array"", ""{\""count\"":20,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 cookie { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _KTMOBJECT_NAMESPACE_LINK NamespaceLink
		{
			get
			{
				_KTMOBJECT_NAMESPACE_LINK returnValue = new _KTMOBJECT_NAMESPACE_LINK(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _GUID EnlistmentId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _KMUTANT Mutex
		{
			get
			{
				_KMUTANT returnValue = new _KMUTANT(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _LIST_ENTRY NextSameTx
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
		public _LIST_ENTRY NextSameRm
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public UInt64 ResourceManager { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 Transaction { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public _KENLISTMENT_STATE State { get { return (_KENLISTMENT_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 172); } }
		public UInt32 NotificationMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 176); } }
		public UInt64 Key { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public UInt32 KeyRefCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public UInt64 RecoveryInformation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt32 RecoveryInformationLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 208); } }
		public UInt64 DynamicNameInformation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt32 DynamicNameInformationLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 224); } }
		public UInt64 FinalNotification { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 SupSubEnlistment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 SupSubEnlHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public UInt64 SubordinateTxHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public _GUID CrmEnlistmentEnId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 264);
				return returnValue;
			}
		}
		public _GUID CrmEnlistmentTmId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 280);
				return returnValue;
			}
		}
		public _GUID CrmEnlistmentRmId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 296);
				return returnValue;
			}
		}
		public UInt32 NextHistory { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 312); } }
		public _KENLISTMENT_HISTORY[] History
		{
			get
			{
				_KENLISTMENT_HISTORY[] returnValue = new _KENLISTMENT_HISTORY[20];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<20; i++ )
					returnValue[i] = new _KENLISTMENT_HISTORY(_StructureData, (i * size) + _BufferOffset + 316);
				return returnValue;
			}
		}
	}
	#endregion
	#region _THERMAL_POLICY
 
	public class _THERMAL_POLICY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _THERMAL_POLICY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_THERMAL_POLICY"": [ 24, {
				 ""Version"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""WaitForUpdate"": [ 4, [ ""Byte"", ""null"" ]],
				 ""Hibernate"": [ 5, [ ""Byte"", ""null"" ]],
				 ""Critical"": [ 6, [ ""Byte"", ""null"" ]],
				 ""ThermalStandby"": [ 7, [ ""Byte"", ""null"" ]],
				 ""ActivationReasons"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""PassiveLimit"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""ActiveLevel"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""OverThrottled"": [ 20, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte WaitForUpdate{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte Hibernate{ get { return _StructureData[_BufferOffset +5]; } }
		public Byte Critical{ get { return _StructureData[_BufferOffset +6]; } }
		public Byte ThermalStandby{ get { return _StructureData[_BufferOffset +7]; } }
		public UInt32 ActivationReasons { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 PassiveLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 ActiveLevel { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Byte OverThrottled{ get { return _StructureData[_BufferOffset +20]; } }
	}
	#endregion
	#region _FILE_GET_QUOTA_INFORMATION
 
	public class _FILE_GET_QUOTA_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FILE_GET_QUOTA_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FILE_GET_QUOTA_INFORMATION"": [ 20, {
				 ""NextEntryOffset"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SidLength"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Sid"": [ 8, [ ""_SID"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 NextEntryOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SidLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _SID Sid
		{
			get
			{
				_SID returnValue = new _SID(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_ACCESS_LOG_STATE
 
	public class _MI_ACCESS_LOG_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_ACCESS_LOG_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_ACCESS_LOG_STATE"": [ 128, {
				 ""CcAccessLog"": [ 0, [ ""Pointer"", ""{\""target\"":\""_MM_PAGE_ACCESS_INFO_HEADER\""}"" ]],
				 ""DisableAccessLogging"": [ 8, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""Enabled"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""MinLoggingPriority"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""AccessLoggingLock"": [ 64, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 CcAccessLog { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _WORK_QUEUE_ITEM DisableAccessLogging
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 Enabled { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 MinLoggingPriority { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt64 AccessLoggingLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _HMAP_TABLE
 
	public class _HMAP_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HMAP_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12288; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HMAP_TABLE"": [ 12288, {
				 ""Table"": [ 0, [ ""Array"", ""{\""count\"":512,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public _HMAP_ENTRY[] Table
		{
			get
			{
				_HMAP_ENTRY[] returnValue = new _HMAP_ENTRY[512];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<512; i++ )
					returnValue[i] = new _HMAP_ENTRY(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _VF_TARGET_DRIVER
 
	public class _VF_TARGET_DRIVER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VF_TARGET_DRIVER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VF_TARGET_DRIVER"": [ 64, {
				 ""TreeNode"": [ 0, [ ""_VF_AVL_TREE_NODE_EX"", ""null"" ]],
				 ""u1"": [ 24, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""VerifiedData"": [ 56, [ ""Pointer"", ""{\""target\"":\""_VF_TARGET_VERIFIED_DRIVER_DATA\""}"" ]] }]
				 }
				)";
			}
		}
		public _VF_AVL_TREE_NODE_EX TreeNode
		{
			get
			{
				_VF_AVL_TREE_NODE_EX returnValue = new _VF_AVL_TREE_NODE_EX(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 VerifiedData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
	}
	#endregion
	#region _ENERGY_STATE_DURATION
 
	public class _ENERGY_STATE_DURATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ENERGY_STATE_DURATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ENERGY_STATE_DURATION"": [ 8, {
				 ""Value"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""LastChangeTime"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Duration"": [ 4, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""IsInState"": [ 4, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Value { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 LastChangeTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Duration
		{
			get
			{
				// start: 0  end: 31  Mask: 1111111111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 2147483647) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 IsInState
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _VI_VERIFIER_POOL_HEADER
 
	public class _VI_VERIFIER_POOL_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VI_VERIFIER_POOL_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VI_VERIFIER_POOL_HEADER"": [ 8, {
				 ""VerifierPoolEntry"": [ 0, [ ""Pointer"", ""{\""target\"":\""_VI_POOL_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 VerifierPoolEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _MI_REVERSE_VIEW_MAP
 
	public class _MI_REVERSE_VIEW_MAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_REVERSE_VIEW_MAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_REVERSE_VIEW_MAP"": [ 40, {
				 ""ViewLinks"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SystemCacheVa"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SessionViewVa"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VadsProcess"": [ 16, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""Type"": [ 16, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Subsection"": [ 24, [ ""Pointer"", ""{\""target\"":\""_SUBSECTION\""}"" ]],
				 ""SubsectionType"": [ 24, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""SystemCacheAttributes"": [ 32, [ ""_MI_SYSTEM_CACHE_VIEW_ATTRIBUTES"", ""null"" ]],
				 ""SectionOffset"": [ 32, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ViewLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 SystemCacheVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 SessionViewVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 VadsProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Type
		{
			get
			{
				// start: 0  end: 2  Mask: 0000000000000011
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 16);
				var value2 = (value & 3) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Subsection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 SubsectionType
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 24);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES SystemCacheAttributes
		{
			get
			{
				_MI_SYSTEM_CACHE_VIEW_ATTRIBUTES returnValue = new _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 SectionOffset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _MI_SYSTEM_PTE_STATE
 
	public class _MI_SYSTEM_PTE_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SYSTEM_PTE_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 512; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SYSTEM_PTE_STATE"": [ 512, {
				 ""MdlTrackerLookaside"": [ 0, [ ""_NPAGED_LOOKASIDE_LIST"", ""null"" ]],
				 ""DeadPteTrackerSListHead"": [ 128, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""PteTrackerLock"": [ 144, [ ""UInt64"", ""null"" ]],
				 ""PteTrackingBitmap"": [ 152, [ ""_RTL_BITMAP_EX"", ""null"" ]],
				 ""CachedPteHeads"": [ 168, [ ""Pointer"", ""{\""target\"":\""_MI_CACHED_PTES\""}"" ]],
				 ""CachedKernelStackPteHeads"": [ 176, [ ""Pointer"", ""{\""target\"":\""_MI_CACHED_PTES\""}"" ]],
				 ""SystemViewPteInfo"": [ 184, [ ""_MI_SYSTEM_PTE_TYPE"", ""null"" ]],
				 ""KernelStackPteInfo"": [ 280, [ ""_MI_SYSTEM_PTE_TYPE"", ""null"" ]],
				 ""StackGrowthFailures"": [ 376, [ ""UInt32"", ""null"" ]],
				 ""KernelStackPages"": [ 380, [ ""Byte"", ""null"" ]],
				 ""TrackPtesAborted"": [ 381, [ ""Byte"", ""null"" ]],
				 ""AdjustCounter"": [ 382, [ ""Byte"", ""null"" ]],
				 ""ReservedMappingLock"": [ 384, [ ""Int32"", ""null"" ]],
				 ""ReservedMappingTree"": [ 392, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""ReservedMappingPageTablePfns"": [ 400, [ ""Pointer"", ""{\""target\"":\""_MMPFN\""}"" ]],
				 ""OutswappedKernelStackRoot"": [ 408, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""OutswappedKernelStackLock"": [ 416, [ ""Int32"", ""null"" ]],
				 ""BreakMakePte"": [ 424, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""UltraSpaceContext"": [ 432, [ ""_MI_ULTRA_VA_CONTEXT"", ""null"" ]],
				 ""NumberOfUltraMdlMaps"": [ 496, [ ""UInt32"", ""null"" ]],
				 ""UltraMdlNodeMappings"": [ 504, [ ""Pointer"", ""{\""target\"":\""_MI_ULTRA_MDL_NODE\""}"" ]] }]
				 }
				)";
			}
		}
		public _NPAGED_LOOKASIDE_LIST MdlTrackerLookaside
		{
			get
			{
				_NPAGED_LOOKASIDE_LIST returnValue = new _NPAGED_LOOKASIDE_LIST(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _SLIST_HEADER DeadPteTrackerSListHead
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt64 PteTrackerLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public _RTL_BITMAP_EX PteTrackingBitmap
		{
			get
			{
				_RTL_BITMAP_EX returnValue = new _RTL_BITMAP_EX(_StructureData, _BufferOffset + 152);
				return returnValue;
			}
		}
		public UInt64 CachedPteHeads { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 CachedKernelStackPteHeads { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public _MI_SYSTEM_PTE_TYPE SystemViewPteInfo
		{
			get
			{
				_MI_SYSTEM_PTE_TYPE returnValue = new _MI_SYSTEM_PTE_TYPE(_StructureData, _BufferOffset + 184);
				return returnValue;
			}
		}
		public _MI_SYSTEM_PTE_TYPE KernelStackPteInfo
		{
			get
			{
				_MI_SYSTEM_PTE_TYPE returnValue = new _MI_SYSTEM_PTE_TYPE(_StructureData, _BufferOffset + 280);
				return returnValue;
			}
		}
		public UInt32 StackGrowthFailures { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 376); } }
		public Byte KernelStackPages{ get { return _StructureData[_BufferOffset +380]; } }
		public Byte TrackPtesAborted{ get { return _StructureData[_BufferOffset +381]; } }
		public Byte AdjustCounter{ get { return _StructureData[_BufferOffset +382]; } }
		public Int32 ReservedMappingLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 384); } }
		public _RTL_AVL_TREE ReservedMappingTree
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 392);
				return returnValue;
			}
		}
		public UInt64 ReservedMappingPageTablePfns { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 400); } }
		public _RTL_AVL_TREE OutswappedKernelStackRoot
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 408);
				return returnValue;
			}
		}
		public Int32 OutswappedKernelStackLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 416); } }
		public UInt64 BreakMakePte { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 424); } }
		public _MI_ULTRA_VA_CONTEXT UltraSpaceContext
		{
			get
			{
				_MI_ULTRA_VA_CONTEXT returnValue = new _MI_ULTRA_VA_CONTEXT(_StructureData, _BufferOffset + 432);
				return returnValue;
			}
		}
		public UInt32 NumberOfUltraMdlMaps { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 496); } }
		public UInt64 UltraMdlNodeMappings { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 504); } }
	}
	#endregion
	#region _MI_PARTITION_CORE
 
	public class _MI_PARTITION_CORE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PARTITION_CORE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 440; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PARTITION_CORE"": [ 440, {
				 ""PartitionId"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""u"": [ 4, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""Signature"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""MemoryConfigurationChanged"": [ 12, [ ""Byte"", ""null"" ]],
				 ""NodeInformation"": [ 16, [ ""Pointer"", ""{\""target\"":\""_MI_NODE_INFORMATION\""}"" ]],
				 ""PageRoot"": [ 24, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""MemoryNodeRuns"": [ 32, [ ""Pointer"", ""{\""target\"":\""_PHYSICAL_MEMORY_DESCRIPTOR\""}"" ]],
				 ""MemoryBlockReferences"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""PfnUnmapWorkItem"": [ 48, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""PfnUnmapCount"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""PfnUnmapWaitList"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MemoryRuns"": [ 96, [ ""Pointer"", ""{\""target\"":\""_PHYSICAL_MEMORY_DESCRIPTOR\""}"" ]],
				 ""ExitEvent"": [ 104, [ ""_KEVENT"", ""null"" ]],
				 ""SystemThreadHandles"": [ 128, [ ""Array"", ""{\""count\"":6,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""PartitionObject"": [ 176, [ ""Pointer"", ""{\""target\"":\""_EPARTITION\""}"" ]],
				 ""PartitionSystemThreadsLock"": [ 184, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""DynamicMemoryPushLock"": [ 192, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""DynamicMemoryLock"": [ 200, [ ""Int32"", ""null"" ]],
				 ""PfnUnmapActive"": [ 204, [ ""Byte"", ""null"" ]],
				 ""TemporaryMemoryEvent"": [ 208, [ ""_KEVENT"", ""null"" ]],
				 ""RootDirectory"": [ 232, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KernelObjectsDirectory"": [ 240, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MemoryEvents"": [ 248, [ ""Array"", ""{\""count\"":11,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_KEVENT\""}}"" ]],
				 ""MemoryEventHandles"": [ 336, [ ""Array"", ""{\""count\"":11,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""TotalHugeIoRanges"": [ 424, [ ""UInt64"", ""null"" ]],
				 ""NonChargedSecurePages"": [ 432, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 PartitionId { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte MemoryConfigurationChanged{ get { return _StructureData[_BufferOffset +12]; } }
		public UInt64 NodeInformation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _RTL_AVL_TREE PageRoot
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 MemoryNodeRuns { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 MemoryBlockReferences { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _WORK_QUEUE_ITEM PfnUnmapWorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt64 PfnUnmapCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 PfnUnmapWaitList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 MemoryRuns { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public _KEVENT ExitEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt64[] SystemThreadHandles
		{
			get
			{
				UInt64[] returnValue = new UInt64[6];
				int size = 8;
				for(int i=0; i<6; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt64 PartitionObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public _EX_PUSH_LOCK PartitionSystemThreadsLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 184);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK DynamicMemoryPushLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public Int32 DynamicMemoryLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 200); } }
		public Byte PfnUnmapActive{ get { return _StructureData[_BufferOffset +204]; } }
		public _KEVENT TemporaryMemoryEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 208);
				return returnValue;
			}
		}
		public UInt64 RootDirectory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 KernelObjectsDirectory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public _KEVENT[] MemoryEvents
		{
			get
			{
				_KEVENT[] returnValue = new _KEVENT[11];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<11; i++ )
					returnValue[i] = new _KEVENT(_StructureData, (i * size) + _BufferOffset + 248);
				return returnValue;
			}
		}
		public UInt64[] MemoryEventHandles
		{
			get
			{
				UInt64[] returnValue = new UInt64[11];
				int size = 8;
				for(int i=0; i<11; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 336);
				return returnValue;
			}
		}
		public UInt64 TotalHugeIoRanges { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 424); } }
		public UInt64 NonChargedSecurePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 432); } }
	}
	#endregion
	#region _MMSUPPORT_INSTANCE
 
	public class _MMSUPPORT_INSTANCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMSUPPORT_INSTANCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 192; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMSUPPORT_INSTANCE"": [ 192, {
				 ""NextPageColor"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""PageFaultCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""TrimmedPageCount"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""VmWorkingSetList"": [ 16, [ ""Pointer"", ""{\""target\"":\""_MMWSL_INSTANCE\""}"" ]],
				 ""WorkingSetExpansionLinks"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""AgeDistribution"": [ 40, [ ""Array"", ""{\""count\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""ExitOutswapGate"": [ 104, [ ""Pointer"", ""{\""target\"":\""_KGATE\""}"" ]],
				 ""MinimumWorkingSetSize"": [ 112, [ ""UInt64"", ""null"" ]],
				 ""WorkingSetLeafSize"": [ 120, [ ""UInt64"", ""null"" ]],
				 ""WorkingSetLeafPrivateSize"": [ 128, [ ""UInt64"", ""null"" ]],
				 ""WorkingSetSize"": [ 136, [ ""UInt64"", ""null"" ]],
				 ""WorkingSetPrivateSize"": [ 144, [ ""UInt64"", ""null"" ]],
				 ""MaximumWorkingSetSize"": [ 152, [ ""UInt64"", ""null"" ]],
				 ""PeakWorkingSetSize"": [ 160, [ ""UInt64"", ""null"" ]],
				 ""HardFaultCount"": [ 168, [ ""UInt32"", ""null"" ]],
				 ""LastTrimStamp"": [ 172, [ ""UInt16"", ""null"" ]],
				 ""PartitionId"": [ 174, [ ""UInt16"", ""null"" ]],
				 ""SelfmapLock"": [ 176, [ ""UInt64"", ""null"" ]],
				 ""Flags"": [ 184, [ ""_MMSUPPORT_FLAGS"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 NextPageColor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 PageFaultCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 TrimmedPageCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 VmWorkingSetList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _LIST_ENTRY WorkingSetExpansionLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64[] AgeDistribution
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt64 ExitOutswapGate { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 MinimumWorkingSetSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 WorkingSetLeafSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 WorkingSetLeafPrivateSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 WorkingSetSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 WorkingSetPrivateSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 MaximumWorkingSetSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 PeakWorkingSetSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt32 HardFaultCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public UInt16 LastTrimStamp { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 172); } }
		public UInt16 PartitionId { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 174); } }
		public UInt64 SelfmapLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public _MMSUPPORT_FLAGS Flags
		{
			get
			{
				_MMSUPPORT_FLAGS returnValue = new _MMSUPPORT_FLAGS(_StructureData, _BufferOffset + 184);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KWAIT_BLOCK
 
	public class _KWAIT_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KWAIT_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KWAIT_BLOCK"": [ 48, {
				 ""WaitListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""WaitType"": [ 16, [ ""Byte"", ""null"" ]],
				 ""BlockState"": [ 17, [ ""Byte"", ""null"" ]],
				 ""WaitKey"": [ 18, [ ""UInt16"", ""null"" ]],
				 ""SpareLong"": [ 20, [ ""Int32"", ""null"" ]],
				 ""Thread"": [ 24, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""NotificationQueue"": [ 24, [ ""Pointer"", ""{\""target\"":\""_KQUEUE\""}"" ]],
				 ""Object"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SparePtr"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY WaitListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte WaitType{ get { return _StructureData[_BufferOffset +16]; } }
		public Byte BlockState{ get { return _StructureData[_BufferOffset +17]; } }
		public UInt16 WaitKey { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 18); } }
		public Int32 SpareLong { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 NotificationQueue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 Object { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 SparePtr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _PPM_SELECTION_MENU_ENTRY
 
	public class _PPM_SELECTION_MENU_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPM_SELECTION_MENU_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPM_SELECTION_MENU_ENTRY"": [ 24, {
				 ""StrictDependency"": [ 0, [ ""Byte"", ""null"" ]],
				 ""InitiatingState"": [ 1, [ ""Byte"", ""null"" ]],
				 ""DependentState"": [ 2, [ ""Byte"", ""null"" ]],
				 ""StateIndex"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Dependencies"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""DependencyList"": [ 16, [ ""Pointer"", ""{\""target\"":\""_PPM_SELECTION_DEPENDENCY\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte StrictDependency{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte InitiatingState{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte DependentState{ get { return _StructureData[_BufferOffset +2]; } }
		public UInt32 StateIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Dependencies { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 DependencyList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _HV_GET_BIN_CONTEXT
 
	public class _HV_GET_BIN_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HV_GET_BIN_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HV_GET_BIN_CONTEXT"": [ 2, {
				 ""OutstandingReference"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 OutstandingReference
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
	}
	#endregion
	#region _INVERTED_FUNCTION_TABLE
 
	public class _INVERTED_FUNCTION_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _INVERTED_FUNCTION_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 6160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_INVERTED_FUNCTION_TABLE"": [ 6160, {
				 ""CurrentSize"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""MaximumSize"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Epoch"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Overflow"": [ 12, [ ""Byte"", ""null"" ]],
				 ""TableEntry"": [ 16, [ ""Array"", ""{\""count\"":256,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 CurrentSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 MaximumSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Epoch { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte Overflow{ get { return _StructureData[_BufferOffset +12]; } }
		public _INVERTED_FUNCTION_TABLE_ENTRY[] TableEntry
		{
			get
			{
				_INVERTED_FUNCTION_TABLE_ENTRY[] returnValue = new _INVERTED_FUNCTION_TABLE_ENTRY[256];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<256; i++ )
					returnValue[i] = new _INVERTED_FUNCTION_TABLE_ENTRY(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _LFH_RANDOM_DATA
 
	public class _LFH_RANDOM_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LFH_RANDOM_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 256; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LFH_RANDOM_DATA"": [ 256, {
				 ""Bytes"": [ 0, [ ""Array"", ""{\""count\"":256,\""target\"":\""Byte\""}"" ]],
				 ""Words"": [ 0, [ ""Array"", ""{\""count\"":128,\""target\"":\""UInt16\""}"" ]],
				 ""Quadwords"": [ 0, [ ""Array"", ""{\""count\"":32,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte[] Bytes
		{
			get
			{
				Byte[] returnValue = new Byte[256];
				for(int i=0; i<256; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 0];
				return returnValue;
			}
		}
		public UInt16[] Words
		{
			get
			{
				UInt16[] returnValue = new UInt16[128];
				for(int i=0; i<128; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64[] Quadwords
		{
			get
			{
				UInt64[] returnValue = new UInt64[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _POP_FX_PLUGIN
 
	public class _POP_FX_PLUGIN
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_PLUGIN(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 424; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_PLUGIN"": [ 424, {
				 ""Link"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Version"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""WorkQueue"": [ 32, [ ""_KQUEUE"", ""null"" ]],
				 ""AcceptDeviceNotification"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AcceptProcessorNotification"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AcceptAcpiNotification"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PluginWorkPool"": [ 120, [ ""_POP_FX_WORK_POOL"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 Flags { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _KQUEUE WorkQueue
		{
			get
			{
				_KQUEUE returnValue = new _KQUEUE(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 AcceptDeviceNotification { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 AcceptProcessorNotification { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 AcceptAcpiNotification { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public _POP_FX_WORK_POOL PluginWorkPool
		{
			get
			{
				_POP_FX_WORK_POOL returnValue = new _POP_FX_WORK_POOL(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMPTE_PROTOTYPE
 
	public class _MMPTE_PROTOTYPE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPTE_PROTOTYPE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPTE_PROTOTYPE"": [ 8, {
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""DemandFillProto"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""HiberVerifyConverted"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""ReadOnly"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""SwizzleBit"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""Prototype"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""Combined"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""Unused1"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""ProtoAddress"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":16,\""target\"":\""Int64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Valid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 DemandFillProto
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 HiberVerifyConverted
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 ReadOnly
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt64)value2;
			}
		}
		public UInt64 SwizzleBit
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt64)value2;
			}
		}
		public UInt64 Protection
		{
			get
			{
				// start: 5  end: 10  Mask: 0000001111100000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 992) >> 5;
				return (UInt64)value2;
			}
		}
		public UInt64 Prototype
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 Combined
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 Unused1
		{
			get
			{
				// start: 12  end: 16  Mask: 1111000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 61440) >> 12;
				return (UInt64)value2;
			}
		}
		public UInt64 ProtoAddress
		{
			get
			{
				// start: 16  end: 64  Mask: 1111111111111111111111111111111111111111111111110000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744073709486080) >> 16;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _MI_PAGEFILE_TRACES
 
	public class _MI_PAGEFILE_TRACES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PAGEFILE_TRACES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 120; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PAGEFILE_TRACES"": [ 120, {
				 ""Status"": [ 0, [ ""Int32"", ""null"" ]],
				 ""PartitionId"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Priority"": [ 6, [ ""Byte"", ""null"" ]],
				 ""IrpPriority"": [ 7, [ ""Byte"", ""null"" ]],
				 ""ReservationWrite"": [ 8, [ ""Byte"", ""null"" ]],
				 ""CurrentTime"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""AvailablePages"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""ModifiedPagesTotal"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""ModifiedPagefilePages"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""ModifiedNoWritePages"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""ModifiedPagefileNoReservationPages"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""MdlHack"": [ 64, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16 PartitionId { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public Byte Priority{ get { return _StructureData[_BufferOffset +6]; } }
		public Byte IrpPriority{ get { return _StructureData[_BufferOffset +7]; } }
		public Byte ReservationWrite{ get { return _StructureData[_BufferOffset +8]; } }
		public _LARGE_INTEGER CurrentTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 AvailablePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ModifiedPagesTotal { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 ModifiedPagefilePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 ModifiedNoWritePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 ModifiedPagefileNoReservationPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public _ANONYMOUS_TAG MdlHack
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KSHARED_READY_QUEUE
 
	public class _KSHARED_READY_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KSHARED_READY_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 624; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KSHARED_READY_QUEUE"": [ 624, {
				 ""Lock"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""ReadySummary"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ReadyListHead"": [ 16, [ ""Array"", ""{\""count\"":32,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""RunningSummary"": [ 528, [ ""Array"", ""{\""count\"":64,\""target\"":\""Char\""}"" ]],
				 ""Span"": [ 592, [ ""Byte"", ""null"" ]],
				 ""LowProcIndex"": [ 593, [ ""Byte"", ""null"" ]],
				 ""QueueIndex"": [ 594, [ ""Byte"", ""null"" ]],
				 ""ProcCount"": [ 595, [ ""Byte"", ""null"" ]],
				 ""ScanOwner"": [ 596, [ ""Byte"", ""null"" ]],
				 ""Spare"": [ 597, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""Affinity"": [ 600, [ ""UInt64"", ""null"" ]],
				 ""ReadyThreadCount"": [ 608, [ ""UInt32"", ""null"" ]],
				 ""ReadyQueueExpectedRunTime"": [ 616, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 ReadySummary { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY[] ReadyListHead
		{
			get
			{
				_LIST_ENTRY[] returnValue = new _LIST_ENTRY[32];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<32; i++ )
					returnValue[i] = new _LIST_ENTRY(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public Char[] RunningSummary
		{
			get
			{
				Char[] returnValue = new Char[64];
				for(int i=0; i<64; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 528);
				return returnValue;
			}
		}
		public Byte Span{ get { return _StructureData[_BufferOffset +592]; } }
		public Byte LowProcIndex{ get { return _StructureData[_BufferOffset +593]; } }
		public Byte QueueIndex{ get { return _StructureData[_BufferOffset +594]; } }
		public Byte ProcCount{ get { return _StructureData[_BufferOffset +595]; } }
		public Byte ScanOwner{ get { return _StructureData[_BufferOffset +596]; } }
		public Byte[] Spare
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 597];
				return returnValue;
			}
		}
		public UInt64 Affinity { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 600); } }
		public UInt32 ReadyThreadCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 608); } }
		public UInt64 ReadyQueueExpectedRunTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 616); } }
	}
	#endregion
	#region _HAL_LBR_ENTRY
 
	public class _HAL_LBR_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HAL_LBR_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HAL_LBR_ENTRY"": [ 24, {
				 ""FromAddress"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ToAddress"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Reserved"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 FromAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ToAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Reserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _ETW_REG_ENTRY
 
	public class _ETW_REG_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_REG_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_REG_ENTRY"": [ 112, {
				 ""RegList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""GroupRegList"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""GuidEntry"": [ 32, [ ""Pointer"", ""{\""target\"":\""_ETW_GUID_ENTRY\""}"" ]],
				 ""GroupEntry"": [ 40, [ ""Pointer"", ""{\""target\"":\""_ETW_GUID_ENTRY\""}"" ]],
				 ""ReplyQueue"": [ 48, [ ""Pointer"", ""{\""target\"":\""_ETW_REPLY_QUEUE\""}"" ]],
				 ""ReplySlot"": [ 48, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_ETW_QUEUE_ENTRY\""}}"" ]],
				 ""Caller"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SessionId"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""Process"": [ 80, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""CallbackContext"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Callback"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Index"": [ 96, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 98, [ ""UInt16"", ""null"" ]],
				 ""DbgKernelRegistration"": [ 98, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""DbgUserRegistration"": [ 98, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""DbgReplyRegistration"": [ 98, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt16\""}"" ]],
				 ""DbgClassicRegistration"": [ 98, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt16\""}"" ]],
				 ""DbgSessionSpaceRegistration"": [ 98, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt16\""}"" ]],
				 ""DbgModernRegistration"": [ 98, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt16\""}"" ]],
				 ""DbgClosed"": [ 98, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt16\""}"" ]],
				 ""DbgInserted"": [ 98, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt16\""}"" ]],
				 ""DbgWow64"": [ 98, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt16\""}"" ]],
				 ""DbgUseDescriptorType"": [ 98, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt16\""}"" ]],
				 ""DbgDropProviderTraits"": [ 98, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt16\""}"" ]],
				 ""EnableMask"": [ 100, [ ""Byte"", ""null"" ]],
				 ""GroupEnableMask"": [ 101, [ ""Byte"", ""null"" ]],
				 ""HostEnableMask"": [ 102, [ ""Byte"", ""null"" ]],
				 ""HostGroupEnableMask"": [ 103, [ ""Byte"", ""null"" ]],
				 ""Traits"": [ 104, [ ""Pointer"", ""{\""target\"":\""_ETW_PROVIDER_TRAITS\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY RegList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY GroupRegList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 GuidEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 GroupEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 ReplyQueue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _ETW_QUEUE_ENTRY[] ReplySlot
		{
			get
			{
				_ETW_QUEUE_ENTRY[] returnValue = new _ETW_QUEUE_ENTRY[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new _ETW_QUEUE_ENTRY(_StructureData, (i * size) + _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt64 Caller { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt64 Process { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 CallbackContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 Callback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt16 Index { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 96); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 98); } }
		public UInt16 DbgKernelRegistration
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 98);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 DbgUserRegistration
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 98);
				var value2 = (value & 2) >> 1;
				return (UInt16)value2;
			}
		}
		public UInt16 DbgReplyRegistration
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 98);
				var value2 = (value & 4) >> 2;
				return (UInt16)value2;
			}
		}
		public UInt16 DbgClassicRegistration
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 98);
				var value2 = (value & 8) >> 3;
				return (UInt16)value2;
			}
		}
		public UInt16 DbgSessionSpaceRegistration
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 98);
				var value2 = (value & 16) >> 4;
				return (UInt16)value2;
			}
		}
		public UInt16 DbgModernRegistration
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 98);
				var value2 = (value & 32) >> 5;
				return (UInt16)value2;
			}
		}
		public UInt16 DbgClosed
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 98);
				var value2 = (value & 64) >> 6;
				return (UInt16)value2;
			}
		}
		public UInt16 DbgInserted
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 98);
				var value2 = (value & 128) >> 7;
				return (UInt16)value2;
			}
		}
		public UInt16 DbgWow64
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 98);
				var value2 = (value & 256) >> 8;
				return (UInt16)value2;
			}
		}
		public UInt16 DbgUseDescriptorType
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 98);
				var value2 = (value & 512) >> 9;
				return (UInt16)value2;
			}
		}
		public UInt16 DbgDropProviderTraits
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 98);
				var value2 = (value & 1024) >> 10;
				return (UInt16)value2;
			}
		}
		public Byte EnableMask{ get { return _StructureData[_BufferOffset +100]; } }
		public Byte GroupEnableMask{ get { return _StructureData[_BufferOffset +101]; } }
		public Byte HostEnableMask{ get { return _StructureData[_BufferOffset +102]; } }
		public Byte HostGroupEnableMask{ get { return _StructureData[_BufferOffset +103]; } }
		public UInt64 Traits { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
	}
	#endregion
	#region _TERMINATION_PORT
 
	public class _TERMINATION_PORT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TERMINATION_PORT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TERMINATION_PORT"": [ 16, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_TERMINATION_PORT\""}"" ]],
				 ""Port"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Port { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _HAL_DP_REPLACE_PARAMETERS
 
	public class _HAL_DP_REPLACE_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HAL_DP_REPLACE_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HAL_DP_REPLACE_PARAMETERS"": [ 24, {
				 ""Flags"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TargetProcessors"": [ 8, [ ""Pointer"", ""{\""target\"":\""_PNP_REPLACE_PROCESSOR_LIST\""}"" ]],
				 ""SpareProcessors"": [ 16, [ ""Pointer"", ""{\""target\"":\""_PNP_REPLACE_PROCESSOR_LIST\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 TargetProcessors { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 SpareProcessors { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _MI_COMBINE_WORKITEM
 
	public class _MI_COMBINE_WORKITEM
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_COMBINE_WORKITEM(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_COMBINE_WORKITEM"": [ 40, {
				 ""NextEntry"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WorkItem"": [ 8, [ ""_WORK_QUEUE_ITEM"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 NextEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _WORK_QUEUE_ITEM WorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _STRING32
 
	public class _STRING32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _STRING32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_STRING32"": [ 8, {
				 ""Length"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MaximumLength"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Buffer"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Length { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 MaximumLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Buffer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _MI_SYSTEM_VA_STATE
 
	public class _MI_SYSTEM_VA_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SYSTEM_VA_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1216; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SYSTEM_VA_STATE"": [ 1216, {
				 ""SystemTablesLock"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""AvailableSystemCacheVa"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""DynamicBitMapKernelStacks"": [ 16, [ ""_MI_DYNAMIC_BITMAP"", ""null"" ]],
				 ""DynamicBitMapSystemPtes"": [ 88, [ ""_MI_DYNAMIC_BITMAP"", ""null"" ]],
				 ""DynamicBitMapDriverImages"": [ 160, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""DynamicBitMapPagedPool"": [ 304, [ ""_MI_DYNAMIC_BITMAP"", ""null"" ]],
				 ""DynamicBitMapSystemCache"": [ 376, [ ""_MI_DYNAMIC_BITMAP"", ""null"" ]],
				 ""DynamicBitMapSecureNonPagedPool"": [ 448, [ ""_MI_DYNAMIC_BITMAP"", ""null"" ]],
				 ""HalPrivateVaStart"": [ 520, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalPrivateVaSize"": [ 528, [ ""UInt64"", ""null"" ]],
				 ""SystemVaAssignment"": [ 536, [ ""Array"", ""{\""count\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""SystemVaAssignmentHint"": [ 568, [ ""UInt32"", ""null"" ]],
				 ""TopLevelPteLockBits"": [ 572, [ ""Array"", ""{\""count\"":32,\""target\"":\""UInt32\""}"" ]],
				 ""DeleteKvaLock"": [ 700, [ ""Int32"", ""null"" ]],
				 ""WsleArrays"": [ 704, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_MI_WSLE\""}}"" ]],
				 ""PagableHyperSpace"": [ 768, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HyperSpaceEnd"": [ 776, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PagableHyperSpaceBytes"": [ 784, [ ""UInt64"", ""null"" ]],
				 ""PageTableCommitmentOffset"": [ 792, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""FreeSystemCacheVa"": [ 808, [ ""_KEVENT"", ""null"" ]],
				 ""SystemVaLock"": [ 832, [ ""UInt64"", ""null"" ]],
				 ""SystemCacheViewLock"": [ 840, [ ""UInt64"", ""null"" ]],
				 ""SystemWorkingSetList"": [ 848, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""SelfmapLock"": [ 1168, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SystemTablesLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 AvailableSystemCacheVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _MI_DYNAMIC_BITMAP DynamicBitMapKernelStacks
		{
			get
			{
				_MI_DYNAMIC_BITMAP returnValue = new _MI_DYNAMIC_BITMAP(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _MI_DYNAMIC_BITMAP DynamicBitMapSystemPtes
		{
			get
			{
				_MI_DYNAMIC_BITMAP returnValue = new _MI_DYNAMIC_BITMAP(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public _MI_DYNAMIC_BITMAP[] DynamicBitMapDriverImages
		{
			get
			{
				_MI_DYNAMIC_BITMAP[] returnValue = new _MI_DYNAMIC_BITMAP[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _MI_DYNAMIC_BITMAP(_StructureData, (i * size) + _BufferOffset + 160);
				return returnValue;
			}
		}
		public _MI_DYNAMIC_BITMAP DynamicBitMapPagedPool
		{
			get
			{
				_MI_DYNAMIC_BITMAP returnValue = new _MI_DYNAMIC_BITMAP(_StructureData, _BufferOffset + 304);
				return returnValue;
			}
		}
		public _MI_DYNAMIC_BITMAP DynamicBitMapSystemCache
		{
			get
			{
				_MI_DYNAMIC_BITMAP returnValue = new _MI_DYNAMIC_BITMAP(_StructureData, _BufferOffset + 376);
				return returnValue;
			}
		}
		public _MI_DYNAMIC_BITMAP DynamicBitMapSecureNonPagedPool
		{
			get
			{
				_MI_DYNAMIC_BITMAP returnValue = new _MI_DYNAMIC_BITMAP(_StructureData, _BufferOffset + 448);
				return returnValue;
			}
		}
		public UInt64 HalPrivateVaStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 520); } }
		public UInt64 HalPrivateVaSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 528); } }
		public UInt32[] SystemVaAssignment
		{
			get
			{
				UInt32[] returnValue = new UInt32[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 536);
				return returnValue;
			}
		}
		public UInt32 SystemVaAssignmentHint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 568); } }
		public UInt32[] TopLevelPteLockBits
		{
			get
			{
				UInt32[] returnValue = new UInt32[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 572);
				return returnValue;
			}
		}
		public Int32 DeleteKvaLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 700); } }
		public _MI_WSLE[] WsleArrays
		{
			get
			{
				_MI_WSLE[] returnValue = new _MI_WSLE[8];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<8; i++ )
					returnValue[i] = new _MI_WSLE(_StructureData, (i * size) + _BufferOffset + 704);
				return returnValue;
			}
		}
		public UInt64 PagableHyperSpace { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 768); } }
		public UInt64 HyperSpaceEnd { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 776); } }
		public UInt64 PagableHyperSpaceBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 784); } }
		public UInt64[] PageTableCommitmentOffset
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 792);
				return returnValue;
			}
		}
		public _KEVENT FreeSystemCacheVa
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 808);
				return returnValue;
			}
		}
		public UInt64 SystemVaLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 832); } }
		public UInt64 SystemCacheViewLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 840); } }
		public _MMWSL_INSTANCE[] SystemWorkingSetList
		{
			get
			{
				_MMWSL_INSTANCE[] returnValue = new _MMWSL_INSTANCE[8];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<8; i++ )
					returnValue[i] = new _MMWSL_INSTANCE(_StructureData, (i * size) + _BufferOffset + 848);
				return returnValue;
			}
		}
		public UInt64[] SelfmapLock
		{
			get
			{
				UInt64[] returnValue = new UInt64[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 1168);
				return returnValue;
			}
		}
	}
	#endregion
	#region _GDI_TEB_BATCH
 
	public class _GDI_TEB_BATCH
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _GDI_TEB_BATCH(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1256; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_GDI_TEB_BATCH"": [ 1256, {
				 ""Offset"": [ 0, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""HasRenderingCommand"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""HDC"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Buffer"": [ 16, [ ""Array"", ""{\""count\"":310,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Offset
		{
			get
			{
				// start: 0  end: 31  Mask: 1111111111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2147483647) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 HasRenderingCommand
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public UInt64 HDC { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32[] Buffer
		{
			get
			{
				UInt32[] returnValue = new UInt32[310];
				for(int i=0; i<310; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMSUPPORT_SHARED
 
	public class _MMSUPPORT_SHARED
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMSUPPORT_SHARED(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMSUPPORT_SHARED"": [ 128, {
				 ""WorkingSetLock"": [ 0, [ ""Int32"", ""null"" ]],
				 ""GoodCitizenWaiting"": [ 4, [ ""Int32"", ""null"" ]],
				 ""ReleasedCommitDebt"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ResetPagesRepurposedCount"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""WsSwapSupport"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CommitReleaseContext"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AccessLog"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ChargedWslePages"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""ActualWslePages"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""WorkingSetCoreLock"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""ShadowMapping"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 WorkingSetLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 GoodCitizenWaiting { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 ReleasedCommitDebt { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ResetPagesRepurposedCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 WsSwapSupport { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 CommitReleaseContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 AccessLog { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 ChargedWslePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 ActualWslePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 WorkingSetCoreLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 ShadowMapping { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
	}
	#endregion
	#region _ETW_SYSTEM_LOGGER
 
	public class _ETW_SYSTEM_LOGGER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_SYSTEM_LOGGER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_SYSTEM_LOGGER"": [ 2, {
				 ""LoggerId"": [ 0, [ ""Byte"", ""null"" ]],
				 ""ClockType"": [ 1, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte LoggerId{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte ClockType{ get { return _StructureData[_BufferOffset +1]; } }
	}
	#endregion
	#region _ALPC_COMPLETION_LIST_STATE
 
	public class _ALPC_COMPLETION_LIST_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ALPC_COMPLETION_LIST_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ALPC_COMPLETION_LIST_STATE"": [ 8, {
				 ""u1"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ALPC_COMPLETION_LIST_HEADER
 
	public class _ALPC_COMPLETION_LIST_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ALPC_COMPLETION_LIST_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 384; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ALPC_COMPLETION_LIST_HEADER"": [ 384, {
				 ""StartMagic"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""TotalSize"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ListOffset"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""ListSize"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""BitmapOffset"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""BitmapSize"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""DataOffset"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""DataSize"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""AttributeFlags"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""AttributeSize"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""State"": [ 64, [ ""_ALPC_COMPLETION_LIST_STATE"", ""null"" ]],
				 ""LastMessageId"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""LastCallbackId"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""PostCount"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""ReturnCount"": [ 192, [ ""UInt32"", ""null"" ]],
				 ""LogSequenceNumber"": [ 256, [ ""UInt32"", ""null"" ]],
				 ""UserLock"": [ 320, [ ""_RTL_SRWLOCK"", ""null"" ]],
				 ""EndMagic"": [ 328, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 StartMagic { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 TotalSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ListOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 ListSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 BitmapOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 BitmapSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 DataOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 DataSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 AttributeFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 AttributeSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public _ALPC_COMPLETION_LIST_STATE State
		{
			get
			{
				_ALPC_COMPLETION_LIST_STATE returnValue = new _ALPC_COMPLETION_LIST_STATE(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt32 LastMessageId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 LastCallbackId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 PostCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 ReturnCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public UInt32 LogSequenceNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 256); } }
		public _RTL_SRWLOCK UserLock
		{
			get
			{
				_RTL_SRWLOCK returnValue = new _RTL_SRWLOCK(_StructureData, _BufferOffset + 320);
				return returnValue;
			}
		}
		public UInt64 EndMagic { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 328); } }
	}
	#endregion
	#region _VI_POOL_ENTRY
 
	public class _VI_POOL_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VI_POOL_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VI_POOL_ENTRY"": [ 32, {
				 ""PageHeader"": [ 0, [ ""_VI_POOL_PAGE_HEADER"", ""null"" ]],
				 ""InUse"": [ 0, [ ""_VI_POOL_ENTRY_INUSE"", ""null"" ]],
				 ""NextFree"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SLIST_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public _VI_POOL_PAGE_HEADER PageHeader
		{
			get
			{
				_VI_POOL_PAGE_HEADER returnValue = new _VI_POOL_PAGE_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _VI_POOL_ENTRY_INUSE InUse
		{
			get
			{
				_VI_POOL_ENTRY_INUSE returnValue = new _VI_POOL_ENTRY_INUSE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 NextFree { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _CM_INDEX_HINT_BLOCK
 
	public class _CM_INDEX_HINT_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_INDEX_HINT_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_INDEX_HINT_BLOCK"": [ 8, {
				 ""Count"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HashKey"": [ 4, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32[] HashKey
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PNP_REPLACE_PROCESSOR_LIST
 
	public class _PNP_REPLACE_PROCESSOR_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PNP_REPLACE_PROCESSOR_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PNP_REPLACE_PROCESSOR_LIST"": [ 24, {
				 ""Affinity"": [ 0, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]],
				 ""GroupCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""AllocatedCount"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Count"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ApicIds"": [ 20, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Affinity { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 GroupCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 AllocatedCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32[] ApicIds
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 20);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_ULTRA_VA_CONTEXT
 
	public class _MI_ULTRA_VA_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_ULTRA_VA_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_ULTRA_VA_CONTEXT"": [ 64, {
				 ""Lock"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""ZeroMapping"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AllocationHintBit"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""Bitmap"": [ 24, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""ConcurrencyMaximum"": [ 56, [ ""Int32"", ""null"" ]],
				 ""ConcurrencyCount"": [ 60, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ZeroMapping { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 AllocationHintBit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _RTL_BITMAP_EX[] Bitmap
		{
			get
			{
				_RTL_BITMAP_EX[] returnValue = new _RTL_BITMAP_EX[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _RTL_BITMAP_EX(_StructureData, (i * size) + _BufferOffset + 24);
				return returnValue;
			}
		}
		public Int32 ConcurrencyMaximum { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 56); } }
		public Int32 ConcurrencyCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 60); } }
	}
	#endregion
	#region _ETW_HW_TRACE_EXT_INTERFACE
 
	public class _ETW_HW_TRACE_EXT_INTERFACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_HW_TRACE_EXT_INTERFACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_HW_TRACE_EXT_INTERFACE"": [ 24, {
				 ""StartProcessorTraceOnEachCore"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StopProcessorTraceOnEachCore"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LogProcessorTraceOnCurrentCore"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 StartProcessorTraceOnEachCore { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 StopProcessorTraceOnEachCore { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 LogProcessorTraceOnCurrentCore { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _PS_CLIENT_SECURITY_CONTEXT
 
	public class _PS_CLIENT_SECURITY_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_CLIENT_SECURITY_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_CLIENT_SECURITY_CONTEXT"": [ 8, {
				 ""ImpersonationData"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""ImpersonationToken"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ImpersonationLevel"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""EffectiveOnly"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ImpersonationData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ImpersonationToken { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ImpersonationLevel
		{
			get
			{
				// start: 0  end: 2  Mask: 0000000000000011
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 3) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 EffectiveOnly
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY
 
	public class _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ALPC_COMPLETION_PACKET_LOOKASIDE_ENTRY"": [ 24, {
				 ""ListEntry"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""Packet"": [ 8, [ ""Pointer"", ""{\""target\"":\""_IO_MINI_COMPLETION_PACKET_USER\""}"" ]],
				 ""Lookaside"": [ 16, [ ""Pointer"", ""{\""target\"":\""_ALPC_COMPLETION_PACKET_LOOKASIDE\""}"" ]] }]
				 }
				)";
			}
		}
		public _SINGLE_LIST_ENTRY ListEntry
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Packet { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Lookaside { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _DBGKD_GET_CONTEXT
 
	public class _DBGKD_GET_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_GET_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_GET_CONTEXT"": [ 4, {
				 ""Unused"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Unused { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _STRING64
 
	public class _STRING64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _STRING64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_STRING64"": [ 16, {
				 ""Length"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MaximumLength"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Buffer"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Length { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 MaximumLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 Buffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _HEAP_STOP_ON_TAG
 
	public class _HEAP_STOP_ON_TAG
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_STOP_ON_TAG(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_STOP_ON_TAG"": [ 4, {
				 ""HeapAndTagIndex"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TagIndex"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""HeapIndex"": [ 2, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 HeapAndTagIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16 TagIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 HeapIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
	}
	#endregion
	#region _ASYNC_READ_THREAD_STATS
 
	public class _ASYNC_READ_THREAD_STATS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ASYNC_READ_THREAD_STATS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 404; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ASYNC_READ_THREAD_STATS"": [ 404, {
				 ""CurrentLoad"": [ 0, [ ""Array"", ""{\""count\"":101,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32[] CurrentLoad
		{
			get
			{
				UInt32[] returnValue = new UInt32[101];
				for(int i=0; i<101; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _X86_DBGKD_CONTROL_SET
 
	public class _X86_DBGKD_CONTROL_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _X86_DBGKD_CONTROL_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_X86_DBGKD_CONTROL_SET"": [ 16, {
				 ""TraceFlag"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Dr7"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""CurrentSymbolStart"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""CurrentSymbolEnd"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 TraceFlag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Dr7 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 CurrentSymbolStart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 CurrentSymbolEnd { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _PO_IRP_MANAGER
 
	public class _PO_IRP_MANAGER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_IRP_MANAGER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_IRP_MANAGER"": [ 32, {
				 ""DeviceIrpQueue"": [ 0, [ ""_PO_IRP_QUEUE"", ""null"" ]],
				 ""SystemIrpQueue"": [ 16, [ ""_PO_IRP_QUEUE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _PO_IRP_QUEUE DeviceIrpQueue
		{
			get
			{
				_PO_IRP_QUEUE returnValue = new _PO_IRP_QUEUE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _PO_IRP_QUEUE SystemIrpQueue
		{
			get
			{
				_PO_IRP_QUEUE returnValue = new _PO_IRP_QUEUE(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KWAIT_STATUS_REGISTER
 
	public class _KWAIT_STATUS_REGISTER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KWAIT_STATUS_REGISTER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KWAIT_STATUS_REGISTER"": [ 1, {
				 ""Flags"": [ 0, [ ""Byte"", ""null"" ]],
				 ""State"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Affinity"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""Priority"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""Apc"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""UserApc"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""Alert"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte Flags{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte State
		{
			get
			{
				// start: 0  end: 3  Mask: 0000000000000111
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 7) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Affinity
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte Priority
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte Apc
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte UserApc
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 64) >> 6;
				return (Byte)value2;
			}
		}
		public Byte Alert
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 128) >> 7;
				return (Byte)value2;
			}
		}
	}
	#endregion
	#region _MI_DLL_OVERFLOW_AREA
 
	public class _MI_DLL_OVERFLOW_AREA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_DLL_OVERFLOW_AREA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_DLL_OVERFLOW_AREA"": [ 32, {
				 ""RangeStart"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NextVa"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RangeStartAbove2gb"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NextVaAbove2gb"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 RangeStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 NextVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 RangeStartAbove2gb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 NextVaAbove2gb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _MMCLONE_BLOCK
 
	public class _MMCLONE_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMCLONE_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMCLONE_BLOCK"": [ 32, {
				 ""ProtoPte"": [ 0, [ ""_MMPTE"", ""null"" ]],
				 ""CrossPartitionReferences"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""CloneCommitCount"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""u1"": [ 16, [ ""_MI_CLONE_BLOCK_FLAGS"", ""null"" ]],
				 ""CloneRefCount"": [ 24, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _MMPTE ProtoPte
		{
			get
			{
				_MMPTE returnValue = new _MMPTE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 CrossPartitionReferences { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 CloneCommitCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _MI_CLONE_BLOCK_FLAGS u1
		{
			get
			{
				_MI_CLONE_BLOCK_FLAGS returnValue = new _MI_CLONE_BLOCK_FLAGS(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 CloneRefCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _MACHINE_CHECK_CONTEXT
 
	public class _MACHINE_CHECK_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MACHINE_CHECK_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MACHINE_CHECK_CONTEXT"": [ 80, {
				 ""MachineFrame"": [ 0, [ ""_MACHINE_FRAME"", ""null"" ]],
				 ""Rax"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""Rcx"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""Rdx"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""GsBase"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""Cr3"": [ 72, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _MACHINE_FRAME MachineFrame
		{
			get
			{
				_MACHINE_FRAME returnValue = new _MACHINE_FRAME(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Rax { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 Rcx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Rdx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 GsBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 Cr3 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
	}
	#endregion
	#region _PS_TRUSTLET_TKSESSION_ID
 
	public class _PS_TRUSTLET_TKSESSION_ID
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_TRUSTLET_TKSESSION_ID(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_TRUSTLET_TKSESSION_ID"": [ 32, {
				 ""SessionId"": [ 0, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64[] SessionId
		{
			get
			{
				UInt64[] returnValue = new UInt64[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SECTION
 
	public class _SECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECTION"": [ 64, {
				 ""SectionNode"": [ 0, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""StartingVpn"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""EndingVpn"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""u1"": [ 40, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""SizeOfSection"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""u"": [ 56, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""InitialPageProtection"": [ 60, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""SessionId"": [ 60, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""NoValidationNeeded"": [ 60, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BALANCED_NODE SectionNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 StartingVpn { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 EndingVpn { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt64 SizeOfSection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt32 InitialPageProtection
		{
			get
			{
				// start: 0  end: 12  Mask: 0000111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 60);
				var value2 = (value & 4095) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 SessionId
		{
			get
			{
				// start: 12  end: 31  Mask: 1111111111111111111000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 60);
				var value2 = (value & 2147479552) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 NoValidationNeeded
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 60);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _FAST_OWNER_ENTRY
 
	public class _FAST_OWNER_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FAST_OWNER_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FAST_OWNER_ENTRY"": [ 72, {
				 ""Reserved"": [ 0, [ ""Array"", ""{\""count\"":9,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64[] Reserved
		{
			get
			{
				UInt64[] returnValue = new UInt64[9];
				int size = 8;
				for(int i=0; i<9; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_LFH_SUBSEGMENT_STAT
 
	public class _HEAP_LFH_SUBSEGMENT_STAT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_LFH_SUBSEGMENT_STAT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_LFH_SUBSEGMENT_STAT"": [ 2, {
				 ""Index"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Count"": [ 1, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Index{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Count{ get { return _StructureData[_BufferOffset +1]; } }
	}
	#endregion
	#region _PNP_DEVICE_EVENT_ENTRY
 
	public class _PNP_DEVICE_EVENT_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PNP_DEVICE_EVENT_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 192; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PNP_DEVICE_EVENT_ENTRY"": [ 192, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Argument"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ArgumentStatus"": [ 20, [ ""Int32"", ""null"" ]],
				 ""CallerEvent"": [ 24, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""Callback"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Context"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VetoType"": [ 48, [ ""Pointer"", ""{\""target\"":\""_PNP_VETO_TYPE\""}"" ]],
				 ""VetoName"": [ 56, [ ""Pointer"", ""{\""target\"":\""_UNICODE_STRING\""}"" ]],
				 ""RefCount"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""Lock"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""Cancel"": [ 72, [ ""Byte"", ""null"" ]],
				 ""Parent"": [ 80, [ ""Pointer"", ""{\""target\"":\""_PNP_DEVICE_EVENT_ENTRY\""}"" ]],
				 ""ActivityId"": [ 88, [ ""_GUID"", ""null"" ]],
				 ""Watchdog"": [ 104, [ ""Pointer"", ""{\""target\"":\""_PNP_WATCHDOG\""}"" ]],
				 ""Data"": [ 112, [ ""_PLUGPLAY_EVENT_BLOCK"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Argument { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Int32 ArgumentStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 CallerEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 Callback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 VetoType { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 VetoName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt32 RefCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 Lock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public Byte Cancel{ get { return _StructureData[_BufferOffset +72]; } }
		public UInt64 Parent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public _GUID ActivityId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public UInt64 Watchdog { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public _PLUGPLAY_EVENT_BLOCK Data
		{
			get
			{
				_PLUGPLAY_EVENT_BLOCK returnValue = new _PLUGPLAY_EVENT_BLOCK(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_GLOBAL_APPCOMPAT_FLAGS
 
	public class _HEAP_GLOBAL_APPCOMPAT_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_GLOBAL_APPCOMPAT_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_GLOBAL_APPCOMPAT_FLAGS"": [ 4, {
				 ""SafeInputValidation"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Padding"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""CommitLFHSubsegments"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""AllocateHeapFromEnv"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SafeInputValidation
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Padding
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 CommitLFHSubsegments
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 AllocateHeapFromEnv
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _VI_POOL_ENTRY_INUSE
 
	public class _VI_POOL_ENTRY_INUSE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VI_POOL_ENTRY_INUSE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VI_POOL_ENTRY_INUSE"": [ 32, {
				 ""VirtualAddress"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CallingAddress"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberOfBytes"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""Tag"": [ 24, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 VirtualAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 CallingAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 NumberOfBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Tag { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _PO_DIAG_STACK_RECORD
 
	public class _PO_DIAG_STACK_RECORD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_DIAG_STACK_RECORD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_DIAG_STACK_RECORD"": [ 16, {
				 ""StackDepth"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Stack"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 StackDepth { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64[] Stack
		{
			get
			{
				UInt64[] returnValue = new UInt64[1];
				int size = 8;
				for(int i=0; i<1; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PROCESS_ENERGY_VALUES_EXTENSION
 
	public class _PROCESS_ENERGY_VALUES_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCESS_ENERGY_VALUES_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCESS_ENERGY_VALUES_EXTENSION"": [ 160, {
				 ""Timelines"": [ 0, [ ""Array"", ""{\""count\"":14,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""CpuTimeline"": [ 0, [ ""_TIMELINE_BITMAP"", ""null"" ]],
				 ""DiskTimeline"": [ 8, [ ""_TIMELINE_BITMAP"", ""null"" ]],
				 ""NetworkTimeline"": [ 16, [ ""_TIMELINE_BITMAP"", ""null"" ]],
				 ""MBBTimeline"": [ 24, [ ""_TIMELINE_BITMAP"", ""null"" ]],
				 ""ForegroundTimeline"": [ 32, [ ""_TIMELINE_BITMAP"", ""null"" ]],
				 ""DesktopVisibleTimeline"": [ 40, [ ""_TIMELINE_BITMAP"", ""null"" ]],
				 ""CompositionRenderedTimeline"": [ 48, [ ""_TIMELINE_BITMAP"", ""null"" ]],
				 ""CompositionDirtyGeneratedTimeline"": [ 56, [ ""_TIMELINE_BITMAP"", ""null"" ]],
				 ""CompositionDirtyPropagatedTimeline"": [ 64, [ ""_TIMELINE_BITMAP"", ""null"" ]],
				 ""InputTimeline"": [ 72, [ ""_TIMELINE_BITMAP"", ""null"" ]],
				 ""AudioInTimeline"": [ 80, [ ""_TIMELINE_BITMAP"", ""null"" ]],
				 ""AudioOutTimeline"": [ 88, [ ""_TIMELINE_BITMAP"", ""null"" ]],
				 ""DisplayRequiredTimeline"": [ 96, [ ""_TIMELINE_BITMAP"", ""null"" ]],
				 ""KeyboardInputTimeline"": [ 104, [ ""_TIMELINE_BITMAP"", ""null"" ]],
				 ""Durations"": [ 112, [ ""Array"", ""{\""count\"":5,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""InputDuration"": [ 112, [ ""_ENERGY_STATE_DURATION"", ""null"" ]],
				 ""AudioInDuration"": [ 120, [ ""_ENERGY_STATE_DURATION"", ""null"" ]],
				 ""AudioOutDuration"": [ 128, [ ""_ENERGY_STATE_DURATION"", ""null"" ]],
				 ""DisplayRequiredDuration"": [ 136, [ ""_ENERGY_STATE_DURATION"", ""null"" ]],
				 ""PSMBackgroundDuration"": [ 144, [ ""_ENERGY_STATE_DURATION"", ""null"" ]],
				 ""KeyboardInput"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""MouseInput"": [ 156, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _TIMELINE_BITMAP[] Timelines
		{
			get
			{
				_TIMELINE_BITMAP[] returnValue = new _TIMELINE_BITMAP[14];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<14; i++ )
					returnValue[i] = new _TIMELINE_BITMAP(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public _TIMELINE_BITMAP CpuTimeline
		{
			get
			{
				_TIMELINE_BITMAP returnValue = new _TIMELINE_BITMAP(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _TIMELINE_BITMAP DiskTimeline
		{
			get
			{
				_TIMELINE_BITMAP returnValue = new _TIMELINE_BITMAP(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _TIMELINE_BITMAP NetworkTimeline
		{
			get
			{
				_TIMELINE_BITMAP returnValue = new _TIMELINE_BITMAP(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _TIMELINE_BITMAP MBBTimeline
		{
			get
			{
				_TIMELINE_BITMAP returnValue = new _TIMELINE_BITMAP(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _TIMELINE_BITMAP ForegroundTimeline
		{
			get
			{
				_TIMELINE_BITMAP returnValue = new _TIMELINE_BITMAP(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _TIMELINE_BITMAP DesktopVisibleTimeline
		{
			get
			{
				_TIMELINE_BITMAP returnValue = new _TIMELINE_BITMAP(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _TIMELINE_BITMAP CompositionRenderedTimeline
		{
			get
			{
				_TIMELINE_BITMAP returnValue = new _TIMELINE_BITMAP(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _TIMELINE_BITMAP CompositionDirtyGeneratedTimeline
		{
			get
			{
				_TIMELINE_BITMAP returnValue = new _TIMELINE_BITMAP(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _TIMELINE_BITMAP CompositionDirtyPropagatedTimeline
		{
			get
			{
				_TIMELINE_BITMAP returnValue = new _TIMELINE_BITMAP(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _TIMELINE_BITMAP InputTimeline
		{
			get
			{
				_TIMELINE_BITMAP returnValue = new _TIMELINE_BITMAP(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _TIMELINE_BITMAP AudioInTimeline
		{
			get
			{
				_TIMELINE_BITMAP returnValue = new _TIMELINE_BITMAP(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public _TIMELINE_BITMAP AudioOutTimeline
		{
			get
			{
				_TIMELINE_BITMAP returnValue = new _TIMELINE_BITMAP(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public _TIMELINE_BITMAP DisplayRequiredTimeline
		{
			get
			{
				_TIMELINE_BITMAP returnValue = new _TIMELINE_BITMAP(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public _TIMELINE_BITMAP KeyboardInputTimeline
		{
			get
			{
				_TIMELINE_BITMAP returnValue = new _TIMELINE_BITMAP(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public _ENERGY_STATE_DURATION[] Durations
		{
			get
			{
				_ENERGY_STATE_DURATION[] returnValue = new _ENERGY_STATE_DURATION[5];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<5; i++ )
					returnValue[i] = new _ENERGY_STATE_DURATION(_StructureData, (i * size) + _BufferOffset + 112);
				return returnValue;
			}
		}
		public _ENERGY_STATE_DURATION InputDuration
		{
			get
			{
				_ENERGY_STATE_DURATION returnValue = new _ENERGY_STATE_DURATION(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public _ENERGY_STATE_DURATION AudioInDuration
		{
			get
			{
				_ENERGY_STATE_DURATION returnValue = new _ENERGY_STATE_DURATION(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
		public _ENERGY_STATE_DURATION AudioOutDuration
		{
			get
			{
				_ENERGY_STATE_DURATION returnValue = new _ENERGY_STATE_DURATION(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public _ENERGY_STATE_DURATION DisplayRequiredDuration
		{
			get
			{
				_ENERGY_STATE_DURATION returnValue = new _ENERGY_STATE_DURATION(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public _ENERGY_STATE_DURATION PSMBackgroundDuration
		{
			get
			{
				_ENERGY_STATE_DURATION returnValue = new _ENERGY_STATE_DURATION(_StructureData, _BufferOffset + 144);
				return returnValue;
			}
		}
		public UInt32 KeyboardInput { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public UInt32 MouseInput { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 156); } }
	}
	#endregion
	#region _MI_LDW_WORK_CONTEXT
 
	public class _MI_LDW_WORK_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_LDW_WORK_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_LDW_WORK_CONTEXT"": [ 56, {
				 ""WorkItem"": [ 0, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""FileObject"": [ 32, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""ErrorStatus"": [ 40, [ ""Int32"", ""null"" ]],
				 ""Active"": [ 44, [ ""Int32"", ""null"" ]],
				 ""FreeWhenDone"": [ 48, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _WORK_QUEUE_ITEM WorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 FileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public Int32 ErrorStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 40); } }
		public Int32 Active { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 44); } }
		public Byte FreeWhenDone{ get { return _StructureData[_BufferOffset +48]; } }
	}
	#endregion
	#region _MI_PAGE_COMBINE_STATISTICS
 
	public class _MI_PAGE_COMBINE_STATISTICS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PAGE_COMBINE_STATISTICS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PAGE_COMBINE_STATISTICS"": [ 40, {
				 ""PagesScannedActive"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""PagesScannedStandby"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""PagesCombined"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""CombineScanCount"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""CombinedBlocksInUse"": [ 28, [ ""Int32"", ""null"" ]],
				 ""SumCombinedBlocksReferenceCount"": [ 32, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PagesScannedActive { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 PagesScannedStandby { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 PagesCombined { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 CombineScanCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Int32 CombinedBlocksInUse { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 28); } }
		public Int32 SumCombinedBlocksReferenceCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _MI_DEBUGGER_STATE
 
	public class _MI_DEBUGGER_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_DEBUGGER_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 280; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_DEBUGGER_STATE"": [ 280, {
				 ""TransientWrite"": [ 0, [ ""Byte"", ""null"" ]],
				 ""CodePageEdited"": [ 1, [ ""Byte"", ""null"" ]],
				 ""DebugPte"": [ 8, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""PoisonedTb"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""InDebugger"": [ 20, [ ""Int32"", ""null"" ]],
				 ""Pfns"": [ 24, [ ""Array"", ""{\""count\"":32,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public Byte TransientWrite{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte CodePageEdited{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt64 DebugPte { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 PoisonedTb { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Int32 InDebugger { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64[] Pfns
		{
			get
			{
				UInt64[] returnValue = new UInt64[32];
				int size = 8;
				for(int i=0; i<32; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KLOCK_ENTRY_LOCK_STATE
 
	public class _KLOCK_ENTRY_LOCK_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KLOCK_ENTRY_LOCK_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KLOCK_ENTRY_LOCK_STATE"": [ 16, {
				 ""CrossThreadReleasable"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Busy"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":63,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""InTree"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":63,\""target\"":\""UInt64\""}"" ]],
				 ""LockState"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SessionState"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SessionId"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SessionPad"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 CrossThreadReleasable
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Busy
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 Reserved
		{
			get
			{
				// start: 2  end: 63  Mask: 111111111111111111111111111111111111111111111111111111111111100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 9223372036854775804) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 InTree
		{
			get
			{
				// start: 63  end: 64  Mask: 1000000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 9223372036854775808) >> 63;
				return (UInt64)value2;
			}
		}
		public UInt64 LockState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 SessionState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 SessionPad { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _RTL_RANGE
 
	public class _RTL_RANGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_RANGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_RANGE"": [ 40, {
				 ""Start"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""End"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""UserData"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Owner"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Attributes"": [ 32, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 33, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Start { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 End { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 UserData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Owner { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public Byte Attributes{ get { return _StructureData[_BufferOffset +32]; } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +33]; } }
	}
	#endregion
	#region _ETIMER
 
	public class _ETIMER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETIMER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 312; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETIMER"": [ 312, {
				 ""KeTimer"": [ 0, [ ""_KTIMER"", ""null"" ]],
				 ""Lock"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""TimerApc"": [ 72, [ ""_KAPC"", ""null"" ]],
				 ""TimerDpc"": [ 160, [ ""_KDPC"", ""null"" ]],
				 ""ActiveTimerListEntry"": [ 224, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Period"": [ 240, [ ""UInt32"", ""null"" ]],
				 ""TimerFlags"": [ 244, [ ""Char"", ""null"" ]],
				 ""ApcAssociated"": [ 244, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""FlushDpcs"": [ 244, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""Paused"": [ 244, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""Spare1"": [ 244, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""DueTimeType"": [ 245, [ ""Byte"", ""null"" ]],
				 ""Spare2"": [ 246, [ ""UInt16"", ""null"" ]],
				 ""WakeReason"": [ 248, [ ""Pointer"", ""{\""target\"":\""_DIAGNOSTIC_CONTEXT\""}"" ]],
				 ""WakeTimerListEntry"": [ 256, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""VirtualizedTimerCookie"": [ 272, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""VirtualizedTimerLinks"": [ 280, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DueTime"": [ 296, [ ""UInt64"", ""null"" ]],
				 ""CoalescingWindow"": [ 304, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KTIMER KeTimer
		{
			get
			{
				_KTIMER returnValue = new _KTIMER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public _KAPC TimerApc
		{
			get
			{
				_KAPC returnValue = new _KAPC(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _KDPC TimerDpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 160);
				return returnValue;
			}
		}
		public _LIST_ENTRY ActiveTimerListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 224);
				return returnValue;
			}
		}
		public UInt32 Period { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 240); } }
		public Char TimerFlags { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 244); } }
		public Byte ApcAssociated
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 244];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte FlushDpcs
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 244];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte Paused
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 244];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte Spare1
		{
			get
			{
				// start: 3  end: 8  Mask: 0000000011111000
				Byte value = _StructureData[_BufferOffset + 244];
				var value2 = (value & 248) >> 3;
				return (Byte)value2;
			}
		}
		public Byte DueTimeType{ get { return _StructureData[_BufferOffset +245]; } }
		public UInt16 Spare2 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 246); } }
		public UInt64 WakeReason { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public _LIST_ENTRY WakeTimerListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
		public UInt64 VirtualizedTimerCookie { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public _LIST_ENTRY VirtualizedTimerLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 280);
				return returnValue;
			}
		}
		public UInt64 DueTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 296); } }
		public UInt32 CoalescingWindow { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 304); } }
	}
	#endregion
	#region _MI_SHUTDOWN_STATE
 
	public class _MI_SHUTDOWN_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SHUTDOWN_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 120; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SHUTDOWN_STATE"": [ 120, {
				 ""CrashDumpInitialized"": [ 0, [ ""Byte"", ""null"" ]],
				 ""ConnectedStandbyActive"": [ 1, [ ""Byte"", ""null"" ]],
				 ""ZeroPageFileAtShutdown"": [ 2, [ ""Byte"", ""null"" ]],
				 ""SystemShutdown"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ShutdownFlushInProgress"": [ 8, [ ""Int32"", ""null"" ]],
				 ""MirroringActive"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""ResumeItem"": [ 16, [ ""_MI_RESUME_WORKITEM"", ""null"" ]],
				 ""MirrorHoldsPfn"": [ 72, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""MirrorBitMaps"": [ 80, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""CrashDumpPte"": [ 112, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte CrashDumpInitialized{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte ConnectedStandbyActive{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte ZeroPageFileAtShutdown{ get { return _StructureData[_BufferOffset +2]; } }
		public UInt32 SystemShutdown { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public Int32 ShutdownFlushInProgress { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 MirroringActive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _MI_RESUME_WORKITEM ResumeItem
		{
			get
			{
				_MI_RESUME_WORKITEM returnValue = new _MI_RESUME_WORKITEM(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 MirrorHoldsPfn { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public _RTL_BITMAP_EX[] MirrorBitMaps
		{
			get
			{
				_RTL_BITMAP_EX[] returnValue = new _RTL_BITMAP_EX[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _RTL_BITMAP_EX(_StructureData, (i * size) + _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt64 CrashDumpPte { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
	}
	#endregion
	#region _VI_TRACK_IRQL
 
	public class _VI_TRACK_IRQL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VI_TRACK_IRQL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VI_TRACK_IRQL"": [ 56, {
				 ""Thread"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OldIrql"": [ 8, [ ""Byte"", ""null"" ]],
				 ""NewIrql"": [ 9, [ ""Byte"", ""null"" ]],
				 ""Processor"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""TickCount"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""StackTrace"": [ 16, [ ""Array"", ""{\""count\"":5,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Byte OldIrql{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte NewIrql{ get { return _StructureData[_BufferOffset +9]; } }
		public UInt16 Processor { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public UInt32 TickCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64[] StackTrace
		{
			get
			{
				UInt64[] returnValue = new UInt64[5];
				int size = 8;
				for(int i=0; i<5; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ETW_PRIV_HANDLE_DEMUX_TABLE
 
	public class _ETW_PRIV_HANDLE_DEMUX_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_PRIV_HANDLE_DEMUX_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_PRIV_HANDLE_DEMUX_TABLE"": [ 32, {
				 ""Tree"": [ 0, [ ""_RTL_RB_TREE"", ""null"" ]],
				 ""Lock"": [ 16, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""SequenceNumber"": [ 24, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_RB_TREE Tree
		{
			get
			{
				_RTL_RB_TREE returnValue = new _RTL_RB_TREE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK Lock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt16 SequenceNumber { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _ARM64_DBGKD_CONTROL_SET
 
	public class _ARM64_DBGKD_CONTROL_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARM64_DBGKD_CONTROL_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARM64_DBGKD_CONTROL_SET"": [ 24, {
				 ""Continue"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TraceFlag"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""CurrentSymbolStart"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""CurrentSymbolEnd"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Continue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 TraceFlag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 CurrentSymbolStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 CurrentSymbolEnd { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _CM_KEY_HASH_TABLE_ENTRY
 
	public class _CM_KEY_HASH_TABLE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_HASH_TABLE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_HASH_TABLE_ENTRY"": [ 24, {
				 ""Lock"": [ 0, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""Owner"": [ 8, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""Entry"": [ 16, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_HASH\""}"" ]] }]
				 }
				)";
			}
		}
		public _EX_PUSH_LOCK Lock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Owner { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Entry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _PERIODIC_CAPTURE_STATE_GUIDS
 
	public class _PERIODIC_CAPTURE_STATE_GUIDS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PERIODIC_CAPTURE_STATE_GUIDS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PERIODIC_CAPTURE_STATE_GUIDS"": [ 16, {
				 ""ProviderCount"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Providers"": [ 8, [ ""Pointer"", ""{\""target\"":\""_GUID\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 ProviderCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt64 Providers { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _HEAP_FREE_ENTRY_EXTRA
 
	public class _HEAP_FREE_ENTRY_EXTRA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_FREE_ENTRY_EXTRA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_FREE_ENTRY_EXTRA"": [ 4, {
				 ""TagIndex"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""FreeBackTraceIndex"": [ 2, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 TagIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 FreeBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
	}
	#endregion
	#region _SE_AUDIT_PROCESS_CREATION_INFO
 
	public class _SE_AUDIT_PROCESS_CREATION_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SE_AUDIT_PROCESS_CREATION_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SE_AUDIT_PROCESS_CREATION_INFO"": [ 8, {
				 ""ImageFileName"": [ 0, [ ""Pointer"", ""{\""target\"":\""_OBJECT_NAME_INFORMATION\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ImageFileName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _ACTIVATION_CONTEXT_STACK64
 
	public class _ACTIVATION_CONTEXT_STACK64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ACTIVATION_CONTEXT_STACK64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ACTIVATION_CONTEXT_STACK64"": [ 40, {
				 ""ActiveFrame"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""FrameListCache"": [ 8, [ ""LIST_ENTRY64"", ""null"" ]],
				 ""Flags"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""NextCookieSequenceNumber"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""StackId"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ActiveFrame { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public LIST_ENTRY64 FrameListCache
		{
			get
			{
				LIST_ENTRY64 returnValue = new LIST_ENTRY64(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 NextCookieSequenceNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 StackId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region DOCK_INTERFACE
 
	public class DOCK_INTERFACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public DOCK_INTERFACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""DOCK_INTERFACE"": [ 48, {
				 ""Size"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Version"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Context"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InterfaceReference"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InterfaceDereference"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProfileDepartureSetMode"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProfileDepartureUpdate"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 InterfaceReference { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 InterfaceDereference { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ProfileDepartureSetMode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 ProfileDepartureUpdate { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region DEBUG_MEMORY_REQUIREMENTS
 
	public class DEBUG_MEMORY_REQUIREMENTS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public DEBUG_MEMORY_REQUIREMENTS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""DEBUG_MEMORY_REQUIREMENTS"": [ 32, {
				 ""Start"": [ 0, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""MaxEnd"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""VirtualAddress"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Length"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Cached"": [ 28, [ ""Byte"", ""null"" ]],
				 ""Aligned"": [ 29, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LARGE_INTEGER Start
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LARGE_INTEGER MaxEnd
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 VirtualAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Byte Cached{ get { return _StructureData[_BufferOffset +28]; } }
		public Byte Aligned{ get { return _StructureData[_BufferOffset +29]; } }
	}
	#endregion
	#region DEBUG_DEVICE_ADDRESS
 
	public class DEBUG_DEVICE_ADDRESS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public DEBUG_DEVICE_ADDRESS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""DEBUG_DEVICE_ADDRESS"": [ 24, {
				 ""Type"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Valid"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 2, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""BitWidth"": [ 2, [ ""Byte"", ""null"" ]],
				 ""AccessSize"": [ 3, [ ""Byte"", ""null"" ]],
				 ""TranslatedAddress"": [ 8, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""Length"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Type{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Valid{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte[] Reserved
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 2];
				return returnValue;
			}
		}
		public Byte BitWidth{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte AccessSize{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt64 TranslatedAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region PROCESSOR_IDLESTATE_INFO
 
	public class PROCESSOR_IDLESTATE_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public PROCESSOR_IDLESTATE_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""PROCESSOR_IDLESTATE_INFO"": [ 8, {
				 ""TimeCheck"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""DemotePercent"": [ 4, [ ""Byte"", ""null"" ]],
				 ""PromotePercent"": [ 5, [ ""Byte"", ""null"" ]],
				 ""Spare"": [ 6, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 TimeCheck { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte DemotePercent{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte PromotePercent{ get { return _StructureData[_BufferOffset +5]; } }
		public Byte[] Spare
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 6];
				return returnValue;
			}
		}
	}
	#endregion
	#region SYSTEM_POWER_LEVEL
 
	public class SYSTEM_POWER_LEVEL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public SYSTEM_POWER_LEVEL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""SYSTEM_POWER_LEVEL"": [ 24, {
				 ""Enable"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Spare"": [ 1, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""BatteryLevel"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""PowerPolicy"": [ 8, [ ""POWER_ACTION_POLICY"", ""null"" ]],
				 ""MinSystemState"": [ 20, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte Enable{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte[] Spare
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 1];
				return returnValue;
			}
		}
		public UInt32 BatteryLevel { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public POWER_ACTION_POLICY PowerPolicy
		{
			get
			{
				POWER_ACTION_POLICY returnValue = new POWER_ACTION_POLICY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _SYSTEM_POWER_STATE MinSystemState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region POWER_ACTION_POLICY
 
	public class POWER_ACTION_POLICY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public POWER_ACTION_POLICY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""POWER_ACTION_POLICY"": [ 12, {
				 ""Action"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""POWER_ACTION\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""EventCode"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public POWER_ACTION Action { get { return (POWER_ACTION)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 EventCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region BATTERY_REPORTING_SCALE
 
	public class BATTERY_REPORTING_SCALE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public BATTERY_REPORTING_SCALE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""BATTERY_REPORTING_SCALE"": [ 8, {
				 ""Granularity"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Capacity"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Granularity { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Capacity { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _PPM_IDLE_SYNCHRONIZATION_STATE
 
	public class _PPM_IDLE_SYNCHRONIZATION_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPM_IDLE_SYNCHRONIZATION_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPM_IDLE_SYNCHRONIZATION_STATE"": [ 4, {
				 ""AsLong"": [ 0, [ ""Int32"", ""null"" ]],
				 ""RefCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":0,\""target\"":\""Int32\""}"" ]],
				 ""State"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 AsLong { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 RefCount
		{
			get
			{
				// start: 0  end: 24  Mask: 111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16777215) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 State
		{
			get
			{
				// start: 24  end: 32  Mask: 11111111000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4278190080) >> 24;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _PROCESSOR_POWER_STATE
 
	public class _PROCESSOR_POWER_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCESSOR_POWER_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 512; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCESSOR_POWER_STATE"": [ 512, {
				 ""IdleStates"": [ 0, [ ""Pointer"", ""{\""target\"":\""_PPM_IDLE_STATES\""}"" ]],
				 ""IdleAccounting"": [ 8, [ ""Pointer"", ""{\""target\"":\""_PROC_IDLE_ACCOUNTING\""}"" ]],
				 ""IdleTimeLast"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""IdleTimeTotal"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""IdleTimeEntry"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""IdleTimeExpiration"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""NonInterruptibleTransition"": [ 48, [ ""Byte"", ""null"" ]],
				 ""PepWokenTransition"": [ 49, [ ""Byte"", ""null"" ]],
				 ""HvTargetState"": [ 50, [ ""Byte"", ""null"" ]],
				 ""SoftParked"": [ 51, [ ""Byte"", ""null"" ]],
				 ""TargetIdleState"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""IdlePolicy"": [ 56, [ ""_PROC_IDLE_POLICY"", ""null"" ]],
				 ""Synchronization"": [ 64, [ ""_PPM_IDLE_SYNCHRONIZATION_STATE"", ""null"" ]],
				 ""PerfFeedback"": [ 72, [ ""_PROC_FEEDBACK"", ""null"" ]],
				 ""Hypervisor"": [ 216, [ ""Enumeration"", ""{\""enum_name\"":\""_PROC_HYPERVISOR_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""LastSysTime"": [ 220, [ ""UInt32"", ""null"" ]],
				 ""WmiDispatchPtr"": [ 224, [ ""UInt64"", ""null"" ]],
				 ""WmiInterfaceEnabled"": [ 232, [ ""Int32"", ""null"" ]],
				 ""FFHThrottleStateInfo"": [ 240, [ ""_PPM_FFH_THROTTLE_STATE_INFO"", ""null"" ]],
				 ""PerfActionDpc"": [ 272, [ ""_KDPC"", ""null"" ]],
				 ""PerfActionMask"": [ 336, [ ""Int32"", ""null"" ]],
				 ""HvIdleCheck"": [ 344, [ ""_PROC_IDLE_SNAP"", ""null"" ]],
				 ""CheckContext"": [ 360, [ ""_PROC_PERF_CHECK_CONTEXT"", ""null"" ]],
				 ""Concurrency"": [ 424, [ ""Pointer"", ""{\""target\"":\""_PPM_CONCURRENCY_ACCOUNTING\""}"" ]],
				 ""ClassConcurrency"": [ 432, [ ""Pointer"", ""{\""target\"":\""_PPM_CONCURRENCY_ACCOUNTING\""}"" ]],
				 ""ArchitecturalEfficiencyClass"": [ 440, [ ""Byte"", ""null"" ]],
				 ""PerformanceSchedulingClass"": [ 441, [ ""Byte"", ""null"" ]],
				 ""EfficiencySchedulingClass"": [ 442, [ ""Byte"", ""null"" ]],
				 ""Unused"": [ 443, [ ""Byte"", ""null"" ]],
				 ""Parked"": [ 444, [ ""Byte"", ""null"" ]],
				 ""LongPriorQosPeriod"": [ 445, [ ""Byte"", ""null"" ]],
				 ""SnapTimeLast"": [ 448, [ ""UInt64"", ""null"" ]],
				 ""EnergyConsumed"": [ 448, [ ""UInt64"", ""null"" ]],
				 ""ActiveTime"": [ 456, [ ""UInt64"", ""null"" ]],
				 ""TotalTime"": [ 464, [ ""UInt64"", ""null"" ]],
				 ""FxDevice"": [ 472, [ ""Pointer"", ""{\""target\"":\""_POP_FX_DEVICE\""}"" ]],
				 ""LastQosTranstionTsc"": [ 480, [ ""UInt64"", ""null"" ]],
				 ""QosTransitionHysteresis"": [ 488, [ ""UInt64"", ""null"" ]],
				 ""RequestedQosClass"": [ 496, [ ""Enumeration"", ""{\""enum_name\"":\""_KHETERO_CPU_QOS\"",\""target\"":\""UInt32\""}"" ]],
				 ""ResolvedQosClass"": [ 500, [ ""Enumeration"", ""{\""enum_name\"":\""_KHETERO_CPU_QOS\"",\""target\"":\""UInt32\""}"" ]],
				 ""QosEquivalencyMask"": [ 504, [ ""UInt16"", ""null"" ]],
				 ""HwFeedbackTableIndex"": [ 506, [ ""UInt16"", ""null"" ]],
				 ""HwFeedbackParkHint"": [ 508, [ ""Byte"", ""null"" ]],
				 ""HwFeedbackPerformanceClass"": [ 509, [ ""Byte"", ""null"" ]],
				 ""HwFeedbackEfficiencyClass"": [ 510, [ ""Byte"", ""null"" ]],
				 ""HeteroCoreType"": [ 511, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 IdleStates { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 IdleAccounting { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 IdleTimeLast { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 IdleTimeTotal { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 IdleTimeEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 IdleTimeExpiration { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public Byte NonInterruptibleTransition{ get { return _StructureData[_BufferOffset +48]; } }
		public Byte PepWokenTransition{ get { return _StructureData[_BufferOffset +49]; } }
		public Byte HvTargetState{ get { return _StructureData[_BufferOffset +50]; } }
		public Byte SoftParked{ get { return _StructureData[_BufferOffset +51]; } }
		public UInt32 TargetIdleState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public _PROC_IDLE_POLICY IdlePolicy
		{
			get
			{
				_PROC_IDLE_POLICY returnValue = new _PROC_IDLE_POLICY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _PPM_IDLE_SYNCHRONIZATION_STATE Synchronization
		{
			get
			{
				_PPM_IDLE_SYNCHRONIZATION_STATE returnValue = new _PPM_IDLE_SYNCHRONIZATION_STATE(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _PROC_FEEDBACK PerfFeedback
		{
			get
			{
				_PROC_FEEDBACK returnValue = new _PROC_FEEDBACK(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _PROC_HYPERVISOR_STATE Hypervisor { get { return (_PROC_HYPERVISOR_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 216); } }
		public UInt32 LastSysTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 220); } }
		public UInt64 WmiDispatchPtr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public Int32 WmiInterfaceEnabled { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 232); } }
		public _PPM_FFH_THROTTLE_STATE_INFO FFHThrottleStateInfo
		{
			get
			{
				_PPM_FFH_THROTTLE_STATE_INFO returnValue = new _PPM_FFH_THROTTLE_STATE_INFO(_StructureData, _BufferOffset + 240);
				return returnValue;
			}
		}
		public _KDPC PerfActionDpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 272);
				return returnValue;
			}
		}
		public Int32 PerfActionMask { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 336); } }
		public _PROC_IDLE_SNAP HvIdleCheck
		{
			get
			{
				_PROC_IDLE_SNAP returnValue = new _PROC_IDLE_SNAP(_StructureData, _BufferOffset + 344);
				return returnValue;
			}
		}
		public _PROC_PERF_CHECK_CONTEXT CheckContext
		{
			get
			{
				_PROC_PERF_CHECK_CONTEXT returnValue = new _PROC_PERF_CHECK_CONTEXT(_StructureData, _BufferOffset + 360);
				return returnValue;
			}
		}
		public UInt64 Concurrency { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 424); } }
		public UInt64 ClassConcurrency { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 432); } }
		public Byte ArchitecturalEfficiencyClass{ get { return _StructureData[_BufferOffset +440]; } }
		public Byte PerformanceSchedulingClass{ get { return _StructureData[_BufferOffset +441]; } }
		public Byte EfficiencySchedulingClass{ get { return _StructureData[_BufferOffset +442]; } }
		public Byte Unused{ get { return _StructureData[_BufferOffset +443]; } }
		public Byte Parked{ get { return _StructureData[_BufferOffset +444]; } }
		public Byte LongPriorQosPeriod{ get { return _StructureData[_BufferOffset +445]; } }
		public UInt64 SnapTimeLast { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 448); } }
		public UInt64 EnergyConsumed { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 448); } }
		public UInt64 ActiveTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 456); } }
		public UInt64 TotalTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 464); } }
		public UInt64 FxDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 472); } }
		public UInt64 LastQosTranstionTsc { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 480); } }
		public UInt64 QosTransitionHysteresis { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 488); } }
		public _KHETERO_CPU_QOS RequestedQosClass { get { return (_KHETERO_CPU_QOS)BitConverter.ToUInt32(_StructureData, _BufferOffset + 496); } }
		public _KHETERO_CPU_QOS ResolvedQosClass { get { return (_KHETERO_CPU_QOS)BitConverter.ToUInt32(_StructureData, _BufferOffset + 500); } }
		public UInt16 QosEquivalencyMask { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 504); } }
		public UInt16 HwFeedbackTableIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 506); } }
		public Byte HwFeedbackParkHint{ get { return _StructureData[_BufferOffset +508]; } }
		public Byte HwFeedbackPerformanceClass{ get { return _StructureData[_BufferOffset +509]; } }
		public Byte HwFeedbackEfficiencyClass{ get { return _StructureData[_BufferOffset +510]; } }
		public Byte HeteroCoreType{ get { return _StructureData[_BufferOffset +511]; } }
	}
	#endregion
	#region _MI_PARTITION_SEGMENTS
 
	public class _MI_PARTITION_SEGMENTS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PARTITION_SEGMENTS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 832; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PARTITION_SEGMENTS"": [ 832, {
				 ""SegmentListLock"": [ 0, [ ""Int32"", ""null"" ]],
				 ""DeleteOnCloseCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""FsControlAreaCount"": [ 8, [ ""Int64"", ""null"" ]],
				 ""PfControlAreaCount"": [ 16, [ ""Int64"", ""null"" ]],
				 ""CloneHeaderCount"": [ 24, [ ""Int64"", ""null"" ]],
				 ""DeleteSubsectionCleanup"": [ 32, [ ""_KEVENT"", ""null"" ]],
				 ""UnusedSegmentCleanup"": [ 56, [ ""_KEVENT"", ""null"" ]],
				 ""SubsectionDeletePtes"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""AttemptForCantExtend"": [ 88, [ ""_MMPAGE_FILE_EXPANSION"", ""null"" ]],
				 ""DereferenceSegmentHeader"": [ 176, [ ""_MMDEREFERENCE_SEGMENT_HEADER"", ""null"" ]],
				 ""DeleteOnCloseList"": [ 256, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeleteOnCloseTimer"": [ 272, [ ""_KTIMER"", ""null"" ]],
				 ""DeleteOnCloseTimerActive"": [ 336, [ ""Byte"", ""null"" ]],
				 ""SegmentDereferenceThreadExists"": [ 337, [ ""Byte"", ""null"" ]],
				 ""SegmentDereferenceActiveControlArea"": [ 344, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UnusedSegmentPagedPool"": [ 352, [ ""UInt64"", ""null"" ]],
				 ""UnusedSegmentList"": [ 360, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""UnusedSubsectionList"": [ 376, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeleteSubsectionList"": [ 392, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ControlAreaDeleteEvent"": [ 408, [ ""_KEVENT"", ""null"" ]],
				 ""ControlAreaDeleteList"": [ 432, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""FreeSystemCache"": [ 440, [ ""_MI_PTE_CHAIN_HEAD"", ""null"" ]],
				 ""CloneDereferenceEvent"": [ 464, [ ""_KEVENT"", ""null"" ]],
				 ""CloneProtosSListHead"": [ 496, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""SystemCacheInitLock"": [ 512, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""PagefileExtensionWaiters"": [ 520, [ ""UInt32"", ""null"" ]],
				 ""PagefileExtensionRequests"": [ 524, [ ""UInt32"", ""null"" ]],
				 ""PagefileExtensionWaitEvent"": [ 528, [ ""_KEVENT"", ""null"" ]],
				 ""SharedCharges"": [ 552, [ ""Array"", ""{\""count\"":7,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""SharedChargesDrainEvent"": [ 776, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""ControlAreasDrainEvent"": [ 784, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""CloneHeaderDrainEvent"": [ 792, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""ProbeRundownReference"": [ 800, [ ""Pointer"", ""{\""target\"":\""_EX_RUNDOWN_REF_CACHE_AWARE\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 SegmentListLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 DeleteOnCloseCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public Int64 FsControlAreaCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 8); } }
		public Int64 PfControlAreaCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 16); } }
		public Int64 CloneHeaderCount { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 24); } }
		public _KEVENT DeleteSubsectionCleanup
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _KEVENT UnusedSegmentCleanup
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt64 SubsectionDeletePtes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public _MMPAGE_FILE_EXPANSION AttemptForCantExtend
		{
			get
			{
				_MMPAGE_FILE_EXPANSION returnValue = new _MMPAGE_FILE_EXPANSION(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public _MMDEREFERENCE_SEGMENT_HEADER DereferenceSegmentHeader
		{
			get
			{
				_MMDEREFERENCE_SEGMENT_HEADER returnValue = new _MMDEREFERENCE_SEGMENT_HEADER(_StructureData, _BufferOffset + 176);
				return returnValue;
			}
		}
		public _LIST_ENTRY DeleteOnCloseList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
		public _KTIMER DeleteOnCloseTimer
		{
			get
			{
				_KTIMER returnValue = new _KTIMER(_StructureData, _BufferOffset + 272);
				return returnValue;
			}
		}
		public Byte DeleteOnCloseTimerActive{ get { return _StructureData[_BufferOffset +336]; } }
		public Byte SegmentDereferenceThreadExists{ get { return _StructureData[_BufferOffset +337]; } }
		public UInt64 SegmentDereferenceActiveControlArea { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 344); } }
		public UInt64 UnusedSegmentPagedPool { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 352); } }
		public _LIST_ENTRY UnusedSegmentList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 360);
				return returnValue;
			}
		}
		public _LIST_ENTRY UnusedSubsectionList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 376);
				return returnValue;
			}
		}
		public _LIST_ENTRY DeleteSubsectionList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 392);
				return returnValue;
			}
		}
		public _KEVENT ControlAreaDeleteEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 408);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY ControlAreaDeleteList
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 432);
				return returnValue;
			}
		}
		public _MI_PTE_CHAIN_HEAD FreeSystemCache
		{
			get
			{
				_MI_PTE_CHAIN_HEAD returnValue = new _MI_PTE_CHAIN_HEAD(_StructureData, _BufferOffset + 440);
				return returnValue;
			}
		}
		public _KEVENT CloneDereferenceEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 464);
				return returnValue;
			}
		}
		public _SLIST_HEADER CloneProtosSListHead
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 496);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK SystemCacheInitLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 512);
				return returnValue;
			}
		}
		public UInt32 PagefileExtensionWaiters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 520); } }
		public UInt32 PagefileExtensionRequests { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 524); } }
		public _KEVENT PagefileExtensionWaitEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 528);
				return returnValue;
			}
		}
		public _MI_CROSS_PARTITION_CHARGES[] SharedCharges
		{
			get
			{
				_MI_CROSS_PARTITION_CHARGES[] returnValue = new _MI_CROSS_PARTITION_CHARGES[7];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<7; i++ )
					returnValue[i] = new _MI_CROSS_PARTITION_CHARGES(_StructureData, (i * size) + _BufferOffset + 552);
				return returnValue;
			}
		}
		public UInt64 SharedChargesDrainEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 776); } }
		public UInt64 ControlAreasDrainEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 784); } }
		public UInt64 CloneHeaderDrainEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 792); } }
		public UInt64 ProbeRundownReference { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 800); } }
	}
	#endregion
	#region _WHEA_ERROR_STATUS
 
	public class _WHEA_ERROR_STATUS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_ERROR_STATUS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_ERROR_STATUS"": [ 8, {
				 ""ErrorStatus"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Reserved1"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""ErrorType"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""Address"": [ 0, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt64\""}"" ]],
				 ""Control"": [ 0, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt64\""}"" ]],
				 ""Data"": [ 0, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt64\""}"" ]],
				 ""Responder"": [ 0, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt64\""}"" ]],
				 ""Requester"": [ 0, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt64\""}"" ]],
				 ""FirstError"": [ 0, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt64\""}"" ]],
				 ""Overflow"": [ 0, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt64\""}"" ]],
				 ""Reserved2"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":23,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ErrorStatus { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Reserved1
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 255) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 ErrorType
		{
			get
			{
				// start: 8  end: 16  Mask: 1111111100000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65280) >> 8;
				return (UInt64)value2;
			}
		}
		public UInt64 Address
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65536) >> 16;
				return (UInt64)value2;
			}
		}
		public UInt64 Control
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 131072) >> 17;
				return (UInt64)value2;
			}
		}
		public UInt64 Data
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 262144) >> 18;
				return (UInt64)value2;
			}
		}
		public UInt64 Responder
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 524288) >> 19;
				return (UInt64)value2;
			}
		}
		public UInt64 Requester
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1048576) >> 20;
				return (UInt64)value2;
			}
		}
		public UInt64 FirstError
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2097152) >> 21;
				return (UInt64)value2;
			}
		}
		public UInt64 Overflow
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4194304) >> 22;
				return (UInt64)value2;
			}
		}
		public UInt64 Reserved2
		{
			get
			{
				// start: 23  end: 64  Mask: 1111111111111111111111111111111111111111100000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744073701163008) >> 23;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _BUS_HANDLER
 
	public class _BUS_HANDLER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _BUS_HANDLER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 176; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_BUS_HANDLER"": [ 176, {
				 ""Version"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""InterfaceType"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_INTERFACE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ConfigurationType"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_BUS_DATA_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""BusNumber"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""DeviceObject"": [ 16, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""ParentHandler"": [ 24, [ ""Pointer"", ""{\""target\"":\""_BUS_HANDLER\""}"" ]],
				 ""BusData"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeviceControlExtensionSize"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""BusAddresses"": [ 48, [ ""Pointer"", ""{\""target\"":\""_SUPPORTED_RANGES\""}"" ]],
				 ""Reserved"": [ 56, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""GetBusData"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SetBusData"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AdjustResourceList"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AssignSlotResources"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TranslateBusAddress"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Spare1"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Spare2"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Spare3"": [ 128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Spare4"": [ 136, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Spare5"": [ 144, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Spare6"": [ 152, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Spare7"": [ 160, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Spare8"": [ 168, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _INTERFACE_TYPE InterfaceType { get { return (_INTERFACE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _BUS_DATA_TYPE ConfigurationType { get { return (_BUS_DATA_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 ParentHandler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 BusData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt32 DeviceControlExtensionSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt64 BusAddresses { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt32[] Reserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt64 GetBusData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 SetBusData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 AdjustResourceList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 AssignSlotResources { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 TranslateBusAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 Spare1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 Spare2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 Spare3 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 Spare4 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 Spare5 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 Spare6 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 Spare7 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 Spare8 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
	}
	#endregion
	#region _MI_AVAILABLE_PAGE_WAIT_STATES
 
	public class _MI_AVAILABLE_PAGE_WAIT_STATES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_AVAILABLE_PAGE_WAIT_STATES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_AVAILABLE_PAGE_WAIT_STATES"": [ 32, {
				 ""Event"": [ 0, [ ""_KEVENT"", ""null"" ]],
				 ""EventSets"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 EventSets { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _MMPTE_TIMESTAMP
 
	public class _MMPTE_TIMESTAMP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPTE_TIMESTAMP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPTE_TIMESTAMP"": [ 8, {
				 ""MustBeZero"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Unused"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""SwizzleBit"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""Prototype"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""Transition"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""PageFileLow"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":16,\""target\"":\""UInt64\""}"" ]],
				 ""GlobalTimeStamp"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":32,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 MustBeZero
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Unused
		{
			get
			{
				// start: 1  end: 4  Mask: 0000000000001110
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 14) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 SwizzleBit
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt64)value2;
			}
		}
		public UInt64 Protection
		{
			get
			{
				// start: 5  end: 10  Mask: 0000001111100000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 992) >> 5;
				return (UInt64)value2;
			}
		}
		public UInt64 Prototype
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 Transition
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 PageFileLow
		{
			get
			{
				// start: 12  end: 16  Mask: 1111000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 61440) >> 12;
				return (UInt64)value2;
			}
		}
		public UInt64 Reserved
		{
			get
			{
				// start: 16  end: 32  Mask: 11111111111111110000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294901760) >> 16;
				return (UInt64)value2;
			}
		}
		public UInt64 GlobalTimeStamp
		{
			get
			{
				// start: 32  end: 64  Mask: 1111111111111111111111111111111100000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744069414584320) >> 32;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _KRESOURCEMANAGER
 
	public class _KRESOURCEMANAGER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KRESOURCEMANAGER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 592; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KRESOURCEMANAGER"": [ 592, {
				 ""NotificationAvailable"": [ 0, [ ""_KEVENT"", ""null"" ]],
				 ""cookie"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""State"": [ 28, [ ""Enumeration"", ""{\""enum_name\"":\""_KRESOURCEMANAGER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Mutex"": [ 40, [ ""_KMUTANT"", ""null"" ]],
				 ""NamespaceLink"": [ 96, [ ""_KTMOBJECT_NAMESPACE_LINK"", ""null"" ]],
				 ""RmId"": [ 136, [ ""_GUID"", ""null"" ]],
				 ""NotificationQueue"": [ 152, [ ""_KQUEUE"", ""null"" ]],
				 ""NotificationMutex"": [ 216, [ ""_KMUTANT"", ""null"" ]],
				 ""EnlistmentHead"": [ 272, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""EnlistmentCount"": [ 288, [ ""UInt32"", ""null"" ]],
				 ""NotificationRoutine"": [ 296, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Key"": [ 304, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProtocolListHead"": [ 312, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PendingPropReqListHead"": [ 328, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CRMListEntry"": [ 344, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Tm"": [ 360, [ ""Pointer"", ""{\""target\"":\""_KTM\""}"" ]],
				 ""Description"": [ 368, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""Enlistments"": [ 384, [ ""_KTMOBJECT_NAMESPACE"", ""null"" ]],
				 ""CompletionBinding"": [ 552, [ ""_KRESOURCEMANAGER_COMPLETION_BINDING"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KEVENT NotificationAvailable
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 cookie { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _KRESOURCEMANAGER_STATE State { get { return (_KRESOURCEMANAGER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public _KMUTANT Mutex
		{
			get
			{
				_KMUTANT returnValue = new _KMUTANT(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _KTMOBJECT_NAMESPACE_LINK NamespaceLink
		{
			get
			{
				_KTMOBJECT_NAMESPACE_LINK returnValue = new _KTMOBJECT_NAMESPACE_LINK(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public _GUID RmId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public _KQUEUE NotificationQueue
		{
			get
			{
				_KQUEUE returnValue = new _KQUEUE(_StructureData, _BufferOffset + 152);
				return returnValue;
			}
		}
		public _KMUTANT NotificationMutex
		{
			get
			{
				_KMUTANT returnValue = new _KMUTANT(_StructureData, _BufferOffset + 216);
				return returnValue;
			}
		}
		public _LIST_ENTRY EnlistmentHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 272);
				return returnValue;
			}
		}
		public UInt32 EnlistmentCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 288); } }
		public UInt64 NotificationRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 296); } }
		public UInt64 Key { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 304); } }
		public _LIST_ENTRY ProtocolListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 312);
				return returnValue;
			}
		}
		public _LIST_ENTRY PendingPropReqListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 328);
				return returnValue;
			}
		}
		public _LIST_ENTRY CRMListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 344);
				return returnValue;
			}
		}
		public UInt64 Tm { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 360); } }
		public _UNICODE_STRING Description
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 368);
				return returnValue;
			}
		}
		public _KTMOBJECT_NAMESPACE Enlistments
		{
			get
			{
				_KTMOBJECT_NAMESPACE returnValue = new _KTMOBJECT_NAMESPACE(_StructureData, _BufferOffset + 384);
				return returnValue;
			}
		}
		public _KRESOURCEMANAGER_COMPLETION_BINDING CompletionBinding
		{
			get
			{
				_KRESOURCEMANAGER_COMPLETION_BINDING returnValue = new _KRESOURCEMANAGER_COMPLETION_BINDING(_StructureData, _BufferOffset + 552);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ARBITER_QUERY_ARBITRATE_PARAMETERS
 
	public class _ARBITER_QUERY_ARBITRATE_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_QUERY_ARBITRATE_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_QUERY_ARBITRATE_PARAMETERS"": [ 8, {
				 ""ArbitrationList"": [ 0, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ArbitrationList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _POP_FX_DEVICE
 
	public class _POP_FX_DEVICE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_DEVICE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1200; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_DEVICE"": [ 1200, {
				 ""Link"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Irp"": [ 16, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""IrpData"": [ 24, [ ""Pointer"", ""{\""target\"":\""_POP_IRP_DATA\""}"" ]],
				 ""Status"": [ 32, [ ""_POP_FX_DEVICE_STATUS"", ""null"" ]],
				 ""PowerReqCall"": [ 36, [ ""Int32"", ""null"" ]],
				 ""PowerNotReqCall"": [ 40, [ ""Int32"", ""null"" ]],
				 ""DevNode"": [ 48, [ ""Pointer"", ""{\""target\"":\""_DEVICE_NODE\""}"" ]],
				 ""DpmContext"": [ 56, [ ""Pointer"", ""{\""target\"":\""PEPHANDLE__\""}"" ]],
				 ""Plugin"": [ 64, [ ""Pointer"", ""{\""target\"":\""_POP_FX_PLUGIN\""}"" ]],
				 ""PluginHandle"": [ 72, [ ""Pointer"", ""{\""target\"":\""PEPHANDLE__\""}"" ]],
				 ""AcpiPlugin"": [ 80, [ ""Pointer"", ""{\""target\"":\""_POP_FX_PLUGIN\""}"" ]],
				 ""AcpiPluginHandle"": [ 88, [ ""Pointer"", ""{\""target\"":\""PEPHANDLE__\""}"" ]],
				 ""DeviceObject"": [ 96, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""TargetDevice"": [ 104, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""Callbacks"": [ 112, [ ""_POP_FX_DRIVER_CALLBACKS"", ""null"" ]],
				 ""DriverContext"": [ 192, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AcpiLink"": [ 200, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeviceId"": [ 216, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""RemoveLock"": [ 232, [ ""_IO_REMOVE_LOCK"", ""null"" ]],
				 ""AcpiRemoveLock"": [ 264, [ ""_IO_REMOVE_LOCK"", ""null"" ]],
				 ""WorkOrder"": [ 296, [ ""_POP_FX_WORK_ORDER"", ""null"" ]],
				 ""IdleLock"": [ 352, [ ""UInt64"", ""null"" ]],
				 ""IdleTimer"": [ 360, [ ""_KTIMER"", ""null"" ]],
				 ""IdleDpc"": [ 424, [ ""_KDPC"", ""null"" ]],
				 ""IdleTimeout"": [ 488, [ ""UInt64"", ""null"" ]],
				 ""IdleStamp"": [ 496, [ ""UInt64"", ""null"" ]],
				 ""NextIrpDeviceObject"": [ 504, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_DEVICE_OBJECT\""}}"" ]],
				 ""NextIrpPowerState"": [ 520, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""NextIrpCallerCompletion"": [ 528, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""NextIrpCallerContext"": [ 544, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""IrpCompleteEvent"": [ 560, [ ""_KEVENT"", ""null"" ]],
				 ""PowerOnDumpDeviceCallback"": [ 584, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Accounting"": [ 592, [ ""_POP_FX_ACCOUNTING"", ""null"" ]],
				 ""Flags"": [ 816, [ ""UInt32"", ""null"" ]],
				 ""ComponentCount"": [ 820, [ ""UInt32"", ""null"" ]],
				 ""Components"": [ 824, [ ""Pointer"", ""{\""target\"":\""_POP_FX_COMPONENT*\""}"" ]],
				 ""LogEntries"": [ 832, [ ""UInt32"", ""null"" ]],
				 ""Log"": [ 840, [ ""Pointer"", ""{\""target\"":\""_POP_FX_LOG_ENTRY\""}"" ]],
				 ""LogIndex"": [ 848, [ ""Int32"", ""null"" ]],
				 ""DripsWatchdogDriverObject"": [ 856, [ ""Pointer"", ""{\""target\"":\""_DRIVER_OBJECT\""}"" ]],
				 ""DripsWatchdogContext"": [ 864, [ ""_POP_FX_DRIPS_WATCHDOG_CONTEXT"", ""null"" ]],
				 ""DirectedTimeout"": [ 904, [ ""UInt32"", ""null"" ]],
				 ""DirectedWorkOrder"": [ 912, [ ""_POP_FX_WORK_ORDER"", ""null"" ]],
				 ""DirectedWorkWatchdogInfo"": [ 968, [ ""_POP_FX_WORK_ORDER_WATCHDOG_INFO"", ""null"" ]],
				 ""DirectedLock"": [ 1144, [ ""UInt64"", ""null"" ]],
				 ""DirectedTransitionCallCount"": [ 1152, [ ""Int32"", ""null"" ]],
				 ""DirectedTransitionState"": [ 1160, [ ""_POP_FX_DEVICE_DIRECTED_TRANSITION_STATE"", ""null"" ]],
				 ""PowerProfile"": [ 1176, [ ""Pointer"", ""{\""target\"":\""_POP_DEVICE_POWER_PROFILE\""}"" ]],
				 ""FriendlyName"": [ 1184, [ ""_UNICODE_STRING"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Irp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 IrpData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _POP_FX_DEVICE_STATUS Status
		{
			get
			{
				_POP_FX_DEVICE_STATUS returnValue = new _POP_FX_DEVICE_STATUS(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public Int32 PowerReqCall { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 36); } }
		public Int32 PowerNotReqCall { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 40); } }
		public UInt64 DevNode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 DpmContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 Plugin { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 PluginHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 AcpiPlugin { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 AcpiPluginHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 TargetDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public _POP_FX_DRIVER_CALLBACKS Callbacks
		{
			get
			{
				_POP_FX_DRIVER_CALLBACKS returnValue = new _POP_FX_DRIVER_CALLBACKS(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt64 DriverContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public _LIST_ENTRY AcpiLink
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 200);
				return returnValue;
			}
		}
		public _UNICODE_STRING DeviceId
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 216);
				return returnValue;
			}
		}
		public _IO_REMOVE_LOCK RemoveLock
		{
			get
			{
				_IO_REMOVE_LOCK returnValue = new _IO_REMOVE_LOCK(_StructureData, _BufferOffset + 232);
				return returnValue;
			}
		}
		public _IO_REMOVE_LOCK AcpiRemoveLock
		{
			get
			{
				_IO_REMOVE_LOCK returnValue = new _IO_REMOVE_LOCK(_StructureData, _BufferOffset + 264);
				return returnValue;
			}
		}
		public _POP_FX_WORK_ORDER WorkOrder
		{
			get
			{
				_POP_FX_WORK_ORDER returnValue = new _POP_FX_WORK_ORDER(_StructureData, _BufferOffset + 296);
				return returnValue;
			}
		}
		public UInt64 IdleLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 352); } }
		public _KTIMER IdleTimer
		{
			get
			{
				_KTIMER returnValue = new _KTIMER(_StructureData, _BufferOffset + 360);
				return returnValue;
			}
		}
		public _KDPC IdleDpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 424);
				return returnValue;
			}
		}
		public UInt64 IdleTimeout { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 488); } }
		public UInt64 IdleStamp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 496); } }
		public _DEVICE_OBJECT[] NextIrpDeviceObject
		{
			get
			{
				_DEVICE_OBJECT[] returnValue = new _DEVICE_OBJECT[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _DEVICE_OBJECT(_StructureData, (i * size) + _BufferOffset + 504);
				return returnValue;
			}
		}
		public _POWER_STATE[] NextIrpPowerState
		{
			get
			{
				_POWER_STATE[] returnValue = new _POWER_STATE[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _POWER_STATE(_StructureData, (i * size) + _BufferOffset + 520);
				return returnValue;
			}
		}
		public UInt64[] NextIrpCallerCompletion
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				int size = 8;
				for(int i=0; i<2; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 528);
				return returnValue;
			}
		}
		public UInt64[] NextIrpCallerContext
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				int size = 8;
				for(int i=0; i<2; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 544);
				return returnValue;
			}
		}
		public _KEVENT IrpCompleteEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 560);
				return returnValue;
			}
		}
		public UInt64 PowerOnDumpDeviceCallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 584); } }
		public _POP_FX_ACCOUNTING Accounting
		{
			get
			{
				_POP_FX_ACCOUNTING returnValue = new _POP_FX_ACCOUNTING(_StructureData, _BufferOffset + 592);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 816); } }
		public UInt32 ComponentCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 820); } }
		public UInt64 Components { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 824); } }
		public UInt32 LogEntries { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 832); } }
		public UInt64 Log { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 840); } }
		public Int32 LogIndex { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 848); } }
		public UInt64 DripsWatchdogDriverObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 856); } }
		public _POP_FX_DRIPS_WATCHDOG_CONTEXT DripsWatchdogContext
		{
			get
			{
				_POP_FX_DRIPS_WATCHDOG_CONTEXT returnValue = new _POP_FX_DRIPS_WATCHDOG_CONTEXT(_StructureData, _BufferOffset + 864);
				return returnValue;
			}
		}
		public UInt32 DirectedTimeout { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 904); } }
		public _POP_FX_WORK_ORDER DirectedWorkOrder
		{
			get
			{
				_POP_FX_WORK_ORDER returnValue = new _POP_FX_WORK_ORDER(_StructureData, _BufferOffset + 912);
				return returnValue;
			}
		}
		public _POP_FX_WORK_ORDER_WATCHDOG_INFO DirectedWorkWatchdogInfo
		{
			get
			{
				_POP_FX_WORK_ORDER_WATCHDOG_INFO returnValue = new _POP_FX_WORK_ORDER_WATCHDOG_INFO(_StructureData, _BufferOffset + 968);
				return returnValue;
			}
		}
		public UInt64 DirectedLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1144); } }
		public Int32 DirectedTransitionCallCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 1152); } }
		public _POP_FX_DEVICE_DIRECTED_TRANSITION_STATE DirectedTransitionState
		{
			get
			{
				_POP_FX_DEVICE_DIRECTED_TRANSITION_STATE returnValue = new _POP_FX_DEVICE_DIRECTED_TRANSITION_STATE(_StructureData, _BufferOffset + 1160);
				return returnValue;
			}
		}
		public UInt64 PowerProfile { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1176); } }
		public _UNICODE_STRING FriendlyName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 1184);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CELL_DATA
 
	public class _CELL_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CELL_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CELL_DATA"": [ 80, {
				 ""u"": [ 0, [ ""_u"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _u u
		{
			get
			{
				_u returnValue = new _u(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IOV_IRP_TRACE
 
	public class _IOV_IRP_TRACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IOV_IRP_TRACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IOV_IRP_TRACE"": [ 128, {
				 ""Irp"": [ 0, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""Thread"": [ 8, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""KernelApcDisable"": [ 16, [ ""Int16"", ""null"" ]],
				 ""SpecialApcDisable"": [ 18, [ ""Int16"", ""null"" ]],
				 ""CombinedApcDisable"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Irql"": [ 20, [ ""Byte"", ""null"" ]],
				 ""StackTrace"": [ 24, [ ""Array"", ""{\""count\"":13,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Irp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public Int16 KernelApcDisable { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 16); } }
		public Int16 SpecialApcDisable { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 18); } }
		public UInt32 CombinedApcDisable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Byte Irql{ get { return _StructureData[_BufferOffset +20]; } }
		public UInt64[] StackTrace
		{
			get
			{
				UInt64[] returnValue = new UInt64[13];
				int size = 8;
				for(int i=0; i<13; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_PARSE_DEBUG_INFO
 
	public class _CM_PARSE_DEBUG_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_PARSE_DEBUG_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_PARSE_DEBUG_INFO"": [ 80, {
				 ""SymlinkCachedKcb"": [ 0, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""StartingKcb"": [ 8, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""KcbCacheResult"": [ 16, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""WalkResult"": [ 24, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""DeepestKcbFound"": [ 32, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""KcbCacheLevels"": [ 40, [ ""Byte"", ""null"" ]],
				 ""WalkLevels"": [ 41, [ ""Byte"", ""null"" ]],
				 ""FailureCount"": [ 42, [ ""Byte"", ""null"" ]],
				 ""FailurePoints"": [ 44, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SymlinkCachedKcb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 StartingKcb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 KcbCacheResult { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 WalkResult { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 DeepestKcbFound { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public Byte KcbCacheLevels{ get { return _StructureData[_BufferOffset +40]; } }
		public Byte WalkLevels{ get { return _StructureData[_BufferOffset +41]; } }
		public Byte FailureCount{ get { return _StructureData[_BufferOffset +42]; } }
		public _ANONYMOUS_TAG[] FailurePoints
		{
			get
			{
				_ANONYMOUS_TAG[] returnValue = new _ANONYMOUS_TAG[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new _ANONYMOUS_TAG(_StructureData, (i * size) + _BufferOffset + 44);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_CLONE_BLOCK_FLAGS
 
	public class _MI_CLONE_BLOCK_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_CLONE_BLOCK_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_CLONE_BLOCK_FLAGS"": [ 8, {
				 ""ActualCloneCommit"": [ 0, [ ""BitField"", ""{\""end_bit\"":59,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""CloneProtection"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":59,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ActualCloneCommit
		{
			get
			{
				// start: 0  end: 59  Mask: 11111111111111111111111111111111111111111111111111111111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 576460752303423487) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 CloneProtection
		{
			get
			{
				// start: 59  end: 64  Mask: 1111100000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 17870283321406128128) >> 59;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region FEATURE_STATE_CHANGE_SUBSCRIPTION__
 
	public class FEATURE_STATE_CHANGE_SUBSCRIPTION__
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public FEATURE_STATE_CHANGE_SUBSCRIPTION__(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""FEATURE_STATE_CHANGE_SUBSCRIPTION__"": [ 4, {
				 ""unused"": [ 0, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 unused { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _PS_JOB_WAKE_INFORMATION
 
	public class _PS_JOB_WAKE_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PS_JOB_WAKE_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PS_JOB_WAKE_INFORMATION"": [ 72, {
				 ""NotificationChannel"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""WakeCounters"": [ 8, [ ""Array"", ""{\""count\"":7,\""target\"":\""UInt64\""}"" ]],
				 ""NoWakeCounter"": [ 64, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 NotificationChannel { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64[] WakeCounters
		{
			get
			{
				UInt64[] returnValue = new UInt64[7];
				for(int i=0; i<7; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 NoWakeCounter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _MMINPAGE_FLAGS
 
	public class _MMINPAGE_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMINPAGE_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMINPAGE_FLAGS"": [ 4, {
				 ""GetExtents"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""PrefetchSystemVmType"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""VaPrefetchReadBlock"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""CollidedFlowThrough"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""ForceCollisions"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""InPageExpanded"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""IssuedAtLowPriority"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""FaultFromStore"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""PagePriority"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""ClusteredPagePriority"": [ 0, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""MakeClusterValid"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""PerformRelocations"": [ 0, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""ZeroLastPage"": [ 0, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""UserFault"": [ 0, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""StandbyProtectionNeeded"": [ 0, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""PteChanged"": [ 0, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""PageFileFault"": [ 0, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""PageFilePageHashActive"": [ 0, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""CoalescedIo"": [ 0, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]],
				 ""VmLockNotNeeded"": [ 0, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""Spare0"": [ 0, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":25,\""target\"":\""UInt32\""}"" ]],
				 ""Spare1"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 GetExtents
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 PrefetchSystemVmType
		{
			get
			{
				// start: 1  end: 3  Mask: 0000000000000110
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 6) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 VaPrefetchReadBlock
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 CollidedFlowThrough
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 ForceCollisions
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 InPageExpanded
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 IssuedAtLowPriority
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 FaultFromStore
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 PagePriority
		{
			get
			{
				// start: 9  end: 12  Mask: 0000111000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 3584) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 ClusteredPagePriority
		{
			get
			{
				// start: 12  end: 15  Mask: 0111000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 28672) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 MakeClusterValid
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 PerformRelocations
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 ZeroLastPage
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 UserFault
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 262144) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 StandbyProtectionNeeded
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 PteChanged
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 PageFileFault
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 PageFilePageHashActive
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 CoalescedIo
		{
			get
			{
				// start: 23  end: 24  Mask: 100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8388608) >> 23;
				return (UInt32)value2;
			}
		}
		public UInt32 VmLockNotNeeded
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16777216) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 Spare0
		{
			get
			{
				// start: 25  end: 26  Mask: 10000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 33554432) >> 25;
				return (UInt32)value2;
			}
		}
		public UInt32 Spare1
		{
			get
			{
				// start: 26  end: 32  Mask: 11111100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4227858432) >> 26;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR
 
	public class _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_ADAPTER_CRYPTO_KEY_DESCRIPTOR"": [ 72, {
				 ""Version"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Size"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""CryptoIndex"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""AlgorithmId"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""DataUnitSize"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""KeySize"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""KeyHash"": [ 24, [ ""Array"", ""{\""count\"":32,\""target\"":\""Byte\""}"" ]],
				 ""KeyVirtualAddress"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""KeyPhysicalAddress"": [ 64, [ ""_LARGE_INTEGER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 CryptoIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 AlgorithmId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 DataUnitSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 KeySize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public Byte[] KeyHash
		{
			get
			{
				Byte[] returnValue = new Byte[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 24];
				return returnValue;
			}
		}
		public UInt64 KeyVirtualAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public _LARGE_INTEGER KeyPhysicalAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PPM_CONCURRENCY_ACCOUNTING
 
	public class _PPM_CONCURRENCY_ACCOUNTING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPM_CONCURRENCY_ACCOUNTING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPM_CONCURRENCY_ACCOUNTING"": [ 40, {
				 ""Lock"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Processors"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ActiveProcessors"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""LastUpdateTime"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""TotalTime"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""AccumulatedTime"": [ 32, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Processors { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ActiveProcessors { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 LastUpdateTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 TotalTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64[] AccumulatedTime
		{
			get
			{
				UInt64[] returnValue = new UInt64[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_HP_SUB_ALLOCATOR_CONFIGS
 
	public class _RTL_HP_SUB_ALLOCATOR_CONFIGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_HP_SUB_ALLOCATOR_CONFIGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_HP_SUB_ALLOCATOR_CONFIGS"": [ 8, {
				 ""LfhConfigs"": [ 0, [ ""_RTL_HP_LFH_CONFIG"", ""null"" ]],
				 ""VsConfigs"": [ 4, [ ""_RTL_HP_VS_CONFIG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_HP_LFH_CONFIG LfhConfigs
		{
			get
			{
				_RTL_HP_LFH_CONFIG returnValue = new _RTL_HP_LFH_CONFIG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _RTL_HP_VS_CONFIG VsConfigs
		{
			get
			{
				_RTL_HP_VS_CONFIG returnValue = new _RTL_HP_VS_CONFIG(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR
 
	public class _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEP_CACHED_HANDLES_ENTRY_DESCRIPTOR"": [ 24, {
				 ""DescriptorType"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_SEP_CACHED_HANDLES_ENTRY_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""PackageSid"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IsolationPrefix"": [ 8, [ ""_UNICODE_STRING"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SEP_CACHED_HANDLES_ENTRY_TYPE DescriptorType { get { return (_SEP_CACHED_HANDLES_ENTRY_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 PackageSid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _UNICODE_STRING IsolationPrefix
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_ULTRA_MDL_NODE
 
	public class _MI_ULTRA_MDL_NODE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_ULTRA_MDL_NODE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 512; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_ULTRA_MDL_NODE"": [ 512, {
				 ""UltraMdlMaps"": [ 0, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public _MI_ALIGNED_SLIST[] UltraMdlMaps
		{
			get
			{
				_MI_ALIGNED_SLIST[] returnValue = new _MI_ALIGNED_SLIST[8];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<8; i++ )
					returnValue[i] = new _MI_ALIGNED_SLIST(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_ENTRY_EXTRA
 
	public class _HEAP_ENTRY_EXTRA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_ENTRY_EXTRA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_ENTRY_EXTRA"": [ 16, {
				 ""AllocatorBackTraceIndex"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""TagIndex"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Settable"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ZeroInit"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""ZeroInit1"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 AllocatorBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 TagIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 Settable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ZeroInit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ZeroInit1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _MI_SECTION_WOW_STATE
 
	public class _MI_SECTION_WOW_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SECTION_WOW_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SECTION_WOW_STATE"": [ 64, {
				 ""ImageBitMap"": [ 0, [ ""_RTL_BITMAP_EX"", ""null"" ]],
				 ""OverflowArea"": [ 16, [ ""_MI_DLL_OVERFLOW_AREA"", ""null"" ]],
				 ""CfgBitMapSection"": [ 48, [ ""Pointer"", ""{\""target\"":\""_SECTION\""}"" ]],
				 ""CfgBitMapControlArea"": [ 56, [ ""Pointer"", ""{\""target\"":\""_CONTROL_AREA\""}"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BITMAP_EX ImageBitMap
		{
			get
			{
				_RTL_BITMAP_EX returnValue = new _RTL_BITMAP_EX(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _MI_DLL_OVERFLOW_AREA OverflowArea
		{
			get
			{
				_MI_DLL_OVERFLOW_AREA returnValue = new _MI_DLL_OVERFLOW_AREA(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 CfgBitMapSection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 CfgBitMapControlArea { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
	}
	#endregion
	#region _VF_AVL_TABLE
 
	public class _VF_AVL_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VF_AVL_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 192; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VF_AVL_TABLE"": [ 192, {
				 ""RtlTable"": [ 0, [ ""_RTL_AVL_TABLE"", ""null"" ]],
				 ""ReservedNode"": [ 104, [ ""Pointer"", ""{\""target\"":\""_VF_AVL_TREE_NODE\""}"" ]],
				 ""NodeToFree"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Lock"": [ 128, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_AVL_TABLE RtlTable
		{
			get
			{
				_RTL_AVL_TABLE returnValue = new _RTL_AVL_TABLE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 ReservedNode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 NodeToFree { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public Int32 Lock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 128); } }
	}
	#endregion
	#region _PEBS_DS_SAVE_AREA64
 
	public class _PEBS_DS_SAVE_AREA64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEBS_DS_SAVE_AREA64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEBS_DS_SAVE_AREA64"": [ 160, {
				 ""BtsBufferBase"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""BtsIndex"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""BtsAbsoluteMaximum"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""BtsInterruptThreshold"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""PebsBufferBase"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""PebsIndex"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""PebsAbsoluteMaximum"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""PebsInterruptThreshold"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""PebsGpCounterReset"": [ 64, [ ""Array"", ""{\""count\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""PebsFixedCounterReset"": [ 128, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 BtsBufferBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 BtsIndex { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 BtsAbsoluteMaximum { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 BtsInterruptThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 PebsBufferBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 PebsIndex { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 PebsAbsoluteMaximum { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 PebsInterruptThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64[] PebsGpCounterReset
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt64[] PebsFixedCounterReset
		{
			get
			{
				UInt64[] returnValue = new UInt64[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 128);
				return returnValue;
			}
		}
	}
	#endregion
	#region _LEAP_SECOND_DATA
 
	public class _LEAP_SECOND_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LEAP_SECOND_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LEAP_SECOND_DATA"": [ 16, {
				 ""Enabled"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Count"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Data"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public Byte Enabled{ get { return _StructureData[_BufferOffset +0]; } }
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LARGE_INTEGER[] Data
		{
			get
			{
				_LARGE_INTEGER[] returnValue = new _LARGE_INTEGER[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _LARGE_INTEGER(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DEVICE_OBJECT_POWER_EXTENSION
 
	public class _DEVICE_OBJECT_POWER_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_OBJECT_POWER_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_OBJECT_POWER_EXTENSION"": [ 96, {
				 ""IdleCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""BusyCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""BusyReference"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""TotalBusyCount"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""ConservationIdleTime"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""PerformanceIdleTime"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""DeviceObject"": [ 24, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""IdleList"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""IdleType"": [ 48, [ ""Enumeration"", ""{\""enum_name\"":\""_POP_DEVICE_IDLE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""IdleState"": [ 52, [ ""Enumeration"", ""{\""enum_name\"":\""_DEVICE_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""CurrentState"": [ 56, [ ""Enumeration"", ""{\""enum_name\"":\""_DEVICE_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""CoolingExtension"": [ 64, [ ""Pointer"", ""{\""target\"":\""_POP_COOLING_EXTENSION\""}"" ]],
				 ""Volume"": [ 72, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Specific"": [ 88, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 IdleCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 BusyCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 BusyReference { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 TotalBusyCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 ConservationIdleTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 PerformanceIdleTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _LIST_ENTRY IdleList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _POP_DEVICE_IDLE_TYPE IdleType { get { return (_POP_DEVICE_IDLE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public _DEVICE_POWER_STATE IdleState { get { return (_DEVICE_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public _DEVICE_POWER_STATE CurrentState { get { return (_DEVICE_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt64 CoolingExtension { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public _LIST_ENTRY Volume
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG Specific
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
	}
	#endregion
	#region _OBJECT_DIRECTORY_ENTRY
 
	public class _OBJECT_DIRECTORY_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_DIRECTORY_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_DIRECTORY_ENTRY"": [ 24, {
				 ""ChainLink"": [ 0, [ ""Pointer"", ""{\""target\"":\""_OBJECT_DIRECTORY_ENTRY\""}"" ]],
				 ""Object"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HashValue"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ChainLink { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Object { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 HashValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _CM_UOW_SET_SD_DATA
 
	public class _CM_UOW_SET_SD_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_UOW_SET_SD_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_UOW_SET_SD_DATA"": [ 4, {
				 ""SecurityCell"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SecurityCell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _PNP_DEVICE_COMPLETION_REQUEST
 
	public class _PNP_DEVICE_COMPLETION_REQUEST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PNP_DEVICE_COMPLETION_REQUEST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PNP_DEVICE_COMPLETION_REQUEST"": [ 72, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeviceNode"": [ 16, [ ""Pointer"", ""{\""target\"":\""_DEVICE_NODE\""}"" ]],
				 ""Context"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CompletionState"": [ 32, [ ""Enumeration"", ""{\""enum_name\"":\""_PNP_DEVNODE_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""IrpPended"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Status"": [ 40, [ ""Int32"", ""null"" ]],
				 ""Information"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReferenceCount"": [ 56, [ ""Int32"", ""null"" ]],
				 ""Watchdog"": [ 64, [ ""Pointer"", ""{\""target\"":\""_PNP_WATCHDOG\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 DeviceNode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _PNP_DEVNODE_STATE CompletionState { get { return (_PNP_DEVNODE_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 IrpPended { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 40); } }
		public UInt64 Information { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public Int32 ReferenceCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 56); } }
		public UInt64 Watchdog { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _ETW_STACK_TRACE_BLOCK
 
	public class _ETW_STACK_TRACE_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_STACK_TRACE_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_STACK_TRACE_BLOCK"": [ 128, {
				 ""RelatedTimestamp"": [ 0, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Thread"": [ 8, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""StackWalkDpc"": [ 16, [ ""_KDPC"", ""null"" ]],
				 ""ApcListHead"": [ 80, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""ApcEntry"": [ 96, [ ""Pointer"", ""{\""target\"":\""_ETW_APC_ENTRY\""}"" ]],
				 ""ApcEntryCount"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 108, [ ""Int32"", ""null"" ]],
				 ""ApcCount"": [ 112, [ ""Int32"", ""null"" ]],
				 ""MaxApcCount"": [ 116, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LARGE_INTEGER RelatedTimestamp
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _KDPC StackWalkDpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _SLIST_HEADER ApcListHead
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt64 ApcEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt32 ApcEntryCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public Int32 Flags { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 108); } }
		public Int32 ApcCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 112); } }
		public Int32 MaxApcCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 116); } }
	}
	#endregion
	#region _EVENT_FILTER_LEVEL_KW
 
	public class _EVENT_FILTER_LEVEL_KW
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EVENT_FILTER_LEVEL_KW(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EVENT_FILTER_LEVEL_KW"": [ 24, {
				 ""MatchAnyKeyword"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""MatchAllKeyword"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Level"": [ 16, [ ""Byte"", ""null"" ]],
				 ""FilterIn"": [ 17, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 MatchAnyKeyword { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 MatchAllKeyword { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public Byte Level{ get { return _StructureData[_BufferOffset +16]; } }
		public Byte FilterIn{ get { return _StructureData[_BufferOffset +17]; } }
	}
	#endregion
	#region _WRITE_BEHIND_THROUGHPUT
 
	public class _WRITE_BEHIND_THROUGHPUT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WRITE_BEHIND_THROUGHPUT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WRITE_BEHIND_THROUGHPUT"": [ 8, {
				 ""PagesYetToWrite"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Throughput"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PagesYetToWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Throughput { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _THREAD_PERFORMANCE_DATA
 
	public class _THREAD_PERFORMANCE_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _THREAD_PERFORMANCE_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 448; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_THREAD_PERFORMANCE_DATA"": [ 448, {
				 ""Size"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Version"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""ProcessorNumber"": [ 4, [ ""_PROCESSOR_NUMBER"", ""null"" ]],
				 ""ContextSwitches"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""HwCountersCount"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""UpdateCount"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""WaitReasonBitMap"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""HardwareCounters"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""CycleTime"": [ 40, [ ""_COUNTER_READING"", ""null"" ]],
				 ""HwCounters"": [ 64, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public _PROCESSOR_NUMBER ProcessorNumber
		{
			get
			{
				_PROCESSOR_NUMBER returnValue = new _PROCESSOR_NUMBER(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 ContextSwitches { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 HwCountersCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 UpdateCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 WaitReasonBitMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 HardwareCounters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _COUNTER_READING CycleTime
		{
			get
			{
				_COUNTER_READING returnValue = new _COUNTER_READING(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _COUNTER_READING[] HwCounters
		{
			get
			{
				_COUNTER_READING[] returnValue = new _COUNTER_READING[16];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<16; i++ )
					returnValue[i] = new _COUNTER_READING(_StructureData, (i * size) + _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SEP_TOKEN_PRIVILEGES
 
	public class _SEP_TOKEN_PRIVILEGES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEP_TOKEN_PRIVILEGES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEP_TOKEN_PRIVILEGES"": [ 24, {
				 ""Present"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Enabled"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""EnabledByDefault"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Present { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Enabled { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 EnabledByDefault { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _MMPAGE_FILE_EXPANSION
 
	public class _MMPAGE_FILE_EXPANSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPAGE_FILE_EXPANSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPAGE_FILE_EXPANSION"": [ 88, {
				 ""Segment"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SEGMENT\""}"" ]],
				 ""DereferenceList"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Partition"": [ 24, [ ""Pointer"", ""{\""target\"":\""_MI_PARTITION\""}"" ]],
				 ""RequestedExpansionSize"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""ActualExpansion"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""Event"": [ 48, [ ""_KEVENT"", ""null"" ]],
				 ""InProgress"": [ 72, [ ""Int32"", ""null"" ]],
				 ""u1"": [ 76, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""ActiveEntry"": [ 80, [ ""Pointer"", ""{\""target\"":\""void*\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Segment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _LIST_ENTRY DereferenceList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 Partition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 RequestedExpansionSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 ActualExpansion { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public Int32 InProgress { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 72); } }
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 76);
				return returnValue;
			}
		}
		public UInt64 ActiveEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
	}
	#endregion
	#region _NT_TIB32
 
	public class _NT_TIB32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _NT_TIB32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_NT_TIB32"": [ 28, {
				 ""ExceptionList"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""StackBase"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""StackLimit"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SubSystemTib"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""FiberData"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Version"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ArbitraryUserPointer"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Self"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ExceptionList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 StackBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 StackLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 SubSystemTib { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 FiberData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ArbitraryUserPointer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 Self { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _KDPC_LIST
 
	public class _KDPC_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KDPC_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KDPC_LIST"": [ 16, {
				 ""ListHead"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""LastEntry"": [ 8, [ ""Pointer"", ""{\""target\"":\""_SINGLE_LIST_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public _SINGLE_LIST_ENTRY ListHead
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 LastEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _LPCP_PORT_OBJECT
 
	public class _LPCP_PORT_OBJECT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LPCP_PORT_OBJECT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 256; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LPCP_PORT_OBJECT"": [ 256, {
				 ""ConnectionPort"": [ 0, [ ""Pointer"", ""{\""target\"":\""_LPCP_PORT_OBJECT\""}"" ]],
				 ""ConnectedPort"": [ 8, [ ""Pointer"", ""{\""target\"":\""_LPCP_PORT_OBJECT\""}"" ]],
				 ""MsgQueue"": [ 16, [ ""_LPCP_PORT_QUEUE"", ""null"" ]],
				 ""Creator"": [ 48, [ ""_CLIENT_ID"", ""null"" ]],
				 ""ClientSectionBase"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ServerSectionBase"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PortContext"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ClientThread"": [ 88, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""SecurityQos"": [ 96, [ ""_SECURITY_QUALITY_OF_SERVICE"", ""null"" ]],
				 ""StaticSecurity"": [ 112, [ ""_SECURITY_CLIENT_CONTEXT"", ""null"" ]],
				 ""LpcReplyChainHead"": [ 184, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LpcDataInfoChainHead"": [ 200, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ServerProcess"": [ 216, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""MappingProcess"": [ 216, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""MaxMessageLength"": [ 224, [ ""UInt16"", ""null"" ]],
				 ""MaxConnectionInfoLength"": [ 226, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 228, [ ""UInt32"", ""null"" ]],
				 ""WaitEvent"": [ 232, [ ""_KEVENT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ConnectionPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ConnectedPort { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _LPCP_PORT_QUEUE MsgQueue
		{
			get
			{
				_LPCP_PORT_QUEUE returnValue = new _LPCP_PORT_QUEUE(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _CLIENT_ID Creator
		{
			get
			{
				_CLIENT_ID returnValue = new _CLIENT_ID(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt64 ClientSectionBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 ServerSectionBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 PortContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 ClientThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public _SECURITY_QUALITY_OF_SERVICE SecurityQos
		{
			get
			{
				_SECURITY_QUALITY_OF_SERVICE returnValue = new _SECURITY_QUALITY_OF_SERVICE(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public _SECURITY_CLIENT_CONTEXT StaticSecurity
		{
			get
			{
				_SECURITY_CLIENT_CONTEXT returnValue = new _SECURITY_CLIENT_CONTEXT(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public _LIST_ENTRY LpcReplyChainHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 184);
				return returnValue;
			}
		}
		public _LIST_ENTRY LpcDataInfoChainHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 200);
				return returnValue;
			}
		}
		public UInt64 ServerProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 MappingProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt16 MaxMessageLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 224); } }
		public UInt16 MaxConnectionInfoLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 226); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 228); } }
		public _KEVENT WaitEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 232);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ETW_FILTER_PID
 
	public class _ETW_FILTER_PID
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_FILTER_PID(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 36; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_FILTER_PID"": [ 36, {
				 ""Count"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Pids"": [ 4, [ ""Array"", ""{\""count\"":8,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32[] Pids
		{
			get
			{
				UInt32[] returnValue = new UInt32[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IOV_FORCED_PENDING_TRACE
 
	public class _IOV_FORCED_PENDING_TRACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IOV_FORCED_PENDING_TRACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 512; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IOV_FORCED_PENDING_TRACE"": [ 512, {
				 ""Irp"": [ 0, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""Thread"": [ 8, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""StackTrace"": [ 16, [ ""Array"", ""{\""count\"":62,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Irp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64[] StackTrace
		{
			get
			{
				UInt64[] returnValue = new UInt64[62];
				int size = 8;
				for(int i=0; i<62; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ARBITER_QUERY_CONFLICT_PARAMETERS
 
	public class _ARBITER_QUERY_CONFLICT_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_QUERY_CONFLICT_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_QUERY_CONFLICT_PARAMETERS"": [ 32, {
				 ""PhysicalDeviceObject"": [ 0, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""ConflictingResource"": [ 8, [ ""Pointer"", ""{\""target\"":\""_IO_RESOURCE_DESCRIPTOR\""}"" ]],
				 ""ConflictCount"": [ 16, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""Conflicts"": [ 24, [ ""Pointer"", ""{\""target\"":\""_ARBITER_CONFLICT_INFO*\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PhysicalDeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ConflictingResource { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ConflictCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Conflicts { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _POP_THERMAL_TELEMETRY_TRACKER
 
	public class _POP_THERMAL_TELEMETRY_TRACKER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_THERMAL_TELEMETRY_TRACKER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 536; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_THERMAL_TELEMETRY_TRACKER"": [ 536, {
				 ""AccountingDisabled"": [ 0, [ ""Byte"", ""null"" ]],
				 ""ActiveLevels"": [ 1, [ ""Byte"", ""null"" ]],
				 ""LastPassiveUpdateTime"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""LastActiveUpdateTime"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""TotalPassiveTime"": [ 24, [ ""Array"", ""{\""count\"":21,\""target\"":\""UInt64\""}"" ]],
				 ""PassiveTimeSnap"": [ 192, [ ""Array"", ""{\""count\"":21,\""target\"":\""UInt64\""}"" ]],
				 ""TotalActiveTime"": [ 360, [ ""Array"", ""{\""count\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""ActiveTimeSnap"": [ 440, [ ""Array"", ""{\""count\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""TotalTime"": [ 520, [ ""UInt64"", ""null"" ]],
				 ""TotalTimeSnap"": [ 528, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte AccountingDisabled{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte ActiveLevels{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt64 LastPassiveUpdateTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 LastActiveUpdateTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64[] TotalPassiveTime
		{
			get
			{
				UInt64[] returnValue = new UInt64[21];
				for(int i=0; i<21; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64[] PassiveTimeSnap
		{
			get
			{
				UInt64[] returnValue = new UInt64[21];
				for(int i=0; i<21; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 192);
				return returnValue;
			}
		}
		public UInt64[] TotalActiveTime
		{
			get
			{
				UInt64[] returnValue = new UInt64[10];
				for(int i=0; i<10; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 360);
				return returnValue;
			}
		}
		public UInt64[] ActiveTimeSnap
		{
			get
			{
				UInt64[] returnValue = new UInt64[10];
				for(int i=0; i<10; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 440);
				return returnValue;
			}
		}
		public UInt64 TotalTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 520); } }
		public UInt64 TotalTimeSnap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 528); } }
	}
	#endregion
	#region _HEAP_LFH_SUBSEGMENT_DELAY_FREE
 
	public class _HEAP_LFH_SUBSEGMENT_DELAY_FREE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_LFH_SUBSEGMENT_DELAY_FREE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_LFH_SUBSEGMENT_DELAY_FREE"": [ 8, {
				 ""DelayFree"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Count"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""AllBits"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DelayFree
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Count
		{
			get
			{
				// start: 1  end: 64  Mask: 1111111111111111111111111111111111111111111111111111111111111110
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744073709551614) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 AllBits { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _POP_FX_LOG_ENTRY
 
	public class _POP_FX_LOG_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_LOG_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_LOG_ENTRY"": [ 24, {
				 ""Timestamp"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Operation"": [ 8, [ ""Byte"", ""null"" ]],
				 ""Component"": [ 9, [ ""Byte"", ""null"" ]],
				 ""Processor"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""Process"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""Thread"": [ 14, [ ""UInt16"", ""null"" ]],
				 ""Information"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Timestamp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Byte Operation{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte Component{ get { return _StructureData[_BufferOffset +9]; } }
		public UInt16 Processor { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public UInt16 Process { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public UInt16 Thread { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 14); } }
		public UInt64 Information { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region wil_details_StagingConfigWnfStateName
 
	public class wil_details_StagingConfigWnfStateName
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public wil_details_StagingConfigWnfStateName(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""wil_details_StagingConfigWnfStateName"": [ 8, {
				 ""Data"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32[] Data
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region RTLP_HP_LFH_PERF_FLAGS
 
	public class RTLP_HP_LFH_PERF_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public RTLP_HP_LFH_PERF_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""RTLP_HP_LFH_PERF_FLAGS"": [ 4, {
				 ""HotspotDetection"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""HotspotFullCommit"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""ActiveSubsegment"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""SmallerSubsegment"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""SingleAffinitySlot"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""ApplyLfhDecommitPolicy"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""EnableGarbageCollection"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""LargePagePreCommit"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""OpportunisticLargePreCommit"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""LfhForcedAffinity"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""LfhCachelinePadding"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""AllFlags"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 HotspotDetection
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 HotspotFullCommit
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 ActiveSubsegment
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 SmallerSubsegment
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 SingleAffinitySlot
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 ApplyLfhDecommitPolicy
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 EnableGarbageCollection
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 LargePagePreCommit
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 OpportunisticLargePreCommit
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 LfhForcedAffinity
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 LfhCachelinePadding
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 AllFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _MMPAGING_FILE
 
	public class _MMPAGING_FILE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPAGING_FILE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 288; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPAGING_FILE"": [ 288, {
				 ""Size"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""MaximumSize"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""MinimumSize"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""FreeSpace"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""PeakUsage"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""HighestPage"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""FreeReservationSpace"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""File"": [ 56, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""Entry"": [ 64, [ ""Pointer"", ""{\""target\"":\""_MMMOD_WRITER_MDL_ENTRY*\""}"" ]],
				 ""NumberOfModWriterEntries"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""PfnsToFree"": [ 80, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""PageFileName"": [ 96, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""Bitmaps"": [ 112, [ ""Pointer"", ""{\""target\"":\""_MI_PAGING_FILE_SPACE_BITMAPS\""}"" ]],
				 ""AllocationBitmapHint"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""LargestAllocationCluster"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""RefreshAllocationCluster"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""LastRefreshAllocationCluster"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""ReservedClusterSizeAggregate"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""MaximumRunLengthInBitmaps"": [ 140, [ ""UInt32"", ""null"" ]],
				 ""BitmapsCacheLengthTree"": [ 144, [ ""_RTL_RB_TREE"", ""null"" ]],
				 ""BitmapsCacheLocationTree"": [ 160, [ ""_RTL_RB_TREE"", ""null"" ]],
				 ""BitmapsCacheFreeList"": [ 176, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""BitmapsCacheEntries"": [ 192, [ ""Pointer"", ""{\""target\"":\""_MI_PAGEFILE_BITMAPS_CACHE_ENTRY\""}"" ]],
				 ""ToBeEvictedCount"": [ 200, [ ""UInt32"", ""null"" ]],
				 ""HybridPriority"": [ 200, [ ""UInt32"", ""null"" ]],
				 ""PageFileNumber"": [ 204, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""WsSwapPagefile"": [ 204, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt16\""}"" ]],
				 ""NoReservations"": [ 204, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt16\""}"" ]],
				 ""VirtualStorePagefile"": [ 204, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt16\""}"" ]],
				 ""SwapSupported"": [ 204, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt16\""}"" ]],
				 ""NodeInserted"": [ 204, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt16\""}"" ]],
				 ""StackNotified"": [ 204, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt16\""}"" ]],
				 ""BackedBySCM"": [ 204, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt16\""}"" ]],
				 ""SpecialPurposeMemory"": [ 204, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt16\""}"" ]],
				 ""Spare0"": [ 204, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":12,\""target\"":\""UInt16\""}"" ]],
				 ""AdriftMdls"": [ 206, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Spare1"": [ 206, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""IgnoreReservations"": [ 207, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Spare2"": [ 207, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""PageHashPages"": [ 208, [ ""UInt32"", ""null"" ]],
				 ""PageHashPagesPeak"": [ 212, [ ""UInt32"", ""null"" ]],
				 ""PageHash"": [ 216, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""FileHandle"": [ 224, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SpinLock"": [ 232, [ ""Int32"", ""null"" ]],
				 ""FlowThroughReadRoot"": [ 240, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""Partition"": [ 248, [ ""Pointer"", ""{\""target\"":\""_MI_PARTITION\""}"" ]],
				 ""FileObjectNode"": [ 256, [ ""_RTL_BALANCED_NODE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Size { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 MaximumSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 MinimumSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 FreeSpace { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 PeakUsage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 HighestPage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 FreeReservationSpace { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 File { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 Entry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt32 NumberOfModWriterEntries { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public _SLIST_HEADER PfnsToFree
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public _UNICODE_STRING PageFileName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt64 Bitmaps { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt32 AllocationBitmapHint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 LargestAllocationCluster { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 RefreshAllocationCluster { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 LastRefreshAllocationCluster { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt32 ReservedClusterSizeAggregate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public UInt32 MaximumRunLengthInBitmaps { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 140); } }
		public _RTL_RB_TREE BitmapsCacheLengthTree
		{
			get
			{
				_RTL_RB_TREE returnValue = new _RTL_RB_TREE(_StructureData, _BufferOffset + 144);
				return returnValue;
			}
		}
		public _RTL_RB_TREE BitmapsCacheLocationTree
		{
			get
			{
				_RTL_RB_TREE returnValue = new _RTL_RB_TREE(_StructureData, _BufferOffset + 160);
				return returnValue;
			}
		}
		public _LIST_ENTRY BitmapsCacheFreeList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 176);
				return returnValue;
			}
		}
		public UInt64 BitmapsCacheEntries { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt32 ToBeEvictedCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 200); } }
		public UInt32 HybridPriority { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 200); } }
		public UInt16 PageFileNumber
		{
			get
			{
				// start: 0  end: 4  Mask: 0000000000001111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 204);
				var value2 = (value & 15) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 WsSwapPagefile
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 204);
				var value2 = (value & 16) >> 4;
				return (UInt16)value2;
			}
		}
		public UInt16 NoReservations
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 204);
				var value2 = (value & 32) >> 5;
				return (UInt16)value2;
			}
		}
		public UInt16 VirtualStorePagefile
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 204);
				var value2 = (value & 64) >> 6;
				return (UInt16)value2;
			}
		}
		public UInt16 SwapSupported
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 204);
				var value2 = (value & 128) >> 7;
				return (UInt16)value2;
			}
		}
		public UInt16 NodeInserted
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 204);
				var value2 = (value & 256) >> 8;
				return (UInt16)value2;
			}
		}
		public UInt16 StackNotified
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 204);
				var value2 = (value & 512) >> 9;
				return (UInt16)value2;
			}
		}
		public UInt16 BackedBySCM
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 204);
				var value2 = (value & 1024) >> 10;
				return (UInt16)value2;
			}
		}
		public UInt16 SpecialPurposeMemory
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 204);
				var value2 = (value & 2048) >> 11;
				return (UInt16)value2;
			}
		}
		public UInt16 Spare0
		{
			get
			{
				// start: 12  end: 15  Mask: 0111000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 204);
				var value2 = (value & 28672) >> 12;
				return (UInt16)value2;
			}
		}
		public Byte AdriftMdls
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 206];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Spare1
		{
			get
			{
				// start: 1  end: 8  Mask: 0000000011111110
				Byte value = _StructureData[_BufferOffset + 206];
				var value2 = (value & 254) >> 1;
				return (Byte)value2;
			}
		}
		public Byte IgnoreReservations
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 207];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Spare2
		{
			get
			{
				// start: 1  end: 8  Mask: 0000000011111110
				Byte value = _StructureData[_BufferOffset + 207];
				var value2 = (value & 254) >> 1;
				return (Byte)value2;
			}
		}
		public UInt32 PageHashPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 208); } }
		public UInt32 PageHashPagesPeak { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 212); } }
		public UInt64 PageHash { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 FileHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public Int32 SpinLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 232); } }
		public _RTL_AVL_TREE FlowThroughReadRoot
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 240);
				return returnValue;
			}
		}
		public UInt64 Partition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public _RTL_BALANCED_NODE FileObjectNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
	}
	#endregion
	#region _OBJECT_HANDLE_COUNT_ENTRY
 
	public class _OBJECT_HANDLE_COUNT_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_HANDLE_COUNT_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_HANDLE_COUNT_ENTRY"": [ 16, {
				 ""Process"": [ 0, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""HandleCount"": [ 8, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""LockCount"": [ 8, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Process { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 HandleCount
		{
			get
			{
				// start: 0  end: 24  Mask: 111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 16777215) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 LockCount
		{
			get
			{
				// start: 24  end: 32  Mask: 11111111000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 4278190080) >> 24;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _FREE_DISPLAY
 
	public class _FREE_DISPLAY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FREE_DISPLAY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FREE_DISPLAY"": [ 24, {
				 ""RealVectorSize"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Hint"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Display"": [ 8, [ ""_RTL_BITMAP"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 RealVectorSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Hint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _RTL_BITMAP Display
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MAP_REGISTER_ENTRY
 
	public class _MAP_REGISTER_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MAP_REGISTER_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MAP_REGISTER_ENTRY"": [ 16, {
				 ""MapRegister"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WriteToDevice"": [ 8, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 MapRegister { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Byte WriteToDevice{ get { return _StructureData[_BufferOffset +8]; } }
	}
	#endregion
	#region _PROCESSOR_IDLE_PREPARE_INFO
 
	public class _PROCESSOR_IDLE_PREPARE_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCESSOR_IDLE_PREPARE_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCESSOR_IDLE_PREPARE_INFO"": [ 88, {
				 ""Context"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Constraints"": [ 8, [ ""_PROCESSOR_IDLE_CONSTRAINTS"", ""null"" ]],
				 ""DependencyCount"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""DependencyUsed"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""DependencyArray"": [ 64, [ ""Pointer"", ""{\""target\"":\""_PROCESSOR_IDLE_DEPENDENCY\""}"" ]],
				 ""PlatformIdleStateIndex"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""ProcessorIdleStateIndex"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""IdleSelectFailureMask"": [ 80, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _PROCESSOR_IDLE_CONSTRAINTS Constraints
		{
			get
			{
				_PROCESSOR_IDLE_CONSTRAINTS returnValue = new _PROCESSOR_IDLE_CONSTRAINTS(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 DependencyCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 DependencyUsed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt64 DependencyArray { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt32 PlatformIdleStateIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 ProcessorIdleStateIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 IdleSelectFailureMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
	}
	#endregion
	#region _PNP_REBALANCE_TRACE_CONTEXT
 
	public class _PNP_REBALANCE_TRACE_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PNP_REBALANCE_TRACE_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PNP_REBALANCE_TRACE_CONTEXT"": [ 112, {
				 ""DeviceCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""RebalancePhase"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Reason"": [ 8, [ ""Array"", ""{\""size\"":0,\""target\"":\""Enumeration\"",\""target_args\"":{\""enum_name\"":\""_PNP_REBALANCE_REASON\"",\""target\"":\""UInt32\""}}"" ]],
				 ""Failure"": [ 16, [ ""Array"", ""{\""size\"":0,\""target\"":\""Enumeration\"",\""target_args\"":{\""enum_name\"":\""_PNP_REBALANCE_FAILURE\"",\""target\"":\""UInt32\""}}"" ]],
				 ""SubtreeRoot"": [ 24, [ ""Pointer"", ""{\""target\"":\""_DEVICE_NODE\""}"" ]],
				 ""SubtreeIncludesRoot"": [ 32, [ ""Byte"", ""null"" ]],
				 ""TriggerRoot"": [ 40, [ ""Pointer"", ""{\""target\"":\""_DEVICE_NODE\""}"" ]],
				 ""RebalanceDueToDynamicPartitioning"": [ 48, [ ""Byte"", ""null"" ]],
				 ""BeginTime"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""VetoNode"": [ 64, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_DEVICE_NODE\""}}"" ]],
				 ""VetoQueryRebalanceReason"": [ 80, [ ""Array"", ""{\""size\"":0,\""target\"":\""Enumeration\"",\""target_args\"":{\""enum_name\"":\""_PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON\"",\""target\"":\""UInt32\""}}"" ]],
				 ""ConflictContext"": [ 88, [ ""_PNP_RESOURCE_CONFLICT_TRACE_CONTEXT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DeviceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 RebalancePhase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _PNP_REBALANCE_REASON[] Reason
		{
			get
			{
				_PNP_REBALANCE_REASON[] returnValue = new _PNP_REBALANCE_REASON[2];
				int size = 0;
				for(int i=0; i<2; i++ )
					returnValue[i] = (_PNP_REBALANCE_REASON)BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
		public _PNP_REBALANCE_FAILURE[] Failure
		{
			get
			{
				_PNP_REBALANCE_FAILURE[] returnValue = new _PNP_REBALANCE_FAILURE[2];
				int size = 0;
				for(int i=0; i<2; i++ )
					returnValue[i] = (_PNP_REBALANCE_FAILURE)BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 SubtreeRoot { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public Byte SubtreeIncludesRoot{ get { return _StructureData[_BufferOffset +32]; } }
		public UInt64 TriggerRoot { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public Byte RebalanceDueToDynamicPartitioning{ get { return _StructureData[_BufferOffset +48]; } }
		public UInt64 BeginTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public _DEVICE_NODE[] VetoNode
		{
			get
			{
				_DEVICE_NODE[] returnValue = new _DEVICE_NODE[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _DEVICE_NODE(_StructureData, (i * size) + _BufferOffset + 64);
				return returnValue;
			}
		}
		public _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON[] VetoQueryRebalanceReason
		{
			get
			{
				_PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON[] returnValue = new _PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON[2];
				int size = 0;
				for(int i=0; i<2; i++ )
					returnValue[i] = (_PNP_DEVNODE_QUERY_REBALANCE_VETO_REASON)BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 80);
				return returnValue;
			}
		}
		public _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT ConflictContext
		{
			get
			{
				_PNP_RESOURCE_CONFLICT_TRACE_CONTEXT returnValue = new _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IOP_IRP_STACK_PROFILER
 
	public class _IOP_IRP_STACK_PROFILER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IOP_IRP_STACK_PROFILER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 84; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IOP_IRP_STACK_PROFILER"": [ 84, {
				 ""Profile"": [ 0, [ ""Array"", ""{\""count\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""TotalIrps"": [ 80, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32[] Profile
		{
			get
			{
				UInt32[] returnValue = new UInt32[20];
				for(int i=0; i<20; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 TotalIrps { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
	}
	#endregion
	#region _EX_HEAP_POOL_NODE
 
	public class _EX_HEAP_POOL_NODE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_HEAP_POOL_NODE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8384; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_HEAP_POOL_NODE"": [ 8384, {
				 ""Heaps"": [ 0, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_SEGMENT_HEAP\""}}"" ]],
				 ""Lookasides"": [ 64, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public _SEGMENT_HEAP[] Heaps
		{
			get
			{
				_SEGMENT_HEAP[] returnValue = new _SEGMENT_HEAP[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new _SEGMENT_HEAP(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public _RTL_DYNAMIC_LOOKASIDE[] Lookasides
		{
			get
			{
				_RTL_DYNAMIC_LOOKASIDE[] returnValue = new _RTL_DYNAMIC_LOOKASIDE[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _RTL_DYNAMIC_LOOKASIDE(_StructureData, (i * size) + _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HMAP_ENTRY
 
	public class _HMAP_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HMAP_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HMAP_ENTRY"": [ 24, {
				 ""BlockOffset"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""PermanentBinAddress"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""MemAlloc"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 BlockOffset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 PermanentBinAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 MemAlloc { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _POP_POWER_ACTION
 
	public class _POP_POWER_ACTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_POWER_ACTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 456; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_POWER_ACTION"": [ 456, {
				 ""Updates"": [ 0, [ ""Byte"", ""null"" ]],
				 ""State"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Shutdown"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Action"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""POWER_ACTION\"",\""target\"":\""UInt32\""}"" ]],
				 ""LightestState"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Status"": [ 16, [ ""Int32"", ""null"" ]],
				 ""DeviceType"": [ 20, [ ""Enumeration"", ""{\""enum_name\"":\""POWER_POLICY_DEVICE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""DeviceTypeFlags"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""IrpMinor"": [ 28, [ ""Byte"", ""null"" ]],
				 ""Waking"": [ 29, [ ""Byte"", ""null"" ]],
				 ""SystemState"": [ 32, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""NextSystemState"": [ 36, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""EffectiveSystemState"": [ 40, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""CurrentSystemState"": [ 44, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ShutdownBugCode"": [ 48, [ ""Pointer"", ""{\""target\"":\""_POP_SHUTDOWN_BUG_CHECK\""}"" ]],
				 ""DevState"": [ 56, [ ""Pointer"", ""{\""target\"":\""_POP_DEVICE_SYS_STATE\""}"" ]],
				 ""HiberContext"": [ 64, [ ""Pointer"", ""{\""target\"":\""_POP_HIBER_CONTEXT\""}"" ]],
				 ""WakeTime"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""SleepTime"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""WakeFirstUnattendedTime"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""WakeAlarmSignaled"": [ 96, [ ""Enumeration"", ""{\""enum_name\"":\""SYSTEM_POWER_CONDITION\"",\""target\"":\""UInt32\""}"" ]],
				 ""WakeAlarm"": [ 104, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""WakeAlarmPaused"": [ 176, [ ""Byte"", ""null"" ]],
				 ""WakeAlarmLastTime"": [ 184, [ ""UInt64"", ""null"" ]],
				 ""DozeDeferralStartTime"": [ 192, [ ""UInt64"", ""null"" ]],
				 ""FilteredCapabilities"": [ 200, [ ""SYSTEM_POWER_CAPABILITIES"", ""null"" ]],
				 ""WatchdogLock"": [ 280, [ ""UInt64"", ""null"" ]],
				 ""WatchdogDpc"": [ 288, [ ""_KDPC"", ""null"" ]],
				 ""WatchdogTimer"": [ 352, [ ""_KTIMER"", ""null"" ]],
				 ""WatchdogInitialized"": [ 416, [ ""Byte"", ""null"" ]],
				 ""WatchdogState"": [ 420, [ ""Enumeration"", ""{\""enum_name\"":\""_POP_POWER_ACTION_WATCHDOG_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""WatchdogStartTime"": [ 424, [ ""UInt64"", ""null"" ]],
				 ""ActionWorkerThread"": [ 432, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""PromoteActionWorkerThread"": [ 440, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""UnlockAfterSleepWorkerThread"": [ 448, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte Updates{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte State{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte Shutdown{ get { return _StructureData[_BufferOffset +2]; } }
		public POWER_ACTION Action { get { return (POWER_ACTION)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _SYSTEM_POWER_STATE LightestState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public POWER_POLICY_DEVICE_TYPE DeviceType { get { return (POWER_POLICY_DEVICE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 DeviceTypeFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Byte IrpMinor{ get { return _StructureData[_BufferOffset +28]; } }
		public Byte Waking{ get { return _StructureData[_BufferOffset +29]; } }
		public _SYSTEM_POWER_STATE SystemState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public _SYSTEM_POWER_STATE NextSystemState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public _SYSTEM_POWER_STATE EffectiveSystemState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public _SYSTEM_POWER_STATE CurrentSystemState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt64 ShutdownBugCode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 DevState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 HiberContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 WakeTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 SleepTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 WakeFirstUnattendedTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public SYSTEM_POWER_CONDITION WakeAlarmSignaled { get { return (SYSTEM_POWER_CONDITION)BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public _ANONYMOUS_TAG[] WakeAlarm
		{
			get
			{
				_ANONYMOUS_TAG[] returnValue = new _ANONYMOUS_TAG[3];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<3; i++ )
					returnValue[i] = new _ANONYMOUS_TAG(_StructureData, (i * size) + _BufferOffset + 104);
				return returnValue;
			}
		}
		public Byte WakeAlarmPaused{ get { return _StructureData[_BufferOffset +176]; } }
		public UInt64 WakeAlarmLastTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public UInt64 DozeDeferralStartTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public SYSTEM_POWER_CAPABILITIES FilteredCapabilities
		{
			get
			{
				SYSTEM_POWER_CAPABILITIES returnValue = new SYSTEM_POWER_CAPABILITIES(_StructureData, _BufferOffset + 200);
				return returnValue;
			}
		}
		public UInt64 WatchdogLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 280); } }
		public _KDPC WatchdogDpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 288);
				return returnValue;
			}
		}
		public _KTIMER WatchdogTimer
		{
			get
			{
				_KTIMER returnValue = new _KTIMER(_StructureData, _BufferOffset + 352);
				return returnValue;
			}
		}
		public Byte WatchdogInitialized{ get { return _StructureData[_BufferOffset +416]; } }
		public _POP_POWER_ACTION_WATCHDOG_STATE WatchdogState { get { return (_POP_POWER_ACTION_WATCHDOG_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 420); } }
		public UInt64 WatchdogStartTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 424); } }
		public UInt64 ActionWorkerThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 432); } }
		public UInt64 PromoteActionWorkerThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 440); } }
		public UInt64 UnlockAfterSleepWorkerThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 448); } }
	}
	#endregion
	#region _RTL_RANGE_LIST
 
	public class _RTL_RANGE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_RANGE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_RANGE_LIST"": [ 32, {
				 ""ListHead"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Flags"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Count"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Stamp"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 Stamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _PROCESSOR_PLATFORM_STATE_RESIDENCIES
 
	public class _PROCESSOR_PLATFORM_STATE_RESIDENCIES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCESSOR_PLATFORM_STATE_RESIDENCIES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCESSOR_PLATFORM_STATE_RESIDENCIES"": [ 24, {
				 ""Count"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""States"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _PROCESSOR_PLATFORM_STATE_RESIDENCY[] States
		{
			get
			{
				_PROCESSOR_PLATFORM_STATE_RESIDENCY[] returnValue = new _PROCESSOR_PLATFORM_STATE_RESIDENCY[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _PROCESSOR_PLATFORM_STATE_RESIDENCY(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RELATION_LIST
 
	public class _RELATION_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RELATION_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RELATION_LIST"": [ 16, {
				 ""DeviceObjectList"": [ 0, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT_LIST\""}"" ]],
				 ""Sorted"": [ 8, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DeviceObjectList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Byte Sorted{ get { return _StructureData[_BufferOffset +8]; } }
	}
	#endregion
	#region PEPHANDLE__
 
	public class PEPHANDLE__
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public PEPHANDLE__(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""PEPHANDLE__"": [ 4, {
				 ""unused"": [ 0, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 unused { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _ISR_THUNK
 
	public class _ISR_THUNK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ISR_THUNK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ISR_THUNK"": [ 8, {
				 ""PushImm"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Vector"": [ 1, [ ""Byte"", ""null"" ]],
				 ""PushRbp"": [ 2, [ ""Byte"", ""null"" ]],
				 ""JmpOp"": [ 3, [ ""Byte"", ""null"" ]],
				 ""JmpOffset"": [ 4, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte PushImm{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Vector{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte PushRbp{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte JmpOp{ get { return _StructureData[_BufferOffset +3]; } }
		public Int32 JmpOffset { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _COMPRESSED_DATA_INFO
 
	public class _COMPRESSED_DATA_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _COMPRESSED_DATA_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_COMPRESSED_DATA_INFO"": [ 12, {
				 ""CompressionFormatAndEngine"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""CompressionUnitShift"": [ 2, [ ""Byte"", ""null"" ]],
				 ""ChunkShift"": [ 3, [ ""Byte"", ""null"" ]],
				 ""ClusterShift"": [ 4, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 5, [ ""Byte"", ""null"" ]],
				 ""NumberOfChunks"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""CompressedChunkSizes"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 CompressionFormatAndEngine { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte CompressionUnitShift{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte ChunkShift{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte ClusterShift{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +5]; } }
		public UInt16 NumberOfChunks { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt32[] CompressedChunkSizes
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_ZERO_THREAD_CONTEXT
 
	public class _MI_ZERO_THREAD_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_ZERO_THREAD_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_ZERO_THREAD_CONTEXT"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _MI_PARTITION_ZEROING
 
	public class _MI_PARTITION_ZEROING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PARTITION_ZEROING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 176; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PARTITION_ZEROING"": [ 176, {
				 ""PageEvent"": [ 0, [ ""_KEVENT"", ""null"" ]],
				 ""ThreadPriorityStatic"": [ 24, [ ""Byte"", ""null"" ]],
				 ""AdaptiveZeroingEnabled"": [ 25, [ ""Byte"", ""null"" ]],
				 ""ZeroFreePageSlistMinimum"": [ 28, [ ""Int32"", ""null"" ]],
				 ""RebalanceZeroFreeWorkItem"": [ 32, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""NodeCount"": [ 64, [ ""Int32"", ""null"" ]],
				 ""BackgroundZeroingDisabled"": [ 68, [ ""Int32"", ""null"" ]],
				 ""LargeBootZeroingComplete"": [ 72, [ ""_KGATE"", ""null"" ]],
				 ""WriteCalibration"": [ 96, [ ""_MI_WRITE_CALIBRATION"", ""null"" ]],
				 ""IpiCalibrationFailed"": [ 128, [ ""Byte"", ""null"" ]],
				 ""ActiveProcessorsForIpiCalibration"": [ 132, [ ""Int32"", ""null"" ]],
				 ""NodesReadyForIpiCalibration"": [ 136, [ ""Int32"", ""null"" ]],
				 ""ReleaseNodeZeroingThreads"": [ 144, [ ""_KEVENT"", ""null"" ]],
				 ""ThreadContext"": [ 168, [ ""Pointer"", ""{\""target\"":\""_MI_ZERO_THREAD_CONTEXT\""}"" ]] }]
				 }
				)";
			}
		}
		public _KEVENT PageEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte ThreadPriorityStatic{ get { return _StructureData[_BufferOffset +24]; } }
		public Byte AdaptiveZeroingEnabled{ get { return _StructureData[_BufferOffset +25]; } }
		public Int32 ZeroFreePageSlistMinimum { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 28); } }
		public _WORK_QUEUE_ITEM RebalanceZeroFreeWorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public Int32 NodeCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 64); } }
		public Int32 BackgroundZeroingDisabled { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 68); } }
		public _KGATE LargeBootZeroingComplete
		{
			get
			{
				_KGATE returnValue = new _KGATE(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _MI_WRITE_CALIBRATION WriteCalibration
		{
			get
			{
				_MI_WRITE_CALIBRATION returnValue = new _MI_WRITE_CALIBRATION(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public Byte IpiCalibrationFailed{ get { return _StructureData[_BufferOffset +128]; } }
		public Int32 ActiveProcessorsForIpiCalibration { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 132); } }
		public Int32 NodesReadyForIpiCalibration { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 136); } }
		public _KEVENT ReleaseNodeZeroingThreads
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 144);
				return returnValue;
			}
		}
		public UInt64 ThreadContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
	}
	#endregion
	#region _KERNEL_STACK_SEGMENT
 
	public class _KERNEL_STACK_SEGMENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KERNEL_STACK_SEGMENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KERNEL_STACK_SEGMENT"": [ 32, {
				 ""StackBase"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""StackLimit"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""KernelStack"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""InitialStack"": [ 24, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 StackBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 StackLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 KernelStack { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 InitialStack { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _POP_FX_DRIVER_CALLBACKS
 
	public class _POP_FX_DRIVER_CALLBACKS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_DRIVER_CALLBACKS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_DRIVER_CALLBACKS"": [ 80, {
				 ""ComponentActive"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ComponentIdle"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ComponentIdleState"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DevicePowerRequired"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DevicePowerNotRequired"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PowerControl"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ComponentCriticalTransition"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DripsWatchdogCallback"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DirectedPowerUpCallback"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DirectedPowerDownCallback"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ComponentActive { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ComponentIdle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ComponentIdleState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 DevicePowerRequired { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 DevicePowerNotRequired { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 PowerControl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 ComponentCriticalTransition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 DripsWatchdogCallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 DirectedPowerUpCallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 DirectedPowerDownCallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
	}
	#endregion
	#region _FAST_ERESOURCE_INTERNAL
 
	public class _FAST_ERESOURCE_INTERNAL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FAST_ERESOURCE_INTERNAL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 104; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FAST_ERESOURCE_INTERNAL"": [ 104, {
				 ""SystemResourcesList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ReservedPointer"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ActiveCount"": [ 24, [ ""Int16"", ""null"" ]],
				 ""Flag"": [ 26, [ ""UInt16"", ""null"" ]],
				 ""SharedWaiters"": [ 32, [ ""_KWAIT_CHAIN"", ""null"" ]],
				 ""ExclusiveWaiters"": [ 40, [ ""_KWAIT_CHAIN"", ""null"" ]],
				 ""OwnerEntryListHead"": [ 48, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ActiveEntries"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""ContentionCount"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""NumberOfSharedWaiters"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""NumberOfExclusiveWaiters"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""ReservedWin64OnlyPointer"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Address"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CreatorBackTraceIndex"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""SpinLock"": [ 96, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY SystemResourcesList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 ReservedPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Int16 ActiveCount { get { return BitConverter.ToInt16(_StructureData, _BufferOffset + 24); } }
		public UInt16 Flag { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 26); } }
		public _KWAIT_CHAIN SharedWaiters
		{
			get
			{
				_KWAIT_CHAIN returnValue = new _KWAIT_CHAIN(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _KWAIT_CHAIN ExclusiveWaiters
		{
			get
			{
				_KWAIT_CHAIN returnValue = new _KWAIT_CHAIN(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _LIST_ENTRY OwnerEntryListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 ActiveEntries { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 ContentionCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public UInt32 NumberOfSharedWaiters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 NumberOfExclusiveWaiters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt64 ReservedWin64OnlyPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 Address { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 CreatorBackTraceIndex { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 SpinLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
	}
	#endregion
	#region _MMSUPPORT_FLAGS
 
	public class _MMSUPPORT_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMSUPPORT_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMSUPPORT_FLAGS"": [ 4, {
				 ""WorkingSetType"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Reserved0"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""MaximumWorkingSetHard"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""MinimumWorkingSetHard"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""Byte\""}"" ]],
				 ""SessionMaster"": [ 1, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""TrimmerState"": [ 1, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""Reserved"": [ 1, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""PageStealers"": [ 1, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""u1"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MemoryPriority"": [ 2, [ ""Byte"", ""null"" ]],
				 ""WsleDeleted"": [ 3, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""SvmEnabled"": [ 3, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""ForceAge"": [ 3, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""ForceTrim"": [ 3, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""NewMaximum"": [ 3, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""CommitReleaseState"": [ 3, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""u2"": [ 3, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte WorkingSetType
		{
			get
			{
				// start: 0  end: 3  Mask: 0000000000000111
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 7) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Reserved0
		{
			get
			{
				// start: 3  end: 6  Mask: 0000000000111000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 56) >> 3;
				return (Byte)value2;
			}
		}
		public Byte MaximumWorkingSetHard
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 64) >> 6;
				return (Byte)value2;
			}
		}
		public Byte MinimumWorkingSetHard
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 128) >> 7;
				return (Byte)value2;
			}
		}
		public Byte SessionMaster
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte TrimmerState
		{
			get
			{
				// start: 1  end: 3  Mask: 0000000000000110
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 6) >> 1;
				return (Byte)value2;
			}
		}
		public Byte Reserved
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte PageStealers
		{
			get
			{
				// start: 4  end: 8  Mask: 0000000011110000
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 240) >> 4;
				return (Byte)value2;
			}
		}
		public UInt16 u1 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte MemoryPriority{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte WsleDeleted
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte SvmEnabled
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte ForceAge
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte ForceTrim
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte NewMaximum
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte CommitReleaseState
		{
			get
			{
				// start: 5  end: 7  Mask: 0000000001100000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 96) >> 5;
				return (Byte)value2;
			}
		}
		public Byte u2{ get { return _StructureData[_BufferOffset +3]; } }
	}
	#endregion
	#region _BLOB_COUNTERS
 
	public class _BLOB_COUNTERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _BLOB_COUNTERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_BLOB_COUNTERS"": [ 8, {
				 ""CreatedObjects"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""DeletedObjects"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 CreatedObjects { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 DeletedObjects { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES
 
	public class _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SYSTEM_CACHE_VIEW_ATTRIBUTES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SYSTEM_CACHE_VIEW_ATTRIBUTES"": [ 8, {
				 ""NumberOfPtes"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""PartitionId"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":6,\""target\"":\""UInt64\""}"" ]],
				 ""SectionOffset"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":16,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 NumberOfPtes
		{
			get
			{
				// start: 0  end: 6  Mask: 0000000000111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 63) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 PartitionId
		{
			get
			{
				// start: 6  end: 16  Mask: 1111111111000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65472) >> 6;
				return (UInt64)value2;
			}
		}
		public UInt64 SectionOffset
		{
			get
			{
				// start: 16  end: 64  Mask: 1111111111111111111111111111111111111111111111110000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744073709486080) >> 16;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _WAITING_IRP
 
	public class _WAITING_IRP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WAITING_IRP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WAITING_IRP"": [ 64, {
				 ""Links"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Irp"": [ 16, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""CompletionRoutine"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Context"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Event"": [ 40, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""Information"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""BreakAllRH"": [ 52, [ ""Byte"", ""null"" ]],
				 ""OplockBreakNotify"": [ 53, [ ""Byte"", ""null"" ]],
				 ""FileObject"": [ 56, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Links
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Irp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 CompletionRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 Event { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt32 Information { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public Byte BreakAllRH{ get { return _StructureData[_BufferOffset +52]; } }
		public Byte OplockBreakNotify{ get { return _StructureData[_BufferOffset +53]; } }
		public UInt64 FileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
	}
	#endregion
	#region _MI_DYNAMIC_BITMAP
 
	public class _MI_DYNAMIC_BITMAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_DYNAMIC_BITMAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_DYNAMIC_BITMAP"": [ 72, {
				 ""Bitmap"": [ 0, [ ""_RTL_BITMAP_EX"", ""null"" ]],
				 ""MaximumSize"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""Hint"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""BaseVa"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SizeTopDown"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""HintTopDown"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""BaseVaTopDown"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SpinLock"": [ 64, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BITMAP_EX Bitmap
		{
			get
			{
				_RTL_BITMAP_EX returnValue = new _RTL_BITMAP_EX(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 MaximumSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Hint { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 BaseVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 SizeTopDown { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 HintTopDown { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 BaseVaTopDown { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 SpinLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _UNEXPECTED_INTERRUPT
 
	public class _UNEXPECTED_INTERRUPT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _UNEXPECTED_INTERRUPT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_UNEXPECTED_INTERRUPT"": [ 8, {
				 ""PushImm"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Vector"": [ 1, [ ""Byte"", ""null"" ]],
				 ""PushRbp"": [ 2, [ ""Byte"", ""null"" ]],
				 ""JmpOp"": [ 3, [ ""Byte"", ""null"" ]],
				 ""JmpOffset"": [ 4, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte PushImm{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Vector{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte PushRbp{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte JmpOp{ get { return _StructureData[_BufferOffset +3]; } }
		public Int32 JmpOffset { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _KTIMER_EXPIRATION_TRACE
 
	public class _KTIMER_EXPIRATION_TRACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTIMER_EXPIRATION_TRACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTIMER_EXPIRATION_TRACE"": [ 16, {
				 ""InterruptTime"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""PerformanceCounter"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 InterruptTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _LARGE_INTEGER PerformanceCounter
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMPTE_LIST
 
	public class _MMPTE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPTE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPTE_LIST"": [ 8, {
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""OneEntry"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""filler0"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""SwizzleBit"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""Prototype"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""Transition"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""filler1"": [ 0, [ ""BitField"", ""{\""end_bit\"":28,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""NextEntry"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":28,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Valid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 OneEntry
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 filler0
		{
			get
			{
				// start: 2  end: 4  Mask: 0000000000001100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 12) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 SwizzleBit
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt64)value2;
			}
		}
		public UInt64 Protection
		{
			get
			{
				// start: 5  end: 10  Mask: 0000001111100000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 992) >> 5;
				return (UInt64)value2;
			}
		}
		public UInt64 Prototype
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 Transition
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 filler1
		{
			get
			{
				// start: 12  end: 28  Mask: 1111111111111111000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 268431360) >> 12;
				return (UInt64)value2;
			}
		}
		public UInt64 NextEntry
		{
			get
			{
				// start: 28  end: 64  Mask: 1111111111111111111111111111111111110000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744073441116160) >> 28;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _VI_POOL_PAGE_HEADER
 
	public class _VI_POOL_PAGE_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VI_POOL_PAGE_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VI_POOL_PAGE_HEADER"": [ 24, {
				 ""NextPage"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SLIST_ENTRY\""}"" ]],
				 ""VerifierEntry"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Signature"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 NextPage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 VerifierEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Signature { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _PLATFORM_IDLE_STATE_ACCOUNTING
 
	public class _PLATFORM_IDLE_STATE_ACCOUNTING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PLATFORM_IDLE_STATE_ACCOUNTING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1008; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PLATFORM_IDLE_STATE_ACCOUNTING"": [ 1008, {
				 ""CancelCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""FailureCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""SuccessCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""MaxTime"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""MinTime"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""TotalTime"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""InvalidBucketIndex"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""SelectionStatistics"": [ 48, [ ""_PPM_SELECTION_STATISTICS"", ""null"" ]],
				 ""IdleTimeBuckets"": [ 176, [ ""Array"", ""{\""count\"":26,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 CancelCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 FailureCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 SuccessCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 MaxTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 MinTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 TotalTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt32 InvalidBucketIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public _PPM_SELECTION_STATISTICS SelectionStatistics
		{
			get
			{
				_PPM_SELECTION_STATISTICS returnValue = new _PPM_SELECTION_STATISTICS(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _PROC_IDLE_STATE_BUCKET[] IdleTimeBuckets
		{
			get
			{
				_PROC_IDLE_STATE_BUCKET[] returnValue = new _PROC_IDLE_STATE_BUCKET[26];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<26; i++ )
					returnValue[i] = new _PROC_IDLE_STATE_BUCKET(_StructureData, (i * size) + _BufferOffset + 176);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PROC_FEEDBACK
 
	public class _PROC_FEEDBACK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROC_FEEDBACK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 144; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROC_FEEDBACK"": [ 144, {
				 ""Lock"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""CyclesLast"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""CyclesActive"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""Counters"": [ 24, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_PROC_FEEDBACK_COUNTER\""}}"" ]],
				 ""LastUpdateTime"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""UnscaledTime"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""UnaccountedTime"": [ 56, [ ""Int64"", ""null"" ]],
				 ""ScaledTime"": [ 64, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""UnaccountedKernelTime"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""PerformanceScaledKernelTime"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""UserTimeLast"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""KernelTimeLast"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""IdleGenerationNumberLast"": [ 104, [ ""UInt64"", ""null"" ]],
				 ""HvActiveTimeLast"": [ 112, [ ""UInt64"", ""null"" ]],
				 ""StallCyclesLast"": [ 120, [ ""UInt64"", ""null"" ]],
				 ""StallTime"": [ 128, [ ""UInt64"", ""null"" ]],
				 ""KernelTimesIndex"": [ 136, [ ""Byte"", ""null"" ]],
				 ""CounterDiscardsIdleTime"": [ 137, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 CyclesLast { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 CyclesActive { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _PROC_FEEDBACK_COUNTER[] Counters
		{
			get
			{
				_PROC_FEEDBACK_COUNTER[] returnValue = new _PROC_FEEDBACK_COUNTER[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _PROC_FEEDBACK_COUNTER(_StructureData, (i * size) + _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 LastUpdateTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 UnscaledTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public Int64 UnaccountedTime { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64[] ScaledTime
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt64 UnaccountedKernelTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 PerformanceScaledKernelTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt32 UserTimeLast { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 KernelTimeLast { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt64 IdleGenerationNumberLast { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 HvActiveTimeLast { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 StallCyclesLast { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 StallTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public Byte KernelTimesIndex{ get { return _StructureData[_BufferOffset +136]; } }
		public Byte CounterDiscardsIdleTime{ get { return _StructureData[_BufferOffset +137]; } }
	}
	#endregion
	#region _TIMELINE_BITMAP
 
	public class _TIMELINE_BITMAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TIMELINE_BITMAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TIMELINE_BITMAP"": [ 8, {
				 ""Value"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""EndTime"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Bitmap"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Value { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 EndTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Bitmap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _PROC_FEEDBACK_COUNTER
 
	public class _PROC_FEEDBACK_COUNTER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROC_FEEDBACK_COUNTER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROC_FEEDBACK_COUNTER"": [ 48, {
				 ""InstantaneousRead"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DifferentialRead"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LastActualCount"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""LastReferenceCount"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""CachedValue"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Affinitized"": [ 32, [ ""Byte"", ""null"" ]],
				 ""Differential"": [ 33, [ ""Byte"", ""null"" ]],
				 ""DiscardIdleTime"": [ 34, [ ""Byte"", ""null"" ]],
				 ""Scaling"": [ 35, [ ""Byte"", ""null"" ]],
				 ""Context"": [ 40, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 InstantaneousRead { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 DifferentialRead { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 LastActualCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 LastReferenceCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 CachedValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Byte Affinitized{ get { return _StructureData[_BufferOffset +32]; } }
		public Byte Differential{ get { return _StructureData[_BufferOffset +33]; } }
		public Byte DiscardIdleTime{ get { return _StructureData[_BufferOffset +34]; } }
		public Byte Scaling{ get { return _StructureData[_BufferOffset +35]; } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _DBGKD_SWITCH_PARTITION
 
	public class _DBGKD_SWITCH_PARTITION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_SWITCH_PARTITION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_SWITCH_PARTITION"": [ 4, {
				 ""Partition"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Partition { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _MI_DRIVER_VA
 
	public class _MI_DRIVER_VA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_DRIVER_VA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_DRIVER_VA"": [ 40, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_MI_DRIVER_VA\""}"" ]],
				 ""PointerPte"": [ 8, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""BitMap"": [ 16, [ ""_RTL_BITMAP"", ""null"" ]],
				 ""Hint"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 36, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 PointerPte { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _RTL_BITMAP BitMap
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 Hint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
	}
	#endregion
	#region _LEARNING_MODE_DATA
 
	public class _LEARNING_MODE_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LEARNING_MODE_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LEARNING_MODE_DATA"": [ 8, {
				 ""Settings"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Enabled"": [ 4, [ ""Byte"", ""null"" ]],
				 ""PermissiveModeEnabled"": [ 5, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Settings { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte Enabled{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte PermissiveModeEnabled{ get { return _StructureData[_BufferOffset +5]; } }
	}
	#endregion
	#region _PEB64
 
	public class _PEB64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEB64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1992; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEB64"": [ 1992, {
				 ""InheritedAddressSpace"": [ 0, [ ""Byte"", ""null"" ]],
				 ""ReadImageFileExecOptions"": [ 1, [ ""Byte"", ""null"" ]],
				 ""BeingDebugged"": [ 2, [ ""Byte"", ""null"" ]],
				 ""BitField"": [ 3, [ ""Byte"", ""null"" ]],
				 ""ImageUsesLargePages"": [ 3, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""IsProtectedProcess"": [ 3, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""IsImageDynamicallyRelocated"": [ 3, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""SkipPatchingUser32Forwarders"": [ 3, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""IsPackagedProcess"": [ 3, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""IsAppContainer"": [ 3, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""IsProtectedProcessLight"": [ 3, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""IsLongPathAwareProcess"": [ 3, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""Byte\""}"" ]],
				 ""Padding0"": [ 4, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""Mutant"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ImageBaseAddress"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""Ldr"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""ProcessParameters"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""SubSystemData"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""ProcessHeap"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""FastPebLock"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""AtlThunkSListPtr"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""IFEOKey"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""CrossProcessFlags"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""ProcessInJob"": [ 80, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessInitializing"": [ 80, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessUsingVEH"": [ 80, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessUsingVCH"": [ 80, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessUsingFTH"": [ 80, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessPreviouslyThrottled"": [ 80, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessCurrentlyThrottled"": [ 80, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessImagesHotPatched"": [ 80, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""ReservedBits0"": [ 80, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""Padding1"": [ 84, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""KernelCallbackTable"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""UserSharedInfoPtr"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""SystemReserved"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""AtlThunkSListPtr32"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""ApiSetMap"": [ 104, [ ""UInt64"", ""null"" ]],
				 ""TlsExpansionCounter"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""Padding2"": [ 116, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""TlsBitmap"": [ 120, [ ""UInt64"", ""null"" ]],
				 ""TlsBitmapBits"": [ 128, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ReadOnlySharedMemoryBase"": [ 136, [ ""UInt64"", ""null"" ]],
				 ""SharedData"": [ 144, [ ""UInt64"", ""null"" ]],
				 ""ReadOnlyStaticServerData"": [ 152, [ ""UInt64"", ""null"" ]],
				 ""AnsiCodePageData"": [ 160, [ ""UInt64"", ""null"" ]],
				 ""OemCodePageData"": [ 168, [ ""UInt64"", ""null"" ]],
				 ""UnicodeCaseTableData"": [ 176, [ ""UInt64"", ""null"" ]],
				 ""NumberOfProcessors"": [ 184, [ ""UInt32"", ""null"" ]],
				 ""NtGlobalFlag"": [ 188, [ ""UInt32"", ""null"" ]],
				 ""CriticalSectionTimeout"": [ 192, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""HeapSegmentReserve"": [ 200, [ ""UInt64"", ""null"" ]],
				 ""HeapSegmentCommit"": [ 208, [ ""UInt64"", ""null"" ]],
				 ""HeapDeCommitTotalFreeThreshold"": [ 216, [ ""UInt64"", ""null"" ]],
				 ""HeapDeCommitFreeBlockThreshold"": [ 224, [ ""UInt64"", ""null"" ]],
				 ""NumberOfHeaps"": [ 232, [ ""UInt32"", ""null"" ]],
				 ""MaximumNumberOfHeaps"": [ 236, [ ""UInt32"", ""null"" ]],
				 ""ProcessHeaps"": [ 240, [ ""UInt64"", ""null"" ]],
				 ""GdiSharedHandleTable"": [ 248, [ ""UInt64"", ""null"" ]],
				 ""ProcessStarterHelper"": [ 256, [ ""UInt64"", ""null"" ]],
				 ""GdiDCAttributeList"": [ 264, [ ""UInt32"", ""null"" ]],
				 ""Padding3"": [ 268, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""LoaderLock"": [ 272, [ ""UInt64"", ""null"" ]],
				 ""OSMajorVersion"": [ 280, [ ""UInt32"", ""null"" ]],
				 ""OSMinorVersion"": [ 284, [ ""UInt32"", ""null"" ]],
				 ""OSBuildNumber"": [ 288, [ ""UInt16"", ""null"" ]],
				 ""OSCSDVersion"": [ 290, [ ""UInt16"", ""null"" ]],
				 ""OSPlatformId"": [ 292, [ ""UInt32"", ""null"" ]],
				 ""ImageSubsystem"": [ 296, [ ""UInt32"", ""null"" ]],
				 ""ImageSubsystemMajorVersion"": [ 300, [ ""UInt32"", ""null"" ]],
				 ""ImageSubsystemMinorVersion"": [ 304, [ ""UInt32"", ""null"" ]],
				 ""Padding4"": [ 308, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""ActiveProcessAffinityMask"": [ 312, [ ""UInt64"", ""null"" ]],
				 ""GdiHandleBuffer"": [ 320, [ ""Array"", ""{\""count\"":60,\""target\"":\""UInt32\""}"" ]],
				 ""PostProcessInitRoutine"": [ 560, [ ""UInt64"", ""null"" ]],
				 ""TlsExpansionBitmap"": [ 568, [ ""UInt64"", ""null"" ]],
				 ""TlsExpansionBitmapBits"": [ 576, [ ""Array"", ""{\""count\"":32,\""target\"":\""UInt32\""}"" ]],
				 ""SessionId"": [ 704, [ ""UInt32"", ""null"" ]],
				 ""Padding5"": [ 708, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""AppCompatFlags"": [ 712, [ ""_ULARGE_INTEGER"", ""null"" ]],
				 ""AppCompatFlagsUser"": [ 720, [ ""_ULARGE_INTEGER"", ""null"" ]],
				 ""pShimData"": [ 728, [ ""UInt64"", ""null"" ]],
				 ""AppCompatInfo"": [ 736, [ ""UInt64"", ""null"" ]],
				 ""CSDVersion"": [ 744, [ ""_STRING64"", ""null"" ]],
				 ""ActivationContextData"": [ 760, [ ""UInt64"", ""null"" ]],
				 ""ProcessAssemblyStorageMap"": [ 768, [ ""UInt64"", ""null"" ]],
				 ""SystemDefaultActivationContextData"": [ 776, [ ""UInt64"", ""null"" ]],
				 ""SystemAssemblyStorageMap"": [ 784, [ ""UInt64"", ""null"" ]],
				 ""MinimumStackCommit"": [ 792, [ ""UInt64"", ""null"" ]],
				 ""SparePointers"": [ 800, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""SpareUlongs"": [ 832, [ ""Array"", ""{\""count\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""WerRegistrationData"": [ 856, [ ""UInt64"", ""null"" ]],
				 ""WerShipAssertPtr"": [ 864, [ ""UInt64"", ""null"" ]],
				 ""pUnused"": [ 872, [ ""UInt64"", ""null"" ]],
				 ""pImageHeaderHash"": [ 880, [ ""UInt64"", ""null"" ]],
				 ""TracingFlags"": [ 888, [ ""UInt32"", ""null"" ]],
				 ""HeapTracingEnabled"": [ 888, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""CritSecTracingEnabled"": [ 888, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""LibLoaderTracingEnabled"": [ 888, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""SpareTracingBits"": [ 888, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""Padding6"": [ 892, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""CsrServerReadOnlySharedMemoryBase"": [ 896, [ ""UInt64"", ""null"" ]],
				 ""TppWorkerpListLock"": [ 904, [ ""UInt64"", ""null"" ]],
				 ""TppWorkerpList"": [ 912, [ ""LIST_ENTRY64"", ""null"" ]],
				 ""WaitOnAddressHashTable"": [ 928, [ ""Array"", ""{\""count\"":128,\""target\"":\""UInt64\""}"" ]],
				 ""TelemetryCoverageHeader"": [ 1952, [ ""UInt64"", ""null"" ]],
				 ""CloudFileFlags"": [ 1960, [ ""UInt32"", ""null"" ]],
				 ""CloudFileDiagFlags"": [ 1964, [ ""UInt32"", ""null"" ]],
				 ""PlaceholderCompatibilityMode"": [ 1968, [ ""Char"", ""null"" ]],
				 ""PlaceholderCompatibilityModeReserved"": [ 1969, [ ""Array"", ""{\""count\"":7,\""target\"":\""Char\""}"" ]],
				 ""LeapSecondData"": [ 1976, [ ""UInt64"", ""null"" ]],
				 ""LeapSecondFlags"": [ 1984, [ ""UInt32"", ""null"" ]],
				 ""SixtySecondEnabled"": [ 1984, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 1984, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""NtGlobalFlag2"": [ 1988, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte InheritedAddressSpace{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte ReadImageFileExecOptions{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte BeingDebugged{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte BitField{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte ImageUsesLargePages
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte IsProtectedProcess
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte IsImageDynamicallyRelocated
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte SkipPatchingUser32Forwarders
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte IsPackagedProcess
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte IsAppContainer
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte IsProtectedProcessLight
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 64) >> 6;
				return (Byte)value2;
			}
		}
		public Byte IsLongPathAwareProcess
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 128) >> 7;
				return (Byte)value2;
			}
		}
		public Byte[] Padding0
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 4];
				return returnValue;
			}
		}
		public UInt64 Mutant { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ImageBaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Ldr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ProcessParameters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 SubSystemData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 ProcessHeap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 FastPebLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 AtlThunkSListPtr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 IFEOKey { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt32 CrossProcessFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 ProcessInJob
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessInitializing
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessUsingVEH
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessUsingVCH
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessUsingFTH
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessPreviouslyThrottled
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessCurrentlyThrottled
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessImagesHotPatched
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 ReservedBits0
		{
			get
			{
				// start: 8  end: 32  Mask: 11111111111111111111111100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 4294967040) >> 8;
				return (UInt32)value2;
			}
		}
		public Byte[] Padding1
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 84];
				return returnValue;
			}
		}
		public UInt64 KernelCallbackTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 UserSharedInfoPtr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt32 SystemReserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 AtlThunkSListPtr32 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt64 ApiSetMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt32 TlsExpansionCounter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public Byte[] Padding2
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 116];
				return returnValue;
			}
		}
		public UInt64 TlsBitmap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt32[] TlsBitmapBits
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt64 ReadOnlySharedMemoryBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 SharedData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 ReadOnlyStaticServerData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 AnsiCodePageData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 OemCodePageData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 UnicodeCaseTableData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt32 NumberOfProcessors { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 184); } }
		public UInt32 NtGlobalFlag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public _LARGE_INTEGER CriticalSectionTimeout
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public UInt64 HeapSegmentReserve { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 HeapSegmentCommit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 HeapDeCommitTotalFreeThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 HeapDeCommitFreeBlockThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt32 NumberOfHeaps { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 232); } }
		public UInt32 MaximumNumberOfHeaps { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 236); } }
		public UInt64 ProcessHeaps { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 GdiSharedHandleTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public UInt64 ProcessStarterHelper { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public UInt32 GdiDCAttributeList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 264); } }
		public Byte[] Padding3
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 268];
				return returnValue;
			}
		}
		public UInt64 LoaderLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public UInt32 OSMajorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 280); } }
		public UInt32 OSMinorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 284); } }
		public UInt16 OSBuildNumber { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 288); } }
		public UInt16 OSCSDVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 290); } }
		public UInt32 OSPlatformId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 292); } }
		public UInt32 ImageSubsystem { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 296); } }
		public UInt32 ImageSubsystemMajorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 300); } }
		public UInt32 ImageSubsystemMinorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 304); } }
		public Byte[] Padding4
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 308];
				return returnValue;
			}
		}
		public UInt64 ActiveProcessAffinityMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 312); } }
		public UInt32[] GdiHandleBuffer
		{
			get
			{
				UInt32[] returnValue = new UInt32[60];
				for(int i=0; i<60; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 320);
				return returnValue;
			}
		}
		public UInt64 PostProcessInitRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 560); } }
		public UInt64 TlsExpansionBitmap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 568); } }
		public UInt32[] TlsExpansionBitmapBits
		{
			get
			{
				UInt32[] returnValue = new UInt32[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 576);
				return returnValue;
			}
		}
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 704); } }
		public Byte[] Padding5
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 708];
				return returnValue;
			}
		}
		public _ULARGE_INTEGER AppCompatFlags
		{
			get
			{
				_ULARGE_INTEGER returnValue = new _ULARGE_INTEGER(_StructureData, _BufferOffset + 712);
				return returnValue;
			}
		}
		public _ULARGE_INTEGER AppCompatFlagsUser
		{
			get
			{
				_ULARGE_INTEGER returnValue = new _ULARGE_INTEGER(_StructureData, _BufferOffset + 720);
				return returnValue;
			}
		}
		public UInt64 pShimData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 728); } }
		public UInt64 AppCompatInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 736); } }
		public _STRING64 CSDVersion
		{
			get
			{
				_STRING64 returnValue = new _STRING64(_StructureData, _BufferOffset + 744);
				return returnValue;
			}
		}
		public UInt64 ActivationContextData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 760); } }
		public UInt64 ProcessAssemblyStorageMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 768); } }
		public UInt64 SystemDefaultActivationContextData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 776); } }
		public UInt64 SystemAssemblyStorageMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 784); } }
		public UInt64 MinimumStackCommit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 792); } }
		public UInt64[] SparePointers
		{
			get
			{
				UInt64[] returnValue = new UInt64[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 800);
				return returnValue;
			}
		}
		public UInt32[] SpareUlongs
		{
			get
			{
				UInt32[] returnValue = new UInt32[5];
				for(int i=0; i<5; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 832);
				return returnValue;
			}
		}
		public UInt64 WerRegistrationData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 856); } }
		public UInt64 WerShipAssertPtr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 864); } }
		public UInt64 pUnused { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 872); } }
		public UInt64 pImageHeaderHash { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 880); } }
		public UInt32 TracingFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 888); } }
		public UInt32 HeapTracingEnabled
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 888);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 CritSecTracingEnabled
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 888);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 LibLoaderTracingEnabled
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 888);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 SpareTracingBits
		{
			get
			{
				// start: 3  end: 32  Mask: 11111111111111111111111111111000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 888);
				var value2 = (value & 4294967288) >> 3;
				return (UInt32)value2;
			}
		}
		public Byte[] Padding6
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 892];
				return returnValue;
			}
		}
		public UInt64 CsrServerReadOnlySharedMemoryBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 896); } }
		public UInt64 TppWorkerpListLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 904); } }
		public LIST_ENTRY64 TppWorkerpList
		{
			get
			{
				LIST_ENTRY64 returnValue = new LIST_ENTRY64(_StructureData, _BufferOffset + 912);
				return returnValue;
			}
		}
		public UInt64[] WaitOnAddressHashTable
		{
			get
			{
				UInt64[] returnValue = new UInt64[128];
				for(int i=0; i<128; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 928);
				return returnValue;
			}
		}
		public UInt64 TelemetryCoverageHeader { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1952); } }
		public UInt32 CloudFileFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1960); } }
		public UInt32 CloudFileDiagFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1964); } }
		public Char PlaceholderCompatibilityMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 1968); } }
		public Char[] PlaceholderCompatibilityModeReserved
		{
			get
			{
				Char[] returnValue = new Char[7];
				for(int i=0; i<7; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 1969);
				return returnValue;
			}
		}
		public UInt64 LeapSecondData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1976); } }
		public UInt32 LeapSecondFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1984); } }
		public UInt32 SixtySecondEnabled
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1984);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 1  end: 32  Mask: 11111111111111111111111111111110
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1984);
				var value2 = (value & 4294967294) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 NtGlobalFlag2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1988); } }
	}
	#endregion
	#region _ETW_REALTIME_CONSUMER
 
	public class _ETW_REALTIME_CONSUMER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_REALTIME_CONSUMER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_REALTIME_CONSUMER"": [ 160, {
				 ""Links"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ProcessHandle"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProcessObject"": [ 24, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""NextNotDelivered"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RealtimeConnectContext"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DisconnectEvent"": [ 48, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""DataAvailableEvent"": [ 56, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""UserBufferCount"": [ 64, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""UserBufferListHead"": [ 72, [ ""Pointer"", ""{\""target\"":\""_SINGLE_LIST_ENTRY\""}"" ]],
				 ""BuffersLost"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""EmptyBuffersCount"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""LoggerId"": [ 88, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 90, [ ""Byte"", ""null"" ]],
				 ""ShutDownRequested"": [ 90, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""NewBuffersLost"": [ 90, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""Disconnected"": [ 90, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""Notified"": [ 90, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""Wow"": [ 90, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""ReservedBufferSpaceBitMap"": [ 96, [ ""_RTL_BITMAP"", ""null"" ]],
				 ""ReservedBufferSpace"": [ 112, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""ReservedBufferSpaceSize"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""UserPagesAllocated"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""UserPagesReused"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""EventsLostCount"": [ 136, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""BuffersLostCount"": [ 144, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""SiloState"": [ 152, [ ""Pointer"", ""{\""target\"":\""_ETW_SILODRIVERSTATE\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Links
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 ProcessHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 ProcessObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 NextNotDelivered { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 RealtimeConnectContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 DisconnectEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 DataAvailableEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 UserBufferCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 UserBufferListHead { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt32 BuffersLost { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 EmptyBuffersCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt16 LoggerId { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 88); } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +90]; } }
		public Byte ShutDownRequested
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 90];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte NewBuffersLost
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 90];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte Disconnected
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 90];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte Notified
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 90];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte Wow
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 90];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public _RTL_BITMAP ReservedBufferSpaceBitMap
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt64 ReservedBufferSpace { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt32 ReservedBufferSpaceSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 UserPagesAllocated { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 UserPagesReused { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt64 EventsLostCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 BuffersLostCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 SiloState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
	}
	#endregion
	#region _IA64_DBGKD_CONTROL_SET
 
	public class _IA64_DBGKD_CONTROL_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IA64_DBGKD_CONTROL_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IA64_DBGKD_CONTROL_SET"": [ 20, {
				 ""Continue"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""CurrentSymbolStart"": [ 4, [ ""UInt64"", ""null"" ]],
				 ""CurrentSymbolEnd"": [ 12, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Continue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 CurrentSymbolStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4); } }
		public UInt64 CurrentSymbolEnd { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region tagSWITCH_CONTEXT_ATTRIBUTE
 
	public class tagSWITCH_CONTEXT_ATTRIBUTE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public tagSWITCH_CONTEXT_ATTRIBUTE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""tagSWITCH_CONTEXT_ATTRIBUTE"": [ 24, {
				 ""ulContextUpdateCounter"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""fAllowContextUpdate"": [ 8, [ ""Int32"", ""null"" ]],
				 ""fEnableTrace"": [ 12, [ ""Int32"", ""null"" ]],
				 ""EtwHandle"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ulContextUpdateCounter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Int32 fAllowContextUpdate { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public Int32 fEnableTrace { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 EtwHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _POP_HIBER_CONTEXT
 
	public class _POP_HIBER_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_HIBER_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 456; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_HIBER_CONTEXT"": [ 456, {
				 ""Reset"": [ 0, [ ""Byte"", ""null"" ]],
				 ""HiberFlags"": [ 1, [ ""Byte"", ""null"" ]],
				 ""WroteHiberFile"": [ 2, [ ""Byte"", ""null"" ]],
				 ""KernelPhaseVerificationActive"": [ 3, [ ""Byte"", ""null"" ]],
				 ""InitializationFinished"": [ 4, [ ""Byte"", ""null"" ]],
				 ""NextTableLockHeld"": [ 8, [ ""Int32"", ""null"" ]],
				 ""BootPhaseFinishedBarrier"": [ 12, [ ""Int32"", ""null"" ]],
				 ""KernelResumeFinishedBarrier"": [ 16, [ ""Int32"", ""null"" ]],
				 ""HvCaptureReadyBarrier"": [ 20, [ ""Int32"", ""null"" ]],
				 ""HvCaptureCompletedBarrier"": [ 24, [ ""Int32"", ""null"" ]],
				 ""MapFrozen"": [ 28, [ ""Byte"", ""null"" ]],
				 ""DiscardMap"": [ 32, [ ""_RTL_BITMAP"", ""null"" ]],
				 ""KernelPhaseMap"": [ 32, [ ""_RTL_BITMAP"", ""null"" ]],
				 ""BootPhaseMap"": [ 48, [ ""_RTL_BITMAP"", ""null"" ]],
				 ""ClonedRanges"": [ 64, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ClonedRangeCount"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""ClonedPageCount"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""CurrentMap"": [ 96, [ ""Pointer"", ""{\""target\"":\""_RTL_BITMAP\""}"" ]],
				 ""NextCloneRange"": [ 104, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""NextPreserve"": [ 112, [ ""UInt64"", ""null"" ]],
				 ""LoaderMdl"": [ 120, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""AllocatedMdl"": [ 128, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""PagesOut"": [ 136, [ ""UInt64"", ""null"" ]],
				 ""IoPages"": [ 144, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IoPagesCount"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""CurrentMcb"": [ 160, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DumpStack"": [ 168, [ ""Pointer"", ""{\""target\"":\""_DUMP_STACK_CONTEXT\""}"" ]],
				 ""WakeState"": [ 176, [ ""Pointer"", ""{\""target\"":\""_KPROCESSOR_STATE\""}"" ]],
				 ""IoProgress"": [ 184, [ ""UInt32"", ""null"" ]],
				 ""Status"": [ 188, [ ""Int32"", ""null"" ]],
				 ""GraphicsProc"": [ 192, [ ""UInt32"", ""null"" ]],
				 ""MemoryImage"": [ 200, [ ""Pointer"", ""{\""target\"":\""PO_MEMORY_IMAGE\""}"" ]],
				 ""PerformanceStats"": [ 208, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""BootLoaderLogMdl"": [ 216, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""FirmwareRuntimeInformationMdl"": [ 224, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""FirmwareRuntimeInformationVa"": [ 232, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ResumeContext"": [ 240, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ResumeContextPages"": [ 248, [ ""UInt32"", ""null"" ]],
				 ""SecurePages"": [ 252, [ ""UInt32"", ""null"" ]],
				 ""ProcessorCount"": [ 256, [ ""UInt32"", ""null"" ]],
				 ""ProcessorContext"": [ 264, [ ""Pointer"", ""{\""target\"":\""_POP_PER_PROCESSOR_CONTEXT\""}"" ]],
				 ""ProdConsBuffer"": [ 272, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""ProdConsSize"": [ 280, [ ""UInt32"", ""null"" ]],
				 ""MaxDataPages"": [ 284, [ ""UInt32"", ""null"" ]],
				 ""ExtraBuffer"": [ 288, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ExtraBufferSize"": [ 296, [ ""UInt64"", ""null"" ]],
				 ""ExtraMapVa"": [ 304, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BitlockerKeyPFN"": [ 312, [ ""UInt64"", ""null"" ]],
				 ""IoInfo"": [ 320, [ ""_POP_IO_INFO"", ""null"" ]],
				 ""IoChecksums"": [ 432, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""IoChecksumsSize"": [ 440, [ ""UInt64"", ""null"" ]],
				 ""HardwareConfigurationSignature"": [ 448, [ ""UInt32"", ""null"" ]],
				 ""IumEnabled"": [ 452, [ ""Byte"", ""null"" ]],
				 ""SecureBoot"": [ 453, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Reset{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte HiberFlags{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte WroteHiberFile{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte KernelPhaseVerificationActive{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte InitializationFinished{ get { return _StructureData[_BufferOffset +4]; } }
		public Int32 NextTableLockHeld { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public Int32 BootPhaseFinishedBarrier { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 12); } }
		public Int32 KernelResumeFinishedBarrier { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public Int32 HvCaptureReadyBarrier { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 20); } }
		public Int32 HvCaptureCompletedBarrier { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 24); } }
		public Byte MapFrozen{ get { return _StructureData[_BufferOffset +28]; } }
		public _RTL_BITMAP DiscardMap
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _RTL_BITMAP KernelPhaseMap
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _RTL_BITMAP BootPhaseMap
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _LIST_ENTRY ClonedRanges
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt32 ClonedRangeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt64 ClonedPageCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 CurrentMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 NextCloneRange { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 NextPreserve { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 LoaderMdl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 AllocatedMdl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 PagesOut { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 IoPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt32 IoPagesCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public UInt64 CurrentMcb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 DumpStack { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 WakeState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt32 IoProgress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 184); } }
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 188); } }
		public UInt32 GraphicsProc { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public UInt64 MemoryImage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 PerformanceStats { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 BootLoaderLogMdl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 FirmwareRuntimeInformationMdl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 FirmwareRuntimeInformationVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 ResumeContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt32 ResumeContextPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 248); } }
		public UInt32 SecurePages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 252); } }
		public UInt32 ProcessorCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 256); } }
		public UInt64 ProcessorContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 264); } }
		public UInt64 ProdConsBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public UInt32 ProdConsSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 280); } }
		public UInt32 MaxDataPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 284); } }
		public UInt64 ExtraBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 288); } }
		public UInt64 ExtraBufferSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 296); } }
		public UInt64 ExtraMapVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 304); } }
		public UInt64 BitlockerKeyPFN { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 312); } }
		public _POP_IO_INFO IoInfo
		{
			get
			{
				_POP_IO_INFO returnValue = new _POP_IO_INFO(_StructureData, _BufferOffset + 320);
				return returnValue;
			}
		}
		public UInt64 IoChecksums { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 432); } }
		public UInt64 IoChecksumsSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 440); } }
		public UInt32 HardwareConfigurationSignature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 448); } }
		public Byte IumEnabled{ get { return _StructureData[_BufferOffset +452]; } }
		public Byte SecureBoot{ get { return _StructureData[_BufferOffset +453]; } }
	}
	#endregion
	#region _SEP_CACHED_HANDLES_TABLE
 
	public class _SEP_CACHED_HANDLES_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEP_CACHED_HANDLES_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEP_CACHED_HANDLES_TABLE"": [ 16, {
				 ""Lock"": [ 0, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""HashTable"": [ 8, [ ""Pointer"", ""{\""target\"":\""_RTL_DYNAMIC_HASH_TABLE\""}"" ]] }]
				 }
				)";
			}
		}
		public _EX_PUSH_LOCK Lock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 HashTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _MI_HUGE_SYSTEM_VIEW_HEAD
 
	public class _MI_HUGE_SYSTEM_VIEW_HEAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_HUGE_SYSTEM_VIEW_HEAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_HUGE_SYSTEM_VIEW_HEAD"": [ 16, {
				 ""ViewRoot"": [ 0, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""ViewCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Lock"": [ 12, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_AVL_TREE ViewRoot
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 ViewCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Int32 Lock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _PPM_FFH_THROTTLE_STATE_INFO
 
	public class _PPM_FFH_THROTTLE_STATE_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPM_FFH_THROTTLE_STATE_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPM_FFH_THROTTLE_STATE_INFO"": [ 32, {
				 ""EnableLogging"": [ 0, [ ""Byte"", ""null"" ]],
				 ""MismatchCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Initialized"": [ 8, [ ""Byte"", ""null"" ]],
				 ""LastValue"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""LastLogTickCount"": [ 24, [ ""_LARGE_INTEGER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte EnableLogging{ get { return _StructureData[_BufferOffset +0]; } }
		public UInt32 MismatchCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public Byte Initialized{ get { return _StructureData[_BufferOffset +8]; } }
		public UInt64 LastValue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _LARGE_INTEGER LastLogTickCount
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _VI_DEADLOCK_NODE
 
	public class _VI_DEADLOCK_NODE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VI_DEADLOCK_NODE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 208; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VI_DEADLOCK_NODE"": [ 208, {
				 ""Parent"": [ 0, [ ""Pointer"", ""{\""target\"":\""_VI_DEADLOCK_NODE\""}"" ]],
				 ""ChildrenList"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SiblingsList"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ResourceList"": [ 40, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FreeListEntry"": [ 40, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Root"": [ 56, [ ""Pointer"", ""{\""target\"":\""_VI_DEADLOCK_RESOURCE\""}"" ]],
				 ""ThreadEntry"": [ 64, [ ""Pointer"", ""{\""target\"":\""_VI_DEADLOCK_THREAD\""}"" ]],
				 ""u1"": [ 72, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""ChildrenCount"": [ 76, [ ""Int32"", ""null"" ]],
				 ""StackTrace"": [ 80, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""ParentStackTrace"": [ 144, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Parent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _LIST_ENTRY ChildrenList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _LIST_ENTRY SiblingsList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LIST_ENTRY ResourceList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _LIST_ENTRY FreeListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt64 Root { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 ThreadEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public Int32 ChildrenCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 76); } }
		public UInt64[] StackTrace
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				int size = 8;
				for(int i=0; i<8; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt64[] ParentStackTrace
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				int size = 8;
				for(int i=0; i<8; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 144);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_TIME_ZONE_INFORMATION
 
	public class _RTL_TIME_ZONE_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_TIME_ZONE_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 172; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_TIME_ZONE_INFORMATION"": [ 172, {
				 ""Bias"": [ 0, [ ""Int32"", ""null"" ]],
				 ""StandardName"": [ 4, [ ""Array"", ""{\""count\"":32,\""target\"":\""UInt16\""}"" ]],
				 ""StandardStart"": [ 68, [ ""_TIME_FIELDS"", ""null"" ]],
				 ""StandardBias"": [ 84, [ ""Int32"", ""null"" ]],
				 ""DaylightName"": [ 88, [ ""Array"", ""{\""count\"":32,\""target\"":\""UInt16\""}"" ]],
				 ""DaylightStart"": [ 152, [ ""_TIME_FIELDS"", ""null"" ]],
				 ""DaylightBias"": [ 168, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 Bias { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16[] StandardName
		{
			get
			{
				UInt16[] returnValue = new UInt16[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 4);
				return returnValue;
			}
		}
		public _TIME_FIELDS StandardStart
		{
			get
			{
				_TIME_FIELDS returnValue = new _TIME_FIELDS(_StructureData, _BufferOffset + 68);
				return returnValue;
			}
		}
		public Int32 StandardBias { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 84); } }
		public UInt16[] DaylightName
		{
			get
			{
				UInt16[] returnValue = new UInt16[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 88);
				return returnValue;
			}
		}
		public _TIME_FIELDS DaylightStart
		{
			get
			{
				_TIME_FIELDS returnValue = new _TIME_FIELDS(_StructureData, _BufferOffset + 152);
				return returnValue;
			}
		}
		public Int32 DaylightBias { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 168); } }
	}
	#endregion
	#region _VF_AVL_TREE_NODE
 
	public class _VF_AVL_TREE_NODE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VF_AVL_TREE_NODE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VF_AVL_TREE_NODE"": [ 16, {
				 ""p"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RangeSize"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 p { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 RangeSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _MI_PARTITION_COMMIT
 
	public class _MI_PARTITION_COMMIT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PARTITION_COMMIT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PARTITION_COMMIT"": [ 64, {
				 ""PeakCommitment"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""TotalCommitLimitMaximum"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Popups"": [ 16, [ ""Array"", ""{\""count\"":2,\""target\"":\""Int32\""}"" ]],
				 ""LowCommitThreshold"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""HighCommitThreshold"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""EventLock"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""SystemCommitReserve"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""OverCommit"": [ 56, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PeakCommitment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 TotalCommitLimitMaximum { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public Int32[] Popups
		{
			get
			{
				Int32[] returnValue = new Int32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToInt32(_StructureData, (i * sizeof(Int32)) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 LowCommitThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 HighCommitThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 EventLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 SystemCommitReserve { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 OverCommit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
	}
	#endregion
	#region _TRIAGE_DEVICE_NODE
 
	public class _TRIAGE_DEVICE_NODE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TRIAGE_DEVICE_NODE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TRIAGE_DEVICE_NODE"": [ 88, {
				 ""Sibling"": [ 0, [ ""Pointer"", ""{\""target\"":\""_TRIAGE_DEVICE_NODE\""}"" ]],
				 ""Child"": [ 8, [ ""Pointer"", ""{\""target\"":\""_TRIAGE_DEVICE_NODE\""}"" ]],
				 ""Parent"": [ 16, [ ""Pointer"", ""{\""target\"":\""_TRIAGE_DEVICE_NODE\""}"" ]],
				 ""LastChild"": [ 24, [ ""Pointer"", ""{\""target\"":\""_TRIAGE_DEVICE_NODE\""}"" ]],
				 ""PhysicalDeviceObject"": [ 32, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""InstancePath"": [ 40, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ServiceName"": [ 56, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""PendingIrp"": [ 72, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""FxDevice"": [ 80, [ ""Pointer"", ""{\""target\"":\""_TRIAGE_POP_FX_DEVICE\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Sibling { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Child { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Parent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 LastChild { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 PhysicalDeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _UNICODE_STRING InstancePath
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _UNICODE_STRING ServiceName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt64 PendingIrp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 FxDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
	}
	#endregion
	#region _DIAGNOSTIC_BUFFER
 
	public class _DIAGNOSTIC_BUFFER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DIAGNOSTIC_BUFFER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DIAGNOSTIC_BUFFER"": [ 40, {
				 ""Size"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""CallerType"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_REQUESTER_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ProcessImageNameOffset"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""ProcessId"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""ServiceTag"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""DeviceDescriptionOffset"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""DevicePathOffset"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""ReasonOffset"": [ 32, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Size { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _REQUESTER_TYPE CallerType { get { return (_REQUESTER_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 ProcessImageNameOffset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 ProcessId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 ServiceTag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt64 DeviceDescriptionOffset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 DevicePathOffset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ReasonOffset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _MMEXTEND_INFO
 
	public class _MMEXTEND_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMEXTEND_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMEXTEND_INFO"": [ 16, {
				 ""CommittedSize"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""ReferenceCount"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 CommittedSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 ReferenceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _ARBITER_ALTERNATIVE
 
	public class _ARBITER_ALTERNATIVE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_ALTERNATIVE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_ALTERNATIVE"": [ 64, {
				 ""Minimum"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Maximum"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Length"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""Alignment"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""Priority"": [ 32, [ ""Int32"", ""null"" ]],
				 ""Flags"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Descriptor"": [ 40, [ ""Pointer"", ""{\""target\"":\""_IO_RESOURCE_DESCRIPTOR\""}"" ]],
				 ""Reserved"": [ 48, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Minimum { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Maximum { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Length { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Alignment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public Int32 Priority { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt64 Descriptor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt32[] Reserved
		{
			get
			{
				UInt32[] returnValue = new UInt32[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 48);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DBGKD_GET_VERSION64
 
	public class _DBGKD_GET_VERSION64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_GET_VERSION64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_GET_VERSION64"": [ 40, {
				 ""MajorVersion"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MinorVersion"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""ProtocolVersion"": [ 4, [ ""Byte"", ""null"" ]],
				 ""KdSecondaryVersion"": [ 5, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""MachineType"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""MaxPacketType"": [ 10, [ ""Byte"", ""null"" ]],
				 ""MaxStateChange"": [ 11, [ ""Byte"", ""null"" ]],
				 ""MaxManipulate"": [ 12, [ ""Byte"", ""null"" ]],
				 ""Simulation"": [ 13, [ ""Byte"", ""null"" ]],
				 ""Unused"": [ 14, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""KernBase"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""PsLoadedModuleList"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""DebuggerDataList"": [ 32, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 MajorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 MinorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public Byte ProtocolVersion{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte KdSecondaryVersion{ get { return _StructureData[_BufferOffset +5]; } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt16 MachineType { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public Byte MaxPacketType{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte MaxStateChange{ get { return _StructureData[_BufferOffset +11]; } }
		public Byte MaxManipulate{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte Simulation{ get { return _StructureData[_BufferOffset +13]; } }
		public UInt16[] Unused
		{
			get
			{
				UInt16[] returnValue = new UInt16[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 14);
				return returnValue;
			}
		}
		public UInt64 KernBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 PsLoadedModuleList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 DebuggerDataList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _POP_SHUTDOWN_BUG_CHECK
 
	public class _POP_SHUTDOWN_BUG_CHECK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_SHUTDOWN_BUG_CHECK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_SHUTDOWN_BUG_CHECK"": [ 72, {
				 ""InitiatingThread"": [ 0, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""InitiatingProcess"": [ 8, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""ThreadId"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProcessId"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Code"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Parameter1"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""Parameter2"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""Parameter3"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""Parameter4"": [ 64, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 InitiatingThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 InitiatingProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ThreadId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 ProcessId { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 Code { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 Parameter1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 Parameter2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Parameter3 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 Parameter4 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _OBJECT_CREATE_INFORMATION
 
	public class _OBJECT_CREATE_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_CREATE_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_CREATE_INFORMATION"": [ 64, {
				 ""Attributes"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""RootDirectory"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProbeMode"": [ 16, [ ""Char"", ""null"" ]],
				 ""PagedPoolCharge"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""NonPagedPoolCharge"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""SecurityDescriptorCharge"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""SecurityDescriptor"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SecurityQos"": [ 40, [ ""Pointer"", ""{\""target\"":\""_SECURITY_QUALITY_OF_SERVICE\""}"" ]],
				 ""SecurityQualityOfService"": [ 48, [ ""_SECURITY_QUALITY_OF_SERVICE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Attributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 RootDirectory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public Char ProbeMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 16); } }
		public UInt32 PagedPoolCharge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 NonPagedPoolCharge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 SecurityDescriptorCharge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt64 SecurityDescriptor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 SecurityQos { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _SECURITY_QUALITY_OF_SERVICE SecurityQualityOfService
		{
			get
			{
				_SECURITY_QUALITY_OF_SERVICE returnValue = new _SECURITY_QUALITY_OF_SERVICE(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ETW_FILTER_STRING_TOKEN_ELEMENT
 
	public class _ETW_FILTER_STRING_TOKEN_ELEMENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_FILTER_STRING_TOKEN_ELEMENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_FILTER_STRING_TOKEN_ELEMENT"": [ 16, {
				 ""Length"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""String"": [ 8, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Length { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt64 String { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _VI_DEADLOCK_GLOBALS
 
	public class _VI_DEADLOCK_GLOBALS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VI_DEADLOCK_GLOBALS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 33152; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VI_DEADLOCK_GLOBALS"": [ 33152, {
				 ""TimeAcquire"": [ 0, [ ""Int64"", ""null"" ]],
				 ""TimeRelease"": [ 8, [ ""Int64"", ""null"" ]],
				 ""ResourceDatabase"": [ 16, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""ResourceDatabaseCount"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""ResourceAddressRange"": [ 32, [ ""Array"", ""{\""count\"":1023,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""ThreadDatabase"": [ 16400, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""ThreadDatabaseCount"": [ 16408, [ ""UInt64"", ""null"" ]],
				 ""ThreadAddressRange"": [ 16416, [ ""Array"", ""{\""count\"":1023,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""AllocationFailures"": [ 32784, [ ""UInt32"", ""null"" ]],
				 ""NodesTrimmedBasedOnAge"": [ 32788, [ ""UInt32"", ""null"" ]],
				 ""NodesTrimmedBasedOnCount"": [ 32792, [ ""UInt32"", ""null"" ]],
				 ""NodesSearched"": [ 32796, [ ""UInt32"", ""null"" ]],
				 ""MaxNodesSearched"": [ 32800, [ ""UInt32"", ""null"" ]],
				 ""SequenceNumber"": [ 32804, [ ""UInt32"", ""null"" ]],
				 ""RecursionDepthLimit"": [ 32808, [ ""UInt32"", ""null"" ]],
				 ""SearchedNodesLimit"": [ 32812, [ ""UInt32"", ""null"" ]],
				 ""DepthLimitHits"": [ 32816, [ ""UInt32"", ""null"" ]],
				 ""SearchLimitHits"": [ 32820, [ ""UInt32"", ""null"" ]],
				 ""StackLimitHits"": [ 32824, [ ""UInt32"", ""null"" ]],
				 ""ABC_ACB_Skipped"": [ 32828, [ ""UInt32"", ""null"" ]],
				 ""OutOfOrderReleases"": [ 32832, [ ""UInt32"", ""null"" ]],
				 ""NodesReleasedOutOfOrder"": [ 32836, [ ""UInt32"", ""null"" ]],
				 ""TotalReleases"": [ 32840, [ ""UInt32"", ""null"" ]],
				 ""RootNodesDeleted"": [ 32844, [ ""UInt32"", ""null"" ]],
				 ""ForgetHistoryCounter"": [ 32848, [ ""UInt32"", ""null"" ]],
				 ""Instigator"": [ 32856, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberOfParticipants"": [ 32864, [ ""UInt32"", ""null"" ]],
				 ""Participant"": [ 32872, [ ""Array"", ""{\""count\"":32,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_VI_DEADLOCK_NODE\""}}"" ]],
				 ""ChildrenCountWatermark"": [ 33128, [ ""Int32"", ""null"" ]],
				 ""StackType"": [ 33132, [ ""Enumeration"", ""{\""enum_name\"":\""_KERNEL_STACK_LIMITS\"",\""target\"":\""UInt32\""}"" ]],
				 ""StackLowLimit"": [ 33136, [ ""UInt64"", ""null"" ]],
				 ""StackHighLimit"": [ 33144, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int64 TimeAcquire { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 0); } }
		public Int64 TimeRelease { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ResourceDatabase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 ResourceDatabaseCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _VF_ADDRESS_RANGE[] ResourceAddressRange
		{
			get
			{
				_VF_ADDRESS_RANGE[] returnValue = new _VF_ADDRESS_RANGE[1023];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1023; i++ )
					returnValue[i] = new _VF_ADDRESS_RANGE(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 ThreadDatabase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16400); } }
		public UInt64 ThreadDatabaseCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16408); } }
		public _VF_ADDRESS_RANGE[] ThreadAddressRange
		{
			get
			{
				_VF_ADDRESS_RANGE[] returnValue = new _VF_ADDRESS_RANGE[1023];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1023; i++ )
					returnValue[i] = new _VF_ADDRESS_RANGE(_StructureData, (i * size) + _BufferOffset + 16416);
				return returnValue;
			}
		}
		public UInt32 AllocationFailures { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32784); } }
		public UInt32 NodesTrimmedBasedOnAge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32788); } }
		public UInt32 NodesTrimmedBasedOnCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32792); } }
		public UInt32 NodesSearched { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32796); } }
		public UInt32 MaxNodesSearched { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32800); } }
		public UInt32 SequenceNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32804); } }
		public UInt32 RecursionDepthLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32808); } }
		public UInt32 SearchedNodesLimit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32812); } }
		public UInt32 DepthLimitHits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32816); } }
		public UInt32 SearchLimitHits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32820); } }
		public UInt32 StackLimitHits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32824); } }
		public UInt32 ABC_ACB_Skipped { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32828); } }
		public UInt32 OutOfOrderReleases { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32832); } }
		public UInt32 NodesReleasedOutOfOrder { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32836); } }
		public UInt32 TotalReleases { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32840); } }
		public UInt32 RootNodesDeleted { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32844); } }
		public UInt32 ForgetHistoryCounter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32848); } }
		public UInt64 Instigator { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32856); } }
		public UInt32 NumberOfParticipants { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32864); } }
		public _VI_DEADLOCK_NODE[] Participant
		{
			get
			{
				_VI_DEADLOCK_NODE[] returnValue = new _VI_DEADLOCK_NODE[32];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<32; i++ )
					returnValue[i] = new _VI_DEADLOCK_NODE(_StructureData, (i * size) + _BufferOffset + 32872);
				return returnValue;
			}
		}
		public Int32 ChildrenCountWatermark { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 33128); } }
		public _KERNEL_STACK_LIMITS StackType { get { return (_KERNEL_STACK_LIMITS)BitConverter.ToUInt32(_StructureData, _BufferOffset + 33132); } }
		public UInt64 StackLowLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 33136); } }
		public UInt64 StackHighLimit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 33144); } }
	}
	#endregion
	#region _KTIMER
 
	public class _KTIMER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTIMER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTIMER"": [ 64, {
				 ""Header"": [ 0, [ ""_DISPATCHER_HEADER"", ""null"" ]],
				 ""DueTime"": [ 24, [ ""_ULARGE_INTEGER"", ""null"" ]],
				 ""TimerListEntry"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Dpc"": [ 48, [ ""Pointer"", ""{\""target\"":\""_KDPC\""}"" ]],
				 ""Processor"": [ 56, [ ""UInt16"", ""null"" ]],
				 ""TimerType"": [ 58, [ ""UInt16"", ""null"" ]],
				 ""Period"": [ 60, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _DISPATCHER_HEADER Header
		{
			get
			{
				_DISPATCHER_HEADER returnValue = new _DISPATCHER_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ULARGE_INTEGER DueTime
		{
			get
			{
				_ULARGE_INTEGER returnValue = new _ULARGE_INTEGER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LIST_ENTRY TimerListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 Dpc { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt16 Processor { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 56); } }
		public UInt16 TimerType { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 58); } }
		public UInt32 Period { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
	}
	#endregion
	#region _IMAGE_SECURITY_CONTEXT
 
	public class _IMAGE_SECURITY_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_SECURITY_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_SECURITY_CONTEXT"": [ 8, {
				 ""PageHashes"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Value"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""SecurityBeingCreated"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""SecurityMandatory"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""PageHashPointer"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":3,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PageHashes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Value { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 SecurityBeingCreated
		{
			get
			{
				// start: 0  end: 2  Mask: 0000000000000011
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 3) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 SecurityMandatory
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 PageHashPointer
		{
			get
			{
				// start: 3  end: 64  Mask: 1111111111111111111111111111111111111111111111111111111111111000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744073709551608) >> 3;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _ARBITER_LIST_ENTRY
 
	public class _ARBITER_LIST_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_LIST_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_LIST_ENTRY"": [ 96, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""AlternativeCount"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Alternatives"": [ 24, [ ""Pointer"", ""{\""target\"":\""_IO_RESOURCE_DESCRIPTOR\""}"" ]],
				 ""PhysicalDeviceObject"": [ 32, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""RequestSource"": [ 40, [ ""Enumeration"", ""{\""enum_name\"":\""_ARBITER_REQUEST_SOURCE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""WorkSpace"": [ 48, [ ""Int64"", ""null"" ]],
				 ""InterfaceType"": [ 56, [ ""Enumeration"", ""{\""enum_name\"":\""_INTERFACE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""SlotNumber"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""BusNumber"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""Assignment"": [ 72, [ ""Pointer"", ""{\""target\"":\""_CM_PARTIAL_RESOURCE_DESCRIPTOR\""}"" ]],
				 ""SelectedAlternative"": [ 80, [ ""Pointer"", ""{\""target\"":\""_IO_RESOURCE_DESCRIPTOR\""}"" ]],
				 ""Result"": [ 88, [ ""Enumeration"", ""{\""enum_name\"":\""_ARBITER_RESULT\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 AlternativeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 Alternatives { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 PhysicalDeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _ARBITER_REQUEST_SOURCE RequestSource { get { return (_ARBITER_REQUEST_SOURCE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public Int64 WorkSpace { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 48); } }
		public _INTERFACE_TYPE InterfaceType { get { return (_INTERFACE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 SlotNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt64 Assignment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 SelectedAlternative { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public _ARBITER_RESULT Result { get { return (_ARBITER_RESULT)BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
	}
	#endregion
	#region _MI_PAGING_IO_STATE
 
	public class _MI_PAGING_IO_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PAGING_IO_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 176; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PAGING_IO_STATE"": [ 176, {
				 ""PageFileHead"": [ 0, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""PageFileHeadSpinLock"": [ 8, [ ""Int32"", ""null"" ]],
				 ""PrefetchSeekThreshold"": [ 12, [ ""Int32"", ""null"" ]],
				 ""InPageSinglePages"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""InPageSupportSListHead"": [ 32, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""ReservedInPageSupportSListHead"": [ 64, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""InPageSupportSListMinimum"": [ 96, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""FirstReservedInPageBlock"": [ 104, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_MMINPAGE_SUPPORT\""}}"" ]],
				 ""LastReservedInPageBlock"": [ 120, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_MMINPAGE_SUPPORT\""}}"" ]],
				 ""ReservedPtes"": [ 136, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""ReservedPtesLock"": [ 144, [ ""UInt64"", ""null"" ]],
				 ""ReservedPtesBitBuffer"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""DelayPageFaults"": [ 156, [ ""Int32"", ""null"" ]],
				 ""FileCompressionBoundary"": [ 160, [ ""UInt32"", ""null"" ]],
				 ""MdlsAdjusted"": [ 164, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_AVL_TREE PageFileHead
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int32 PageFileHeadSpinLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public Int32 PrefetchSeekThreshold { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 InPageSinglePages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _SLIST_HEADER[] InPageSupportSListHead
		{
			get
			{
				_SLIST_HEADER[] returnValue = new _SLIST_HEADER[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _SLIST_HEADER(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
		public _SLIST_HEADER[] ReservedInPageSupportSListHead
		{
			get
			{
				_SLIST_HEADER[] returnValue = new _SLIST_HEADER[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _SLIST_HEADER(_StructureData, (i * size) + _BufferOffset + 64);
				return returnValue;
			}
		}
		public Byte[] InPageSupportSListMinimum
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 96];
				return returnValue;
			}
		}
		public _MMINPAGE_SUPPORT[] FirstReservedInPageBlock
		{
			get
			{
				_MMINPAGE_SUPPORT[] returnValue = new _MMINPAGE_SUPPORT[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _MMINPAGE_SUPPORT(_StructureData, (i * size) + _BufferOffset + 104);
				return returnValue;
			}
		}
		public _MMINPAGE_SUPPORT[] LastReservedInPageBlock
		{
			get
			{
				_MMINPAGE_SUPPORT[] returnValue = new _MMINPAGE_SUPPORT[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _MMINPAGE_SUPPORT(_StructureData, (i * size) + _BufferOffset + 120);
				return returnValue;
			}
		}
		public UInt64 ReservedPtes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 ReservedPtesLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt32 ReservedPtesBitBuffer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public Int32 DelayPageFaults { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 156); } }
		public UInt32 FileCompressionBoundary { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 160); } }
		public Byte MdlsAdjusted{ get { return _StructureData[_BufferOffset +164]; } }
	}
	#endregion
	#region _MI_SLAB_ALLOCATOR_ENTRY
 
	public class _MI_SLAB_ALLOCATOR_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SLAB_ALLOCATOR_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SLAB_ALLOCATOR_ENTRY"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _MI_SLAB_ALLOCATOR_CONTEXT
 
	public class _MI_SLAB_ALLOCATOR_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SLAB_ALLOCATOR_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 120; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SLAB_ALLOCATOR_CONTEXT"": [ 120, {
				 ""AllocationsTree"": [ 0, [ ""_RTL_RB_TREE"", ""null"" ]],
				 ""Lock"": [ 16, [ ""Int32"", ""null"" ]],
				 ""SlabEntryHint"": [ 24, [ ""Pointer"", ""{\""target\"":\""_MI_SLAB_ALLOCATOR_ENTRY\""}"" ]],
				 ""FreePageCount"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""SlabEntryCount"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""Type"": [ 48, [ ""Enumeration"", ""{\""enum_name\"":\""_MI_SLAB_ALLOCATOR_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Protection"": [ 52, [ ""Enumeration"", ""{\""enum_name\"":\""_MI_SLAB_ALLOCATOR_PROTECTION\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 56, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""StandbyList"": [ 64, [ ""_MMPFNLIST"", ""null"" ]],
				 ""LastReplenishTime"": [ 104, [ ""UInt64"", ""null"" ]],
				 ""LastFailureTime"": [ 112, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_RB_TREE AllocationsTree
		{
			get
			{
				_RTL_RB_TREE returnValue = new _RTL_RB_TREE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int32 Lock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 SlabEntryHint { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 FreePageCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 SlabEntryCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _MI_SLAB_ALLOCATOR_TYPE Type { get { return (_MI_SLAB_ALLOCATOR_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public _MI_SLAB_ALLOCATOR_PROTECTION Protection { get { return (_MI_SLAB_ALLOCATOR_PROTECTION)BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public _ANONYMOUS_TAG Flags
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _MMPFNLIST StandbyList
		{
			get
			{
				_MMPFNLIST returnValue = new _MMPFNLIST(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt64 LastReplenishTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 LastFailureTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
	}
	#endregion
	#region _MI_STANDBY_STATE
 
	public class _MI_STANDBY_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_STANDBY_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 144; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_STANDBY_STATE"": [ 144, {
				 ""FirstDecayPage"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""PfnDecayFreeSList"": [ 16, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""PfnRepurposeLog"": [ 32, [ ""Pointer"", ""{\""target\"":\""_MM_PAGE_ACCESS_INFO_HEADER\""}"" ]],
				 ""AllocatePfnRepurposeDpc"": [ 40, [ ""_KDPC"", ""null"" ]],
				 ""PageHeatListSlist"": [ 112, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""PageHeatListDisableAllocation"": [ 128, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 FirstDecayPage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _SLIST_HEADER PfnDecayFreeSList
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 PfnRepurposeLog { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _KDPC AllocatePfnRepurposeDpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _SLIST_HEADER PageHeatListSlist
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public Int32 PageHeatListDisableAllocation { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 128); } }
	}
	#endregion
	#region _MI_DECAY_TIMER_LINKAGE
 
	public class _MI_DECAY_TIMER_LINKAGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_DECAY_TIMER_LINKAGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_DECAY_TIMER_LINKAGE"": [ 8, {
				 ""Spare0"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""PreviousDecayPfn"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""Spare1"": [ 0, [ ""BitField"", ""{\""end_bit\"":33,\""start_bit\"":32,\""target\"":\""UInt64\""}"" ]],
				 ""NextDecayPfn"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":33,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Spare0
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 PreviousDecayPfn
		{
			get
			{
				// start: 1  end: 32  Mask: 11111111111111111111111111111110
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967294) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 Spare1
		{
			get
			{
				// start: 32  end: 33  Mask: 100000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967296) >> 32;
				return (UInt64)value2;
			}
		}
		public UInt64 NextDecayPfn
		{
			get
			{
				// start: 33  end: 64  Mask: 1111111111111111111111111111111000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744065119617024) >> 33;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _SECURITY_DESCRIPTOR_RELATIVE
 
	public class _SECURITY_DESCRIPTOR_RELATIVE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECURITY_DESCRIPTOR_RELATIVE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECURITY_DESCRIPTOR_RELATIVE"": [ 20, {
				 ""Revision"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Sbz1"": [ 1, [ ""Byte"", ""null"" ]],
				 ""Control"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Owner"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Group"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Sacl"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Dacl"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Revision{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Sbz1{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt16 Control { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Owner { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Group { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Sacl { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Dacl { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _PRIVATE_CACHE_MAP_FLAGS
 
	public class _PRIVATE_CACHE_MAP_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PRIVATE_CACHE_MAP_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PRIVATE_CACHE_MAP_FLAGS"": [ 4, {
				 ""DontUse"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ReadAheadActive"": [ 0, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""ReadAheadEnabled"": [ 0, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt32\""}"" ]],
				 ""PagePriority"": [ 0, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""PipelineReadAheads"": [ 0, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""Available"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DontUse
		{
			get
			{
				// start: 0  end: 16  Mask: 1111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65535) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ReadAheadActive
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65536) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 ReadAheadEnabled
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 131072) >> 17;
				return (UInt32)value2;
			}
		}
		public UInt32 PagePriority
		{
			get
			{
				// start: 18  end: 21  Mask: 111000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1835008) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 PipelineReadAheads
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 Available
		{
			get
			{
				// start: 22  end: 32  Mask: 11111111110000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4290772992) >> 22;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _KENTROPY_TIMING_STATE
 
	public class _KENTROPY_TIMING_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KENTROPY_TIMING_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 336; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KENTROPY_TIMING_STATE"": [ 336, {
				 ""EntropyCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Buffer"": [ 4, [ ""Array"", ""{\""count\"":64,\""target\"":\""UInt32\""}"" ]],
				 ""Dpc"": [ 264, [ ""_KDPC"", ""null"" ]],
				 ""LastDeliveredBuffer"": [ 328, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 EntropyCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32[] Buffer
		{
			get
			{
				UInt32[] returnValue = new UInt32[64];
				for(int i=0; i<64; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 4);
				return returnValue;
			}
		}
		public _KDPC Dpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 264);
				return returnValue;
			}
		}
		public UInt32 LastDeliveredBuffer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 328); } }
	}
	#endregion
	#region _DBGKD_CONTEXT_EX
 
	public class _DBGKD_CONTEXT_EX
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_CONTEXT_EX(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_CONTEXT_EX"": [ 12, {
				 ""Offset"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ByteCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""BytesCopied"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Offset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ByteCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 BytesCopied { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _PROCESSOR_IDLE_DEPENDENCY
 
	public class _PROCESSOR_IDLE_DEPENDENCY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCESSOR_IDLE_DEPENDENCY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCESSOR_IDLE_DEPENDENCY"": [ 8, {
				 ""ProcessorIndex"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ExpectedState"": [ 4, [ ""Byte"", ""null"" ]],
				 ""AllowDeeperStates"": [ 5, [ ""Byte"", ""null"" ]],
				 ""LooseDependency"": [ 6, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ProcessorIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte ExpectedState{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte AllowDeeperStates{ get { return _StructureData[_BufferOffset +5]; } }
		public Byte LooseDependency{ get { return _StructureData[_BufferOffset +6]; } }
	}
	#endregion
	#region _TRIAGE_9F_POWER
 
	public class _TRIAGE_9F_POWER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TRIAGE_9F_POWER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TRIAGE_9F_POWER"": [ 40, {
				 ""Signature"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Revision"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""IrpList"": [ 8, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""ThreadList"": [ 16, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""DelayedWorkQueue"": [ 24, [ ""Pointer"", ""{\""target\"":\""_TRIAGE_EX_WORK_QUEUE\""}"" ]],
				 ""DelayedIoWorkQueue"": [ 32, [ ""Pointer"", ""{\""target\"":\""_TRIAGE_EX_WORK_QUEUE\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Signature { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Revision { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 IrpList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ThreadList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 DelayedWorkQueue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 DelayedIoWorkQueue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _MMMOD_WRITER_MDL_ENTRY
 
	public class _MMMOD_WRITER_MDL_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMMOD_WRITER_MDL_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 264; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMMOD_WRITER_MDL_ENTRY"": [ 264, {
				 ""Links"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""u"": [ 16, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""Irp"": [ 32, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""u1"": [ 40, [ ""_MODWRITER_FLAGS"", ""null"" ]],
				 ""StoreWriteRefCount"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""StoreWriteCompletionApc"": [ 48, [ ""_KAPC"", ""null"" ]],
				 ""ByteCount"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""ChargedPages"": [ 140, [ ""UInt32"", ""null"" ]],
				 ""PagingFile"": [ 144, [ ""Pointer"", ""{\""target\"":\""_MMPAGING_FILE\""}"" ]],
				 ""File"": [ 152, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""ControlArea"": [ 160, [ ""Pointer"", ""{\""target\"":\""_CONTROL_AREA\""}"" ]],
				 ""FileResource"": [ 168, [ ""Pointer"", ""{\""target\"":\""_ERESOURCE\""}"" ]],
				 ""WriteOffset"": [ 176, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""IssueTime"": [ 184, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Partition"": [ 192, [ ""Pointer"", ""{\""target\"":\""_MI_PARTITION\""}"" ]],
				 ""PointerMdl"": [ 200, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""Mdl"": [ 208, [ ""_MDL"", ""null"" ]],
				 ""Page"": [ 256, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Links
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 Irp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _MODWRITER_FLAGS u1
		{
			get
			{
				_MODWRITER_FLAGS returnValue = new _MODWRITER_FLAGS(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt32 StoreWriteRefCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public _KAPC StoreWriteCompletionApc
		{
			get
			{
				_KAPC returnValue = new _KAPC(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt32 ByteCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public UInt32 ChargedPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 140); } }
		public UInt64 PagingFile { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 File { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 ControlArea { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 FileResource { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public _LARGE_INTEGER WriteOffset
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 176);
				return returnValue;
			}
		}
		public _LARGE_INTEGER IssueTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 184);
				return returnValue;
			}
		}
		public UInt64 Partition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt64 PointerMdl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public _MDL Mdl
		{
			get
			{
				_MDL returnValue = new _MDL(_StructureData, _BufferOffset + 208);
				return returnValue;
			}
		}
		public UInt64[] Page
		{
			get
			{
				UInt64[] returnValue = new UInt64[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 256);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMINPAGE_SUPPORT_FLOW_THROUGH
 
	public class _MMINPAGE_SUPPORT_FLOW_THROUGH
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMINPAGE_SUPPORT_FLOW_THROUGH(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMINPAGE_SUPPORT_FLOW_THROUGH"": [ 56, {
				 ""Page"": [ 0, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""InitialInPageSupport"": [ 8, [ ""Pointer"", ""{\""target\"":\""_MMINPAGE_SUPPORT\""}"" ]],
				 ""PagingFile"": [ 16, [ ""Pointer"", ""{\""target\"":\""_MMPAGING_FILE\""}"" ]],
				 ""PageFileOffset"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""Node"": [ 32, [ ""_RTL_BALANCED_NODE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64[] Page
		{
			get
			{
				UInt64[] returnValue = new UInt64[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 InitialInPageSupport { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 PagingFile { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 PageFileOffset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _RTL_BALANCED_NODE Node
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_COMBINE_STATE
 
	public class _MI_COMBINE_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_COMBINE_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_COMBINE_STATE"": [ 32, {
				 ""ActiveSpinLock"": [ 0, [ ""Int32"", ""null"" ]],
				 ""CombiningThreadCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ActiveThreadTree"": [ 8, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""CommonPageCombineDomain"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""CommonCombineDomainAssigned"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 ActiveSpinLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 CombiningThreadCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _RTL_AVL_TREE ActiveThreadTree
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 CommonPageCombineDomain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 CommonCombineDomainAssigned { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _ETW_PAYLOAD_FILTER
 
	public class _ETW_PAYLOAD_FILTER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_PAYLOAD_FILTER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_PAYLOAD_FILTER"": [ 88, {
				 ""RefCount"": [ 0, [ ""Int32"", ""null"" ]],
				 ""PayloadFilter"": [ 8, [ ""_AGGREGATED_PAYLOAD_FILTER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 RefCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public _AGGREGATED_PAYLOAD_FILTER PayloadFilter
		{
			get
			{
				_AGGREGATED_PAYLOAD_FILTER returnValue = new _AGGREGATED_PAYLOAD_FILTER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_PAGING_FILE_SPACE_BITMAPS
 
	public class _MI_PAGING_FILE_SPACE_BITMAPS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PAGING_FILE_SPACE_BITMAPS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PAGING_FILE_SPACE_BITMAPS"": [ 40, {
				 ""RefCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Anchor"": [ 0, [ ""Pointer"", ""{\""target\"":\""_MI_PAGING_FILE_SPACE_BITMAPS\""}"" ]],
				 ""AllocationBitmap"": [ 8, [ ""_RTL_BITMAP"", ""null"" ]],
				 ""ReservationBitmap"": [ 24, [ ""_RTL_BITMAP"", ""null"" ]],
				 ""EvictedBitmap"": [ 24, [ ""_RTL_BITMAP"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 RefCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 Anchor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _RTL_BITMAP AllocationBitmap
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _RTL_BITMAP ReservationBitmap
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _RTL_BITMAP EvictedBitmap
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HANDLE_TRACE_DB_ENTRY
 
	public class _HANDLE_TRACE_DB_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HANDLE_TRACE_DB_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HANDLE_TRACE_DB_ENTRY"": [ 160, {
				 ""ClientId"": [ 0, [ ""_CLIENT_ID"", ""null"" ]],
				 ""Handle"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Type"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""StackTrace"": [ 32, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public _CLIENT_ID ClientId
		{
			get
			{
				_CLIENT_ID returnValue = new _CLIENT_ID(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Handle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 Type { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt64[] StackTrace
		{
			get
			{
				UInt64[] returnValue = new UInt64[16];
				int size = 8;
				for(int i=0; i<16; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PTE_TRACKER
 
	public class _PTE_TRACKER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PTE_TRACKER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PTE_TRACKER"": [ 128, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Mdl"": [ 16, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""Count"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""SystemVa"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StartVa"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Offset"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""Length"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""Page"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""IoMapping"": [ 64, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Matched"": [ 64, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""CacheAttribute"": [ 64, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""GuardPte"": [ 64, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""Spare"": [ 64, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""StackTrace"": [ 72, [ ""Array"", ""{\""count\"":7,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Mdl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Count { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 SystemVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 StartVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt32 Offset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt64 Page { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt32 IoMapping
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 64);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Matched
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 64);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 CacheAttribute
		{
			get
			{
				// start: 2  end: 4  Mask: 0000000000001100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 64);
				var value2 = (value & 12) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 GuardPte
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 64);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 Spare
		{
			get
			{
				// start: 5  end: 32  Mask: 11111111111111111111111111100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 64);
				var value2 = (value & 4294967264) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt64[] StackTrace
		{
			get
			{
				UInt64[] returnValue = new UInt64[7];
				int size = 8;
				for(int i=0; i<7; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 72);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HIVE_WAIT_PACKET
 
	public class _HIVE_WAIT_PACKET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HIVE_WAIT_PACKET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HIVE_WAIT_PACKET"": [ 40, {
				 ""WakeEvent"": [ 0, [ ""_KEVENT"", ""null"" ]],
				 ""Status"": [ 24, [ ""Int32"", ""null"" ]],
				 ""Next"": [ 32, [ ""Pointer"", ""{\""target\"":\""_HIVE_WAIT_PACKET\""}"" ]] }]
				 }
				)";
			}
		}
		public _KEVENT WakeEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 24); } }
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _POP_FX_WORK_POOL
 
	public class _POP_FX_WORK_POOL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_WORK_POOL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 304; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_WORK_POOL"": [ 304, {
				 ""Plugin"": [ 0, [ ""Pointer"", ""{\""target\"":\""_POP_FX_PLUGIN\""}"" ]],
				 ""EmergencyWorkQueueLock"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""EmergencyWorkQueue"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""WorkPoolQueues"": [ 32, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""WorkItemStatus"": [ 96, [ ""Int32"", ""null"" ]],
				 ""WorkItems"": [ 104, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""EmergencyWorkerThread"": [ 264, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""DynamicWorkerThreads"": [ 272, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_KTHREAD\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Plugin { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 EmergencyWorkQueueLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY EmergencyWorkQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _KSEMAPHORE[] WorkPoolQueues
		{
			get
			{
				_KSEMAPHORE[] returnValue = new _KSEMAPHORE[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _KSEMAPHORE(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
		public Int32 WorkItemStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 96); } }
		public _POP_FX_WORK_POOL_ITEM[] WorkItems
		{
			get
			{
				_POP_FX_WORK_POOL_ITEM[] returnValue = new _POP_FX_WORK_POOL_ITEM[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new _POP_FX_WORK_POOL_ITEM(_StructureData, (i * size) + _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt64 EmergencyWorkerThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 264); } }
		public _KTHREAD[] DynamicWorkerThreads
		{
			get
			{
				_KTHREAD[] returnValue = new _KTHREAD[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new _KTHREAD(_StructureData, (i * size) + _BufferOffset + 272);
				return returnValue;
			}
		}
	}
	#endregion
	#region _VF_AVL_TREE_NODE_EX
 
	public class _VF_AVL_TREE_NODE_EX
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VF_AVL_TREE_NODE_EX(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VF_AVL_TREE_NODE_EX"": [ 24, {
				 ""Base"": [ 0, [ ""_VF_AVL_TREE_NODE"", ""null"" ]],
				 ""SessionId"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _VF_AVL_TREE_NODE Base
		{
			get
			{
				_VF_AVL_TREE_NODE returnValue = new _VF_AVL_TREE_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _VACB_ARRAY_HEADER
 
	public class _VACB_ARRAY_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VACB_ARRAY_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VACB_ARRAY_HEADER"": [ 16, {
				 ""VacbArrayIndex"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""MappingCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""HighestMappedIndex"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 VacbArrayIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 MappingCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 HighestMappedIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _CM_INDEX
 
	public class _CM_INDEX
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_INDEX(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_INDEX"": [ 8, {
				 ""Cell"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""NameHint"": [ 4, [ ""_CM_FAST_LEAF_HINT"", ""null"" ]],
				 ""HashKey"": [ 4, [ ""_CM_COMPONENT_HASH"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Cell { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _CM_FAST_LEAF_HINT NameHint
		{
			get
			{
				_CM_FAST_LEAF_HINT returnValue = new _CM_FAST_LEAF_HINT(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public _CM_COMPONENT_HASH HashKey
		{
			get
			{
				_CM_COMPONENT_HASH returnValue = new _CM_COMPONENT_HASH(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ETW_BUFFER_CONTEXT
 
	public class _ETW_BUFFER_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_BUFFER_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_BUFFER_CONTEXT"": [ 4, {
				 ""ProcessorNumber"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Alignment"": [ 1, [ ""Byte"", ""null"" ]],
				 ""ProcessorIndex"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""LoggerId"": [ 2, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte ProcessorNumber{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Alignment{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt16 ProcessorIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 LoggerId { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
	}
	#endregion
	#region _SID_AND_ATTRIBUTES_HASH
 
	public class _SID_AND_ATTRIBUTES_HASH
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SID_AND_ATTRIBUTES_HASH(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 272; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SID_AND_ATTRIBUTES_HASH"": [ 272, {
				 ""SidCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SidAttr"": [ 8, [ ""Pointer"", ""{\""target\"":\""_SID_AND_ATTRIBUTES\""}"" ]],
				 ""Hash"": [ 16, [ ""Array"", ""{\""count\"":32,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SidCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 SidAttr { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64[] Hash
		{
			get
			{
				UInt64[] returnValue = new UInt64[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PROC_PERF_CHECK_CONTEXT
 
	public class _PROC_PERF_CHECK_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROC_PERF_CHECK_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROC_PERF_CHECK_CONTEXT"": [ 64, {
				 ""Domain"": [ 0, [ ""Pointer"", ""{\""target\"":\""_PROC_PERF_DOMAIN\""}"" ]],
				 ""Constraint"": [ 8, [ ""Pointer"", ""{\""target\"":\""_PROC_PERF_CONSTRAINT\""}"" ]],
				 ""PerfCheck"": [ 16, [ ""Pointer"", ""{\""target\"":\""_PROC_PERF_CHECK\""}"" ]],
				 ""Load"": [ 24, [ ""Pointer"", ""{\""target\"":\""_PROC_PERF_LOAD\""}"" ]],
				 ""PerfHistory"": [ 32, [ ""Pointer"", ""{\""target\"":\""_PROC_PERF_HISTORY\""}"" ]],
				 ""Utility"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""AffinitizedUtility"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""MediaUtility"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""LatestAffinitizedPercent"": [ 52, [ ""UInt16"", ""null"" ]],
				 ""AveragePerformancePercent"": [ 54, [ ""UInt16"", ""null"" ]],
				 ""RelativePerformance"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""NtProcessor"": [ 60, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Domain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Constraint { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 PerfCheck { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Load { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 PerfHistory { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt32 Utility { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 AffinitizedUtility { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 MediaUtility { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt16 LatestAffinitizedPercent { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 52); } }
		public UInt16 AveragePerformancePercent { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 54); } }
		public UInt32 RelativePerformance { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public Byte NtProcessor{ get { return _StructureData[_BufferOffset +60]; } }
	}
	#endregion
	#region _ACCESS_REASONS
 
	public class _ACCESS_REASONS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ACCESS_REASONS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ACCESS_REASONS"": [ 128, {
				 ""Data"": [ 0, [ ""Array"", ""{\""count\"":32,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32[] Data
		{
			get
			{
				UInt32[] returnValue = new UInt32[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _POP_FX_WORK_ORDER
 
	public class _POP_FX_WORK_ORDER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_WORK_ORDER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_WORK_ORDER"": [ 56, {
				 ""WorkItem"": [ 0, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""WorkCount"": [ 32, [ ""Int32"", ""null"" ]],
				 ""Context"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WatchdogTimerInfo"": [ 48, [ ""Pointer"", ""{\""target\"":\""_POP_FX_WORK_ORDER_WATCHDOG_INFO\""}"" ]] }]
				 }
				)";
			}
		}
		public _WORK_QUEUE_ITEM WorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int32 WorkCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 WatchdogTimerInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _RTL_ATOM_TABLE_REFERENCE
 
	public class _RTL_ATOM_TABLE_REFERENCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_ATOM_TABLE_REFERENCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_ATOM_TABLE_REFERENCE"": [ 24, {
				 ""LowBoxList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LowBoxID"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ReferenceCount"": [ 20, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 22, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY LowBoxList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 LowBoxID { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt16 ReferenceCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 20); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 22); } }
	}
	#endregion
	#region _MI_PAGELIST_STATE
 
	public class _MI_PAGELIST_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PAGELIST_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 136; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PAGELIST_STATE"": [ 136, {
				 ""ActiveSpinLock"": [ 0, [ ""Int32"", ""null"" ]],
				 ""ActiveThreadTree"": [ 8, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""ActiveZeroSpinLock"": [ 16, [ ""Int32"", ""null"" ]],
				 ""ActiveZeroThreadTree"": [ 24, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""LargePfnTemplate"": [ 32, [ ""_MMPFN"", ""null"" ]],
				 ""LargePfnBasePageTemplate"": [ 80, [ ""_MMPFN"", ""null"" ]],
				 ""NumberOfLargePageListHeads"": [ 128, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 ActiveSpinLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public _RTL_AVL_TREE ActiveThreadTree
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public Int32 ActiveZeroSpinLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public _RTL_AVL_TREE ActiveZeroThreadTree
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _MMPFN LargePfnTemplate
		{
			get
			{
				_MMPFN returnValue = new _MMPFN(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _MMPFN LargePfnBasePageTemplate
		{
			get
			{
				_MMPFN returnValue = new _MMPFN(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt32 NumberOfLargePageListHeads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
	}
	#endregion
	#region _CRITICAL_PROCESS_EXCEPTION_DATA
 
	public class _CRITICAL_PROCESS_EXCEPTION_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CRITICAL_PROCESS_EXCEPTION_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CRITICAL_PROCESS_EXCEPTION_DATA"": [ 48, {
				 ""ReportId"": [ 0, [ ""_GUID"", ""null"" ]],
				 ""ModuleName"": [ 16, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ModuleTimestamp"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""ModuleSize"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Offset"": [ 40, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _GUID ReportId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _UNICODE_STRING ModuleName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 ModuleTimestamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 ModuleSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt64 Offset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _CALL_PERFORMANCE_DATA
 
	public class _CALL_PERFORMANCE_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CALL_PERFORMANCE_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1032; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CALL_PERFORMANCE_DATA"": [ 1032, {
				 ""SpinLock"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""HashTable"": [ 8, [ ""Array"", ""{\""count\"":64,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SpinLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _LIST_ENTRY[] HashTable
		{
			get
			{
				_LIST_ENTRY[] returnValue = new _LIST_ENTRY[64];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<64; i++ )
					returnValue[i] = new _LIST_ENTRY(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IO_IRP_EXT_TRACK_OFFSET_HEADER
 
	public class _IO_IRP_EXT_TRACK_OFFSET_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_IRP_EXT_TRACK_OFFSET_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_IRP_EXT_TRACK_OFFSET_HEADER"": [ 16, {
				 ""Validation"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""TrackedOffsetCallback"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Validation { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 TrackedOffsetCallback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region tagSWITCH_CONTEXT_DATA
 
	public class tagSWITCH_CONTEXT_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public tagSWITCH_CONTEXT_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 832; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""tagSWITCH_CONTEXT_DATA"": [ 832, {
				 ""ullOsMaxVersionTested"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""ulTargetPlatform"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ullContextMinimum"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""guPlatform"": [ 24, [ ""_GUID"", ""null"" ]],
				 ""guMinPlatform"": [ 40, [ ""_GUID"", ""null"" ]],
				 ""ulContextSource"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""ulElementCount"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""guElements"": [ 64, [ ""Array"", ""{\""count\"":48,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ullOsMaxVersionTested { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 ulTargetPlatform { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 ullContextMinimum { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _GUID guPlatform
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _GUID guMinPlatform
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt32 ulContextSource { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 ulElementCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public _GUID[] guElements
		{
			get
			{
				_GUID[] returnValue = new _GUID[48];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<48; i++ )
					returnValue[i] = new _GUID(_StructureData, (i * size) + _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SESSION_LOWBOX_MAP
 
	public class _SESSION_LOWBOX_MAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SESSION_LOWBOX_MAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SESSION_LOWBOX_MAP"": [ 64, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SessionId"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""LowboxMap"": [ 24, [ ""_SEP_LOWBOX_NUMBER_MAPPING"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _SEP_LOWBOX_NUMBER_MAPPING LowboxMap
		{
			get
			{
				_SEP_LOWBOX_NUMBER_MAPPING returnValue = new _SEP_LOWBOX_NUMBER_MAPPING(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _POP_IO_INFO
 
	public class _POP_IO_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_IO_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_IO_INFO"": [ 112, {
				 ""DumpMdl"": [ 0, [ ""Pointer"", ""{\""target\"":\""_MDL\""}"" ]],
				 ""IoStatus"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_POP_IO_STATUS\"",\""target\"":\""UInt32\""}"" ]],
				 ""IoStartCount"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""IoBytesCompleted"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""IoBytesInProgress"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""RequestSize"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""IoLocation"": [ 48, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""FileOffset"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""Buffer"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AsyncCapable"": [ 72, [ ""Byte"", ""null"" ]],
				 ""BytesToRead"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""Pages"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""HighestChecksumIndex"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""PreviousChecksum"": [ 104, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DumpMdl { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _POP_IO_STATUS IoStatus { get { return (_POP_IO_STATUS)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 IoStartCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 IoBytesCompleted { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 IoBytesInProgress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 RequestSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _LARGE_INTEGER IoLocation
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt64 FileOffset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 Buffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public Byte AsyncCapable{ get { return _StructureData[_BufferOffset +72]; } }
		public UInt64 BytesToRead { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt32 Pages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt64 HighestChecksumIndex { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt16 PreviousChecksum { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 104); } }
	}
	#endregion
	#region _TOKEN_ACCESS_INFORMATION
 
	public class _TOKEN_ACCESS_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TOKEN_ACCESS_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TOKEN_ACCESS_INFORMATION"": [ 88, {
				 ""SidHash"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SID_AND_ATTRIBUTES_HASH\""}"" ]],
				 ""RestrictedSidHash"": [ 8, [ ""Pointer"", ""{\""target\"":\""_SID_AND_ATTRIBUTES_HASH\""}"" ]],
				 ""Privileges"": [ 16, [ ""Pointer"", ""{\""target\"":\""_TOKEN_PRIVILEGES\""}"" ]],
				 ""AuthenticationId"": [ 24, [ ""_LUID"", ""null"" ]],
				 ""TokenType"": [ 32, [ ""Enumeration"", ""{\""enum_name\"":\""_TOKEN_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ImpersonationLevel"": [ 36, [ ""Enumeration"", ""{\""enum_name\"":\""_SECURITY_IMPERSONATION_LEVEL\"",\""target\"":\""UInt32\""}"" ]],
				 ""MandatoryPolicy"": [ 40, [ ""_TOKEN_MANDATORY_POLICY"", ""null"" ]],
				 ""Flags"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""AppContainerNumber"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""PackageSid"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CapabilitiesHash"": [ 64, [ ""Pointer"", ""{\""target\"":\""_SID_AND_ATTRIBUTES_HASH\""}"" ]],
				 ""TrustLevelSid"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SecurityAttributes"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SidHash { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 RestrictedSidHash { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Privileges { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _LUID AuthenticationId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _TOKEN_TYPE TokenType { get { return (_TOKEN_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public _SECURITY_IMPERSONATION_LEVEL ImpersonationLevel { get { return (_SECURITY_IMPERSONATION_LEVEL)BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public _TOKEN_MANDATORY_POLICY MandatoryPolicy
		{
			get
			{
				_TOKEN_MANDATORY_POLICY returnValue = new _TOKEN_MANDATORY_POLICY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 AppContainerNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt64 PackageSid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 CapabilitiesHash { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 TrustLevelSid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 SecurityAttributes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
	}
	#endregion
	#region _MIPFNBLINK
 
	public class _MIPFNBLINK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MIPFNBLINK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MIPFNBLINK"": [ 8, {
				 ""Blink"": [ 0, [ ""BitField"", ""{\""end_bit\"":36,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""NodeBlinkHigh"": [ 0, [ ""BitField"", ""{\""end_bit\"":56,\""start_bit\"":36,\""target\"":\""UInt64\""}"" ]],
				 ""TbFlushStamp"": [ 0, [ ""BitField"", ""{\""end_bit\"":60,\""start_bit\"":56,\""target\"":\""UInt64\""}"" ]],
				 ""Unused"": [ 0, [ ""BitField"", ""{\""end_bit\"":62,\""start_bit\"":60,\""target\"":\""UInt64\""}"" ]],
				 ""PageBlinkDeleteBit"": [ 0, [ ""BitField"", ""{\""end_bit\"":63,\""start_bit\"":62,\""target\"":\""UInt64\""}"" ]],
				 ""PageBlinkLockBit"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":63,\""target\"":\""UInt64\""}"" ]],
				 ""ShareCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":62,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""PageShareCountDeleteBit"": [ 0, [ ""BitField"", ""{\""end_bit\"":63,\""start_bit\"":62,\""target\"":\""UInt64\""}"" ]],
				 ""PageShareCountLockBit"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":63,\""target\"":\""UInt64\""}"" ]],
				 ""EntireField"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Lock"": [ 0, [ ""Int64"", ""null"" ]],
				 ""LockNotUsed"": [ 0, [ ""BitField"", ""{\""end_bit\"":62,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""DeleteBit"": [ 0, [ ""BitField"", ""{\""end_bit\"":63,\""start_bit\"":62,\""target\"":\""UInt64\""}"" ]],
				 ""LockBit"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":63,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Blink
		{
			get
			{
				// start: 0  end: 36  Mask: 111111111111111111111111111111111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 68719476735) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 NodeBlinkHigh
		{
			get
			{
				// start: 36  end: 56  Mask: 11111111111111111111000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 72057525318451200) >> 36;
				return (UInt64)value2;
			}
		}
		public UInt64 TbFlushStamp
		{
			get
			{
				// start: 56  end: 60  Mask: 111100000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1080863910568919040) >> 56;
				return (UInt64)value2;
			}
		}
		public UInt64 Unused
		{
			get
			{
				// start: 60  end: 62  Mask: 11000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 3458764513820540928) >> 60;
				return (UInt64)value2;
			}
		}
		public UInt64 PageBlinkDeleteBit
		{
			get
			{
				// start: 62  end: 63  Mask: 100000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4611686018427387904) >> 62;
				return (UInt64)value2;
			}
		}
		public UInt64 PageBlinkLockBit
		{
			get
			{
				// start: 63  end: 64  Mask: 1000000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 9223372036854775808) >> 63;
				return (UInt64)value2;
			}
		}
		public UInt64 ShareCount
		{
			get
			{
				// start: 0  end: 62  Mask: 11111111111111111111111111111111111111111111111111111111111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4611686018427387903) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 PageShareCountDeleteBit
		{
			get
			{
				// start: 62  end: 63  Mask: 100000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4611686018427387904) >> 62;
				return (UInt64)value2;
			}
		}
		public UInt64 PageShareCountLockBit
		{
			get
			{
				// start: 63  end: 64  Mask: 1000000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 9223372036854775808) >> 63;
				return (UInt64)value2;
			}
		}
		public UInt64 EntireField { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Int64 Lock { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 LockNotUsed
		{
			get
			{
				// start: 0  end: 62  Mask: 11111111111111111111111111111111111111111111111111111111111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4611686018427387903) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 DeleteBit
		{
			get
			{
				// start: 62  end: 63  Mask: 100000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4611686018427387904) >> 62;
				return (UInt64)value2;
			}
		}
		public UInt64 LockBit
		{
			get
			{
				// start: 63  end: 64  Mask: 1000000000000000000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 9223372036854775808) >> 63;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _OB_DUPLICATE_OBJECT_STATE
 
	public class _OB_DUPLICATE_OBJECT_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OB_DUPLICATE_OBJECT_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OB_DUPLICATE_OBJECT_STATE"": [ 40, {
				 ""SourceProcess"": [ 0, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""SourceHandle"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Object"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TargetAccess"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""ObjectInfo"": [ 28, [ ""_HANDLE_TABLE_ENTRY_INFO"", ""null"" ]],
				 ""HandleAttributes"": [ 36, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SourceProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 SourceHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Object { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 TargetAccess { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _HANDLE_TABLE_ENTRY_INFO ObjectInfo
		{
			get
			{
				_HANDLE_TABLE_ENTRY_INFO returnValue = new _HANDLE_TABLE_ENTRY_INFO(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public UInt32 HandleAttributes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
	}
	#endregion
	#region _PPM_COORDINATED_SELECTION
 
	public class _PPM_COORDINATED_SELECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPM_COORDINATED_SELECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPM_COORDINATED_SELECTION"": [ 24, {
				 ""MaximumStates"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SelectedStates"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DefaultSelection"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Selection"": [ 16, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 MaximumStates { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SelectedStates { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 DefaultSelection { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 Selection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _KRESOURCEMANAGER_COMPLETION_BINDING
 
	public class _KRESOURCEMANAGER_COMPLETION_BINDING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KRESOURCEMANAGER_COMPLETION_BINDING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KRESOURCEMANAGER_COMPLETION_BINDING"": [ 40, {
				 ""NotificationListHead"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Port"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Key"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""BindingProcess"": [ 32, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY NotificationListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Port { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Key { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 BindingProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _IMAGE_OPTIONAL_HEADER64
 
	public class _IMAGE_OPTIONAL_HEADER64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_OPTIONAL_HEADER64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 240; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_OPTIONAL_HEADER64"": [ 240, {
				 ""Magic"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MajorLinkerVersion"": [ 2, [ ""Byte"", ""null"" ]],
				 ""MinorLinkerVersion"": [ 3, [ ""Byte"", ""null"" ]],
				 ""SizeOfCode"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""SizeOfInitializedData"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SizeOfUninitializedData"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""AddressOfEntryPoint"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""BaseOfCode"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""ImageBase"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""SectionAlignment"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""FileAlignment"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""MajorOperatingSystemVersion"": [ 40, [ ""UInt16"", ""null"" ]],
				 ""MinorOperatingSystemVersion"": [ 42, [ ""UInt16"", ""null"" ]],
				 ""MajorImageVersion"": [ 44, [ ""UInt16"", ""null"" ]],
				 ""MinorImageVersion"": [ 46, [ ""UInt16"", ""null"" ]],
				 ""MajorSubsystemVersion"": [ 48, [ ""UInt16"", ""null"" ]],
				 ""MinorSubsystemVersion"": [ 50, [ ""UInt16"", ""null"" ]],
				 ""Win32VersionValue"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""SizeOfImage"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""SizeOfHeaders"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""CheckSum"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""Subsystem"": [ 68, [ ""UInt16"", ""null"" ]],
				 ""DllCharacteristics"": [ 70, [ ""UInt16"", ""null"" ]],
				 ""SizeOfStackReserve"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""SizeOfStackCommit"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""SizeOfHeapReserve"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""SizeOfHeapCommit"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""LoaderFlags"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""NumberOfRvaAndSizes"": [ 108, [ ""UInt32"", ""null"" ]],
				 ""DataDirectory"": [ 112, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Magic { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte MajorLinkerVersion{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte MinorLinkerVersion{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 SizeOfCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 SizeOfInitializedData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 SizeOfUninitializedData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 AddressOfEntryPoint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 BaseOfCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 ImageBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 SectionAlignment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 FileAlignment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt16 MajorOperatingSystemVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 40); } }
		public UInt16 MinorOperatingSystemVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 42); } }
		public UInt16 MajorImageVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 44); } }
		public UInt16 MinorImageVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 46); } }
		public UInt16 MajorSubsystemVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 48); } }
		public UInt16 MinorSubsystemVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 50); } }
		public UInt32 Win32VersionValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 SizeOfImage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 SizeOfHeaders { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 CheckSum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt16 Subsystem { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 68); } }
		public UInt16 DllCharacteristics { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 70); } }
		public UInt64 SizeOfStackReserve { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 SizeOfStackCommit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 SizeOfHeapReserve { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 SizeOfHeapCommit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt32 LoaderFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 NumberOfRvaAndSizes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public _IMAGE_DATA_DIRECTORY[] DataDirectory
		{
			get
			{
				_IMAGE_DATA_DIRECTORY[] returnValue = new _IMAGE_DATA_DIRECTORY[16];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<16; i++ )
					returnValue[i] = new _IMAGE_DATA_DIRECTORY(_StructureData, (i * size) + _BufferOffset + 112);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ETW_LAST_ENABLE_INFO
 
	public class _ETW_LAST_ENABLE_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_LAST_ENABLE_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_LAST_ENABLE_INFO"": [ 16, {
				 ""EnableFlags"": [ 0, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""LoggerId"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""Level"": [ 10, [ ""Byte"", ""null"" ]],
				 ""Enabled"": [ 11, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""InternalFlag"": [ 11, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public _LARGE_INTEGER EnableFlags
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt16 LoggerId { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public Byte Level{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte Enabled
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 11];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte InternalFlag
		{
			get
			{
				// start: 1  end: 8  Mask: 0000000011111110
				Byte value = _StructureData[_BufferOffset + 11];
				var value2 = (value & 254) >> 1;
				return (Byte)value2;
			}
		}
	}
	#endregion
	#region _IOMMU_DMA_DOMAIN
 
	public class _IOMMU_DMA_DOMAIN
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IOMMU_DMA_DOMAIN(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IOMMU_DMA_DOMAIN"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _DMA_IOMMU_INTERFACE
 
	public class _DMA_IOMMU_INTERFACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DMA_IOMMU_INTERFACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DMA_IOMMU_INTERFACE"": [ 112, {
				 ""Version"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""CreateDomain"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeleteDomain"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AttachDevice"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DetachDevice"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FlushDomain"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FlushDomainByVaList"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""QueryInputMappings"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MapLogicalRange"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UnmapLogicalRange"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MapIdentityRange"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UnmapIdentityRange"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SetDeviceFaultReporting"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ConfigureDomain"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 CreateDomain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 DeleteDomain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 AttachDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 DetachDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 FlushDomain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 FlushDomainByVaList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 QueryInputMappings { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 MapLogicalRange { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 UnmapLogicalRange { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 MapIdentityRange { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 UnmapIdentityRange { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 SetDeviceFaultReporting { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 ConfigureDomain { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
	}
	#endregion
	#region _POOL_TRACKER_BIG_PAGES
 
	public class _POOL_TRACKER_BIG_PAGES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POOL_TRACKER_BIG_PAGES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POOL_TRACKER_BIG_PAGES"": [ 24, {
				 ""Va"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Key"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Pattern"": [ 12, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""PoolType"": [ 12, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""SlushSize"": [ 12, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""NumberOfBytes"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Va { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Key { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Pattern
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 255) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 PoolType
		{
			get
			{
				// start: 8  end: 20  Mask: 11111111111100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 1048320) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 SlushSize
		{
			get
			{
				// start: 20  end: 32  Mask: 11111111111100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 4293918720) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt64 NumberOfBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS
 
	public class _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_OPPORTUNISTIC_LARGE_PAGE_STATS"": [ 16, {
				 ""SmallPagesInUseWithinLarge"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""OpportunisticLargePageCount"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SmallPagesInUseWithinLarge { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 OpportunisticLargePageCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region PROCESSOR_PERFSTATE_POLICY
 
	public class PROCESSOR_PERFSTATE_POLICY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public PROCESSOR_PERFSTATE_POLICY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""PROCESSOR_PERFSTATE_POLICY"": [ 28, {
				 ""Revision"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""MaxThrottle"": [ 4, [ ""Byte"", ""null"" ]],
				 ""MinThrottle"": [ 5, [ ""Byte"", ""null"" ]],
				 ""BusyAdjThreshold"": [ 6, [ ""Byte"", ""null"" ]],
				 ""Spare"": [ 7, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 7, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""TimeCheck"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""IncreaseTime"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""DecreaseTime"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""IncreasePercent"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""DecreasePercent"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Revision { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte MaxThrottle{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte MinThrottle{ get { return _StructureData[_BufferOffset +5]; } }
		public Byte BusyAdjThreshold{ get { return _StructureData[_BufferOffset +6]; } }
		public Byte Spare{ get { return _StructureData[_BufferOffset +7]; } }
		public _ANONYMOUS_TAG Flags
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 7);
				return returnValue;
			}
		}
		public UInt32 TimeCheck { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 IncreaseTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 DecreaseTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 IncreasePercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 DecreasePercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _PROC_PERF_HISTORY
 
	public class _PROC_PERF_HISTORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROC_PERF_HISTORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 44; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROC_PERF_HISTORY"": [ 44, {
				 ""Count"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Slot"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""UtilityTotal"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""AffinitizedUtilityTotal"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""FrequencyTotal"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""TaggedPercentTotal"": [ 20, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""HistoryList"": [ 32, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Slot { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 UtilityTotal { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 AffinitizedUtilityTotal { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 FrequencyTotal { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32[] TaggedPercentTotal
		{
			get
			{
				UInt32[] returnValue = new UInt32[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 20);
				return returnValue;
			}
		}
		public _PROC_PERF_HISTORY_ENTRY[] HistoryList
		{
			get
			{
				_PROC_PERF_HISTORY_ENTRY[] returnValue = new _PROC_PERF_HISTORY_ENTRY[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _PROC_PERF_HISTORY_ENTRY(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DEVICE_RELATIONS
 
	public class _DEVICE_RELATIONS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_RELATIONS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_RELATIONS"": [ 16, {
				 ""Count"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Objects"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_DEVICE_OBJECT\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _DEVICE_OBJECT[] Objects
		{
			get
			{
				_DEVICE_OBJECT[] returnValue = new _DEVICE_OBJECT[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _DEVICE_OBJECT(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMVAD_FLAGS2
 
	public class _MMVAD_FLAGS2
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMVAD_FLAGS2(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMVAD_FLAGS2"": [ 4, {
				 ""FileOffset"": [ 0, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Large"": [ 0, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""TrimBehind"": [ 0, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":25,\""target\"":\""UInt32\""}"" ]],
				 ""Inherit"": [ 0, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""NoValidationNeeded"": [ 0, [ ""BitField"", ""{\""end_bit\"":28,\""start_bit\"":27,\""target\"":\""UInt32\""}"" ]],
				 ""PrivateDemandZero"": [ 0, [ ""BitField"", ""{\""end_bit\"":29,\""start_bit\"":28,\""target\"":\""UInt32\""}"" ]],
				 ""Spare"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":29,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 FileOffset
		{
			get
			{
				// start: 0  end: 24  Mask: 111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16777215) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Large
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16777216) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 TrimBehind
		{
			get
			{
				// start: 25  end: 26  Mask: 10000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 33554432) >> 25;
				return (UInt32)value2;
			}
		}
		public UInt32 Inherit
		{
			get
			{
				// start: 26  end: 27  Mask: 100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 67108864) >> 26;
				return (UInt32)value2;
			}
		}
		public UInt32 NoValidationNeeded
		{
			get
			{
				// start: 27  end: 28  Mask: 1000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 134217728) >> 27;
				return (UInt32)value2;
			}
		}
		public UInt32 PrivateDemandZero
		{
			get
			{
				// start: 28  end: 29  Mask: 10000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 268435456) >> 28;
				return (UInt32)value2;
			}
		}
		public UInt32 Spare
		{
			get
			{
				// start: 29  end: 32  Mask: 11100000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 3758096384) >> 29;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _MMVAD
 
	public class _MMVAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMVAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 136; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMVAD"": [ 136, {
				 ""Core"": [ 0, [ ""_MMVAD_SHORT"", ""null"" ]],
				 ""u2"": [ 64, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""Subsection"": [ 72, [ ""Pointer"", ""{\""target\"":\""_SUBSECTION\""}"" ]],
				 ""FirstPrototypePte"": [ 80, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""LastContiguousPte"": [ 88, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""ViewLinks"": [ 96, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""VadsProcess"": [ 112, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""u4"": [ 120, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""FileObject"": [ 128, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]] }]
				 }
				)";
			}
		}
		public _MMVAD_SHORT Core
		{
			get
			{
				_MMVAD_SHORT returnValue = new _MMVAD_SHORT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG u2
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt64 Subsection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 FirstPrototypePte { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 LastContiguousPte { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public _LIST_ENTRY ViewLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt64 VadsProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public _ANONYMOUS_TAG u4
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
		public UInt64 FileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
	}
	#endregion
	#region _SEP_AUDIT_POLICY
 
	public class _SEP_AUDIT_POLICY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEP_AUDIT_POLICY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 31; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEP_AUDIT_POLICY"": [ 31, {
				 ""AdtTokenPolicy"": [ 0, [ ""_TOKEN_AUDIT_POLICY"", ""null"" ]],
				 ""PolicySetStatus"": [ 30, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _TOKEN_AUDIT_POLICY AdtTokenPolicy
		{
			get
			{
				_TOKEN_AUDIT_POLICY returnValue = new _TOKEN_AUDIT_POLICY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte PolicySetStatus{ get { return _StructureData[_BufferOffset +30]; } }
	}
	#endregion
	#region _CMSI_PROCESS_TUPLE
 
	public class _CMSI_PROCESS_TUPLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CMSI_PROCESS_TUPLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CMSI_PROCESS_TUPLE"": [ 16, {
				 ""ProcessHandle"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProcessReference"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ProcessHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ProcessReference { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _HEAP_FAILURE_INFORMATION
 
	public class _HEAP_FAILURE_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_FAILURE_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1744; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_FAILURE_INFORMATION"": [ 1744, {
				 ""Version"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""StructureSize"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""FailureType"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_HEAP_FAILURE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""HeapAddress"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Address"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Param1"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Param2"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Param3"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PreviousBlock"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NextBlock"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ExpectedDecodedEntry"": [ 72, [ ""_FAKE_HEAP_ENTRY"", ""null"" ]],
				 ""StackTrace"": [ 88, [ ""Array"", ""{\""count\"":32,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""HeapMajorVersion"": [ 344, [ ""Byte"", ""null"" ]],
				 ""HeapMinorVersion"": [ 345, [ ""Byte"", ""null"" ]],
				 ""ExceptionRecord"": [ 352, [ ""_EXCEPTION_RECORD"", ""null"" ]],
				 ""ContextRecord"": [ 512, [ ""_CONTEXT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 StructureSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _HEAP_FAILURE_TYPE FailureType { get { return (_HEAP_FAILURE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 HeapAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Address { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 Param1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 Param2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 Param3 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 PreviousBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 NextBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public _FAKE_HEAP_ENTRY ExpectedDecodedEntry
		{
			get
			{
				_FAKE_HEAP_ENTRY returnValue = new _FAKE_HEAP_ENTRY(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public UInt64[] StackTrace
		{
			get
			{
				UInt64[] returnValue = new UInt64[32];
				int size = 8;
				for(int i=0; i<32; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 88);
				return returnValue;
			}
		}
		public Byte HeapMajorVersion{ get { return _StructureData[_BufferOffset +344]; } }
		public Byte HeapMinorVersion{ get { return _StructureData[_BufferOffset +345]; } }
		public _EXCEPTION_RECORD ExceptionRecord
		{
			get
			{
				_EXCEPTION_RECORD returnValue = new _EXCEPTION_RECORD(_StructureData, _BufferOffset + 352);
				return returnValue;
			}
		}
		public _CONTEXT ContextRecord
		{
			get
			{
				_CONTEXT returnValue = new _CONTEXT(_StructureData, _BufferOffset + 512);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PROC_IDLE_ACCOUNTING
 
	public class _PROC_IDLE_ACCOUNTING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROC_IDLE_ACCOUNTING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1040; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROC_IDLE_ACCOUNTING"": [ 1040, {
				 ""StateCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TotalTransitions"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ResetCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""AbortCount"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""StartTime"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""PriorIdleTime"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""TimeUnit"": [ 32, [ ""Enumeration"", ""{\""enum_name\"":\""PPM_IDLE_BUCKET_TIME_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""State"": [ 40, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 StateCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 TotalTransitions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ResetCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 AbortCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 StartTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 PriorIdleTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public PPM_IDLE_BUCKET_TIME_TYPE TimeUnit { get { return (PPM_IDLE_BUCKET_TIME_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public _PROC_IDLE_STATE_ACCOUNTING[] State
		{
			get
			{
				_PROC_IDLE_STATE_ACCOUNTING[] returnValue = new _PROC_IDLE_STATE_ACCOUNTING[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _PROC_IDLE_STATE_ACCOUNTING(_StructureData, (i * size) + _BufferOffset + 40);
				return returnValue;
			}
		}
	}
	#endregion
	#region _UMS_CONTROL_BLOCK
 
	public class _UMS_CONTROL_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _UMS_CONTROL_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 136; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_UMS_CONTROL_BLOCK"": [ 136, {
				 ""UmsContext"": [ 0, [ ""Pointer"", ""{\""target\"":\""_RTL_UMS_CONTEXT\""}"" ]],
				 ""CompletionListEntry"": [ 8, [ ""Pointer"", ""{\""target\"":\""_SINGLE_LIST_ENTRY\""}"" ]],
				 ""CompletionListEvent"": [ 16, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""ServiceSequenceNumber"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""UmsQueue"": [ 32, [ ""_KQUEUE"", ""null"" ]],
				 ""QueueEntry"": [ 96, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""YieldingUmsContext"": [ 112, [ ""Pointer"", ""{\""target\"":\""_RTL_UMS_CONTEXT\""}"" ]],
				 ""YieldingParam"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UmsTeb"": [ 128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UmsAssociatedQueue"": [ 32, [ ""Pointer"", ""{\""target\"":\""_KQUEUE\""}"" ]],
				 ""UmsQueueListEntry"": [ 40, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""UmsWaitEvent"": [ 48, [ ""_KEVENT"", ""null"" ]],
				 ""StagingArea"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UmsPrimaryDeliveredContext"": [ 80, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""UmsAssociatedQueueUsed"": [ 80, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""UmsThreadParked"": [ 80, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""UmsFlags"": [ 80, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 UmsContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 CompletionListEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 CompletionListEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 ServiceSequenceNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _KQUEUE UmsQueue
		{
			get
			{
				_KQUEUE returnValue = new _KQUEUE(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _LIST_ENTRY QueueEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public UInt64 YieldingUmsContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 YieldingParam { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 UmsTeb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 UmsAssociatedQueue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 UmsQueueListEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _KEVENT UmsWaitEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public UInt64 StagingArea { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt32 UmsPrimaryDeliveredContext
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 UmsAssociatedQueueUsed
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 UmsThreadParked
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 80);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 UmsFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
	}
	#endregion
	#region _KTM
 
	public class _KTM
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTM(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 960; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTM"": [ 960, {
				 ""cookie"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Mutex"": [ 8, [ ""_KMUTANT"", ""null"" ]],
				 ""State"": [ 64, [ ""Enumeration"", ""{\""enum_name\"":\""KTM_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""NamespaceLink"": [ 72, [ ""_KTMOBJECT_NAMESPACE_LINK"", ""null"" ]],
				 ""TmIdentity"": [ 112, [ ""_GUID"", ""null"" ]],
				 ""Flags"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""VolatileFlags"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""LogFileName"": [ 136, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""LogFileObject"": [ 152, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""MarshallingContext"": [ 160, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LogManagementContext"": [ 168, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Transactions"": [ 176, [ ""_KTMOBJECT_NAMESPACE"", ""null"" ]],
				 ""ResourceManagers"": [ 344, [ ""_KTMOBJECT_NAMESPACE"", ""null"" ]],
				 ""LsnOrderedMutex"": [ 512, [ ""_KMUTANT"", ""null"" ]],
				 ""LsnOrderedList"": [ 568, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CommitVirtualClock"": [ 584, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""CommitVirtualClockMutex"": [ 592, [ ""_FAST_MUTEX"", ""null"" ]],
				 ""BaseLsn"": [ 648, [ ""_CLS_LSN"", ""null"" ]],
				 ""CurrentReadLsn"": [ 656, [ ""_CLS_LSN"", ""null"" ]],
				 ""LastRecoveredLsn"": [ 664, [ ""_CLS_LSN"", ""null"" ]],
				 ""TmRmHandle"": [ 672, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TmRm"": [ 680, [ ""Pointer"", ""{\""target\"":\""_KRESOURCEMANAGER\""}"" ]],
				 ""LogFullNotifyEvent"": [ 688, [ ""_KEVENT"", ""null"" ]],
				 ""CheckpointWorkItem"": [ 712, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""CheckpointTargetLsn"": [ 744, [ ""_CLS_LSN"", ""null"" ]],
				 ""LogFullCompletedWorkItem"": [ 752, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""LogWriteResource"": [ 784, [ ""_ERESOURCE"", ""null"" ]],
				 ""LogFlags"": [ 888, [ ""UInt32"", ""null"" ]],
				 ""LogFullStatus"": [ 892, [ ""Int32"", ""null"" ]],
				 ""RecoveryStatus"": [ 896, [ ""Int32"", ""null"" ]],
				 ""LastCheckBaseLsn"": [ 904, [ ""_CLS_LSN"", ""null"" ]],
				 ""RestartOrderedList"": [ 912, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""OfflineWorkItem"": [ 928, [ ""_WORK_QUEUE_ITEM"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 cookie { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _KMUTANT Mutex
		{
			get
			{
				_KMUTANT returnValue = new _KMUTANT(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public KTM_STATE State { get { return (KTM_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public _KTMOBJECT_NAMESPACE_LINK NamespaceLink
		{
			get
			{
				_KTMOBJECT_NAMESPACE_LINK returnValue = new _KTMOBJECT_NAMESPACE_LINK(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _GUID TmIdentity
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 VolatileFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public _UNICODE_STRING LogFileName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public UInt64 LogFileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 MarshallingContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 LogManagementContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public _KTMOBJECT_NAMESPACE Transactions
		{
			get
			{
				_KTMOBJECT_NAMESPACE returnValue = new _KTMOBJECT_NAMESPACE(_StructureData, _BufferOffset + 176);
				return returnValue;
			}
		}
		public _KTMOBJECT_NAMESPACE ResourceManagers
		{
			get
			{
				_KTMOBJECT_NAMESPACE returnValue = new _KTMOBJECT_NAMESPACE(_StructureData, _BufferOffset + 344);
				return returnValue;
			}
		}
		public _KMUTANT LsnOrderedMutex
		{
			get
			{
				_KMUTANT returnValue = new _KMUTANT(_StructureData, _BufferOffset + 512);
				return returnValue;
			}
		}
		public _LIST_ENTRY LsnOrderedList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 568);
				return returnValue;
			}
		}
		public _LARGE_INTEGER CommitVirtualClock
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 584);
				return returnValue;
			}
		}
		public _FAST_MUTEX CommitVirtualClockMutex
		{
			get
			{
				_FAST_MUTEX returnValue = new _FAST_MUTEX(_StructureData, _BufferOffset + 592);
				return returnValue;
			}
		}
		public _CLS_LSN BaseLsn
		{
			get
			{
				_CLS_LSN returnValue = new _CLS_LSN(_StructureData, _BufferOffset + 648);
				return returnValue;
			}
		}
		public _CLS_LSN CurrentReadLsn
		{
			get
			{
				_CLS_LSN returnValue = new _CLS_LSN(_StructureData, _BufferOffset + 656);
				return returnValue;
			}
		}
		public _CLS_LSN LastRecoveredLsn
		{
			get
			{
				_CLS_LSN returnValue = new _CLS_LSN(_StructureData, _BufferOffset + 664);
				return returnValue;
			}
		}
		public UInt64 TmRmHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 672); } }
		public UInt64 TmRm { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 680); } }
		public _KEVENT LogFullNotifyEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 688);
				return returnValue;
			}
		}
		public _WORK_QUEUE_ITEM CheckpointWorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 712);
				return returnValue;
			}
		}
		public _CLS_LSN CheckpointTargetLsn
		{
			get
			{
				_CLS_LSN returnValue = new _CLS_LSN(_StructureData, _BufferOffset + 744);
				return returnValue;
			}
		}
		public _WORK_QUEUE_ITEM LogFullCompletedWorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 752);
				return returnValue;
			}
		}
		public _ERESOURCE LogWriteResource
		{
			get
			{
				_ERESOURCE returnValue = new _ERESOURCE(_StructureData, _BufferOffset + 784);
				return returnValue;
			}
		}
		public UInt32 LogFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 888); } }
		public Int32 LogFullStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 892); } }
		public Int32 RecoveryStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 896); } }
		public _CLS_LSN LastCheckBaseLsn
		{
			get
			{
				_CLS_LSN returnValue = new _CLS_LSN(_StructureData, _BufferOffset + 904);
				return returnValue;
			}
		}
		public _LIST_ENTRY RestartOrderedList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 912);
				return returnValue;
			}
		}
		public _WORK_QUEUE_ITEM OfflineWorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 928);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PO_IRP_QUEUE
 
	public class _PO_IRP_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_IRP_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_IRP_QUEUE"": [ 16, {
				 ""CurrentIrp"": [ 0, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""PendingIrpList"": [ 8, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 CurrentIrp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 PendingIrpList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _KALPC_WORK_ON_BEHALF_DATA
 
	public class _KALPC_WORK_ON_BEHALF_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KALPC_WORK_ON_BEHALF_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KALPC_WORK_ON_BEHALF_DATA"": [ 8, {
				 ""Ticket"": [ 0, [ ""_ALPC_WORK_ON_BEHALF_TICKET"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ALPC_WORK_ON_BEHALF_TICKET Ticket
		{
			get
			{
				_ALPC_WORK_ON_BEHALF_TICKET returnValue = new _ALPC_WORK_ON_BEHALF_TICKET(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_NOTIFY_BLOCK
 
	public class _CM_NOTIFY_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_NOTIFY_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_NOTIFY_BLOCK"": [ 88, {
				 ""HiveList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PostList"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""KeyControlBlock"": [ 32, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_CONTROL_BLOCK\""}"" ]],
				 ""KeyBody"": [ 40, [ ""Pointer"", ""{\""target\"":\""_CM_KEY_BODY\""}"" ]],
				 ""Filter"": [ 48, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""WatchTree"": [ 48, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]],
				 ""NotifyPending"": [ 48, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""SubjectContext"": [ 56, [ ""_SECURITY_SUBJECT_CONTEXT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY HiveList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY PostList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 KeyControlBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 KeyBody { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt32 Filter
		{
			get
			{
				// start: 0  end: 30  Mask: 111111111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 1073741823) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 WatchTree
		{
			get
			{
				// start: 30  end: 31  Mask: 1000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 1073741824) >> 30;
				return (UInt32)value2;
			}
		}
		public UInt32 NotifyPending
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 48);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public _SECURITY_SUBJECT_CONTEXT SubjectContext
		{
			get
			{
				_SECURITY_SUBJECT_CONTEXT returnValue = new _SECURITY_SUBJECT_CONTEXT(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
	}
	#endregion
	#region _TOKEN_CONTROL
 
	public class _TOKEN_CONTROL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TOKEN_CONTROL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TOKEN_CONTROL"": [ 40, {
				 ""TokenId"": [ 0, [ ""_LUID"", ""null"" ]],
				 ""AuthenticationId"": [ 8, [ ""_LUID"", ""null"" ]],
				 ""ModifiedId"": [ 16, [ ""_LUID"", ""null"" ]],
				 ""TokenSource"": [ 24, [ ""_TOKEN_SOURCE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LUID TokenId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LUID AuthenticationId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _LUID ModifiedId
		{
			get
			{
				_LUID returnValue = new _LUID(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _TOKEN_SOURCE TokenSource
		{
			get
			{
				_TOKEN_SOURCE returnValue = new _TOKEN_SOURCE(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _LDRP_LOAD_CONTEXT
 
	public class _LDRP_LOAD_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LDRP_LOAD_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LDRP_LOAD_CONTEXT"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _LDR_DATA_TABLE_ENTRY
 
	public class _LDR_DATA_TABLE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LDR_DATA_TABLE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 288; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LDR_DATA_TABLE_ENTRY"": [ 288, {
				 ""InLoadOrderLinks"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""InMemoryOrderLinks"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""InInitializationOrderLinks"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DllBase"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EntryPoint"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SizeOfImage"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""FullDllName"": [ 72, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""BaseDllName"": [ 88, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""FlagGroup"": [ 104, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""Flags"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""PackagedBinary"": [ 104, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""MarkedForRemoval"": [ 104, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""ImageDll"": [ 104, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""LoadNotificationsSent"": [ 104, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""TelemetryEntryProcessed"": [ 104, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessStaticImport"": [ 104, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""InLegacyLists"": [ 104, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""InIndexes"": [ 104, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""ShimDll"": [ 104, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""InExceptionTable"": [ 104, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""ReservedFlags1"": [ 104, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""LoadInProgress"": [ 104, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""LoadConfigProcessed"": [ 104, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""EntryProcessed"": [ 104, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""ProtectDelayLoad"": [ 104, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""ReservedFlags3"": [ 104, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""DontCallForThreads"": [ 104, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessAttachCalled"": [ 104, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessAttachFailed"": [ 104, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt32\""}"" ]],
				 ""CorDeferredValidate"": [ 104, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""CorImage"": [ 104, [ ""BitField"", ""{\""end_bit\"":23,\""start_bit\"":22,\""target\"":\""UInt32\""}"" ]],
				 ""DontRelocate"": [ 104, [ ""BitField"", ""{\""end_bit\"":24,\""start_bit\"":23,\""target\"":\""UInt32\""}"" ]],
				 ""CorILOnly"": [ 104, [ ""BitField"", ""{\""end_bit\"":25,\""start_bit\"":24,\""target\"":\""UInt32\""}"" ]],
				 ""ChpeImage"": [ 104, [ ""BitField"", ""{\""end_bit\"":26,\""start_bit\"":25,\""target\"":\""UInt32\""}"" ]],
				 ""ReservedFlags5"": [ 104, [ ""BitField"", ""{\""end_bit\"":28,\""start_bit\"":26,\""target\"":\""UInt32\""}"" ]],
				 ""Redirected"": [ 104, [ ""BitField"", ""{\""end_bit\"":29,\""start_bit\"":28,\""target\"":\""UInt32\""}"" ]],
				 ""ReservedFlags6"": [ 104, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":29,\""target\"":\""UInt32\""}"" ]],
				 ""CompatDatabaseProcessed"": [ 104, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""ObsoleteLoadCount"": [ 108, [ ""UInt16"", ""null"" ]],
				 ""TlsIndex"": [ 110, [ ""UInt16"", ""null"" ]],
				 ""HashLinks"": [ 112, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""TimeDateStamp"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""EntryPointActivationContext"": [ 136, [ ""Pointer"", ""{\""target\"":\""_ACTIVATION_CONTEXT\""}"" ]],
				 ""Lock"": [ 144, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DdagNode"": [ 152, [ ""Pointer"", ""{\""target\"":\""_LDR_DDAG_NODE\""}"" ]],
				 ""NodeModuleLink"": [ 160, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LoadContext"": [ 176, [ ""Pointer"", ""{\""target\"":\""_LDRP_LOAD_CONTEXT\""}"" ]],
				 ""ParentDllBase"": [ 184, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SwitchBackContext"": [ 192, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BaseAddressIndexNode"": [ 200, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""MappingInfoIndexNode"": [ 224, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""OriginalBase"": [ 248, [ ""UInt64"", ""null"" ]],
				 ""LoadTime"": [ 256, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""BaseNameHashValue"": [ 264, [ ""UInt32"", ""null"" ]],
				 ""LoadReason"": [ 268, [ ""Enumeration"", ""{\""enum_name\"":\""_LDR_DLL_LOAD_REASON\"",\""target\"":\""UInt32\""}"" ]],
				 ""ImplicitPathOptions"": [ 272, [ ""UInt32"", ""null"" ]],
				 ""ReferenceCount"": [ 276, [ ""UInt32"", ""null"" ]],
				 ""DependentLoadFlags"": [ 280, [ ""UInt32"", ""null"" ]],
				 ""SigningLevel"": [ 284, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY InLoadOrderLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY InMemoryOrderLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LIST_ENTRY InInitializationOrderLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 DllBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 EntryPoint { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt32 SizeOfImage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public _UNICODE_STRING FullDllName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _UNICODE_STRING BaseDllName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public Byte[] FlagGroup
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 104];
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 PackagedBinary
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 MarkedForRemoval
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 ImageDll
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 LoadNotificationsSent
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 TelemetryEntryProcessed
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessStaticImport
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 InLegacyLists
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 InIndexes
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 ShimDll
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 InExceptionTable
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 ReservedFlags1
		{
			get
			{
				// start: 10  end: 12  Mask: 0000110000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 3072) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 LoadInProgress
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 LoadConfigProcessed
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 EntryProcessed
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 ProtectDelayLoad
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 ReservedFlags3
		{
			get
			{
				// start: 16  end: 18  Mask: 110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 196608) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 DontCallForThreads
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 262144) >> 18;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessAttachCalled
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 524288) >> 19;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessAttachFailed
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 1048576) >> 20;
				return (UInt32)value2;
			}
		}
		public UInt32 CorDeferredValidate
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 2097152) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 CorImage
		{
			get
			{
				// start: 22  end: 23  Mask: 10000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 4194304) >> 22;
				return (UInt32)value2;
			}
		}
		public UInt32 DontRelocate
		{
			get
			{
				// start: 23  end: 24  Mask: 100000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 8388608) >> 23;
				return (UInt32)value2;
			}
		}
		public UInt32 CorILOnly
		{
			get
			{
				// start: 24  end: 25  Mask: 1000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 16777216) >> 24;
				return (UInt32)value2;
			}
		}
		public UInt32 ChpeImage
		{
			get
			{
				// start: 25  end: 26  Mask: 10000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 33554432) >> 25;
				return (UInt32)value2;
			}
		}
		public UInt32 ReservedFlags5
		{
			get
			{
				// start: 26  end: 28  Mask: 1100000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 201326592) >> 26;
				return (UInt32)value2;
			}
		}
		public UInt32 Redirected
		{
			get
			{
				// start: 28  end: 29  Mask: 10000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 268435456) >> 28;
				return (UInt32)value2;
			}
		}
		public UInt32 ReservedFlags6
		{
			get
			{
				// start: 29  end: 31  Mask: 1100000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 1610612736) >> 29;
				return (UInt32)value2;
			}
		}
		public UInt32 CompatDatabaseProcessed
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 104);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public UInt16 ObsoleteLoadCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 108); } }
		public UInt16 TlsIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 110); } }
		public _LIST_ENTRY HashLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt32 TimeDateStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt64 EntryPointActivationContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 DdagNode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public _LIST_ENTRY NodeModuleLink
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 160);
				return returnValue;
			}
		}
		public UInt64 LoadContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 ParentDllBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public UInt64 SwitchBackContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public _RTL_BALANCED_NODE BaseAddressIndexNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 200);
				return returnValue;
			}
		}
		public _RTL_BALANCED_NODE MappingInfoIndexNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 224);
				return returnValue;
			}
		}
		public UInt64 OriginalBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public _LARGE_INTEGER LoadTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
		public UInt32 BaseNameHashValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 264); } }
		public _LDR_DLL_LOAD_REASON LoadReason { get { return (_LDR_DLL_LOAD_REASON)BitConverter.ToUInt32(_StructureData, _BufferOffset + 268); } }
		public UInt32 ImplicitPathOptions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 272); } }
		public UInt32 ReferenceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 276); } }
		public UInt32 DependentLoadFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 280); } }
		public Byte SigningLevel{ get { return _StructureData[_BufferOffset +284]; } }
	}
	#endregion
	#region _KTIMER2_COLLECTION
 
	public class _KTIMER2_COLLECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTIMER2_COLLECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTIMER2_COLLECTION"": [ 24, {
				 ""Tree"": [ 0, [ ""_RTL_RB_TREE"", ""null"" ]],
				 ""NextDueTime"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_RB_TREE Tree
		{
			get
			{
				_RTL_RB_TREE returnValue = new _RTL_RB_TREE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 NextDueTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _MI_WSLE
 
	public class _MI_WSLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_WSLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_WSLE"": [ 1, {
				 ""u1"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _VF_WATCHDOG_IRP
 
	public class _VF_WATCHDOG_IRP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VF_WATCHDOG_IRP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VF_WATCHDOG_IRP"": [ 32, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Irp"": [ 16, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""DueTickCount"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Inserted"": [ 28, [ ""Byte"", ""null"" ]],
				 ""TrackedStackLocation"": [ 29, [ ""Char"", ""null"" ]],
				 ""CancelTimeoutTicks"": [ 30, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Irp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 DueTickCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Byte Inserted{ get { return _StructureData[_BufferOffset +28]; } }
		public Char TrackedStackLocation { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 29); } }
		public UInt16 CancelTimeoutTicks { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 30); } }
	}
	#endregion
	#region _u
 
	public class _u
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _u(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_u"": [ 80, {
				 ""KeyNode"": [ 0, [ ""_CM_KEY_NODE"", ""null"" ]],
				 ""KeyValue"": [ 0, [ ""_CM_KEY_VALUE"", ""null"" ]],
				 ""KeySecurity"": [ 0, [ ""_CM_KEY_SECURITY"", ""null"" ]],
				 ""KeyIndex"": [ 0, [ ""_CM_KEY_INDEX"", ""null"" ]],
				 ""ValueData"": [ 0, [ ""_CM_BIG_DATA"", ""null"" ]],
				 ""KeyList"": [ 0, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""KeyString"": [ 0, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public _CM_KEY_NODE KeyNode
		{
			get
			{
				_CM_KEY_NODE returnValue = new _CM_KEY_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _CM_KEY_VALUE KeyValue
		{
			get
			{
				_CM_KEY_VALUE returnValue = new _CM_KEY_VALUE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _CM_KEY_SECURITY KeySecurity
		{
			get
			{
				_CM_KEY_SECURITY returnValue = new _CM_KEY_SECURITY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _CM_KEY_INDEX KeyIndex
		{
			get
			{
				_CM_KEY_INDEX returnValue = new _CM_KEY_INDEX(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _CM_BIG_DATA ValueData
		{
			get
			{
				_CM_BIG_DATA returnValue = new _CM_BIG_DATA(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32[] KeyList
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt16[] KeyString
		{
			get
			{
				UInt16[] returnValue = new UInt16[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_PARTITION_MODWRITES
 
	public class _MI_PARTITION_MODWRITES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PARTITION_MODWRITES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 704; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PARTITION_MODWRITES"": [ 704, {
				 ""AttemptForCantExtend"": [ 0, [ ""_MMPAGE_FILE_EXPANSION"", ""null"" ]],
				 ""PageFileContract"": [ 88, [ ""_MMPAGE_FILE_EXPANSION"", ""null"" ]],
				 ""NumberOfMappedMdls"": [ 176, [ ""UInt64"", ""null"" ]],
				 ""NumberOfMappedMdlsInUse"": [ 184, [ ""Int32"", ""null"" ]],
				 ""NumberOfMappedMdlsInUsePeak"": [ 188, [ ""UInt32"", ""null"" ]],
				 ""MappedFileHeader"": [ 192, [ ""_MMMOD_WRITER_LISTHEAD"", ""null"" ]],
				 ""NeedMappedMdl"": [ 232, [ ""Byte"", ""null"" ]],
				 ""NeedPageFileMdl"": [ 233, [ ""Byte"", ""null"" ]],
				 ""ModwriterActive"": [ 234, [ ""Byte"", ""null"" ]],
				 ""TransitionInserted"": [ 235, [ ""Byte"", ""null"" ]],
				 ""LastModifiedWriteError"": [ 236, [ ""Int32"", ""null"" ]],
				 ""LastMappedWriteError"": [ 240, [ ""Int32"", ""null"" ]],
				 ""MappedFileWriteSucceeded"": [ 244, [ ""UInt32"", ""null"" ]],
				 ""MappedWriteBurstCount"": [ 248, [ ""UInt32"", ""null"" ]],
				 ""LowPriorityModWritesOutstanding"": [ 252, [ ""UInt32"", ""null"" ]],
				 ""BoostModWriteIoPriorityEvent"": [ 256, [ ""_KEVENT"", ""null"" ]],
				 ""ModifiedWriterThreadPriority"": [ 280, [ ""Int32"", ""null"" ]],
				 ""ModifiedPagesLowPriorityGoal"": [ 288, [ ""UInt64"", ""null"" ]],
				 ""ModifiedPageWriterEvent"": [ 296, [ ""_KEVENT"", ""null"" ]],
				 ""ModifiedWriterExitedEvent"": [ 320, [ ""_KEVENT"", ""null"" ]],
				 ""WriteAllPagefilePages"": [ 344, [ ""Int32"", ""null"" ]],
				 ""WriteAllMappedPages"": [ 348, [ ""Int32"", ""null"" ]],
				 ""MappedPageWriterEvent"": [ 352, [ ""_KEVENT"", ""null"" ]],
				 ""ModWriteData"": [ 376, [ ""_MI_MODWRITE_DATA"", ""null"" ]],
				 ""RescanPageFilesEvent"": [ 440, [ ""_KEVENT"", ""null"" ]],
				 ""PagingFileHeader"": [ 464, [ ""_MMMOD_WRITER_LISTHEAD"", ""null"" ]],
				 ""ModifiedPageWriterThread"": [ 504, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""ModifiedPageWriterRundown"": [ 512, [ ""_EX_RUNDOWN_REF"", ""null"" ]],
				 ""PagefileScanWorkItem"": [ 520, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""PagefileScanCount"": [ 552, [ ""UInt32"", ""null"" ]],
				 ""ClusterRestrictionLock"": [ 556, [ ""Int32"", ""null"" ]],
				 ""ClusterRestrictions"": [ 560, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""NotifyStoreMemoryConditions"": [ 568, [ ""_KEVENT"", ""null"" ]],
				 ""DelayMappedWrite"": [ 592, [ ""Byte"", ""null"" ]],
				 ""PagefileReservationsEnabled"": [ 596, [ ""UInt32"", ""null"" ]],
				 ""PageFileCreationLock"": [ 600, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""TrimPagefileWorkItem"": [ 608, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""LastTrimPagefileTime"": [ 640, [ ""UInt64"", ""null"" ]],
				 ""WsSwapPagefileContractWorkItem"": [ 648, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""WsSwapPageFileContractionInProgress"": [ 680, [ ""Int32"", ""null"" ]],
				 ""WorkingSetSwapLock"": [ 688, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""WorkingSetInswapLock"": [ 696, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _MMPAGE_FILE_EXPANSION AttemptForCantExtend
		{
			get
			{
				_MMPAGE_FILE_EXPANSION returnValue = new _MMPAGE_FILE_EXPANSION(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _MMPAGE_FILE_EXPANSION PageFileContract
		{
			get
			{
				_MMPAGE_FILE_EXPANSION returnValue = new _MMPAGE_FILE_EXPANSION(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public UInt64 NumberOfMappedMdls { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public Int32 NumberOfMappedMdlsInUse { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 184); } }
		public UInt32 NumberOfMappedMdlsInUsePeak { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public _MMMOD_WRITER_LISTHEAD MappedFileHeader
		{
			get
			{
				_MMMOD_WRITER_LISTHEAD returnValue = new _MMMOD_WRITER_LISTHEAD(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public Byte NeedMappedMdl{ get { return _StructureData[_BufferOffset +232]; } }
		public Byte NeedPageFileMdl{ get { return _StructureData[_BufferOffset +233]; } }
		public Byte ModwriterActive{ get { return _StructureData[_BufferOffset +234]; } }
		public Byte TransitionInserted{ get { return _StructureData[_BufferOffset +235]; } }
		public Int32 LastModifiedWriteError { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 236); } }
		public Int32 LastMappedWriteError { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 240); } }
		public UInt32 MappedFileWriteSucceeded { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 244); } }
		public UInt32 MappedWriteBurstCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 248); } }
		public UInt32 LowPriorityModWritesOutstanding { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 252); } }
		public _KEVENT BoostModWriteIoPriorityEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
		public Int32 ModifiedWriterThreadPriority { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 280); } }
		public UInt64 ModifiedPagesLowPriorityGoal { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 288); } }
		public _KEVENT ModifiedPageWriterEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 296);
				return returnValue;
			}
		}
		public _KEVENT ModifiedWriterExitedEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 320);
				return returnValue;
			}
		}
		public Int32 WriteAllPagefilePages { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 344); } }
		public Int32 WriteAllMappedPages { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 348); } }
		public _KEVENT MappedPageWriterEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 352);
				return returnValue;
			}
		}
		public _MI_MODWRITE_DATA ModWriteData
		{
			get
			{
				_MI_MODWRITE_DATA returnValue = new _MI_MODWRITE_DATA(_StructureData, _BufferOffset + 376);
				return returnValue;
			}
		}
		public _KEVENT RescanPageFilesEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 440);
				return returnValue;
			}
		}
		public _MMMOD_WRITER_LISTHEAD PagingFileHeader
		{
			get
			{
				_MMMOD_WRITER_LISTHEAD returnValue = new _MMMOD_WRITER_LISTHEAD(_StructureData, _BufferOffset + 464);
				return returnValue;
			}
		}
		public UInt64 ModifiedPageWriterThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 504); } }
		public _EX_RUNDOWN_REF ModifiedPageWriterRundown
		{
			get
			{
				_EX_RUNDOWN_REF returnValue = new _EX_RUNDOWN_REF(_StructureData, _BufferOffset + 512);
				return returnValue;
			}
		}
		public _WORK_QUEUE_ITEM PagefileScanWorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 520);
				return returnValue;
			}
		}
		public UInt32 PagefileScanCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 552); } }
		public Int32 ClusterRestrictionLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 556); } }
		public _MI_RESTRICTED_MODWRITES[] ClusterRestrictions
		{
			get
			{
				_MI_RESTRICTED_MODWRITES[] returnValue = new _MI_RESTRICTED_MODWRITES[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _MI_RESTRICTED_MODWRITES(_StructureData, (i * size) + _BufferOffset + 560);
				return returnValue;
			}
		}
		public _KEVENT NotifyStoreMemoryConditions
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 568);
				return returnValue;
			}
		}
		public Byte DelayMappedWrite{ get { return _StructureData[_BufferOffset +592]; } }
		public UInt32 PagefileReservationsEnabled { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 596); } }
		public _EX_PUSH_LOCK PageFileCreationLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 600);
				return returnValue;
			}
		}
		public _WORK_QUEUE_ITEM TrimPagefileWorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 608);
				return returnValue;
			}
		}
		public UInt64 LastTrimPagefileTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 640); } }
		public _WORK_QUEUE_ITEM WsSwapPagefileContractWorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 648);
				return returnValue;
			}
		}
		public Int32 WsSwapPageFileContractionInProgress { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 680); } }
		public _EX_PUSH_LOCK WorkingSetSwapLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 688);
				return returnValue;
			}
		}
		public Int32 WorkingSetInswapLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 696); } }
	}
	#endregion
	#region _PPC_DBGKD_CONTROL_SET
 
	public class _PPC_DBGKD_CONTROL_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPC_DBGKD_CONTROL_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPC_DBGKD_CONTROL_SET"": [ 12, {
				 ""Continue"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""CurrentSymbolStart"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""CurrentSymbolEnd"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Continue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 CurrentSymbolStart { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 CurrentSymbolEnd { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _OB_EXTENDED_PARSE_PARAMETERS
 
	public class _OB_EXTENDED_PARSE_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OB_EXTENDED_PARSE_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OB_EXTENDED_PARSE_PARAMETERS"": [ 16, {
				 ""Length"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""RestrictedAccessMask"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Silo"": [ 8, [ ""Pointer"", ""{\""target\"":\""_EJOB\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Length { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt32 RestrictedAccessMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 Silo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _MMSUBSECTION_FLAGS
 
	public class _MMSUBSECTION_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMSUBSECTION_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMSUBSECTION_FLAGS"": [ 4, {
				 ""SubsectionAccessed"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""StartingSector4132"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":6,\""target\"":\""UInt16\""}"" ]],
				 ""SubsectionStatic"": [ 2, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""GlobalMemory"": [ 2, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""Spare"": [ 2, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt16\""}"" ]],
				 ""OnDereferenceList"": [ 2, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt16\""}"" ]],
				 ""SectorEndOffset"": [ 2, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":4,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 SubsectionAccessed
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 Protection
		{
			get
			{
				// start: 1  end: 6  Mask: 0000000000111110
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 62) >> 1;
				return (UInt16)value2;
			}
		}
		public UInt16 StartingSector4132
		{
			get
			{
				// start: 6  end: 16  Mask: 1111111111000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65472) >> 6;
				return (UInt16)value2;
			}
		}
		public UInt16 SubsectionStatic
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 GlobalMemory
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 2) >> 1;
				return (UInt16)value2;
			}
		}
		public UInt16 Spare
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 4) >> 2;
				return (UInt16)value2;
			}
		}
		public UInt16 OnDereferenceList
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 8) >> 3;
				return (UInt16)value2;
			}
		}
		public UInt16 SectorEndOffset
		{
			get
			{
				// start: 4  end: 16  Mask: 1111111111110000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 65520) >> 4;
				return (UInt16)value2;
			}
		}
	}
	#endregion
	#region _MI_COMBINE_PAGE_LISTHEAD
 
	public class _MI_COMBINE_PAGE_LISTHEAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_COMBINE_PAGE_LISTHEAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_COMBINE_PAGE_LISTHEAD"": [ 16, {
				 ""Table"": [ 0, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""Lock"": [ 8, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_AVL_TREE Table
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int32 Lock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _RTL_AVL_TABLE
 
	public class _RTL_AVL_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_AVL_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 104; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_AVL_TABLE"": [ 104, {
				 ""BalancedRoot"": [ 0, [ ""_RTL_BALANCED_LINKS"", ""null"" ]],
				 ""OrderedPointer"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WhichOrderedElement"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""NumberGenericTableElements"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""DepthOfTree"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""RestartKey"": [ 56, [ ""Pointer"", ""{\""target\"":\""_RTL_BALANCED_LINKS\""}"" ]],
				 ""DeleteCount"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""CompareRoutine"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AllocateRoutine"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FreeRoutine"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TableContext"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BALANCED_LINKS BalancedRoot
		{
			get
			{
				_RTL_BALANCED_LINKS returnValue = new _RTL_BALANCED_LINKS(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 OrderedPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt32 WhichOrderedElement { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 NumberGenericTableElements { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 DepthOfTree { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt64 RestartKey { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt32 DeleteCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt64 CompareRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 AllocateRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 FreeRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 TableContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
	}
	#endregion
	#region _DBGKD_FILL_MEMORY
 
	public class _DBGKD_FILL_MEMORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DBGKD_FILL_MEMORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DBGKD_FILL_MEMORY"": [ 16, {
				 ""Address"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Length"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""PatternLength"": [ 14, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Address { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public UInt16 PatternLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 14); } }
	}
	#endregion
	#region _GENERIC_MAPPING
 
	public class _GENERIC_MAPPING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _GENERIC_MAPPING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_GENERIC_MAPPING"": [ 16, {
				 ""GenericRead"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""GenericWrite"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""GenericExecute"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""GenericAll"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 GenericRead { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 GenericWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 GenericExecute { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 GenericAll { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _MI_EXTENT_DELETION_WAIT_BLOCK
 
	public class _MI_EXTENT_DELETION_WAIT_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_EXTENT_DELETION_WAIT_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_EXTENT_DELETION_WAIT_BLOCK"": [ 32, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_MI_EXTENT_DELETION_WAIT_BLOCK\""}"" ]],
				 ""Gate"": [ 8, [ ""_KGATE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _KGATE Gate
		{
			get
			{
				_KGATE returnValue = new _KGATE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _FAULT_INFORMATION
 
	public class _FAULT_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FAULT_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FAULT_INFORMATION"": [ 56, {
				 ""Type"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_FAULT_INFORMATION_ARCH\"",\""target\"":\""UInt32\""}"" ]],
				 ""IsStage1"": [ 4, [ ""Byte"", ""null"" ]],
				 ""Arm64"": [ 8, [ ""_FAULT_INFORMATION_ARM64"", ""null"" ]],
				 ""X64"": [ 8, [ ""_FAULT_INFORMATION_X64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _FAULT_INFORMATION_ARCH Type { get { return (_FAULT_INFORMATION_ARCH)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte IsStage1{ get { return _StructureData[_BufferOffset +4]; } }
		public _FAULT_INFORMATION_ARM64 Arm64
		{
			get
			{
				_FAULT_INFORMATION_ARM64 returnValue = new _FAULT_INFORMATION_ARM64(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _FAULT_INFORMATION_X64 X64
		{
			get
			{
				_FAULT_INFORMATION_X64 returnValue = new _FAULT_INFORMATION_X64(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_CRITICAL_SECTION_DEBUG
 
	public class _RTL_CRITICAL_SECTION_DEBUG
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_CRITICAL_SECTION_DEBUG(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_CRITICAL_SECTION_DEBUG"": [ 48, {
				 ""Type"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""CreatorBackTraceIndex"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""CriticalSection"": [ 8, [ ""Pointer"", ""{\""target\"":\""_RTL_CRITICAL_SECTION\""}"" ]],
				 ""ProcessLocksList"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""EntryCount"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""ContentionCount"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""CreatorBackTraceIndexHigh"": [ 44, [ ""UInt16"", ""null"" ]],
				 ""SpareUSHORT"": [ 46, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Type { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 CreatorBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 CriticalSection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY ProcessLocksList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 EntryCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 ContentionCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt16 CreatorBackTraceIndexHigh { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 44); } }
		public UInt16 SpareUSHORT { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 46); } }
	}
	#endregion
	#region _DEVICE_DESCRIPTION
 
	public class _DEVICE_DESCRIPTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_DESCRIPTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_DESCRIPTION"": [ 64, {
				 ""Version"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Master"": [ 4, [ ""Byte"", ""null"" ]],
				 ""ScatterGather"": [ 5, [ ""Byte"", ""null"" ]],
				 ""DemandMode"": [ 6, [ ""Byte"", ""null"" ]],
				 ""AutoInitialize"": [ 7, [ ""Byte"", ""null"" ]],
				 ""Dma32BitAddresses"": [ 8, [ ""Byte"", ""null"" ]],
				 ""IgnoreCount"": [ 9, [ ""Byte"", ""null"" ]],
				 ""Reserved1"": [ 10, [ ""Byte"", ""null"" ]],
				 ""Dma64BitAddresses"": [ 11, [ ""Byte"", ""null"" ]],
				 ""BusNumber"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""DmaChannel"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""InterfaceType"": [ 20, [ ""Enumeration"", ""{\""enum_name\"":\""_INTERFACE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""DmaWidth"": [ 24, [ ""Enumeration"", ""{\""enum_name\"":\""_DMA_WIDTH\"",\""target\"":\""UInt32\""}"" ]],
				 ""DmaSpeed"": [ 28, [ ""Enumeration"", ""{\""enum_name\"":\""_DMA_SPEED\"",\""target\"":\""UInt32\""}"" ]],
				 ""MaximumLength"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""DmaPort"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""DmaAddressWidth"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""DmaControllerInstance"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""DmaRequestLine"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""DeviceAddress"": [ 56, [ ""_LARGE_INTEGER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte Master{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte ScatterGather{ get { return _StructureData[_BufferOffset +5]; } }
		public Byte DemandMode{ get { return _StructureData[_BufferOffset +6]; } }
		public Byte AutoInitialize{ get { return _StructureData[_BufferOffset +7]; } }
		public Byte Dma32BitAddresses{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte IgnoreCount{ get { return _StructureData[_BufferOffset +9]; } }
		public Byte Reserved1{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte Dma64BitAddresses{ get { return _StructureData[_BufferOffset +11]; } }
		public UInt32 BusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 DmaChannel { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _INTERFACE_TYPE InterfaceType { get { return (_INTERFACE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _DMA_WIDTH DmaWidth { get { return (_DMA_WIDTH)BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _DMA_SPEED DmaSpeed { get { return (_DMA_SPEED)BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 MaximumLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 DmaPort { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 DmaAddressWidth { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 DmaControllerInstance { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 DmaRequestLine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public _LARGE_INTEGER DeviceAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
	}
	#endregion
	#region _POP_FX_ACCOUNTING
 
	public class _POP_FX_ACCOUNTING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_ACCOUNTING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 224; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_ACCOUNTING"": [ 224, {
				 ""Lock"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Active"": [ 8, [ ""Byte"", ""null"" ]],
				 ""DripsRequiredState"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Level"": [ 16, [ ""Int32"", ""null"" ]],
				 ""ActiveStamp"": [ 24, [ ""Int64"", ""null"" ]],
				 ""CsActiveTimeAccounting"": [ 32, [ ""_POP_FX_ACTIVE_TIME_ACCOUNTING"", ""null"" ]],
				 ""CsCriticalActiveTimeAccounting"": [ 128, [ ""_POP_FX_ACTIVE_TIME_ACCOUNTING"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Byte Active{ get { return _StructureData[_BufferOffset +8]; } }
		public UInt32 DripsRequiredState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public Int32 Level { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public Int64 ActiveStamp { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 24); } }
		public _POP_FX_ACTIVE_TIME_ACCOUNTING CsActiveTimeAccounting
		{
			get
			{
				_POP_FX_ACTIVE_TIME_ACCOUNTING returnValue = new _POP_FX_ACTIVE_TIME_ACCOUNTING(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _POP_FX_ACTIVE_TIME_ACCOUNTING CsCriticalActiveTimeAccounting
		{
			get
			{
				_POP_FX_ACTIVE_TIME_ACCOUNTING returnValue = new _POP_FX_ACTIVE_TIME_ACCOUNTING(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KSCHEDULING_GROUP_POLICY
 
	public class _KSCHEDULING_GROUP_POLICY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KSCHEDULING_GROUP_POLICY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KSCHEDULING_GROUP_POLICY"": [ 8, {
				 ""Value"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Weight"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MinRate"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""MaxRate"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""AllFlags"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Type"": [ 4, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Disabled"": [ 4, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""RankBias"": [ 4, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""Spare1"": [ 4, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Value { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt16 Weight { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 MinRate { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 MaxRate { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 AllFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Type
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Disabled
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 RankBias
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 Spare1
		{
			get
			{
				// start: 3  end: 32  Mask: 11111111111111111111111111111000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4294967288) >> 3;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _AWEINFO
 
	public class _AWEINFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _AWEINFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_AWEINFO"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _MI_PHYSICAL_VIEW
 
	public class _MI_PHYSICAL_VIEW
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PHYSICAL_VIEW(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PHYSICAL_VIEW"": [ 48, {
				 ""PhysicalNode"": [ 0, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""Vad"": [ 24, [ ""Pointer"", ""{\""target\"":\""_MMVAD_SHORT\""}"" ]],
				 ""AweInfo"": [ 32, [ ""Pointer"", ""{\""target\"":\""_AWEINFO\""}"" ]],
				 ""u1"": [ 40, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BALANCED_NODE PhysicalNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Vad { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 AweInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DOMAIN_CONFIGURATION
 
	public class _DOMAIN_CONFIGURATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DOMAIN_CONFIGURATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DOMAIN_CONFIGURATION"": [ 40, {
				 ""Type"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_DOMAIN_CONFIGURATION_ARCH\"",\""target\"":\""UInt32\""}"" ]],
				 ""Arm64"": [ 8, [ ""_DOMAIN_CONFIGURATION_ARM64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _DOMAIN_CONFIGURATION_ARCH Type { get { return (_DOMAIN_CONFIGURATION_ARCH)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _DOMAIN_CONFIGURATION_ARM64 Arm64
		{
			get
			{
				_DOMAIN_CONFIGURATION_ARM64 returnValue = new _DOMAIN_CONFIGURATION_ARM64(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _POP_POLICY_DEVICE
 
	public class _POP_POLICY_DEVICE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_POLICY_DEVICE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_POLICY_DEVICE"": [ 64, {
				 ""Link"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeviceType"": [ 16, [ ""Enumeration"", ""{\""enum_name\"":\""POWER_POLICY_DEVICE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Notification"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Name"": [ 32, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""Device"": [ 48, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""Irp"": [ 56, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public POWER_POLICY_DEVICE_TYPE DeviceType { get { return (POWER_POLICY_DEVICE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 Notification { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _UNICODE_STRING Name
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 Device { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Irp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
	}
	#endregion
	#region _INVERTED_FUNCTION_TABLE_ENTRY
 
	public class _INVERTED_FUNCTION_TABLE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _INVERTED_FUNCTION_TABLE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_INVERTED_FUNCTION_TABLE_ENTRY"": [ 24, {
				 ""FunctionTable"": [ 0, [ ""Pointer"", ""{\""target\"":\""_IMAGE_RUNTIME_FUNCTION_ENTRY\""}"" ]],
				 ""DynamicTable"": [ 0, [ ""Pointer"", ""{\""target\"":\""_DYNAMIC_FUNCTION_TABLE\""}"" ]],
				 ""ImageBase"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SizeOfImage"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""SizeOfTable"": [ 20, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 FunctionTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 DynamicTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ImageBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 SizeOfImage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 SizeOfTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _MI_SECTION_IMAGE_INFORMATION
 
	public class _MI_SECTION_IMAGE_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SECTION_IMAGE_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SECTION_IMAGE_INFORMATION"": [ 80, {
				 ""ExportedImageInformation"": [ 0, [ ""_SECTION_IMAGE_INFORMATION"", ""null"" ]],
				 ""InternalImageInformation"": [ 64, [ ""_MI_EXTRA_IMAGE_INFORMATION"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SECTION_IMAGE_INFORMATION ExportedImageInformation
		{
			get
			{
				_SECTION_IMAGE_INFORMATION returnValue = new _SECTION_IMAGE_INFORMATION(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _MI_EXTRA_IMAGE_INFORMATION InternalImageInformation
		{
			get
			{
				_MI_EXTRA_IMAGE_INFORMATION returnValue = new _MI_EXTRA_IMAGE_INFORMATION(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PPM_SELECTION_STATISTICS
 
	public class _PPM_SELECTION_STATISTICS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPM_SELECTION_STATISTICS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPM_SELECTION_STATISTICS"": [ 128, {
				 ""SelectedCount"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""VetoCount"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""PreVetoCount"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""WrongProcessorCount"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""LatencyCount"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""IdleDurationCount"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""DeviceDependencyCount"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""ProcessorDependencyCount"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""PlatformOnlyCount"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""InterruptibleCount"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""LegacyOverrideCount"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""CstateCheckCount"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""NoCStateCount"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""CoordinatedDependencyCount"": [ 104, [ ""UInt64"", ""null"" ]],
				 ""NotClockOwnerCount"": [ 112, [ ""UInt64"", ""null"" ]],
				 ""PreVetoAccounting"": [ 120, [ ""Pointer"", ""{\""target\"":\""_PPM_VETO_ACCOUNTING\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SelectedCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 VetoCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 PreVetoCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 WrongProcessorCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 LatencyCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 IdleDurationCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 DeviceDependencyCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 ProcessorDependencyCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 PlatformOnlyCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 InterruptibleCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 LegacyOverrideCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 CstateCheckCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 NoCStateCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 CoordinatedDependencyCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 NotClockOwnerCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 PreVetoAccounting { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
	}
	#endregion
	#region _POP_FX_DEVICE_DIRECTED_TRANSITION_STATE
 
	public class _POP_FX_DEVICE_DIRECTED_TRANSITION_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_DEVICE_DIRECTED_TRANSITION_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_DEVICE_DIRECTED_TRANSITION_STATE"": [ 16, {
				 ""CompletionContext"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CompletionStatus"": [ 8, [ ""Int32"", ""null"" ]],
				 ""DIrpPending"": [ 12, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""DIrpCompleted"": [ 12, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 CompletionContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Int32 CompletionStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 DIrpPending
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 DIrpCompleted
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _CM_KEY_SECURITY
 
	public class _CM_KEY_SECURITY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_SECURITY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_SECURITY"": [ 40, {
				 ""Signature"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Reserved"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Flink"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Blink"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ReferenceCount"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""DescriptorLength"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Descriptor"": [ 20, [ ""_SECURITY_DESCRIPTOR_RELATIVE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Signature { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Reserved { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Flink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Blink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ReferenceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 DescriptorLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _SECURITY_DESCRIPTOR_RELATIVE Descriptor
		{
			get
			{
				_SECURITY_DESCRIPTOR_RELATIVE returnValue = new _SECURITY_DESCRIPTOR_RELATIVE(_StructureData, _BufferOffset + 20);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_FREE_LARGE_PAGE_LIST
 
	public class _MI_FREE_LARGE_PAGE_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_FREE_LARGE_PAGE_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_FREE_LARGE_PAGE_LIST"": [ 24, {
				 ""ListHead"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""EntryCount"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 EntryCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _POP_FX_COMPONENT
 
	public class _POP_FX_COMPONENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_COMPONENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 440; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_COMPONENT"": [ 440, {
				 ""Id"": [ 0, [ ""_GUID"", ""null"" ]],
				 ""Index"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""WorkOrder"": [ 24, [ ""_POP_FX_WORK_ORDER"", ""null"" ]],
				 ""Device"": [ 80, [ ""Pointer"", ""{\""target\"":\""_POP_FX_DEVICE\""}"" ]],
				 ""Flags"": [ 88, [ ""_POP_FX_COMPONENT_FLAGS"", ""null"" ]],
				 ""Resident"": [ 96, [ ""Int32"", ""null"" ]],
				 ""ActiveEvent"": [ 104, [ ""_KEVENT"", ""null"" ]],
				 ""IdleLock"": [ 128, [ ""UInt64"", ""null"" ]],
				 ""IdleConditionComplete"": [ 136, [ ""Int32"", ""null"" ]],
				 ""IdleStateComplete"": [ 140, [ ""Int32"", ""null"" ]],
				 ""IdleStamp"": [ 144, [ ""UInt64"", ""null"" ]],
				 ""CurrentIdleState"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""IdleStateCount"": [ 156, [ ""UInt32"", ""null"" ]],
				 ""IdleStates"": [ 160, [ ""Pointer"", ""{\""target\"":\""_POP_FX_IDLE_STATE\""}"" ]],
				 ""DeepestWakeableIdleState"": [ 168, [ ""UInt32"", ""null"" ]],
				 ""ProviderCount"": [ 172, [ ""UInt32"", ""null"" ]],
				 ""Providers"": [ 176, [ ""Pointer"", ""{\""target\"":\""_POP_FX_PROVIDER\""}"" ]],
				 ""IdleProviderCount"": [ 184, [ ""UInt32"", ""null"" ]],
				 ""DependentCount"": [ 188, [ ""UInt32"", ""null"" ]],
				 ""Dependents"": [ 192, [ ""Pointer"", ""{\""target\"":\""_POP_FX_DEPENDENT\""}"" ]],
				 ""Accounting"": [ 200, [ ""_POP_FX_ACCOUNTING"", ""null"" ]],
				 ""Performance"": [ 424, [ ""Pointer"", ""{\""target\"":\""_POP_FX_PERF_INFO\""}"" ]],
				 ""PowerProfile"": [ 432, [ ""Pointer"", ""{\""target\"":\""_POP_COMPONENT_POWER_PROFILE\""}"" ]] }]
				 }
				)";
			}
		}
		public _GUID Id
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 Index { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public _POP_FX_WORK_ORDER WorkOrder
		{
			get
			{
				_POP_FX_WORK_ORDER returnValue = new _POP_FX_WORK_ORDER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 Device { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public _POP_FX_COMPONENT_FLAGS Flags
		{
			get
			{
				_POP_FX_COMPONENT_FLAGS returnValue = new _POP_FX_COMPONENT_FLAGS(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public Int32 Resident { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 96); } }
		public _KEVENT ActiveEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt64 IdleLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public Int32 IdleConditionComplete { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 136); } }
		public Int32 IdleStateComplete { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 140); } }
		public UInt64 IdleStamp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt32 CurrentIdleState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public UInt32 IdleStateCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 156); } }
		public UInt64 IdleStates { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt32 DeepestWakeableIdleState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public UInt32 ProviderCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 172); } }
		public UInt64 Providers { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt32 IdleProviderCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 184); } }
		public UInt32 DependentCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public UInt64 Dependents { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public _POP_FX_ACCOUNTING Accounting
		{
			get
			{
				_POP_FX_ACCOUNTING returnValue = new _POP_FX_ACCOUNTING(_StructureData, _BufferOffset + 200);
				return returnValue;
			}
		}
		public UInt64 Performance { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 424); } }
		public UInt64 PowerProfile { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 432); } }
	}
	#endregion
	#region _DYNAMIC_FUNCTION_TABLE
 
	public class _DYNAMIC_FUNCTION_TABLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DYNAMIC_FUNCTION_TABLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DYNAMIC_FUNCTION_TABLE"": [ 112, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""FunctionTable"": [ 16, [ ""Pointer"", ""{\""target\"":\""_IMAGE_RUNTIME_FUNCTION_ENTRY\""}"" ]],
				 ""TimeStamp"": [ 24, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""MinimumAddress"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""MaximumAddress"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""BaseAddress"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""Callback"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Context"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OutOfProcessCallbackDll"": [ 72, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""Type"": [ 80, [ ""Enumeration"", ""{\""enum_name\"":\""_FUNCTION_TABLE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""EntryCount"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""TreeNode"": [ 88, [ ""_RTL_BALANCED_NODE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 FunctionTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _LARGE_INTEGER TimeStamp
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 MinimumAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 MaximumAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 BaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Callback { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 OutOfProcessCallbackDll { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public _FUNCTION_TABLE_TYPE Type { get { return (_FUNCTION_TABLE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 EntryCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public _RTL_BALANCED_NODE TreeNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ISRDPCSTATS
 
	public class _ISRDPCSTATS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ISRDPCSTATS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ISRDPCSTATS"": [ 96, {
				 ""IsrTime"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""IsrTimeStart"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""IsrCount"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""DpcTime"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""DpcTimeStart"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""DpcCount"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""IsrActive"": [ 48, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 49, [ ""Array"", ""{\""count\"":7,\""target\"":\""Byte\""}"" ]],
				 ""DpcWatchdog"": [ 56, [ ""_ISRDPCSTATS_SEQUENCE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 IsrTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 IsrTimeStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 IsrCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 DpcTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 DpcTimeStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 DpcCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public Byte IsrActive{ get { return _StructureData[_BufferOffset +48]; } }
		public Byte[] Reserved
		{
			get
			{
				Byte[] returnValue = new Byte[7];
				for(int i=0; i<7; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 49];
				return returnValue;
			}
		}
		public _ISRDPCSTATS_SEQUENCE DpcWatchdog
		{
			get
			{
				_ISRDPCSTATS_SEQUENCE returnValue = new _ISRDPCSTATS_SEQUENCE(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
	}
	#endregion
	#region _SEGMENT_FLAGS
 
	public class _SEGMENT_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEGMENT_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEGMENT_FLAGS"": [ 4, {
				 ""TotalNumberOfPtes4132"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""Spare0"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt16\""}"" ]],
				 ""SessionDriverProtos"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt16\""}"" ]],
				 ""LargePages"": [ 0, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt16\""}"" ]],
				 ""DebugSymbolsLoaded"": [ 0, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt16\""}"" ]],
				 ""WriteCombined"": [ 0, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt16\""}"" ]],
				 ""NoCache"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt16\""}"" ]],
				 ""Short0"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Spare"": [ 2, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""DefaultProtectionMask"": [ 2, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""Binary32"": [ 2, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""ContainsDebug"": [ 2, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""Byte\""}"" ]],
				 ""UChar1"": [ 2, [ ""Byte"", ""null"" ]],
				 ""ForceCollision"": [ 3, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""ImageSigningType"": [ 3, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""ImageSigningLevel"": [ 3, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""UChar2"": [ 3, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 TotalNumberOfPtes4132
		{
			get
			{
				// start: 0  end: 10  Mask: 0000001111111111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1023) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 Spare0
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt16)value2;
			}
		}
		public UInt16 SessionDriverProtos
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt16)value2;
			}
		}
		public UInt16 LargePages
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4096) >> 12;
				return (UInt16)value2;
			}
		}
		public UInt16 DebugSymbolsLoaded
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8192) >> 13;
				return (UInt16)value2;
			}
		}
		public UInt16 WriteCombined
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16384) >> 14;
				return (UInt16)value2;
			}
		}
		public UInt16 NoCache
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32768) >> 15;
				return (UInt16)value2;
			}
		}
		public UInt16 Short0 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Spare
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte DefaultProtectionMask
		{
			get
			{
				// start: 1  end: 6  Mask: 0000000000111110
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 62) >> 1;
				return (Byte)value2;
			}
		}
		public Byte Binary32
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 64) >> 6;
				return (Byte)value2;
			}
		}
		public Byte ContainsDebug
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 128) >> 7;
				return (Byte)value2;
			}
		}
		public Byte UChar1{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte ForceCollision
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte ImageSigningType
		{
			get
			{
				// start: 1  end: 4  Mask: 0000000000001110
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 14) >> 1;
				return (Byte)value2;
			}
		}
		public Byte ImageSigningLevel
		{
			get
			{
				// start: 4  end: 8  Mask: 0000000011110000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 240) >> 4;
				return (Byte)value2;
			}
		}
		public Byte UChar2{ get { return _StructureData[_BufferOffset +3]; } }
	}
	#endregion
	#region _XSTATE_CONTEXT
 
	public class _XSTATE_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _XSTATE_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_XSTATE_CONTEXT"": [ 32, {
				 ""Mask"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Length"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Reserved1"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""Area"": [ 16, [ ""Pointer"", ""{\""target\"":\""_XSAVE_AREA\""}"" ]],
				 ""Buffer"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Mask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Reserved1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 Area { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Buffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _IO_REMOVE_LOCK
 
	public class _IO_REMOVE_LOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_REMOVE_LOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_REMOVE_LOCK"": [ 32, {
				 ""Common"": [ 0, [ ""_IO_REMOVE_LOCK_COMMON_BLOCK"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _IO_REMOVE_LOCK_COMMON_BLOCK Common
		{
			get
			{
				_IO_REMOVE_LOCK_COMMON_BLOCK returnValue = new _IO_REMOVE_LOCK_COMMON_BLOCK(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _LOADER_PARAMETER_BLOCK
 
	public class _LOADER_PARAMETER_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LOADER_PARAMETER_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 352; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LOADER_PARAMETER_BLOCK"": [ 352, {
				 ""OsMajorVersion"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""OsMinorVersion"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Size"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""OsLoaderSecurityVersion"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""LoadOrderListHead"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""MemoryDescriptorListHead"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""BootDriverListHead"": [ 48, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""EarlyLaunchListHead"": [ 64, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CoreDriverListHead"": [ 80, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CoreExtensionsDriverListHead"": [ 96, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""TpmCoreDriverListHead"": [ 112, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""KernelStack"": [ 128, [ ""UInt64"", ""null"" ]],
				 ""Prcb"": [ 136, [ ""UInt64"", ""null"" ]],
				 ""Process"": [ 144, [ ""UInt64"", ""null"" ]],
				 ""Thread"": [ 152, [ ""UInt64"", ""null"" ]],
				 ""KernelStackSize"": [ 160, [ ""UInt32"", ""null"" ]],
				 ""RegistryLength"": [ 164, [ ""UInt32"", ""null"" ]],
				 ""RegistryBase"": [ 168, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ConfigurationRoot"": [ 176, [ ""Pointer"", ""{\""target\"":\""_CONFIGURATION_COMPONENT_DATA\""}"" ]],
				 ""ArcBootDeviceName"": [ 184, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""ArcHalDeviceName"": [ 192, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""NtBootPathName"": [ 200, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""NtHalPathName"": [ 208, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""LoadOptions"": [ 216, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""NlsData"": [ 224, [ ""Pointer"", ""{\""target\"":\""_NLS_DATA_BLOCK\""}"" ]],
				 ""ArcDiskInformation"": [ 232, [ ""Pointer"", ""{\""target\"":\""_ARC_DISK_INFORMATION\""}"" ]],
				 ""Extension"": [ 240, [ ""Pointer"", ""{\""target\"":\""_LOADER_PARAMETER_EXTENSION\""}"" ]],
				 ""u"": [ 248, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""FirmwareInformation"": [ 264, [ ""_FIRMWARE_INFORMATION_LOADER_BLOCK"", ""null"" ]],
				 ""OsBootstatPathName"": [ 328, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""ArcOSDataDeviceName"": [ 336, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]],
				 ""ArcWindowsSysPartName"": [ 344, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 OsMajorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 OsMinorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 OsLoaderSecurityVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _LIST_ENTRY LoadOrderListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LIST_ENTRY MemoryDescriptorListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _LIST_ENTRY BootDriverListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _LIST_ENTRY EarlyLaunchListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _LIST_ENTRY CoreDriverListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public _LIST_ENTRY CoreExtensionsDriverListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public _LIST_ENTRY TpmCoreDriverListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt64 KernelStack { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 Prcb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 Process { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt32 KernelStackSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 160); } }
		public UInt32 RegistryLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
		public UInt64 RegistryBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 ConfigurationRoot { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 ArcBootDeviceName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public UInt64 ArcHalDeviceName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt64 NtBootPathName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 NtHalPathName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 LoadOptions { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 NlsData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 ArcDiskInformation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 Extension { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 248);
				return returnValue;
			}
		}
		public _FIRMWARE_INFORMATION_LOADER_BLOCK FirmwareInformation
		{
			get
			{
				_FIRMWARE_INFORMATION_LOADER_BLOCK returnValue = new _FIRMWARE_INFORMATION_LOADER_BLOCK(_StructureData, _BufferOffset + 264);
				return returnValue;
			}
		}
		public UInt64 OsBootstatPathName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 328); } }
		public UInt64 ArcOSDataDeviceName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 336); } }
		public UInt64 ArcWindowsSysPartName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 344); } }
	}
	#endregion
	#region _OBJECT_DUMP_CONTROL
 
	public class _OBJECT_DUMP_CONTROL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_DUMP_CONTROL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_DUMP_CONTROL"": [ 16, {
				 ""Stream"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Detail"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Stream { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Detail { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _IMAGE_SECTION_HEADER
 
	public class _IMAGE_SECTION_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_SECTION_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_SECTION_HEADER"": [ 40, {
				 ""Name"": [ 0, [ ""Array"", ""{\""count\"":8,\""target\"":\""Byte\""}"" ]],
				 ""Misc"": [ 8, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""VirtualAddress"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""SizeOfRawData"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""PointerToRawData"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""PointerToRelocations"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""PointerToLinenumbers"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""NumberOfRelocations"": [ 32, [ ""UInt16"", ""null"" ]],
				 ""NumberOfLinenumbers"": [ 34, [ ""UInt16"", ""null"" ]],
				 ""Characteristics"": [ 36, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte[] Name
		{
			get
			{
				Byte[] returnValue = new Byte[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 0];
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG Misc
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 VirtualAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 SizeOfRawData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 PointerToRawData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 PointerToRelocations { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 PointerToLinenumbers { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt16 NumberOfRelocations { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 32); } }
		public UInt16 NumberOfLinenumbers { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 34); } }
		public UInt32 Characteristics { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
	}
	#endregion
	#region _FAST_OWNER_ENTRY_INTERNAL
 
	public class _FAST_OWNER_ENTRY_INTERNAL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FAST_OWNER_ENTRY_INTERNAL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FAST_OWNER_ENTRY_INTERNAL"": [ 72, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""AbLockHandle"": [ 16, [ ""Byte"", ""null"" ]],
				 ""Disowned"": [ 17, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""DynamicallyAllocated"": [ 17, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""CallerExclusive"": [ 17, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""IsSublistHead"": [ 18, [ ""Byte"", ""null"" ]],
				 ""IsWaiting"": [ 19, [ ""Byte"", ""null"" ]],
				 ""LockAddress"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ThreadAddress"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SublistHead"": [ 40, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LockListEntry"": [ 56, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte AbLockHandle{ get { return _StructureData[_BufferOffset +16]; } }
		public Byte Disowned
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 17];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte DynamicallyAllocated
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 17];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte CallerExclusive
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 17];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte IsSublistHead{ get { return _StructureData[_BufferOffset +18]; } }
		public Byte IsWaiting{ get { return _StructureData[_BufferOffset +19]; } }
		public UInt64 LockAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ThreadAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _LIST_ENTRY SublistHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _LIST_ENTRY LockListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_POOL_STATE
 
	public class _MI_POOL_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_POOL_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 168; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_POOL_STATE"": [ 168, {
				 ""MaximumNonPagedPoolThreshold"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""AllocatedNonPagedPool"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""AllocatedSecureNonPagedPool"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""BadPoolHead"": [ 24, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""HighEventSets"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""HighEventSetsValid"": [ 36, [ ""Byte"", ""null"" ]],
				 ""LowPagedPoolThreshold"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""HighPagedPoolThreshold"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""PermittedFaultsLock"": [ 56, [ ""Int32"", ""null"" ]],
				 ""PermittedFaultsTree"": [ 64, [ ""_RTL_AVL_TREE"", ""null"" ]],
				 ""PermittedFaultsInitialNode"": [ 72, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""TotalPagedPoolQuota"": [ 152, [ ""UInt64"", ""null"" ]],
				 ""TotalNonPagedPoolQuota"": [ 160, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 MaximumNonPagedPoolThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 AllocatedNonPagedPool { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 AllocatedSecureNonPagedPool { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _SINGLE_LIST_ENTRY BadPoolHead
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 HighEventSets { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public Byte HighEventSetsValid{ get { return _StructureData[_BufferOffset +36]; } }
		public UInt64 LowPagedPoolThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 HighPagedPoolThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public Int32 PermittedFaultsLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 56); } }
		public _RTL_AVL_TREE PermittedFaultsTree
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _MI_ACCESS_VIOLATION_RANGE[] PermittedFaultsInitialNode
		{
			get
			{
				_MI_ACCESS_VIOLATION_RANGE[] returnValue = new _MI_ACCESS_VIOLATION_RANGE[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _MI_ACCESS_VIOLATION_RANGE(_StructureData, (i * size) + _BufferOffset + 72);
				return returnValue;
			}
		}
		public UInt64 TotalPagedPoolQuota { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 TotalNonPagedPoolQuota { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
	}
	#endregion
	#region _IMAGE_RUNTIME_FUNCTION_ENTRY
 
	public class _IMAGE_RUNTIME_FUNCTION_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_RUNTIME_FUNCTION_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_RUNTIME_FUNCTION_ENTRY"": [ 12, {
				 ""BeginAddress"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""EndAddress"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""UnwindInfoAddress"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""UnwindData"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BeginAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 EndAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 UnwindInfoAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 UnwindData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _SECTION_IMAGE_INFORMATION
 
	public class _SECTION_IMAGE_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SECTION_IMAGE_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SECTION_IMAGE_INFORMATION"": [ 64, {
				 ""TransferAddress"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ZeroBits"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""MaximumStackSize"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""CommittedStackSize"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""SubSystemType"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""SubSystemMinorVersion"": [ 36, [ ""UInt16"", ""null"" ]],
				 ""SubSystemMajorVersion"": [ 38, [ ""UInt16"", ""null"" ]],
				 ""SubSystemVersion"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""MajorOperatingSystemVersion"": [ 40, [ ""UInt16"", ""null"" ]],
				 ""MinorOperatingSystemVersion"": [ 42, [ ""UInt16"", ""null"" ]],
				 ""OperatingSystemVersion"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""ImageCharacteristics"": [ 44, [ ""UInt16"", ""null"" ]],
				 ""DllCharacteristics"": [ 46, [ ""UInt16"", ""null"" ]],
				 ""Machine"": [ 48, [ ""UInt16"", ""null"" ]],
				 ""ImageContainsCode"": [ 50, [ ""Byte"", ""null"" ]],
				 ""ImageFlags"": [ 51, [ ""Byte"", ""null"" ]],
				 ""ComPlusNativeReady"": [ 51, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""ComPlusILOnly"": [ 51, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""ImageDynamicallyRelocated"": [ 51, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""ImageMappedFlat"": [ 51, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""BaseBelow4gb"": [ 51, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""ComPlusPrefer32bit"": [ 51, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""Reserved"": [ 51, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""LoaderFlags"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""ImageFileSize"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""CheckSum"": [ 60, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 TransferAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 ZeroBits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 MaximumStackSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 CommittedStackSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 SubSystemType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt16 SubSystemMinorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 36); } }
		public UInt16 SubSystemMajorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 38); } }
		public UInt32 SubSystemVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt16 MajorOperatingSystemVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 40); } }
		public UInt16 MinorOperatingSystemVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 42); } }
		public UInt32 OperatingSystemVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt16 ImageCharacteristics { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 44); } }
		public UInt16 DllCharacteristics { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 46); } }
		public UInt16 Machine { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 48); } }
		public Byte ImageContainsCode{ get { return _StructureData[_BufferOffset +50]; } }
		public Byte ImageFlags{ get { return _StructureData[_BufferOffset +51]; } }
		public Byte ComPlusNativeReady
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 51];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte ComPlusILOnly
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 51];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte ImageDynamicallyRelocated
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 51];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte ImageMappedFlat
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 51];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte BaseBelow4gb
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 51];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte ComPlusPrefer32bit
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 51];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte Reserved
		{
			get
			{
				// start: 6  end: 8  Mask: 0000000011000000
				Byte value = _StructureData[_BufferOffset + 51];
				var value2 = (value & 192) >> 6;
				return (Byte)value2;
			}
		}
		public UInt32 LoaderFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 ImageFileSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 CheckSum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
	}
	#endregion
	#region _KSECONDARY_IDT_ENTRY
 
	public class _KSECONDARY_IDT_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KSECONDARY_IDT_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KSECONDARY_IDT_ENTRY"": [ 48, {
				 ""SpinLock"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""ConnectLock"": [ 8, [ ""_KEVENT"", ""null"" ]],
				 ""LineMasked"": [ 32, [ ""Byte"", ""null"" ]],
				 ""InterruptList"": [ 40, [ ""Pointer"", ""{\""target\"":\""_KINTERRUPT\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SpinLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _KEVENT ConnectLock
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public Byte LineMasked{ get { return _StructureData[_BufferOffset +32]; } }
		public UInt64 InterruptList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _PPM_SELECTION_DEPENDENCY
 
	public class _PPM_SELECTION_DEPENDENCY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPM_SELECTION_DEPENDENCY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPM_SELECTION_DEPENDENCY"": [ 24, {
				 ""Processor"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Menu"": [ 8, [ ""_PPM_SELECTION_MENU"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Processor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _PPM_SELECTION_MENU Menu
		{
			get
			{
				_PPM_SELECTION_MENU returnValue = new _PPM_SELECTION_MENU(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _AGGREGATED_PAYLOAD_FILTER
 
	public class _AGGREGATED_PAYLOAD_FILTER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _AGGREGATED_PAYLOAD_FILTER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_AGGREGATED_PAYLOAD_FILTER"": [ 80, {
				 ""MagicValue"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""DescriptorVersion"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":12,\""target\"":\""UInt16\""}"" ]],
				 ""Size"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""PredicateCount"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Reserved"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""HashedEventIdBitmap"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ProviderGuid"": [ 16, [ ""_GUID"", ""null"" ]],
				 ""EachEventTableOffset"": [ 32, [ ""UInt16"", ""null"" ]],
				 ""EachEventTableLength"": [ 34, [ ""UInt16"", ""null"" ]],
				 ""PayloadDecoderTableOffset"": [ 36, [ ""UInt16"", ""null"" ]],
				 ""PayloadDecoderTableLength"": [ 38, [ ""UInt16"", ""null"" ]],
				 ""EventFilterTableOffset"": [ 40, [ ""UInt16"", ""null"" ]],
				 ""EventFilterTableLength"": [ 42, [ ""UInt16"", ""null"" ]],
				 ""UNICODEStringTableOffset"": [ 44, [ ""UInt16"", ""null"" ]],
				 ""UNICODEStringTableLength"": [ 46, [ ""UInt16"", ""null"" ]],
				 ""ANSIStringTableOffset"": [ 48, [ ""UInt16"", ""null"" ]],
				 ""ANSIStringTableLength"": [ 50, [ ""UInt16"", ""null"" ]],
				 ""PredicateTable"": [ 56, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 MagicValue
		{
			get
			{
				// start: 0  end: 12  Mask: 0000111111111111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4095) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 DescriptorVersion
		{
			get
			{
				// start: 12  end: 16  Mask: 1111000000000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 61440) >> 12;
				return (UInt16)value2;
			}
		}
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 PredicateCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Reserved { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt64 HashedEventIdBitmap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _GUID ProviderGuid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt16 EachEventTableOffset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 32); } }
		public UInt16 EachEventTableLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 34); } }
		public UInt16 PayloadDecoderTableOffset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 36); } }
		public UInt16 PayloadDecoderTableLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 38); } }
		public UInt16 EventFilterTableOffset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 40); } }
		public UInt16 EventFilterTableLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 42); } }
		public UInt16 UNICODEStringTableOffset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 44); } }
		public UInt16 UNICODEStringTableLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 46); } }
		public UInt16 ANSIStringTableOffset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 48); } }
		public UInt16 ANSIStringTableLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 50); } }
		public _EVENT_PAYLOAD_PREDICATE[] PredicateTable
		{
			get
			{
				_EVENT_PAYLOAD_PREDICATE[] returnValue = new _EVENT_PAYLOAD_PREDICATE[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _EVENT_PAYLOAD_PREDICATE(_StructureData, (i * size) + _BufferOffset + 56);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WNF_SCOPE_MAP_ENTRY
 
	public class _WNF_SCOPE_MAP_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WNF_SCOPE_MAP_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WNF_SCOPE_MAP_ENTRY"": [ 24, {
				 ""MapEntryLock"": [ 0, [ ""_WNF_LOCK"", ""null"" ]],
				 ""MapEntryHead"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _WNF_LOCK MapEntryLock
		{
			get
			{
				_WNF_LOCK returnValue = new _WNF_LOCK(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY MapEntryHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ARBITER_ORDERING_LIST
 
	public class _ARBITER_ORDERING_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_ORDERING_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_ORDERING_LIST"": [ 16, {
				 ""Count"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Maximum"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Orderings"": [ 8, [ ""Pointer"", ""{\""target\"":\""_ARBITER_ORDERING\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Count { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Maximum { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 Orderings { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _MI_HARDWARE_STATE
 
	public class _MI_HARDWARE_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_HARDWARE_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 448; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_HARDWARE_STATE"": [ 448, {
				 ""NodeMask"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""NumaHintIndex"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""NumaLastRangeIndexInclusive"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""NodeShift"": [ 12, [ ""Byte"", ""null"" ]],
				 ""ChannelShift"": [ 13, [ ""Byte"", ""null"" ]],
				 ""ChannelHintIndex"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ChannelLastRangeIndexInclusive"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""NodeGraph"": [ 24, [ ""Pointer"", ""{\""target\"":\""_MI_NODE_NUMBER_ZERO_BASED\""}"" ]],
				 ""SystemNodeInformation"": [ 32, [ ""Pointer"", ""{\""target\"":\""_MI_SYSTEM_NODE_INFORMATION\""}"" ]],
				 ""TemporaryNumaRanges"": [ 40, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""NumaMemoryRanges"": [ 72, [ ""Pointer"", ""{\""target\"":\""_HAL_NODE_RANGE\""}"" ]],
				 ""ChannelMemoryRanges"": [ 80, [ ""Pointer"", ""{\""target\"":\""_HAL_CHANNEL_MEMORY_RANGES\""}"" ]],
				 ""SecondLevelCacheSize"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""FirstLevelCacheSize"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""PhysicalAddressBits"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""LogicalProcessorsPerCore"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""ProcessorCachesFlushedOnPowerLoss"": [ 104, [ ""Byte"", ""null"" ]],
				 ""TotalPagesAllowed"": [ 112, [ ""UInt64"", ""null"" ]],
				 ""SecondaryColorMask"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""SecondaryColors"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""FlushTbForAttributeChange"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""FlushCacheForAttributeChange"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""FlushCacheForPageAttributeChange"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""CacheFlushPromoteThreshold"": [ 140, [ ""UInt32"", ""null"" ]],
				 ""PerformanceCounterFrequency"": [ 144, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""InvalidPteMask"": [ 192, [ ""UInt64"", ""null"" ]],
				 ""LargePageColors"": [ 256, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""FlushTbThreshold"": [ 272, [ ""UInt64"", ""null"" ]],
				 ""OptimalZeroingAttribute"": [ 280, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_MI_PFN_CACHE_ATTRIBUTE\""}}"" ]],
				 ""AttributeChangeRequiresReZero"": [ 344, [ ""Byte"", ""null"" ]],
				 ""ZeroCostCounts"": [ 352, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""VsmKernelPageCount"": [ 384, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 NodeMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 NumaHintIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 NumaLastRangeIndexInclusive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte NodeShift{ get { return _StructureData[_BufferOffset +12]; } }
		public Byte ChannelShift{ get { return _StructureData[_BufferOffset +13]; } }
		public UInt32 ChannelHintIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ChannelLastRangeIndexInclusive { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 NodeGraph { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 SystemNodeInformation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _HAL_NODE_RANGE[] TemporaryNumaRanges
		{
			get
			{
				_HAL_NODE_RANGE[] returnValue = new _HAL_NODE_RANGE[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _HAL_NODE_RANGE(_StructureData, (i * size) + _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt64 NumaMemoryRanges { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 ChannelMemoryRanges { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt32 SecondLevelCacheSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 FirstLevelCacheSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 PhysicalAddressBits { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 LogicalProcessorsPerCore { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public Byte ProcessorCachesFlushedOnPowerLoss{ get { return _StructureData[_BufferOffset +104]; } }
		public UInt64 TotalPagesAllowed { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt32 SecondaryColorMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 SecondaryColors { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 FlushTbForAttributeChange { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 FlushCacheForAttributeChange { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt32 FlushCacheForPageAttributeChange { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public UInt32 CacheFlushPromoteThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 140); } }
		public _LARGE_INTEGER PerformanceCounterFrequency
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 144);
				return returnValue;
			}
		}
		public UInt64 InvalidPteMask { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt32[] LargePageColors
		{
			get
			{
				UInt32[] returnValue = new UInt32[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 256);
				return returnValue;
			}
		}
		public UInt64 FlushTbThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public _MI_PFN_CACHE_ATTRIBUTE[] OptimalZeroingAttribute
		{
			get
			{
				_MI_PFN_CACHE_ATTRIBUTE[] returnValue = new _MI_PFN_CACHE_ATTRIBUTE[16];
				int size = 4;
				for(int i=0; i<16; i++ )
					returnValue[i] = (_MI_PFN_CACHE_ATTRIBUTE)BitConverter.ToUInt32(_StructureData, (i * size) + _BufferOffset + 280);
				return returnValue;
			}
		}
		public Byte AttributeChangeRequiresReZero{ get { return _StructureData[_BufferOffset +344]; } }
		public _MI_ZERO_COST_COUNTS[] ZeroCostCounts
		{
			get
			{
				_MI_ZERO_COST_COUNTS[] returnValue = new _MI_ZERO_COST_COUNTS[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _MI_ZERO_COST_COUNTS(_StructureData, (i * size) + _BufferOffset + 352);
				return returnValue;
			}
		}
		public UInt64 VsmKernelPageCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 384); } }
	}
	#endregion
	#region _PPM_VETO_ACCOUNTING
 
	public class _PPM_VETO_ACCOUNTING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPM_VETO_ACCOUNTING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPM_VETO_ACCOUNTING"": [ 40, {
				 ""VetoPresent"": [ 0, [ ""Int32"", ""null"" ]],
				 ""VetoListHead"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CsAccountingBlocks"": [ 24, [ ""Byte"", ""null"" ]],
				 ""BlocksDrips"": [ 25, [ ""Byte"", ""null"" ]],
				 ""PreallocatedVetoCount"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""PreallocatedVetoList"": [ 32, [ ""Pointer"", ""{\""target\"":\""_PPM_VETO_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public Int32 VetoPresent { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public _LIST_ENTRY VetoListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public Byte CsAccountingBlocks{ get { return _StructureData[_BufferOffset +24]; } }
		public Byte BlocksDrips{ get { return _StructureData[_BufferOffset +25]; } }
		public UInt32 PreallocatedVetoCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt64 PreallocatedVetoList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _EX_PARTITION
 
	public class _EX_PARTITION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_PARTITION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_PARTITION"": [ 32, {
				 ""PartitionObject"": [ 0, [ ""Pointer"", ""{\""target\"":\""_EPARTITION\""}"" ]],
				 ""WorkQueues"": [ 8, [ ""Pointer"", ""{\""target\"":\""_EX_WORK_QUEUE**\""}"" ]],
				 ""WorkQueueManagers"": [ 16, [ ""Pointer"", ""{\""target\"":\""_EX_WORK_QUEUE_MANAGER*\""}"" ]],
				 ""QueueAllocationMask"": [ 24, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PartitionObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 WorkQueues { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 WorkQueueManagers { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Int32 QueueAllocationMask { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _CLS_LSN
 
	public class _CLS_LSN
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CLS_LSN(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CLS_LSN"": [ 8, {
				 ""offset"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""ullOffset"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG offset
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 ullOffset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _SYSPTES_HEADER
 
	public class _SYSPTES_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SYSPTES_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 280; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SYSPTES_HEADER"": [ 280, {
				 ""ListHead"": [ 0, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""Count"": [ 256, [ ""UInt64"", ""null"" ]],
				 ""NumberOfEntries"": [ 264, [ ""UInt64"", ""null"" ]],
				 ""NumberOfEntriesPeak"": [ 272, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY[] ListHead
		{
			get
			{
				_LIST_ENTRY[] returnValue = new _LIST_ENTRY[16];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<16; i++ )
					returnValue[i] = new _LIST_ENTRY(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Count { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public UInt64 NumberOfEntries { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 264); } }
		public UInt64 NumberOfEntriesPeak { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
	}
	#endregion
	#region _MI_ERROR_STATE
 
	public class _MI_ERROR_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_ERROR_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 200; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_ERROR_STATE"": [ 200, {
				 ""BadMemoryEventEntry"": [ 0, [ ""_MI_BAD_MEMORY_EVENT_ENTRY"", ""null"" ]],
				 ""PageOfInterest"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""ProbeRaises"": [ 64, [ ""_MI_PROBE_RAISE_TRACKER"", ""null"" ]],
				 ""ForcedCommits"": [ 132, [ ""_MI_FORCED_COMMITS"", ""null"" ]],
				 ""WsleFailures"": [ 140, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""PageHashErrors"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""CheckZeroCount"": [ 148, [ ""UInt32"", ""null"" ]],
				 ""ZeroedPageSingleBitErrorsDetected"": [ 152, [ ""Int32"", ""null"" ]],
				 ""BadPagesDetected"": [ 156, [ ""Int32"", ""null"" ]],
				 ""ScrubPasses"": [ 160, [ ""Int32"", ""null"" ]],
				 ""ScrubBadPagesFound"": [ 164, [ ""Int32"", ""null"" ]],
				 ""UserViewFailures"": [ 168, [ ""UInt32"", ""null"" ]],
				 ""UserViewCollisionFailures"": [ 172, [ ""UInt32"", ""null"" ]],
				 ""UserAllocateFailures"": [ 176, [ ""UInt32"", ""null"" ]],
				 ""UserAllocateCollisionFailures"": [ 180, [ ""UInt32"", ""null"" ]],
				 ""ResavailFailures"": [ 184, [ ""_MI_RESAVAIL_FAILURES"", ""null"" ]],
				 ""PendingBadPages"": [ 192, [ ""Byte"", ""null"" ]],
				 ""FatalGraphicsFailures"": [ 193, [ ""Byte"", ""null"" ]],
				 ""InitFailure"": [ 194, [ ""Byte"", ""null"" ]],
				 ""StopBadMaps"": [ 195, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _MI_BAD_MEMORY_EVENT_ENTRY BadMemoryEventEntry
		{
			get
			{
				_MI_BAD_MEMORY_EVENT_ENTRY returnValue = new _MI_BAD_MEMORY_EVENT_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 PageOfInterest { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public _MI_PROBE_RAISE_TRACKER ProbeRaises
		{
			get
			{
				_MI_PROBE_RAISE_TRACKER returnValue = new _MI_PROBE_RAISE_TRACKER(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _MI_FORCED_COMMITS ForcedCommits
		{
			get
			{
				_MI_FORCED_COMMITS returnValue = new _MI_FORCED_COMMITS(_StructureData, _BufferOffset + 132);
				return returnValue;
			}
		}
		public UInt32[] WsleFailures
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 140);
				return returnValue;
			}
		}
		public UInt32 PageHashErrors { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt32 CheckZeroCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 148); } }
		public Int32 ZeroedPageSingleBitErrorsDetected { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 152); } }
		public Int32 BadPagesDetected { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 156); } }
		public Int32 ScrubPasses { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 160); } }
		public Int32 ScrubBadPagesFound { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 164); } }
		public UInt32 UserViewFailures { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public UInt32 UserViewCollisionFailures { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 172); } }
		public UInt32 UserAllocateFailures { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 176); } }
		public UInt32 UserAllocateCollisionFailures { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 180); } }
		public _MI_RESAVAIL_FAILURES ResavailFailures
		{
			get
			{
				_MI_RESAVAIL_FAILURES returnValue = new _MI_RESAVAIL_FAILURES(_StructureData, _BufferOffset + 184);
				return returnValue;
			}
		}
		public Byte PendingBadPages{ get { return _StructureData[_BufferOffset +192]; } }
		public Byte FatalGraphicsFailures{ get { return _StructureData[_BufferOffset +193]; } }
		public Byte InitFailure{ get { return _StructureData[_BufferOffset +194]; } }
		public Byte StopBadMaps{ get { return _StructureData[_BufferOffset +195]; } }
	}
	#endregion
	#region _PROC_PERF_DOMAIN
 
	public class _PROC_PERF_DOMAIN
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROC_PERF_DOMAIN(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 768; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROC_PERF_DOMAIN"": [ 768, {
				 ""Link"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Master"": [ 16, [ ""Pointer"", ""{\""target\"":\""_PROC_PERF_CHECK_CONTEXT\""}"" ]],
				 ""Members"": [ 24, [ ""_KAFFINITY_EX"", ""null"" ]],
				 ""DomainContext"": [ 192, [ ""UInt64"", ""null"" ]],
				 ""ProcessorCount"": [ 200, [ ""UInt32"", ""null"" ]],
				 ""EfficiencyClass"": [ 204, [ ""Byte"", ""null"" ]],
				 ""NominalPerformanceClass"": [ 205, [ ""Byte"", ""null"" ]],
				 ""HighestPerformanceClass"": [ 206, [ ""Byte"", ""null"" ]],
				 ""Presence"": [ 208, [ ""Enumeration"", ""{\""enum_name\"":\""_PROCESSOR_PRESENCE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Processors"": [ 216, [ ""Pointer"", ""{\""target\"":\""_PROC_PERF_CONSTRAINT\""}"" ]],
				 ""GetFFHThrottleState"": [ 224, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TimeWindowHandler"": [ 232, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BoostPolicyHandler"": [ 240, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BoostModeHandler"": [ 248, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AutonomousActivityWindowHandler"": [ 256, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AutonomousModeHandler"": [ 264, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ReinitializeHandler"": [ 272, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PerfSelectionHandler"": [ 280, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PerfControlHandler"": [ 288, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PerfControlHandlerHidden"": [ 296, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DomainPerfControlHandler"": [ 304, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MaxFrequency"": [ 312, [ ""UInt32"", ""null"" ]],
				 ""NominalFrequency"": [ 316, [ ""UInt32"", ""null"" ]],
				 ""MaxPercent"": [ 320, [ ""UInt32"", ""null"" ]],
				 ""MinPerfPercent"": [ 324, [ ""UInt32"", ""null"" ]],
				 ""MinThrottlePercent"": [ 328, [ ""UInt32"", ""null"" ]],
				 ""AdvertizedMaximumFrequency"": [ 332, [ ""UInt32"", ""null"" ]],
				 ""MinimumRelativePerformance"": [ 336, [ ""UInt64"", ""null"" ]],
				 ""NominalRelativePerformance"": [ 344, [ ""UInt64"", ""null"" ]],
				 ""NominalRelativePerformancePercent"": [ 352, [ ""Byte"", ""null"" ]],
				 ""Coordination"": [ 353, [ ""Byte"", ""null"" ]],
				 ""HardPlatformCap"": [ 354, [ ""Byte"", ""null"" ]],
				 ""AffinitizeControl"": [ 355, [ ""Byte"", ""null"" ]],
				 ""EfficientThrottle"": [ 356, [ ""Byte"", ""null"" ]],
				 ""AllowSchedulerDirectedPerfStates"": [ 357, [ ""Byte"", ""null"" ]],
				 ""InitiateAllProcessors"": [ 358, [ ""Byte"", ""null"" ]],
				 ""AutonomousMode"": [ 359, [ ""Byte"", ""null"" ]],
				 ""ProvideGuidance"": [ 360, [ ""Byte"", ""null"" ]],
				 ""DesiredPercent"": [ 364, [ ""UInt32"", ""null"" ]],
				 ""GuaranteedPercent"": [ 368, [ ""UInt32"", ""null"" ]],
				 ""EngageResponsivenessOverrides"": [ 372, [ ""Byte"", ""null"" ]],
				 ""QosPolicies"": [ 376, [ ""Array"", ""{\""count\"":5,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""QosDisableReasons"": [ 516, [ ""Array"", ""{\""count\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""QosEquivalencyMasks"": [ 536, [ ""Array"", ""{\""count\"":5,\""target\"":\""UInt16\""}"" ]],
				 ""QosSupported"": [ 546, [ ""Byte"", ""null"" ]],
				 ""SelectionGeneration"": [ 548, [ ""UInt32"", ""null"" ]],
				 ""QosSelection"": [ 552, [ ""Array"", ""{\""count\"":5,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""PerfChangeTime"": [ 752, [ ""UInt64"", ""null"" ]],
				 ""PerfChangeIntervalCount"": [ 760, [ ""UInt32"", ""null"" ]],
				 ""Force"": [ 764, [ ""Byte"", ""null"" ]],
				 ""Update"": [ 765, [ ""Byte"", ""null"" ]],
				 ""Apply"": [ 766, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Master { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _KAFFINITY_EX Members
		{
			get
			{
				_KAFFINITY_EX returnValue = new _KAFFINITY_EX(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 DomainContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt32 ProcessorCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 200); } }
		public Byte EfficiencyClass{ get { return _StructureData[_BufferOffset +204]; } }
		public Byte NominalPerformanceClass{ get { return _StructureData[_BufferOffset +205]; } }
		public Byte HighestPerformanceClass{ get { return _StructureData[_BufferOffset +206]; } }
		public _PROCESSOR_PRESENCE Presence { get { return (_PROCESSOR_PRESENCE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 208); } }
		public UInt64 Processors { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 GetFFHThrottleState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 TimeWindowHandler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 BoostPolicyHandler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 BoostModeHandler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public UInt64 AutonomousActivityWindowHandler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public UInt64 AutonomousModeHandler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 264); } }
		public UInt64 ReinitializeHandler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public UInt64 PerfSelectionHandler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 280); } }
		public UInt64 PerfControlHandler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 288); } }
		public UInt64 PerfControlHandlerHidden { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 296); } }
		public UInt64 DomainPerfControlHandler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 304); } }
		public UInt32 MaxFrequency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 312); } }
		public UInt32 NominalFrequency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 316); } }
		public UInt32 MaxPercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 320); } }
		public UInt32 MinPerfPercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 324); } }
		public UInt32 MinThrottlePercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 328); } }
		public UInt32 AdvertizedMaximumFrequency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 332); } }
		public UInt64 MinimumRelativePerformance { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 336); } }
		public UInt64 NominalRelativePerformance { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 344); } }
		public Byte NominalRelativePerformancePercent{ get { return _StructureData[_BufferOffset +352]; } }
		public Byte Coordination{ get { return _StructureData[_BufferOffset +353]; } }
		public Byte HardPlatformCap{ get { return _StructureData[_BufferOffset +354]; } }
		public Byte AffinitizeControl{ get { return _StructureData[_BufferOffset +355]; } }
		public Byte EfficientThrottle{ get { return _StructureData[_BufferOffset +356]; } }
		public Byte AllowSchedulerDirectedPerfStates{ get { return _StructureData[_BufferOffset +357]; } }
		public Byte InitiateAllProcessors{ get { return _StructureData[_BufferOffset +358]; } }
		public Byte AutonomousMode{ get { return _StructureData[_BufferOffset +359]; } }
		public Byte ProvideGuidance{ get { return _StructureData[_BufferOffset +360]; } }
		public UInt32 DesiredPercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 364); } }
		public UInt32 GuaranteedPercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 368); } }
		public Byte EngageResponsivenessOverrides{ get { return _StructureData[_BufferOffset +372]; } }
		public _PROC_PERF_QOS_CLASS_POLICY[] QosPolicies
		{
			get
			{
				_PROC_PERF_QOS_CLASS_POLICY[] returnValue = new _PROC_PERF_QOS_CLASS_POLICY[5];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<5; i++ )
					returnValue[i] = new _PROC_PERF_QOS_CLASS_POLICY(_StructureData, (i * size) + _BufferOffset + 376);
				return returnValue;
			}
		}
		public UInt32[] QosDisableReasons
		{
			get
			{
				UInt32[] returnValue = new UInt32[5];
				for(int i=0; i<5; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 516);
				return returnValue;
			}
		}
		public UInt16[] QosEquivalencyMasks
		{
			get
			{
				UInt16[] returnValue = new UInt16[5];
				for(int i=0; i<5; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 536);
				return returnValue;
			}
		}
		public Byte QosSupported{ get { return _StructureData[_BufferOffset +546]; } }
		public UInt32 SelectionGeneration { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 548); } }
		public _PERF_CONTROL_STATE_SELECTION[] QosSelection
		{
			get
			{
				_PERF_CONTROL_STATE_SELECTION[] returnValue = new _PERF_CONTROL_STATE_SELECTION[5];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<5; i++ )
					returnValue[i] = new _PERF_CONTROL_STATE_SELECTION(_StructureData, (i * size) + _BufferOffset + 552);
				return returnValue;
			}
		}
		public UInt64 PerfChangeTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 752); } }
		public UInt32 PerfChangeIntervalCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 760); } }
		public Byte Force{ get { return _StructureData[_BufferOffset +764]; } }
		public Byte Update{ get { return _StructureData[_BufferOffset +765]; } }
		public Byte Apply{ get { return _StructureData[_BufferOffset +766]; } }
	}
	#endregion
	#region _MI_COMMON_PAGE_STATE
 
	public class _MI_COMMON_PAGE_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_COMMON_PAGE_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 168; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_COMMON_PAGE_STATE"": [ 168, {
				 ""PageOfOnesPfn"": [ 0, [ ""Pointer"", ""{\""target\"":\""_MMPFN\""}"" ]],
				 ""PageOfOnes"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""DummyPagePfn"": [ 16, [ ""Pointer"", ""{\""target\"":\""_MMPFN\""}"" ]],
				 ""DummyPage"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""PageOfZeroes"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""ZeroMapping"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OnesMapping"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ZeroCrc"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""OnesCrc"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""BitmapGapFrames"": [ 72, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""PfnGapFrames"": [ 104, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""PageTableOfZeroes"": [ 136, [ ""UInt64"", ""null"" ]],
				 ""PdeOfZeroes"": [ 144, [ ""_MMPTE"", ""null"" ]],
				 ""PageTableOfOnes"": [ 152, [ ""UInt64"", ""null"" ]],
				 ""PdeOfOnes"": [ 160, [ ""_MMPTE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PageOfOnesPfn { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 PageOfOnes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 DummyPagePfn { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 DummyPage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 PageOfZeroes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 ZeroMapping { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 OnesMapping { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 ZeroCrc { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 OnesCrc { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64[] BitmapGapFrames
		{
			get
			{
				UInt64[] returnValue = new UInt64[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 72);
				return returnValue;
			}
		}
		public UInt64[] PfnGapFrames
		{
			get
			{
				UInt64[] returnValue = new UInt64[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt64 PageTableOfZeroes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public _MMPTE PdeOfZeroes
		{
			get
			{
				_MMPTE returnValue = new _MMPTE(_StructureData, _BufferOffset + 144);
				return returnValue;
			}
		}
		public UInt64 PageTableOfOnes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public _MMPTE PdeOfOnes
		{
			get
			{
				_MMPTE returnValue = new _MMPTE(_StructureData, _BufferOffset + 160);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_BALANCED_LINKS
 
	public class _RTL_BALANCED_LINKS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_BALANCED_LINKS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_BALANCED_LINKS"": [ 32, {
				 ""Parent"": [ 0, [ ""Pointer"", ""{\""target\"":\""_RTL_BALANCED_LINKS\""}"" ]],
				 ""LeftChild"": [ 8, [ ""Pointer"", ""{\""target\"":\""_RTL_BALANCED_LINKS\""}"" ]],
				 ""RightChild"": [ 16, [ ""Pointer"", ""{\""target\"":\""_RTL_BALANCED_LINKS\""}"" ]],
				 ""Balance"": [ 24, [ ""Char"", ""null"" ]],
				 ""Reserved"": [ 25, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Parent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 LeftChild { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 RightChild { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Char Balance { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 24); } }
		public Byte[] Reserved
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 25];
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_EXTENDED_ENTRY
 
	public class _HEAP_EXTENDED_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_EXTENDED_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_EXTENDED_ENTRY"": [ 16, {
				 ""Reserved"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FunctionIndex"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""ContextValue"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""InterceptorValue"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""UnusedBytesLength"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""EntryOffset"": [ 14, [ ""Byte"", ""null"" ]],
				 ""ExtendedBlockSignature"": [ 15, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Reserved { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt16 FunctionIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 ContextValue { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public UInt32 InterceptorValue { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt16 UnusedBytesLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public Byte EntryOffset{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte ExtendedBlockSignature{ get { return _StructureData[_BufferOffset +15]; } }
	}
	#endregion
	#region _SUPPORTED_RANGES
 
	public class _SUPPORTED_RANGES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SUPPORTED_RANGES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 192; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SUPPORTED_RANGES"": [ 192, {
				 ""Version"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Sorted"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 3, [ ""Byte"", ""null"" ]],
				 ""NoIO"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""IO"": [ 8, [ ""_SUPPORTED_RANGE"", ""null"" ]],
				 ""NoMemory"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""Memory"": [ 56, [ ""_SUPPORTED_RANGE"", ""null"" ]],
				 ""NoPrefetchMemory"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""PrefetchMemory"": [ 104, [ ""_SUPPORTED_RANGE"", ""null"" ]],
				 ""NoDma"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""Dma"": [ 152, [ ""_SUPPORTED_RANGE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public Byte Sorted{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 NoIO { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _SUPPORTED_RANGE IO
		{
			get
			{
				_SUPPORTED_RANGE returnValue = new _SUPPORTED_RANGE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 NoMemory { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public _SUPPORTED_RANGE Memory
		{
			get
			{
				_SUPPORTED_RANGE returnValue = new _SUPPORTED_RANGE(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt32 NoPrefetchMemory { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public _SUPPORTED_RANGE PrefetchMemory
		{
			get
			{
				_SUPPORTED_RANGE returnValue = new _SUPPORTED_RANGE(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt32 NoDma { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public _SUPPORTED_RANGE Dma
		{
			get
			{
				_SUPPORTED_RANGE returnValue = new _SUPPORTED_RANGE(_StructureData, _BufferOffset + 152);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ETW_WMITRACE_WORK
 
	public class _ETW_WMITRACE_WORK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_WMITRACE_WORK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 240; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_WMITRACE_WORK"": [ 240, {
				 ""LoggerId"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SiloSessionId"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""LoggerName"": [ 8, [ ""Array"", ""{\""count\"":65,\""target\"":\""Char\""}"" ]],
				 ""FileName"": [ 73, [ ""Array"", ""{\""count\"":129,\""target\"":\""Char\""}"" ]],
				 ""MaximumFileSize"": [ 204, [ ""UInt32"", ""null"" ]],
				 ""MinBuffers"": [ 208, [ ""UInt32"", ""null"" ]],
				 ""MaxBuffers"": [ 212, [ ""UInt32"", ""null"" ]],
				 ""BufferSize"": [ 216, [ ""UInt32"", ""null"" ]],
				 ""Mode"": [ 220, [ ""UInt32"", ""null"" ]],
				 ""FlushTimer"": [ 224, [ ""UInt32"", ""null"" ]],
				 ""MatchAny"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""MatchAll"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""EnableProperty"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Guid"": [ 28, [ ""_GUID"", ""null"" ]],
				 ""Level"": [ 44, [ ""Byte"", ""null"" ]],
				 ""Status"": [ 232, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 LoggerId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SiloSessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public Char[] LoggerName
		{
			get
			{
				Char[] returnValue = new Char[65];
				for(int i=0; i<65; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 8);
				return returnValue;
			}
		}
		public Char[] FileName
		{
			get
			{
				Char[] returnValue = new Char[129];
				for(int i=0; i<129; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 73);
				return returnValue;
			}
		}
		public UInt32 MaximumFileSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 204); } }
		public UInt32 MinBuffers { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 208); } }
		public UInt32 MaxBuffers { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 212); } }
		public UInt32 BufferSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 216); } }
		public UInt32 Mode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 220); } }
		public UInt32 FlushTimer { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 224); } }
		public UInt64 MatchAny { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 MatchAll { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 EnableProperty { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _GUID Guid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public Byte Level{ get { return _StructureData[_BufferOffset +44]; } }
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 232); } }
	}
	#endregion
	#region _MAPPED_FILE_SEGMENT
 
	public class _MAPPED_FILE_SEGMENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MAPPED_FILE_SEGMENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MAPPED_FILE_SEGMENT"": [ 48, {
				 ""ControlArea"": [ 0, [ ""Pointer"", ""{\""target\"":\""_CONTROL_AREA\""}"" ]],
				 ""TotalNumberOfPtes"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SegmentFlags"": [ 12, [ ""_SEGMENT_FLAGS"", ""null"" ]],
				 ""NumberOfCommittedPages"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""SizeOfSegment"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""ExtendInfo"": [ 32, [ ""Pointer"", ""{\""target\"":\""_MMEXTEND_INFO\""}"" ]],
				 ""BasedAddress"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""SegmentLock"": [ 40, [ ""_EX_PUSH_LOCK"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ControlArea { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 TotalNumberOfPtes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _SEGMENT_FLAGS SegmentFlags
		{
			get
			{
				_SEGMENT_FLAGS returnValue = new _SEGMENT_FLAGS(_StructureData, _BufferOffset + 12);
				return returnValue;
			}
		}
		public UInt64 NumberOfCommittedPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 SizeOfSegment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ExtendInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 BasedAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _EX_PUSH_LOCK SegmentLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MMPTE_TRANSITION
 
	public class _MMPTE_TRANSITION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPTE_TRANSITION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPTE_TRANSITION"": [ 8, {
				 ""Valid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Write"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""Spare"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""IoTracker"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""SwizzleBit"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""Protection"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""Prototype"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""Transition"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""PageFrameNumber"": [ 0, [ ""BitField"", ""{\""end_bit\"":48,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""Unused"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":48,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Valid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Write
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 Spare
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 IoTracker
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt64)value2;
			}
		}
		public UInt64 SwizzleBit
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt64)value2;
			}
		}
		public UInt64 Protection
		{
			get
			{
				// start: 5  end: 10  Mask: 0000001111100000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 992) >> 5;
				return (UInt64)value2;
			}
		}
		public UInt64 Prototype
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 Transition
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 PageFrameNumber
		{
			get
			{
				// start: 12  end: 48  Mask: 111111111111111111111111111111111111000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 281474976706560) >> 12;
				return (UInt64)value2;
			}
		}
		public UInt64 Unused
		{
			get
			{
				// start: 48  end: 64  Mask: 1111111111111111000000000000000000000000000000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446462598732840960) >> 48;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _DEVICE_OBJECT_LIST
 
	public class _DEVICE_OBJECT_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_OBJECT_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_OBJECT_LIST"": [ 40, {
				 ""Count"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""MaxCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""TagCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""OperationCode"": [ 12, [ ""Enumeration"", ""{\""enum_name\"":\""_PNP_DEVICE_DELETE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Devices"": [ 16, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 MaxCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 TagCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _PNP_DEVICE_DELETE_TYPE OperationCode { get { return (_PNP_DEVICE_DELETE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public _DEVICE_OBJECT_LIST_ENTRY[] Devices
		{
			get
			{
				_DEVICE_OBJECT_LIST_ENTRY[] returnValue = new _DEVICE_OBJECT_LIST_ENTRY[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _DEVICE_OBJECT_LIST_ENTRY(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _DEBUG_TRANSPORT_DATA
 
	public class _DEBUG_TRANSPORT_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEBUG_TRANSPORT_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEBUG_TRANSPORT_DATA"": [ 8, {
				 ""HwContextSize"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""UseSerialFraming"": [ 4, [ ""Byte"", ""null"" ]],
				 ""ValidUSBCoreId"": [ 5, [ ""Byte"", ""null"" ]],
				 ""USBCoreId"": [ 6, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 HwContextSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte UseSerialFraming{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte ValidUSBCoreId{ get { return _StructureData[_BufferOffset +5]; } }
		public Byte USBCoreId{ get { return _StructureData[_BufferOffset +6]; } }
	}
	#endregion
	#region _CM_KEY_INDEX
 
	public class _CM_KEY_INDEX
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_KEY_INDEX(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_KEY_INDEX"": [ 8, {
				 ""Signature"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Count"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""List"": [ 4, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Signature { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Count { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32[] List
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _POP_COOLING_EXTENSION
 
	public class _POP_COOLING_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_COOLING_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 144; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_COOLING_EXTENSION"": [ 144, {
				 ""Link"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""RequestListHead"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Lock"": [ 32, [ ""_POP_RW_LOCK"", ""null"" ]],
				 ""DeviceObject"": [ 48, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""NotificationEntry"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Enabled"": [ 64, [ ""Byte"", ""null"" ]],
				 ""ActiveEngaged"": [ 65, [ ""Byte"", ""null"" ]],
				 ""ThrottleLimit"": [ 66, [ ""Byte"", ""null"" ]],
				 ""UpdatingToCurrent"": [ 67, [ ""Byte"", ""null"" ]],
				 ""RemovalFlushEvent"": [ 72, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""PnpFlushEvent"": [ 80, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""Interface"": [ 88, [ ""_THERMAL_COOLING_INTERFACE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY RequestListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _POP_RW_LOCK Lock
		{
			get
			{
				_POP_RW_LOCK returnValue = new _POP_RW_LOCK(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 NotificationEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public Byte Enabled{ get { return _StructureData[_BufferOffset +64]; } }
		public Byte ActiveEngaged{ get { return _StructureData[_BufferOffset +65]; } }
		public Byte ThrottleLimit{ get { return _StructureData[_BufferOffset +66]; } }
		public Byte UpdatingToCurrent{ get { return _StructureData[_BufferOffset +67]; } }
		public UInt64 RemovalFlushEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 PnpFlushEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public _THERMAL_COOLING_INTERFACE Interface
		{
			get
			{
				_THERMAL_COOLING_INTERFACE returnValue = new _THERMAL_COOLING_INTERFACE(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KTMOBJECT_NAMESPACE_LINK
 
	public class _KTMOBJECT_NAMESPACE_LINK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTMOBJECT_NAMESPACE_LINK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTMOBJECT_NAMESPACE_LINK"": [ 40, {
				 ""Links"": [ 0, [ ""_RTL_BALANCED_LINKS"", ""null"" ]],
				 ""Expired"": [ 32, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BALANCED_LINKS Links
		{
			get
			{
				_RTL_BALANCED_LINKS returnValue = new _RTL_BALANCED_LINKS(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte Expired{ get { return _StructureData[_BufferOffset +32]; } }
	}
	#endregion
	#region _POOL_HEADER
 
	public class _POOL_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POOL_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POOL_HEADER"": [ 16, {
				 ""PreviousSize"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""PoolIndex"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":8,\""target\"":\""UInt16\""}"" ]],
				 ""BlockSize"": [ 2, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""PoolType"": [ 2, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":8,\""target\"":\""UInt16\""}"" ]],
				 ""Ulong1"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""PoolTag"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ProcessBilled"": [ 8, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""AllocatorBackTraceIndex"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""PoolTagHash"": [ 10, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 PreviousSize
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 255) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 PoolIndex
		{
			get
			{
				// start: 8  end: 16  Mask: 1111111100000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65280) >> 8;
				return (UInt16)value2;
			}
		}
		public UInt16 BlockSize
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 255) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 PoolType
		{
			get
			{
				// start: 8  end: 16  Mask: 1111111100000000
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 2);
				var value2 = (value & 65280) >> 8;
				return (UInt16)value2;
			}
		}
		public UInt32 Ulong1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 PoolTag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 ProcessBilled { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt16 AllocatorBackTraceIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 PoolTagHash { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
	}
	#endregion
	#region _POP_POWER_SETTING_VALUES
 
	public class _POP_POWER_SETTING_VALUES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_POWER_SETTING_VALUES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 328; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_POWER_SETTING_VALUES"": [ 328, {
				 ""StructureSize"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""PopPolicy"": [ 4, [ ""_SYSTEM_POWER_POLICY"", ""null"" ]],
				 ""CurrentAcDcPowerState"": [ 236, [ ""Enumeration"", ""{\""enum_name\"":\""SYSTEM_POWER_CONDITION\"",\""target\"":\""UInt32\""}"" ]],
				 ""AwayModeEnabled"": [ 240, [ ""Byte"", ""null"" ]],
				 ""AwayModeEngaged"": [ 241, [ ""Byte"", ""null"" ]],
				 ""AwayModePolicyAllowed"": [ 242, [ ""Byte"", ""null"" ]],
				 ""AwayModeIgnoreUserPresent"": [ 244, [ ""Int32"", ""null"" ]],
				 ""AwayModeIgnoreAction"": [ 248, [ ""Int32"", ""null"" ]],
				 ""DisableFastS4"": [ 252, [ ""Byte"", ""null"" ]],
				 ""DisableStandbyStates"": [ 253, [ ""Byte"", ""null"" ]],
				 ""UnattendSleepTimeout"": [ 256, [ ""UInt32"", ""null"" ]],
				 ""DiskIgnoreTime"": [ 260, [ ""UInt32"", ""null"" ]],
				 ""DeviceIdlePolicy"": [ 264, [ ""UInt32"", ""null"" ]],
				 ""VideoDimTimeout"": [ 268, [ ""UInt32"", ""null"" ]],
				 ""VideoNormalBrightness"": [ 272, [ ""UInt32"", ""null"" ]],
				 ""VideoDimBrightness"": [ 276, [ ""UInt32"", ""null"" ]],
				 ""AlsOffset"": [ 280, [ ""UInt32"", ""null"" ]],
				 ""AlsEnabled"": [ 284, [ ""UInt32"", ""null"" ]],
				 ""EsBrightness"": [ 288, [ ""UInt32"", ""null"" ]],
				 ""SwitchShutdownForced"": [ 292, [ ""Byte"", ""null"" ]],
				 ""SystemCoolingPolicy"": [ 296, [ ""UInt32"", ""null"" ]],
				 ""MediaBufferingEngaged"": [ 300, [ ""Byte"", ""null"" ]],
				 ""AudioActivity"": [ 301, [ ""Byte"", ""null"" ]],
				 ""FullscreenVideoPlayback"": [ 302, [ ""Byte"", ""null"" ]],
				 ""EsBatteryThreshold"": [ 304, [ ""UInt32"", ""null"" ]],
				 ""EsAggressive"": [ 308, [ ""Byte"", ""null"" ]],
				 ""EsUserAwaySetting"": [ 309, [ ""Byte"", ""null"" ]],
				 ""ConnectivityInStandby"": [ 312, [ ""UInt32"", ""null"" ]],
				 ""DisconnectedStandbyMode"": [ 316, [ ""UInt32"", ""null"" ]],
				 ""UserPresencePredictionEnabled"": [ 320, [ ""UInt32"", ""null"" ]],
				 ""AirplaneModeEnabled"": [ 324, [ ""Byte"", ""null"" ]],
				 ""BluetoothDeviceCharging"": [ 325, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 StructureSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _SYSTEM_POWER_POLICY PopPolicy
		{
			get
			{
				_SYSTEM_POWER_POLICY returnValue = new _SYSTEM_POWER_POLICY(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public SYSTEM_POWER_CONDITION CurrentAcDcPowerState { get { return (SYSTEM_POWER_CONDITION)BitConverter.ToUInt32(_StructureData, _BufferOffset + 236); } }
		public Byte AwayModeEnabled{ get { return _StructureData[_BufferOffset +240]; } }
		public Byte AwayModeEngaged{ get { return _StructureData[_BufferOffset +241]; } }
		public Byte AwayModePolicyAllowed{ get { return _StructureData[_BufferOffset +242]; } }
		public Int32 AwayModeIgnoreUserPresent { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 244); } }
		public Int32 AwayModeIgnoreAction { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 248); } }
		public Byte DisableFastS4{ get { return _StructureData[_BufferOffset +252]; } }
		public Byte DisableStandbyStates{ get { return _StructureData[_BufferOffset +253]; } }
		public UInt32 UnattendSleepTimeout { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 256); } }
		public UInt32 DiskIgnoreTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 260); } }
		public UInt32 DeviceIdlePolicy { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 264); } }
		public UInt32 VideoDimTimeout { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 268); } }
		public UInt32 VideoNormalBrightness { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 272); } }
		public UInt32 VideoDimBrightness { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 276); } }
		public UInt32 AlsOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 280); } }
		public UInt32 AlsEnabled { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 284); } }
		public UInt32 EsBrightness { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 288); } }
		public Byte SwitchShutdownForced{ get { return _StructureData[_BufferOffset +292]; } }
		public UInt32 SystemCoolingPolicy { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 296); } }
		public Byte MediaBufferingEngaged{ get { return _StructureData[_BufferOffset +300]; } }
		public Byte AudioActivity{ get { return _StructureData[_BufferOffset +301]; } }
		public Byte FullscreenVideoPlayback{ get { return _StructureData[_BufferOffset +302]; } }
		public UInt32 EsBatteryThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 304); } }
		public Byte EsAggressive{ get { return _StructureData[_BufferOffset +308]; } }
		public Byte EsUserAwaySetting{ get { return _StructureData[_BufferOffset +309]; } }
		public UInt32 ConnectivityInStandby { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 312); } }
		public UInt32 DisconnectedStandbyMode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 316); } }
		public UInt32 UserPresencePredictionEnabled { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 320); } }
		public Byte AirplaneModeEnabled{ get { return _StructureData[_BufferOffset +324]; } }
		public Byte BluetoothDeviceCharging{ get { return _StructureData[_BufferOffset +325]; } }
	}
	#endregion
	#region _PROC_PERF_HISTORY_ENTRY
 
	public class _PROC_PERF_HISTORY_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROC_PERF_HISTORY_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 10; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROC_PERF_HISTORY_ENTRY"": [ 10, {
				 ""Utility"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""AffinitizedUtility"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Frequency"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""TaggedPercent"": [ 6, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Utility { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 AffinitizedUtility { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 Frequency { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public Byte[] TaggedPercent
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 6];
				return returnValue;
			}
		}
	}
	#endregion
	#region _ARBITER_BOOT_ALLOCATION_PARAMETERS
 
	public class _ARBITER_BOOT_ALLOCATION_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_BOOT_ALLOCATION_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_BOOT_ALLOCATION_PARAMETERS"": [ 8, {
				 ""ArbitrationList"": [ 0, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ArbitrationList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _MMADDRESS_LIST
 
	public class _MMADDRESS_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMADDRESS_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMADDRESS_LIST"": [ 16, {
				 ""u1"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""EndVa"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG u1
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 EndVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _POP_FX_IDLE_STATE
 
	public class _POP_FX_IDLE_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_IDLE_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_IDLE_STATE"": [ 24, {
				 ""TransitionLatency"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""ResidencyRequirement"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""NominalPower"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 TransitionLatency { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ResidencyRequirement { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 NominalPower { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _HAL_IOMMU_DISPATCH
 
	public class _HAL_IOMMU_DISPATCH
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HAL_IOMMU_DISPATCH(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 152; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HAL_IOMMU_DISPATCH"": [ 152, {
				 ""HalIommuSupportEnabled"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuGetConfiguration"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuGetLibraryContext"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuMapDevice"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuEnableDevicePasid"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuSetAddressSpace"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuDisableDevicePasid"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuUnmapDevice"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuFreeLibraryContext"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuFlushTb"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuFlushAllPasid"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuProcessPageRequestQueue"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuFaultRoutine"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuReferenceAsid"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuDereferenceAsid"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuServicePageFault"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuDevicePowerChange"": [ 128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuBeginDeviceReset"": [ 136, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalIommuFinalizeDeviceReset"": [ 144, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 HalIommuSupportEnabled { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 HalIommuGetConfiguration { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 HalIommuGetLibraryContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 HalIommuMapDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 HalIommuEnableDevicePasid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 HalIommuSetAddressSpace { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 HalIommuDisableDevicePasid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 HalIommuUnmapDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 HalIommuFreeLibraryContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 HalIommuFlushTb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 HalIommuFlushAllPasid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 HalIommuProcessPageRequestQueue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 HalIommuFaultRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 HalIommuReferenceAsid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 HalIommuDereferenceAsid { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 HalIommuServicePageFault { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 HalIommuDevicePowerChange { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 HalIommuBeginDeviceReset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 HalIommuFinalizeDeviceReset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
	}
	#endregion
	#region _MI_ZERO_COST_COUNTS
 
	public class _MI_ZERO_COST_COUNTS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_ZERO_COST_COUNTS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_ZERO_COST_COUNTS"": [ 16, {
				 ""NativeSum"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""CachedSum"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 NativeSum { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 CachedSum { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _POP_FX_WORK_ORDER_WATCHDOG_INFO
 
	public class _POP_FX_WORK_ORDER_WATCHDOG_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_WORK_ORDER_WATCHDOG_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 176; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_WORK_ORDER_WATCHDOG_INFO"": [ 176, {
				 ""Link"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Timer"": [ 16, [ ""_KTIMER"", ""null"" ]],
				 ""Dpc"": [ 80, [ ""_KDPC"", ""null"" ]],
				 ""WorkOrder"": [ 144, [ ""Pointer"", ""{\""target\"":\""_POP_FX_WORK_ORDER\""}"" ]],
				 ""CurrentWorkInfo"": [ 152, [ ""Pointer"", ""{\""target\"":\""_PEP_WORK_INFORMATION\""}"" ]],
				 ""WatchdogStart"": [ 160, [ ""UInt64"", ""null"" ]],
				 ""WorkerThread"": [ 168, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _KTIMER Timer
		{
			get
			{
				_KTIMER returnValue = new _KTIMER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _KDPC Dpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt64 WorkOrder { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 CurrentWorkInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 WatchdogStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 WorkerThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
	}
	#endregion
	#region _ARBITER_INTERFACE
 
	public class _ARBITER_INTERFACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_INTERFACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_INTERFACE"": [ 48, {
				 ""Size"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Version"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Context"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InterfaceReference"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InterfaceDereference"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ArbiterHandler"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Flags"": [ 40, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 InterfaceReference { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 InterfaceDereference { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ArbiterHandler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _ARBITER_PARAMETERS
 
	public class _ARBITER_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_PARAMETERS"": [ 32, {
				 ""Parameters"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG Parameters
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEAP_UNPACKED_ENTRY
 
	public class _HEAP_UNPACKED_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_UNPACKED_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_UNPACKED_ENTRY"": [ 16, {
				 ""PreviousBlockPrivateData"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Size"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 10, [ ""Byte"", ""null"" ]],
				 ""SmallTagIndex"": [ 11, [ ""Byte"", ""null"" ]],
				 ""SubSegmentCode"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""PreviousSize"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""SegmentOffset"": [ 14, [ ""Byte"", ""null"" ]],
				 ""LFHFlags"": [ 14, [ ""Byte"", ""null"" ]],
				 ""UnusedBytes"": [ 15, [ ""Byte"", ""null"" ]],
				 ""CompactHeader"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PreviousBlockPrivateData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public Byte Flags{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte SmallTagIndex{ get { return _StructureData[_BufferOffset +11]; } }
		public UInt32 SubSegmentCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt16 PreviousSize { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public Byte SegmentOffset{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte LFHFlags{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte UnusedBytes{ get { return _StructureData[_BufferOffset +15]; } }
		public UInt64 CompactHeader { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _HEAP_UCR_DESCRIPTOR
 
	public class _HEAP_UCR_DESCRIPTOR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEAP_UCR_DESCRIPTOR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEAP_UCR_DESCRIPTOR"": [ 48, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SegmentEntry"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Address"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Size"": [ 40, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY SegmentEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 Address { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 Size { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _ETW_PROVIDER_TRAITS
 
	public class _ETW_PROVIDER_TRAITS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_PROVIDER_TRAITS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_PROVIDER_TRAITS"": [ 32, {
				 ""Node"": [ 0, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""ReferenceCount"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Traits"": [ 28, [ ""Array"", ""{\""count\"":1,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BALANCED_NODE Node
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 ReferenceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public Byte[] Traits
		{
			get
			{
				Byte[] returnValue = new Byte[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 28];
				return returnValue;
			}
		}
	}
	#endregion
	#region _ETW_QUEUE_ENTRY
 
	public class _ETW_QUEUE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_QUEUE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_QUEUE_ENTRY"": [ 56, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DataBlock"": [ 16, [ ""Pointer"", ""{\""target\"":\""_ETWP_NOTIFICATION_HEADER\""}"" ]],
				 ""RegEntry"": [ 24, [ ""Pointer"", ""{\""target\"":\""_ETW_REG_ENTRY\""}"" ]],
				 ""ReplyObject"": [ 32, [ ""Pointer"", ""{\""target\"":\""_ETW_REG_ENTRY\""}"" ]],
				 ""WakeReference"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RegIndex"": [ 48, [ ""UInt16"", ""null"" ]],
				 ""ReplyIndex"": [ 50, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 52, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 DataBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 RegEntry { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ReplyObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 WakeReference { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt16 RegIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 48); } }
		public UInt16 ReplyIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 50); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
	}
	#endregion
	#region _MI_PARTITION_FLAGS
 
	public class _MI_PARTITION_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PARTITION_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PARTITION_FLAGS"": [ 4, {
				 ""BeingDeleted"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""PageListsInitialized"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""StoreReservedPagesCharged"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""UseProtectedSlabAllocators"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""UseUnprotectedSlabAllocators"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""PureHoldingPartition"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""ZeroPagesOptional"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""BackgroundZeroingDisabled"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BeingDeleted
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 PageListsInitialized
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 StoreReservedPagesCharged
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 UseProtectedSlabAllocators
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 UseUnprotectedSlabAllocators
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 PureHoldingPartition
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 ZeroPagesOptional
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 BackgroundZeroingDisabled
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _PERFINFO_PPM_STATE_SELECTION
 
	public class _PERFINFO_PPM_STATE_SELECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PERFINFO_PPM_STATE_SELECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PERFINFO_PPM_STATE_SELECTION"": [ 12, {
				 ""SelectedState"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""VetoedStates"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""VetoReason"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SelectedState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 VetoedStates { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32[] VetoReason
		{
			get
			{
				UInt32[] returnValue = new UInt32[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _INTERRUPT_CONNECTION_DATA
 
	public class _INTERRUPT_CONNECTION_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _INTERRUPT_CONNECTION_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_INTERRUPT_CONNECTION_DATA"": [ 96, {
				 ""Count"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Vectors"": [ 8, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _INTERRUPT_VECTOR_DATA[] Vectors
		{
			get
			{
				_INTERRUPT_VECTOR_DATA[] returnValue = new _INTERRUPT_VECTOR_DATA[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _INTERRUPT_VECTOR_DATA(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _INTERRUPT_REMAPPING_INFO
 
	public class _INTERRUPT_REMAPPING_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _INTERRUPT_REMAPPING_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_INTERRUPT_REMAPPING_INFO"": [ 16, {
				 ""IrtIndex"": [ 0, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""FlagHalInternal"": [ 0, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]],
				 ""FlagTranslated"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""u"": [ 4, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 IrtIndex
		{
			get
			{
				// start: 0  end: 30  Mask: 111111111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1073741823) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 FlagHalInternal
		{
			get
			{
				// start: 30  end: 31  Mask: 1000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1073741824) >> 30;
				return (UInt32)value2;
			}
		}
		public UInt32 FlagTranslated
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _NON_PAGED_DEBUG_INFO
 
	public class _NON_PAGED_DEBUG_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _NON_PAGED_DEBUG_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_NON_PAGED_DEBUG_INFO"": [ 32, {
				 ""Signature"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Size"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Machine"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""Characteristics"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""TimeDateStamp"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""CheckSum"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""SizeOfImage"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""ImageBase"": [ 24, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Signature { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt16 Machine { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 Characteristics { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public UInt32 TimeDateStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 CheckSum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 SizeOfImage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 ImageBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _ARBITER_ADD_RESERVED_PARAMETERS
 
	public class _ARBITER_ADD_RESERVED_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_ADD_RESERVED_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_ADD_RESERVED_PARAMETERS"": [ 8, {
				 ""ReserveDevice"": [ 0, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ReserveDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _MMMOD_WRITER_LISTHEAD
 
	public class _MMMOD_WRITER_LISTHEAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMMOD_WRITER_LISTHEAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMMOD_WRITER_LISTHEAD"": [ 40, {
				 ""ListHead"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Gate"": [ 16, [ ""_KGATE"", ""null"" ]],
				 ""Event"": [ 16, [ ""_KEVENT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _KGATE Gate
		{
			get
			{
				_KGATE returnValue = new _KGATE(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _NONOPAQUE_OPLOCK
 
	public class _NONOPAQUE_OPLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _NONOPAQUE_OPLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_NONOPAQUE_OPLOCK"": [ 160, {
				 ""IrpExclusiveOplock"": [ 0, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""FileObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""ExclusiveOplockOwner"": [ 16, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""ExclusiveOplockOwnerThread"": [ 24, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""WaiterPriority"": [ 32, [ ""Byte"", ""null"" ]],
				 ""IrpOplocksR"": [ 40, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""IrpOplocksRH"": [ 56, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""RHBreakQueue"": [ 72, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""WaitingIrps"": [ 88, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DelayAckFileObjectQueue"": [ 104, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""AtomicQueue"": [ 120, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""DeleterParentKey"": [ 136, [ ""Pointer"", ""{\""target\"":\""_GUID\""}"" ]],
				 ""OplockState"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""FastMutex"": [ 152, [ ""Pointer"", ""{\""target\"":\""_FAST_MUTEX\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 IrpExclusiveOplock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 FileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ExclusiveOplockOwner { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 ExclusiveOplockOwnerThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public Byte WaiterPriority{ get { return _StructureData[_BufferOffset +32]; } }
		public _LIST_ENTRY IrpOplocksR
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _LIST_ENTRY IrpOplocksRH
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _LIST_ENTRY RHBreakQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public _LIST_ENTRY WaitingIrps
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public _LIST_ENTRY DelayAckFileObjectQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public _LIST_ENTRY AtomicQueue
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 120);
				return returnValue;
			}
		}
		public UInt64 DeleterParentKey { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt32 OplockState { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt64 FastMutex { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
	}
	#endregion
	#region _RTLP_RANGE_LIST_ENTRY
 
	public class _RTLP_RANGE_LIST_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTLP_RANGE_LIST_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTLP_RANGE_LIST_ENTRY"": [ 56, {
				 ""Start"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""End"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Allocated"": [ 16, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""Merged"": [ 16, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""Attributes"": [ 32, [ ""Byte"", ""null"" ]],
				 ""PublicFlags"": [ 33, [ ""Byte"", ""null"" ]],
				 ""PrivateFlags"": [ 34, [ ""UInt16"", ""null"" ]],
				 ""ListEntry"": [ 40, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Start { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 End { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _ANONYMOUS_TAG Allocated
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG Merged
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public Byte Attributes{ get { return _StructureData[_BufferOffset +32]; } }
		public Byte PublicFlags{ get { return _StructureData[_BufferOffset +33]; } }
		public UInt16 PrivateFlags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 34); } }
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ARBITER_CONFLICT_INFO
 
	public class _ARBITER_CONFLICT_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_CONFLICT_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_CONFLICT_INFO"": [ 24, {
				 ""OwningObject"": [ 0, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""Start"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""End"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 OwningObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Start { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 End { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _OBJECT_REF_TRACE
 
	public class _OBJECT_REF_TRACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_REF_TRACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_REF_TRACE"": [ 128, {
				 ""StackTrace"": [ 0, [ ""Array"", ""{\""count\"":16,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64[] StackTrace
		{
			get
			{
				UInt64[] returnValue = new UInt64[16];
				int size = 8;
				for(int i=0; i<16; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _POP_FX_PROVIDER
 
	public class _POP_FX_PROVIDER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_PROVIDER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_PROVIDER"": [ 8, {
				 ""Index"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Activating"": [ 4, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Index { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte Activating{ get { return _StructureData[_BufferOffset +4]; } }
	}
	#endregion
	#region _ETW_FILTER_EVENT_NAME_DATA
 
	public class _ETW_FILTER_EVENT_NAME_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_FILTER_EVENT_NAME_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_FILTER_EVENT_NAME_DATA"": [ 40, {
				 ""FilterIn"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Level"": [ 1, [ ""Byte"", ""null"" ]],
				 ""MatchAnyKeyword"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""MatchAllKeyword"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""NameTable"": [ 24, [ ""_RTL_HASH_TABLE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte FilterIn{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte Level{ get { return _StructureData[_BufferOffset +1]; } }
		public UInt64 MatchAnyKeyword { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 MatchAllKeyword { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _RTL_HASH_TABLE NameTable
		{
			get
			{
				_RTL_HASH_TABLE returnValue = new _RTL_HASH_TABLE(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_VISIBLE_STATE
 
	public class _MI_VISIBLE_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_VISIBLE_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 3264; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_VISIBLE_STATE"": [ 3264, {
				 ""SessionWsList"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SessionIdBitmap"": [ 16, [ ""Pointer"", ""{\""target\"":\""_RTL_BITMAP\""}"" ]],
				 ""PagedPoolInfo"": [ 24, [ ""_MM_PAGED_POOL_INFO"", ""null"" ]],
				 ""MaximumNonPagedPoolInPages"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""SizeOfPagedPoolInPages"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""SystemPteInfo"": [ 64, [ ""_MI_SYSTEM_PTE_TYPE"", ""null"" ]],
				 ""NonPagedPoolCommit"": [ 160, [ ""UInt64"", ""null"" ]],
				 ""SmallNonPagedPtesCommit"": [ 168, [ ""UInt64"", ""null"" ]],
				 ""BootCommit"": [ 176, [ ""UInt64"", ""null"" ]],
				 ""MdlPagesAllocated"": [ 184, [ ""UInt64"", ""null"" ]],
				 ""SystemPageTableCommit"": [ 192, [ ""UInt64"", ""null"" ]],
				 ""ProcessCommit"": [ 200, [ ""UInt64"", ""null"" ]],
				 ""DriverCommit"": [ 208, [ ""Int32"", ""null"" ]],
				 ""PagingLevels"": [ 212, [ ""Byte"", ""null"" ]],
				 ""PfnDatabaseCommit"": [ 216, [ ""UInt64"", ""null"" ]],
				 ""SystemWs"": [ 256, [ ""Array"", ""{\""count\"":6,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""SystemCacheShared"": [ 2176, [ ""_MMSUPPORT_SHARED"", ""null"" ]],
				 ""AggregateSystemWs"": [ 2304, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""MapCacheFailures"": [ 2336, [ ""UInt32"", ""null"" ]],
				 ""PagefileHashPages"": [ 2344, [ ""UInt64"", ""null"" ]],
				 ""PteHeader"": [ 2352, [ ""_SYSPTES_HEADER"", ""null"" ]],
				 ""SystemVaTypeCount"": [ 2632, [ ""Array"", ""{\""count\"":16,\""target\"":\""UInt64\""}"" ]],
				 ""SystemVaType"": [ 2760, [ ""Array"", ""{\""count\"":256,\""target\"":\""Byte\""}"" ]],
				 ""SystemVaRegions"": [ 3016, [ ""Array"", ""{\""count\"":13,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY SessionWsList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 SessionIdBitmap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _MM_PAGED_POOL_INFO PagedPoolInfo
		{
			get
			{
				_MM_PAGED_POOL_INFO returnValue = new _MM_PAGED_POOL_INFO(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 MaximumNonPagedPoolInPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 SizeOfPagedPoolInPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public _MI_SYSTEM_PTE_TYPE SystemPteInfo
		{
			get
			{
				_MI_SYSTEM_PTE_TYPE returnValue = new _MI_SYSTEM_PTE_TYPE(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt64 NonPagedPoolCommit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 SmallNonPagedPtesCommit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 BootCommit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 MdlPagesAllocated { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public UInt64 SystemPageTableCommit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt64 ProcessCommit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public Int32 DriverCommit { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 208); } }
		public Byte PagingLevels{ get { return _StructureData[_BufferOffset +212]; } }
		public UInt64 PfnDatabaseCommit { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public _MMSUPPORT_FULL[] SystemWs
		{
			get
			{
				_MMSUPPORT_FULL[] returnValue = new _MMSUPPORT_FULL[6];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<6; i++ )
					returnValue[i] = new _MMSUPPORT_FULL(_StructureData, (i * size) + _BufferOffset + 256);
				return returnValue;
			}
		}
		public _MMSUPPORT_SHARED SystemCacheShared
		{
			get
			{
				_MMSUPPORT_SHARED returnValue = new _MMSUPPORT_SHARED(_StructureData, _BufferOffset + 2176);
				return returnValue;
			}
		}
		public _MMSUPPORT_AGGREGATION[] AggregateSystemWs
		{
			get
			{
				_MMSUPPORT_AGGREGATION[] returnValue = new _MMSUPPORT_AGGREGATION[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _MMSUPPORT_AGGREGATION(_StructureData, (i * size) + _BufferOffset + 2304);
				return returnValue;
			}
		}
		public UInt32 MapCacheFailures { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2336); } }
		public UInt64 PagefileHashPages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2344); } }
		public _SYSPTES_HEADER PteHeader
		{
			get
			{
				_SYSPTES_HEADER returnValue = new _SYSPTES_HEADER(_StructureData, _BufferOffset + 2352);
				return returnValue;
			}
		}
		public UInt64[] SystemVaTypeCount
		{
			get
			{
				UInt64[] returnValue = new UInt64[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 2632);
				return returnValue;
			}
		}
		public Byte[] SystemVaType
		{
			get
			{
				Byte[] returnValue = new Byte[256];
				for(int i=0; i<256; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 2760];
				return returnValue;
			}
		}
		public _MI_SYSTEM_VA_ASSIGNMENT[] SystemVaRegions
		{
			get
			{
				_MI_SYSTEM_VA_ASSIGNMENT[] returnValue = new _MI_SYSTEM_VA_ASSIGNMENT[13];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<13; i++ )
					returnValue[i] = new _MI_SYSTEM_VA_ASSIGNMENT(_StructureData, (i * size) + _BufferOffset + 3016);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CM_COMPONENT_HASH
 
	public class _CM_COMPONENT_HASH
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_COMPONENT_HASH(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_COMPONENT_HASH"": [ 4, {
				 ""Hash"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Hash { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _RH_OP_CONTEXT
 
	public class _RH_OP_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RH_OP_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RH_OP_CONTEXT"": [ 72, {
				 ""Links"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""OplockRequestIrp"": [ 16, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""OplockRequestFileObject"": [ 24, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""OplockRequestProcess"": [ 32, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""OplockOwnerThread"": [ 40, [ ""Pointer"", ""{\""target\"":\""_ETHREAD\""}"" ]],
				 ""Flags"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""AtomicLinks"": [ 56, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Links
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 OplockRequestIrp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 OplockRequestFileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 OplockRequestProcess { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 OplockOwnerThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public _LIST_ENTRY AtomicLinks
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MSUBSECTION
 
	public class _MSUBSECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MSUBSECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 144; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MSUBSECTION"": [ 144, {
				 ""Core"": [ 0, [ ""_SUBSECTION"", ""null"" ]],
				 ""SubsectionNode"": [ 56, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""DereferenceList"": [ 80, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""NumberOfMappedViews"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""NumberOfPfnReferences"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""LargeViews"": [ 108, [ ""UInt32"", ""null"" ]],
				 ""ProtosNode"": [ 112, [ ""_MI_PROTOTYPE_PTES_NODE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SUBSECTION Core
		{
			get
			{
				_SUBSECTION returnValue = new _SUBSECTION(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _RTL_BALANCED_NODE SubsectionNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _LIST_ENTRY DereferenceList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public UInt64 NumberOfMappedViews { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt32 NumberOfPfnReferences { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 LargeViews { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public _MI_PROTOTYPE_PTES_NODE ProtosNode
		{
			get
			{
				_MI_PROTOTYPE_PTES_NODE returnValue = new _MI_PROTOTYPE_PTES_NODE(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PROC_PERF_CHECK
 
	public class _PROC_PERF_CHECK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROC_PERF_CHECK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 344; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROC_PERF_CHECK"": [ 344, {
				 ""LastActive"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""LastTime"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""LastStall"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""LastResponsivenessEvents"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""LastPerfCheckSnap"": [ 32, [ ""_PROC_PERF_CHECK_SNAP"", ""null"" ]],
				 ""CurrentSnap"": [ 128, [ ""_PROC_PERF_CHECK_SNAP"", ""null"" ]],
				 ""LastDeliveredSnap"": [ 224, [ ""_PROC_PERF_CHECK_SNAP"", ""null"" ]],
				 ""LastDeliveredPerformance"": [ 320, [ ""UInt32"", ""null"" ]],
				 ""LastDeliveredFrequency"": [ 324, [ ""UInt32"", ""null"" ]],
				 ""TaggedThreadPercent"": [ 328, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""Class0FloorPerfSelection"": [ 331, [ ""Byte"", ""null"" ]],
				 ""Class1MinimumPerfSelection"": [ 332, [ ""Byte"", ""null"" ]],
				 ""CurrentResponsivenessEvents"": [ 336, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 LastActive { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 LastTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 LastStall { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 LastResponsivenessEvents { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _PROC_PERF_CHECK_SNAP LastPerfCheckSnap
		{
			get
			{
				_PROC_PERF_CHECK_SNAP returnValue = new _PROC_PERF_CHECK_SNAP(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _PROC_PERF_CHECK_SNAP CurrentSnap
		{
			get
			{
				_PROC_PERF_CHECK_SNAP returnValue = new _PROC_PERF_CHECK_SNAP(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public _PROC_PERF_CHECK_SNAP LastDeliveredSnap
		{
			get
			{
				_PROC_PERF_CHECK_SNAP returnValue = new _PROC_PERF_CHECK_SNAP(_StructureData, _BufferOffset + 224);
				return returnValue;
			}
		}
		public UInt32 LastDeliveredPerformance { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 320); } }
		public UInt32 LastDeliveredFrequency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 324); } }
		public Byte[] TaggedThreadPercent
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 328];
				return returnValue;
			}
		}
		public Byte Class0FloorPerfSelection{ get { return _StructureData[_BufferOffset +331]; } }
		public Byte Class1MinimumPerfSelection{ get { return _StructureData[_BufferOffset +332]; } }
		public UInt32 CurrentResponsivenessEvents { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 336); } }
	}
	#endregion
	#region _MI_LARGEPAGE_VAD_INFO
 
	public class _MI_LARGEPAGE_VAD_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_LARGEPAGE_VAD_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_LARGEPAGE_VAD_INFO"": [ 24, {
				 ""LargeImageBias"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Spare"": [ 1, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""ActualImageViewSize"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ReferencedPartition"": [ 16, [ ""Pointer"", ""{\""target\"":\""_EPARTITION\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte LargeImageBias{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte[] Spare
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 1];
				return returnValue;
			}
		}
		public UInt64 ActualImageViewSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ReferencedPartition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _MI_HARD_FAULT_STATE
 
	public class _MI_HARD_FAULT_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_HARD_FAULT_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_HARD_FAULT_STATE"": [ 16, {
				 ""SwapPfn"": [ 0, [ ""Pointer"", ""{\""target\"":\""_MMPFN\""}"" ]],
				 ""StoreFlags"": [ 8, [ ""_MI_STORE_INPAGE_COMPLETE_FLAGS"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SwapPfn { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _MI_STORE_INPAGE_COMPLETE_FLAGS StoreFlags
		{
			get
			{
				_MI_STORE_INPAGE_COMPLETE_FLAGS returnValue = new _MI_STORE_INPAGE_COMPLETE_FLAGS(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MODWRITER_FLAGS
 
	public class _MODWRITER_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MODWRITER_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MODWRITER_FLAGS"": [ 4, {
				 ""KeepForever"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Networked"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""IoPriority"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ModifiedStoreWrite"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 KeepForever
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Networked
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 IoPriority
		{
			get
			{
				// start: 2  end: 5  Mask: 0000000000011100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 28) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 ModifiedStoreWrite
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _IMAGE_DATA_DIRECTORY
 
	public class _IMAGE_DATA_DIRECTORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_DATA_DIRECTORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_DATA_DIRECTORY"": [ 8, {
				 ""VirtualAddress"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Size"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 VirtualAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _PEB32
 
	public class _PEB32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEB32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1152; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEB32"": [ 1152, {
				 ""InheritedAddressSpace"": [ 0, [ ""Byte"", ""null"" ]],
				 ""ReadImageFileExecOptions"": [ 1, [ ""Byte"", ""null"" ]],
				 ""BeingDebugged"": [ 2, [ ""Byte"", ""null"" ]],
				 ""BitField"": [ 3, [ ""Byte"", ""null"" ]],
				 ""ImageUsesLargePages"": [ 3, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""IsProtectedProcess"": [ 3, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""IsImageDynamicallyRelocated"": [ 3, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""SkipPatchingUser32Forwarders"": [ 3, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""IsPackagedProcess"": [ 3, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""IsAppContainer"": [ 3, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""IsProtectedProcessLight"": [ 3, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]],
				 ""IsLongPathAwareProcess"": [ 3, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""Byte\""}"" ]],
				 ""Mutant"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ImageBaseAddress"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Ldr"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""ProcessParameters"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""SubSystemData"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""ProcessHeap"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""FastPebLock"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""AtlThunkSListPtr"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""IFEOKey"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""CrossProcessFlags"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""ProcessInJob"": [ 40, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessInitializing"": [ 40, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessUsingVEH"": [ 40, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessUsingVCH"": [ 40, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessUsingFTH"": [ 40, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessPreviouslyThrottled"": [ 40, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessCurrentlyThrottled"": [ 40, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""ProcessImagesHotPatched"": [ 40, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""ReservedBits0"": [ 40, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""KernelCallbackTable"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""UserSharedInfoPtr"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""SystemReserved"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""AtlThunkSListPtr32"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""ApiSetMap"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""TlsExpansionCounter"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""TlsBitmap"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""TlsBitmapBits"": [ 68, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ReadOnlySharedMemoryBase"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""SharedData"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""ReadOnlyStaticServerData"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""AnsiCodePageData"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""OemCodePageData"": [ 92, [ ""UInt32"", ""null"" ]],
				 ""UnicodeCaseTableData"": [ 96, [ ""UInt32"", ""null"" ]],
				 ""NumberOfProcessors"": [ 100, [ ""UInt32"", ""null"" ]],
				 ""NtGlobalFlag"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""CriticalSectionTimeout"": [ 112, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""HeapSegmentReserve"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""HeapSegmentCommit"": [ 124, [ ""UInt32"", ""null"" ]],
				 ""HeapDeCommitTotalFreeThreshold"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""HeapDeCommitFreeBlockThreshold"": [ 132, [ ""UInt32"", ""null"" ]],
				 ""NumberOfHeaps"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""MaximumNumberOfHeaps"": [ 140, [ ""UInt32"", ""null"" ]],
				 ""ProcessHeaps"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""GdiSharedHandleTable"": [ 148, [ ""UInt32"", ""null"" ]],
				 ""ProcessStarterHelper"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""GdiDCAttributeList"": [ 156, [ ""UInt32"", ""null"" ]],
				 ""LoaderLock"": [ 160, [ ""UInt32"", ""null"" ]],
				 ""OSMajorVersion"": [ 164, [ ""UInt32"", ""null"" ]],
				 ""OSMinorVersion"": [ 168, [ ""UInt32"", ""null"" ]],
				 ""OSBuildNumber"": [ 172, [ ""UInt16"", ""null"" ]],
				 ""OSCSDVersion"": [ 174, [ ""UInt16"", ""null"" ]],
				 ""OSPlatformId"": [ 176, [ ""UInt32"", ""null"" ]],
				 ""ImageSubsystem"": [ 180, [ ""UInt32"", ""null"" ]],
				 ""ImageSubsystemMajorVersion"": [ 184, [ ""UInt32"", ""null"" ]],
				 ""ImageSubsystemMinorVersion"": [ 188, [ ""UInt32"", ""null"" ]],
				 ""ActiveProcessAffinityMask"": [ 192, [ ""UInt32"", ""null"" ]],
				 ""GdiHandleBuffer"": [ 196, [ ""Array"", ""{\""count\"":34,\""target\"":\""UInt32\""}"" ]],
				 ""PostProcessInitRoutine"": [ 332, [ ""UInt32"", ""null"" ]],
				 ""TlsExpansionBitmap"": [ 336, [ ""UInt32"", ""null"" ]],
				 ""TlsExpansionBitmapBits"": [ 340, [ ""Array"", ""{\""count\"":32,\""target\"":\""UInt32\""}"" ]],
				 ""SessionId"": [ 468, [ ""UInt32"", ""null"" ]],
				 ""AppCompatFlags"": [ 472, [ ""_ULARGE_INTEGER"", ""null"" ]],
				 ""AppCompatFlagsUser"": [ 480, [ ""_ULARGE_INTEGER"", ""null"" ]],
				 ""pShimData"": [ 488, [ ""UInt32"", ""null"" ]],
				 ""AppCompatInfo"": [ 492, [ ""UInt32"", ""null"" ]],
				 ""CSDVersion"": [ 496, [ ""_STRING32"", ""null"" ]],
				 ""ActivationContextData"": [ 504, [ ""UInt32"", ""null"" ]],
				 ""ProcessAssemblyStorageMap"": [ 508, [ ""UInt32"", ""null"" ]],
				 ""SystemDefaultActivationContextData"": [ 512, [ ""UInt32"", ""null"" ]],
				 ""SystemAssemblyStorageMap"": [ 516, [ ""UInt32"", ""null"" ]],
				 ""MinimumStackCommit"": [ 520, [ ""UInt32"", ""null"" ]],
				 ""SparePointers"": [ 524, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""SpareUlongs"": [ 540, [ ""Array"", ""{\""count\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""WerRegistrationData"": [ 560, [ ""UInt32"", ""null"" ]],
				 ""WerShipAssertPtr"": [ 564, [ ""UInt32"", ""null"" ]],
				 ""pUnused"": [ 568, [ ""UInt32"", ""null"" ]],
				 ""pImageHeaderHash"": [ 572, [ ""UInt32"", ""null"" ]],
				 ""TracingFlags"": [ 576, [ ""UInt32"", ""null"" ]],
				 ""HeapTracingEnabled"": [ 576, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""CritSecTracingEnabled"": [ 576, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""LibLoaderTracingEnabled"": [ 576, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""SpareTracingBits"": [ 576, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""CsrServerReadOnlySharedMemoryBase"": [ 584, [ ""UInt64"", ""null"" ]],
				 ""TppWorkerpListLock"": [ 592, [ ""UInt32"", ""null"" ]],
				 ""TppWorkerpList"": [ 596, [ ""LIST_ENTRY32"", ""null"" ]],
				 ""WaitOnAddressHashTable"": [ 604, [ ""Array"", ""{\""count\"":128,\""target\"":\""UInt32\""}"" ]],
				 ""TelemetryCoverageHeader"": [ 1116, [ ""UInt32"", ""null"" ]],
				 ""CloudFileFlags"": [ 1120, [ ""UInt32"", ""null"" ]],
				 ""CloudFileDiagFlags"": [ 1124, [ ""UInt32"", ""null"" ]],
				 ""PlaceholderCompatibilityMode"": [ 1128, [ ""Char"", ""null"" ]],
				 ""PlaceholderCompatibilityModeReserved"": [ 1129, [ ""Array"", ""{\""count\"":7,\""target\"":\""Char\""}"" ]],
				 ""LeapSecondData"": [ 1136, [ ""UInt32"", ""null"" ]],
				 ""LeapSecondFlags"": [ 1140, [ ""UInt32"", ""null"" ]],
				 ""SixtySecondEnabled"": [ 1140, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 1140, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""NtGlobalFlag2"": [ 1144, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte InheritedAddressSpace{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte ReadImageFileExecOptions{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte BeingDebugged{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte BitField{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte ImageUsesLargePages
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte IsProtectedProcess
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte IsImageDynamicallyRelocated
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte SkipPatchingUser32Forwarders
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte IsPackagedProcess
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte IsAppContainer
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte IsProtectedProcessLight
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 64) >> 6;
				return (Byte)value2;
			}
		}
		public Byte IsLongPathAwareProcess
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 128) >> 7;
				return (Byte)value2;
			}
		}
		public UInt32 Mutant { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ImageBaseAddress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Ldr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 ProcessParameters { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 SubSystemData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 ProcessHeap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 FastPebLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 AtlThunkSListPtr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 IFEOKey { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 CrossProcessFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 ProcessInJob
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 40);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessInitializing
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 40);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessUsingVEH
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 40);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessUsingVCH
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 40);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessUsingFTH
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 40);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessPreviouslyThrottled
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 40);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessCurrentlyThrottled
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 40);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 ProcessImagesHotPatched
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 40);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 ReservedBits0
		{
			get
			{
				// start: 8  end: 32  Mask: 11111111111111111111111100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 40);
				var value2 = (value & 4294967040) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 KernelCallbackTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 UserSharedInfoPtr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 SystemReserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 AtlThunkSListPtr32 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 ApiSetMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 TlsExpansionCounter { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 TlsBitmap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32[] TlsBitmapBits
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 68);
				return returnValue;
			}
		}
		public UInt32 ReadOnlySharedMemoryBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 SharedData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 ReadOnlyStaticServerData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 AnsiCodePageData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt32 OemCodePageData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 92); } }
		public UInt32 UnicodeCaseTableData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 96); } }
		public UInt32 NumberOfProcessors { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 100); } }
		public UInt32 NtGlobalFlag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public _LARGE_INTEGER CriticalSectionTimeout
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt32 HeapSegmentReserve { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 HeapSegmentCommit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
		public UInt32 HeapDeCommitTotalFreeThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 HeapDeCommitFreeBlockThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 132); } }
		public UInt32 NumberOfHeaps { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public UInt32 MaximumNumberOfHeaps { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 140); } }
		public UInt32 ProcessHeaps { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt32 GdiSharedHandleTable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 148); } }
		public UInt32 ProcessStarterHelper { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public UInt32 GdiDCAttributeList { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 156); } }
		public UInt32 LoaderLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 160); } }
		public UInt32 OSMajorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
		public UInt32 OSMinorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public UInt16 OSBuildNumber { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 172); } }
		public UInt16 OSCSDVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 174); } }
		public UInt32 OSPlatformId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 176); } }
		public UInt32 ImageSubsystem { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 180); } }
		public UInt32 ImageSubsystemMajorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 184); } }
		public UInt32 ImageSubsystemMinorVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 188); } }
		public UInt32 ActiveProcessAffinityMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public UInt32[] GdiHandleBuffer
		{
			get
			{
				UInt32[] returnValue = new UInt32[34];
				for(int i=0; i<34; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 196);
				return returnValue;
			}
		}
		public UInt32 PostProcessInitRoutine { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 332); } }
		public UInt32 TlsExpansionBitmap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 336); } }
		public UInt32[] TlsExpansionBitmapBits
		{
			get
			{
				UInt32[] returnValue = new UInt32[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 340);
				return returnValue;
			}
		}
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 468); } }
		public _ULARGE_INTEGER AppCompatFlags
		{
			get
			{
				_ULARGE_INTEGER returnValue = new _ULARGE_INTEGER(_StructureData, _BufferOffset + 472);
				return returnValue;
			}
		}
		public _ULARGE_INTEGER AppCompatFlagsUser
		{
			get
			{
				_ULARGE_INTEGER returnValue = new _ULARGE_INTEGER(_StructureData, _BufferOffset + 480);
				return returnValue;
			}
		}
		public UInt32 pShimData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 488); } }
		public UInt32 AppCompatInfo { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 492); } }
		public _STRING32 CSDVersion
		{
			get
			{
				_STRING32 returnValue = new _STRING32(_StructureData, _BufferOffset + 496);
				return returnValue;
			}
		}
		public UInt32 ActivationContextData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 504); } }
		public UInt32 ProcessAssemblyStorageMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 508); } }
		public UInt32 SystemDefaultActivationContextData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 512); } }
		public UInt32 SystemAssemblyStorageMap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 516); } }
		public UInt32 MinimumStackCommit { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 520); } }
		public UInt32[] SparePointers
		{
			get
			{
				UInt32[] returnValue = new UInt32[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 524);
				return returnValue;
			}
		}
		public UInt32[] SpareUlongs
		{
			get
			{
				UInt32[] returnValue = new UInt32[5];
				for(int i=0; i<5; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 540);
				return returnValue;
			}
		}
		public UInt32 WerRegistrationData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 560); } }
		public UInt32 WerShipAssertPtr { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 564); } }
		public UInt32 pUnused { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 568); } }
		public UInt32 pImageHeaderHash { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 572); } }
		public UInt32 TracingFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 576); } }
		public UInt32 HeapTracingEnabled
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 576);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 CritSecTracingEnabled
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 576);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 LibLoaderTracingEnabled
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 576);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 SpareTracingBits
		{
			get
			{
				// start: 3  end: 32  Mask: 11111111111111111111111111111000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 576);
				var value2 = (value & 4294967288) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt64 CsrServerReadOnlySharedMemoryBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 584); } }
		public UInt32 TppWorkerpListLock { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 592); } }
		public LIST_ENTRY32 TppWorkerpList
		{
			get
			{
				LIST_ENTRY32 returnValue = new LIST_ENTRY32(_StructureData, _BufferOffset + 596);
				return returnValue;
			}
		}
		public UInt32[] WaitOnAddressHashTable
		{
			get
			{
				UInt32[] returnValue = new UInt32[128];
				for(int i=0; i<128; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 604);
				return returnValue;
			}
		}
		public UInt32 TelemetryCoverageHeader { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1116); } }
		public UInt32 CloudFileFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1120); } }
		public UInt32 CloudFileDiagFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1124); } }
		public Char PlaceholderCompatibilityMode { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 1128); } }
		public Char[] PlaceholderCompatibilityModeReserved
		{
			get
			{
				Char[] returnValue = new Char[7];
				for(int i=0; i<7; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 1129);
				return returnValue;
			}
		}
		public UInt32 LeapSecondData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1136); } }
		public UInt32 LeapSecondFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1140); } }
		public UInt32 SixtySecondEnabled
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1140);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 1  end: 32  Mask: 11111111111111111111111111111110
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1140);
				var value2 = (value & 4294967294) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 NtGlobalFlag2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1144); } }
	}
	#endregion
	#region _POP_DEVICE_POWER_PROFILE
 
	public class _POP_DEVICE_POWER_PROFILE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_DEVICE_POWER_PROFILE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_DEVICE_POWER_PROFILE"": [ 88, {
				 ""DeviceId"": [ 0, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""PowerPlane"": [ 16, [ ""Pointer"", ""{\""target\"":\""_POP_POWER_PLANE\""}"" ]],
				 ""FxDevice"": [ 24, [ ""Pointer"", ""{\""target\"":\""_POP_FX_DEVICE\""}"" ]],
				 ""PowerDrawMw"": [ 32, [ ""Int32"", ""null"" ]],
				 ""DxPower"": [ 36, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""ComponentCount"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""Components"": [ 80, [ ""Pointer"", ""{\""target\"":\""_POP_COMPONENT_POWER_PROFILE*\""}"" ]] }]
				 }
				)";
			}
		}
		public _UNICODE_STRING DeviceId
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 PowerPlane { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 FxDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public Int32 PowerDrawMw { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 32); } }
		public _PO_POWER_PLANE_PROFILE[] DxPower
		{
			get
			{
				_PO_POWER_PLANE_PROFILE[] returnValue = new _PO_POWER_PLANE_PROFILE[4];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<4; i++ )
					returnValue[i] = new _PO_POWER_PLANE_PROFILE(_StructureData, (i * size) + _BufferOffset + 36);
				return returnValue;
			}
		}
		public UInt64 ComponentCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 Components { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
	}
	#endregion
	#region _POP_DEVICE_SYS_STATE
 
	public class _POP_DEVICE_SYS_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_DEVICE_SYS_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 472; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_DEVICE_SYS_STATE"": [ 472, {
				 ""IrpMinor"": [ 0, [ ""Byte"", ""null"" ]],
				 ""SystemState"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_SYSTEM_POWER_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""SpinLock"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Thread"": [ 16, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""AbortEvent"": [ 24, [ ""Pointer"", ""{\""target\"":\""_KEVENT\""}"" ]],
				 ""ReadySemaphore"": [ 32, [ ""Pointer"", ""{\""target\"":\""_KSEMAPHORE\""}"" ]],
				 ""FinishedSemaphore"": [ 40, [ ""Pointer"", ""{\""target\"":\""_KSEMAPHORE\""}"" ]],
				 ""Order"": [ 48, [ ""_PO_DEVICE_NOTIFY_ORDER"", ""null"" ]],
				 ""Pending"": [ 432, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Status"": [ 448, [ ""Int32"", ""null"" ]],
				 ""FailedDevice"": [ 456, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""Waking"": [ 464, [ ""Byte"", ""null"" ]],
				 ""Cancelled"": [ 465, [ ""Byte"", ""null"" ]],
				 ""IgnoreErrors"": [ 466, [ ""Byte"", ""null"" ]],
				 ""IgnoreNotImplemented"": [ 467, [ ""Byte"", ""null"" ]],
				 ""TimeRefreshLockAcquired"": [ 468, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte IrpMinor{ get { return _StructureData[_BufferOffset +0]; } }
		public _SYSTEM_POWER_STATE SystemState { get { return (_SYSTEM_POWER_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 SpinLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 AbortEvent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ReadySemaphore { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 FinishedSemaphore { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _PO_DEVICE_NOTIFY_ORDER Order
		{
			get
			{
				_PO_DEVICE_NOTIFY_ORDER returnValue = new _PO_DEVICE_NOTIFY_ORDER(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _LIST_ENTRY Pending
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 432);
				return returnValue;
			}
		}
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 448); } }
		public UInt64 FailedDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 456); } }
		public Byte Waking{ get { return _StructureData[_BufferOffset +464]; } }
		public Byte Cancelled{ get { return _StructureData[_BufferOffset +465]; } }
		public Byte IgnoreErrors{ get { return _StructureData[_BufferOffset +466]; } }
		public Byte IgnoreNotImplemented{ get { return _StructureData[_BufferOffset +467]; } }
		public Byte TimeRefreshLockAcquired{ get { return _StructureData[_BufferOffset +468]; } }
	}
	#endregion
	#region _HAL_NODE_RANGE
 
	public class _HAL_NODE_RANGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HAL_NODE_RANGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HAL_NODE_RANGE"": [ 16, {
				 ""PageFrameIndex"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Node"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PageFrameIndex { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Node { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _THERMAL_INFORMATION
 
	public class _THERMAL_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _THERMAL_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_THERMAL_INFORMATION"": [ 88, {
				 ""ThermalStamp"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ThermalConstant1"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ThermalConstant2"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Processors"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""SamplingPeriod"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""CurrentTemperature"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""PassiveTripPoint"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""CriticalTripPoint"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""ActiveTripPointCount"": [ 40, [ ""Byte"", ""null"" ]],
				 ""ActiveTripPoint"": [ 44, [ ""Array"", ""{\""count\"":10,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ThermalStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ThermalConstant1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 ThermalConstant2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 Processors { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 SamplingPeriod { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 CurrentTemperature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 PassiveTripPoint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 CriticalTripPoint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public Byte ActiveTripPointCount{ get { return _StructureData[_BufferOffset +40]; } }
		public UInt32[] ActiveTripPoint
		{
			get
			{
				UInt32[] returnValue = new UInt32[10];
				for(int i=0; i<10; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 44);
				return returnValue;
			}
		}
	}
	#endregion
	#region _XSTATE_FEATURE
 
	public class _XSTATE_FEATURE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _XSTATE_FEATURE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_XSTATE_FEATURE"": [ 8, {
				 ""Offset"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Size"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Offset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _HIVE_LIST_ENTRY
 
	public class _HIVE_LIST_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HIVE_LIST_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 200; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HIVE_LIST_ENTRY"": [ 200, {
				 ""FileName"": [ 0, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""BaseName"": [ 8, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""RegRootName"": [ 16, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""CmHive"": [ 24, [ ""Pointer"", ""{\""target\"":\""_CMHIVE\""}"" ]],
				 ""HHiveFlags"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""CmHiveFlags"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""CmKcbCacheSize"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""CmHive2"": [ 48, [ ""Pointer"", ""{\""target\"":\""_CMHIVE\""}"" ]],
				 ""HiveMounted"": [ 56, [ ""Byte"", ""null"" ]],
				 ""ThreadFinished"": [ 57, [ ""Byte"", ""null"" ]],
				 ""ThreadStarted"": [ 58, [ ""Byte"", ""null"" ]],
				 ""Allocate"": [ 59, [ ""Byte"", ""null"" ]],
				 ""WinPERequired"": [ 60, [ ""Byte"", ""null"" ]],
				 ""StartEvent"": [ 64, [ ""_KEVENT"", ""null"" ]],
				 ""FinishedEvent"": [ 88, [ ""_KEVENT"", ""null"" ]],
				 ""MountLock"": [ 112, [ ""_KEVENT"", ""null"" ]],
				 ""MountCallbackLock"": [ 136, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""CallbackListLock"": [ 144, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""CallbackListHead"": [ 152, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CallbackWorkItem"": [ 168, [ ""Pointer"", ""{\""target\"":\""_WORK_QUEUE_ITEM\""}"" ]],
				 ""CallbackWorkItemBusy"": [ 176, [ ""Int32"", ""null"" ]],
				 ""FilePath"": [ 184, [ ""_UNICODE_STRING"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 FileName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 BaseName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 RegRootName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 CmHive { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 HHiveFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 CmHiveFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 CmKcbCacheSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt64 CmHive2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public Byte HiveMounted{ get { return _StructureData[_BufferOffset +56]; } }
		public Byte ThreadFinished{ get { return _StructureData[_BufferOffset +57]; } }
		public Byte ThreadStarted{ get { return _StructureData[_BufferOffset +58]; } }
		public Byte Allocate{ get { return _StructureData[_BufferOffset +59]; } }
		public Byte WinPERequired{ get { return _StructureData[_BufferOffset +60]; } }
		public _KEVENT StartEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _KEVENT FinishedEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public _KEVENT MountLock
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK MountCallbackLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public _EX_PUSH_LOCK CallbackListLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 144);
				return returnValue;
			}
		}
		public _LIST_ENTRY CallbackListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 152);
				return returnValue;
			}
		}
		public UInt64 CallbackWorkItem { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public Int32 CallbackWorkItemBusy { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 176); } }
		public _UNICODE_STRING FilePath
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 184);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PO_DEVICE_NOTIFY_ORDER
 
	public class _PO_DEVICE_NOTIFY_ORDER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_DEVICE_NOTIFY_ORDER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 384; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_DEVICE_NOTIFY_ORDER"": [ 384, {
				 ""Locked"": [ 0, [ ""Byte"", ""null"" ]],
				 ""WarmEjectPdoPointer"": [ 8, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT*\""}"" ]],
				 ""OrderLevel"": [ 16, [ ""Array"", ""{\""count\"":5,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""Flags"": [ 376, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Locked{ get { return _StructureData[_BufferOffset +0]; } }
		public UInt64 WarmEjectPdoPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _PO_NOTIFY_ORDER_LEVEL[] OrderLevel
		{
			get
			{
				_PO_NOTIFY_ORDER_LEVEL[] returnValue = new _PO_NOTIFY_ORDER_LEVEL[5];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<5; i++ )
					returnValue[i] = new _PO_NOTIFY_ORDER_LEVEL(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 376); } }
	}
	#endregion
	#region _PPM_VETO_ENTRY
 
	public class _PPM_VETO_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PPM_VETO_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PPM_VETO_ENTRY"": [ 64, {
				 ""Link"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""VetoReason"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ReferenceCount"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""HitCount"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""LastActivationTime"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""TotalActiveTime"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""CsActivationTime"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""CsActiveTime"": [ 56, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 VetoReason { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ReferenceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 HitCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 LastActivationTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 TotalActiveTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 CsActivationTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 CsActiveTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
	}
	#endregion
	#region _ARBITER_TEST_ALLOCATION_PARAMETERS
 
	public class _ARBITER_TEST_ALLOCATION_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_TEST_ALLOCATION_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_TEST_ALLOCATION_PARAMETERS"": [ 24, {
				 ""ArbitrationList"": [ 0, [ ""Pointer"", ""{\""target\"":\""_LIST_ENTRY\""}"" ]],
				 ""AllocateFromCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""AllocateFrom"": [ 16, [ ""Pointer"", ""{\""target\"":\""_CM_PARTIAL_RESOURCE_DESCRIPTOR\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ArbitrationList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 AllocateFromCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 AllocateFrom { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _MI_BAD_MEMORY_EVENT_ENTRY
 
	public class _MI_BAD_MEMORY_EVENT_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_BAD_MEMORY_EVENT_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_BAD_MEMORY_EVENT_ENTRY"": [ 56, {
				 ""BugCheckCode"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Active"": [ 4, [ ""Int32"", ""null"" ]],
				 ""Data"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""PhysicalAddress"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""WorkItem"": [ 24, [ ""_WORK_QUEUE_ITEM"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BugCheckCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Int32 Active { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Data { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _LARGE_INTEGER PhysicalAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _WORK_QUEUE_ITEM WorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HAL_CLOCK_TIMER_CONFIGURATION
 
	public class _HAL_CLOCK_TIMER_CONFIGURATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HAL_CLOCK_TIMER_CONFIGURATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HAL_CLOCK_TIMER_CONFIGURATION"": [ 32, {
				 ""Flags"": [ 0, [ ""Byte"", ""null"" ]],
				 ""AlwaysOnTimer"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""HighLatency"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""PerCpuTimer"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""DynamicTickSupported"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""KnownType"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Capabilities"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""MaxIncrement"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""MinIncrement"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Flags{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte AlwaysOnTimer
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte HighLatency
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte PerCpuTimer
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte DynamicTickSupported
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public UInt32 KnownType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Capabilities { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 MaxIncrement { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 MinIncrement { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _ETW_DEBUGID_TRACKING_ENTRY
 
	public class _ETW_DEBUGID_TRACKING_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_DEBUGID_TRACKING_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_DEBUGID_TRACKING_ENTRY"": [ 56, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ConsumersNotified"": [ 16, [ ""Byte"", ""null"" ]],
				 ""Spare"": [ 17, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""DebugIdSize"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""DebugId"": [ 24, [ ""_CVDD"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte ConsumersNotified{ get { return _StructureData[_BufferOffset +16]; } }
		public Byte[] Spare
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 17];
				return returnValue;
			}
		}
		public UInt32 DebugIdSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _CVDD DebugId
		{
			get
			{
				_CVDD returnValue = new _CVDD(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _KWAIT_CHAIN_ENTRY
 
	public class _KWAIT_CHAIN_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KWAIT_CHAIN_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KWAIT_CHAIN_ENTRY"": [ 48, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Thread"": [ 16, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""Event"": [ 24, [ ""_KEVENT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Thread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PROC_IDLE_SNAP
 
	public class _PROC_IDLE_SNAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROC_IDLE_SNAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROC_IDLE_SNAP"": [ 16, {
				 ""Time"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Idle"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Time { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Idle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _TOKEN_PRIVILEGES
 
	public class _TOKEN_PRIVILEGES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TOKEN_PRIVILEGES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TOKEN_PRIVILEGES"": [ 16, {
				 ""PrivilegeCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Privileges"": [ 4, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PrivilegeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _LUID_AND_ATTRIBUTES[] Privileges
		{
			get
			{
				_LUID_AND_ATTRIBUTES[] returnValue = new _LUID_AND_ATTRIBUTES[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _LUID_AND_ATTRIBUTES(_StructureData, (i * size) + _BufferOffset + 4);
				return returnValue;
			}
		}
	}
	#endregion
	#region _IMAGE_DEBUG_DIRECTORY
 
	public class _IMAGE_DEBUG_DIRECTORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IMAGE_DEBUG_DIRECTORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IMAGE_DEBUG_DIRECTORY"": [ 28, {
				 ""Characteristics"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""TimeDateStamp"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""MajorVersion"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""MinorVersion"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""Type"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""SizeOfData"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""AddressOfRawData"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""PointerToRawData"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Characteristics { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 TimeDateStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt16 MajorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 MinorVersion { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public UInt32 Type { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 SizeOfData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 AddressOfRawData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 PointerToRawData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _CONFIGURATION_COMPONENT_DATA
 
	public class _CONFIGURATION_COMPONENT_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CONFIGURATION_COMPONENT_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CONFIGURATION_COMPONENT_DATA"": [ 72, {
				 ""Parent"": [ 0, [ ""Pointer"", ""{\""target\"":\""_CONFIGURATION_COMPONENT_DATA\""}"" ]],
				 ""Child"": [ 8, [ ""Pointer"", ""{\""target\"":\""_CONFIGURATION_COMPONENT_DATA\""}"" ]],
				 ""Sibling"": [ 16, [ ""Pointer"", ""{\""target\"":\""_CONFIGURATION_COMPONENT_DATA\""}"" ]],
				 ""ComponentEntry"": [ 24, [ ""_CONFIGURATION_COMPONENT"", ""null"" ]],
				 ""ConfigurationData"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Parent { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Child { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Sibling { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _CONFIGURATION_COMPONENT ComponentEntry
		{
			get
			{
				_CONFIGURATION_COMPONENT returnValue = new _CONFIGURATION_COMPONENT(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 ConfigurationData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _SEP_LOWBOX_NUMBER_MAPPING
 
	public class _SEP_LOWBOX_NUMBER_MAPPING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SEP_LOWBOX_NUMBER_MAPPING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SEP_LOWBOX_NUMBER_MAPPING"": [ 40, {
				 ""Lock"": [ 0, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""Bitmap"": [ 8, [ ""_RTL_BITMAP"", ""null"" ]],
				 ""HashTable"": [ 24, [ ""Pointer"", ""{\""target\"":\""_RTL_DYNAMIC_HASH_TABLE\""}"" ]],
				 ""Active"": [ 32, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _EX_PUSH_LOCK Lock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _RTL_BITMAP Bitmap
		{
			get
			{
				_RTL_BITMAP returnValue = new _RTL_BITMAP(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 HashTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public Byte Active{ get { return _StructureData[_BufferOffset +32]; } }
	}
	#endregion
	#region _MMDEREFERENCE_SEGMENT_HEADER
 
	public class _MMDEREFERENCE_SEGMENT_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMDEREFERENCE_SEGMENT_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMDEREFERENCE_SEGMENT_HEADER"": [ 80, {
				 ""Semaphore"": [ 0, [ ""_KSEMAPHORE"", ""null"" ]],
				 ""ControlAreaDeleteListHead"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""UnusedSegmentDeleteListHead"": [ 48, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PagefileExtensionListHead"": [ 64, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KSEMAPHORE Semaphore
		{
			get
			{
				_KSEMAPHORE returnValue = new _KSEMAPHORE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY ControlAreaDeleteListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _LIST_ENTRY UnusedSegmentDeleteListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _LIST_ENTRY PagefileExtensionListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
	}
	#endregion
	#region _OBJECT_HEADER_PADDING_INFO
 
	public class _OBJECT_HEADER_PADDING_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OBJECT_HEADER_PADDING_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OBJECT_HEADER_PADDING_INFO"": [ 4, {
				 ""PaddingAmount"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PaddingAmount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _KQUEUE
 
	public class _KQUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KQUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KQUEUE"": [ 64, {
				 ""Header"": [ 0, [ ""_DISPATCHER_HEADER"", ""null"" ]],
				 ""EntryListHead"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CurrentCount"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""MaximumCount"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""ThreadListHead"": [ 48, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _DISPATCHER_HEADER Header
		{
			get
			{
				_DISPATCHER_HEADER returnValue = new _DISPATCHER_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY EntryListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 CurrentCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 MaximumCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public _LIST_ENTRY ThreadListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_NODE_INFORMATION
 
	public class _MI_NODE_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_NODE_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4544; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_NODE_INFORMATION"": [ 4544, {
				 ""FreeLargePages"": [ 0, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""LargePageRebuildTimer"": [ 3216, [ ""_MI_REBUILD_LARGE_PAGE_TIMER"", ""null"" ]],
				 ""StandbyPageList"": [ 3256, [ ""Array"", ""{\""count\"":32,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_MMPFNLIST_SHORT\""}}"" ]],
				 ""FreePageListHeadsBitmap"": [ 4032, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""FreePageListHeadsBitmapBuffer"": [ 4064, [ ""Array"", ""{\""count\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""FreeCount"": [ 4128, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""TotalPages"": [ 4144, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""TotalPagesEntireNode"": [ 4176, [ ""UInt64"", ""null"" ]],
				 ""CurrentHugeRangeColor"": [ 4184, [ ""UInt32"", ""null"" ]],
				 ""HugeIoRangeFreeCount"": [ 4192, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""MmShiftedColor"": [ 4208, [ ""UInt32"", ""null"" ]],
				 ""Color"": [ 4212, [ ""UInt32"", ""null"" ]],
				 ""ChannelFreeCount"": [ 4216, [ ""Array"", ""{\""count\"":8,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""UInt64\""}}"" ]],
				 ""Flags"": [ 4280, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""LargeListMoveInProgress"": [ 4284, [ ""UInt32"", ""null"" ]],
				 ""LargeListWaiters"": [ 4288, [ ""Pointer"", ""{\""target\"":\""_MI_LARGE_PAGE_LISTS_CHANGING\""}"" ]],
				 ""NodeLock"": [ 4296, [ ""_EX_PUSH_LOCK"", ""null"" ]],
				 ""ZeroThreadHugeMapLock"": [ 4304, [ ""UInt64"", ""null"" ]],
				 ""ChannelStatus"": [ 4312, [ ""Byte"", ""null"" ]],
				 ""ChannelOrdering"": [ 4313, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""LockedChannelOrdering"": [ 4317, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""PowerAttribute"": [ 4321, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""LargePageLock"": [ 4328, [ ""UInt64"", ""null"" ]],
				 ""PageColorTable"": [ 4336, [ ""_MI_PAGE_COLORS"", ""null"" ]],
				 ""NumberOfPagesGoingBad"": [ 4352, [ ""UInt64"", ""null"" ]],
				 ""WriteCalibration"": [ 4360, [ ""_MI_WRITE_CALIBRATION"", ""null"" ]],
				 ""BootZeroContext"": [ 4392, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BootZeroPageTimesPerProcessor"": [ 4400, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ZeroingVaBase"": [ 4408, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TotalBytesToZero"": [ 4416, [ ""UInt64"", ""null"" ]],
				 ""PerProcessorNumberOfBytesToZero"": [ 4424, [ ""UInt64"", ""null"" ]],
				 ""ZeroingContext"": [ 4432, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ZeroingProcessorCount"": [ 4440, [ ""UInt32"", ""null"" ]],
				 ""ZeroHand"": [ 4444, [ ""Int32"", ""null"" ]],
				 ""FinishedProcessors"": [ 4448, [ ""Int32"", ""null"" ]],
				 ""CyclesToZeroOneLargePage"": [ 4456, [ ""UInt64"", ""null"" ]],
				 ""ScaledCyclesToZeroOneLargePage"": [ 4464, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]],
				 ""GroupAffinity"": [ 4472, [ ""_GROUP_AFFINITY"", ""null"" ]],
				 ""ProcessorCount"": [ 4488, [ ""UInt16"", ""null"" ]],
				 ""BackgroundZeroingActive"": [ 4490, [ ""Byte"", ""null"" ]],
				 ""ZeroingPhysicalMemoryBlock"": [ 4496, [ ""Pointer"", ""{\""target\"":\""_PHYSICAL_MEMORY_DESCRIPTOR\""}"" ]] }]
				 }
				)";
			}
		}
		public _MI_FREE_LARGE_PAGES[] FreeLargePages
		{
			get
			{
				_MI_FREE_LARGE_PAGES[] returnValue = new _MI_FREE_LARGE_PAGES[3];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<3; i++ )
					returnValue[i] = new _MI_FREE_LARGE_PAGES(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public _MI_REBUILD_LARGE_PAGE_TIMER LargePageRebuildTimer
		{
			get
			{
				_MI_REBUILD_LARGE_PAGE_TIMER returnValue = new _MI_REBUILD_LARGE_PAGE_TIMER(_StructureData, _BufferOffset + 3216);
				return returnValue;
			}
		}
		public _MMPFNLIST_SHORT[] StandbyPageList
		{
			get
			{
				_MMPFNLIST_SHORT[] returnValue = new _MMPFNLIST_SHORT[32];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<32; i++ )
					returnValue[i] = new _MMPFNLIST_SHORT(_StructureData, (i * size) + _BufferOffset + 3256);
				return returnValue;
			}
		}
		public _RTL_BITMAP[] FreePageListHeadsBitmap
		{
			get
			{
				_RTL_BITMAP[] returnValue = new _RTL_BITMAP[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _RTL_BITMAP(_StructureData, (i * size) + _BufferOffset + 4032);
				return returnValue;
			}
		}
		public UInt32[] FreePageListHeadsBitmapBuffer
		{
			get
			{
				UInt32[] returnValue = new UInt32[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 4064);
				return returnValue;
			}
		}
		public UInt64[] FreeCount
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 4128);
				return returnValue;
			}
		}
		public UInt64[] TotalPages
		{
			get
			{
				UInt64[] returnValue = new UInt64[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 4144);
				return returnValue;
			}
		}
		public UInt64 TotalPagesEntireNode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4176); } }
		public UInt32 CurrentHugeRangeColor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4184); } }
		public UInt64[] HugeIoRangeFreeCount
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 4192);
				return returnValue;
			}
		}
		public UInt32 MmShiftedColor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4208); } }
		public UInt32 Color { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4212); } }
		public UInt64[] ChannelFreeCount
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				int size = 8;
				for(int i=0; i<8; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 4216);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG Flags
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 4280);
				return returnValue;
			}
		}
		public UInt32 LargeListMoveInProgress { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4284); } }
		public UInt64 LargeListWaiters { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4288); } }
		public _EX_PUSH_LOCK NodeLock
		{
			get
			{
				_EX_PUSH_LOCK returnValue = new _EX_PUSH_LOCK(_StructureData, _BufferOffset + 4296);
				return returnValue;
			}
		}
		public UInt64 ZeroThreadHugeMapLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4304); } }
		public Byte ChannelStatus{ get { return _StructureData[_BufferOffset +4312]; } }
		public Byte[] ChannelOrdering
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 4313];
				return returnValue;
			}
		}
		public Byte[] LockedChannelOrdering
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 4317];
				return returnValue;
			}
		}
		public Byte[] PowerAttribute
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 4321];
				return returnValue;
			}
		}
		public UInt64 LargePageLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4328); } }
		public _MI_PAGE_COLORS PageColorTable
		{
			get
			{
				_MI_PAGE_COLORS returnValue = new _MI_PAGE_COLORS(_StructureData, _BufferOffset + 4336);
				return returnValue;
			}
		}
		public UInt64 NumberOfPagesGoingBad { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4352); } }
		public _MI_WRITE_CALIBRATION WriteCalibration
		{
			get
			{
				_MI_WRITE_CALIBRATION returnValue = new _MI_WRITE_CALIBRATION(_StructureData, _BufferOffset + 4360);
				return returnValue;
			}
		}
		public UInt64 BootZeroContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4392); } }
		public UInt64 BootZeroPageTimesPerProcessor { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4400); } }
		public UInt64 ZeroingVaBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4408); } }
		public UInt64 TotalBytesToZero { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4416); } }
		public UInt64 PerProcessorNumberOfBytesToZero { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4424); } }
		public UInt64 ZeroingContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4432); } }
		public UInt32 ZeroingProcessorCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4440); } }
		public Int32 ZeroHand { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4444); } }
		public Int32 FinishedProcessors { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4448); } }
		public UInt64 CyclesToZeroOneLargePage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4456); } }
		public UInt64 ScaledCyclesToZeroOneLargePage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4464); } }
		public _GROUP_AFFINITY GroupAffinity
		{
			get
			{
				_GROUP_AFFINITY returnValue = new _GROUP_AFFINITY(_StructureData, _BufferOffset + 4472);
				return returnValue;
			}
		}
		public UInt16 ProcessorCount { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4488); } }
		public Byte BackgroundZeroingActive{ get { return _StructureData[_BufferOffset +4490]; } }
		public UInt64 ZeroingPhysicalMemoryBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 4496); } }
	}
	#endregion
	#region _PROC_PERF_LOAD
 
	public class _PROC_PERF_LOAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROC_PERF_LOAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROC_PERF_LOAD"": [ 2, {
				 ""BusyPercentage"": [ 0, [ ""Byte"", ""null"" ]],
				 ""FrequencyPercentage"": [ 1, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte BusyPercentage{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte FrequencyPercentage{ get { return _StructureData[_BufferOffset +1]; } }
	}
	#endregion
	#region _TRIAGE_POP_FX_DEVICE
 
	public class _TRIAGE_POP_FX_DEVICE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TRIAGE_POP_FX_DEVICE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TRIAGE_POP_FX_DEVICE"": [ 56, {
				 ""Link"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Irp"": [ 16, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""IrpData"": [ 24, [ ""Pointer"", ""{\""target\"":\""_TRIAGE_POP_IRP_DATA\""}"" ]],
				 ""Status"": [ 32, [ ""Int32"", ""null"" ]],
				 ""PowerReqCall"": [ 36, [ ""Int32"", ""null"" ]],
				 ""PowerNotReqCall"": [ 40, [ ""Int32"", ""null"" ]],
				 ""DeviceNode"": [ 48, [ ""Pointer"", ""{\""target\"":\""_TRIAGE_DEVICE_NODE\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Irp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 IrpData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 32); } }
		public Int32 PowerReqCall { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 36); } }
		public Int32 PowerNotReqCall { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 40); } }
		public UInt64 DeviceNode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _KENLISTMENT_HISTORY
 
	public class _KENLISTMENT_HISTORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KENLISTMENT_HISTORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KENLISTMENT_HISTORY"": [ 8, {
				 ""Notification"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""NewState"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_KENLISTMENT_STATE\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Notification { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _KENLISTMENT_STATE NewState { get { return (_KENLISTMENT_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _LPCP_PORT_QUEUE
 
	public class _LPCP_PORT_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LPCP_PORT_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LPCP_PORT_QUEUE"": [ 32, {
				 ""NonPagedPortQueue"": [ 0, [ ""Pointer"", ""{\""target\"":\""_LPCP_NONPAGED_PORT_QUEUE\""}"" ]],
				 ""Semaphore"": [ 8, [ ""Pointer"", ""{\""target\"":\""_KSEMAPHORE\""}"" ]],
				 ""ReceiveHead"": [ 16, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 NonPagedPortQueue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Semaphore { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _LIST_ENTRY ReceiveHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PF_KERNEL_GLOBALS
 
	public class _PF_KERNEL_GLOBALS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PF_KERNEL_GLOBALS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PF_KERNEL_GLOBALS"": [ 96, {
				 ""AccessBufferAgeThreshold"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""AccessBufferRef"": [ 8, [ ""_EX_RUNDOWN_REF"", ""null"" ]],
				 ""AccessBufferExistsEvent"": [ 16, [ ""_KEVENT"", ""null"" ]],
				 ""AccessBufferMax"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""AccessBufferList"": [ 64, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""StreamSequenceNumber"": [ 80, [ ""Int32"", ""null"" ]],
				 ""Flags"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""ScenarioPrefetchCount"": [ 88, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 AccessBufferAgeThreshold { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _EX_RUNDOWN_REF AccessBufferRef
		{
			get
			{
				_EX_RUNDOWN_REF returnValue = new _EX_RUNDOWN_REF(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _KEVENT AccessBufferExistsEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 AccessBufferMax { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public _SLIST_HEADER AccessBufferList
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public Int32 StreamSequenceNumber { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public Int32 ScenarioPrefetchCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 88); } }
	}
	#endregion
	#region _DOMAIN_CONFIGURATION_ARM64
 
	public class _DOMAIN_CONFIGURATION_ARM64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DOMAIN_CONFIGURATION_ARM64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DOMAIN_CONFIGURATION_ARM64"": [ 32, {
				 ""Ttbr0"": [ 0, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Ttbr1"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Mair0"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Mair1"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""InputSize0"": [ 24, [ ""Byte"", ""null"" ]],
				 ""InputSize1"": [ 25, [ ""Byte"", ""null"" ]],
				 ""CoherentTableWalks"": [ 26, [ ""Byte"", ""null"" ]],
				 ""TranslationEnabled"": [ 27, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LARGE_INTEGER Ttbr0
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LARGE_INTEGER Ttbr1
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 Mair0 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Mair1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public Byte InputSize0{ get { return _StructureData[_BufferOffset +24]; } }
		public Byte InputSize1{ get { return _StructureData[_BufferOffset +25]; } }
		public Byte CoherentTableWalks{ get { return _StructureData[_BufferOffset +26]; } }
		public Byte TranslationEnabled{ get { return _StructureData[_BufferOffset +27]; } }
	}
	#endregion
	#region _CALL_HASH_ENTRY
 
	public class _CALL_HASH_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CALL_HASH_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CALL_HASH_ENTRY"": [ 40, {
				 ""ListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""CallersAddress"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CallersCaller"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CallCount"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY ListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 CallersAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 CallersCaller { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 CallCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _RTL_ACTIVATION_CONTEXT_STACK_FRAME
 
	public class _RTL_ACTIVATION_CONTEXT_STACK_FRAME
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_ACTIVATION_CONTEXT_STACK_FRAME(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_ACTIVATION_CONTEXT_STACK_FRAME"": [ 24, {
				 ""Previous"": [ 0, [ ""Pointer"", ""{\""target\"":\""_RTL_ACTIVATION_CONTEXT_STACK_FRAME\""}"" ]],
				 ""ActivationContext"": [ 8, [ ""Pointer"", ""{\""target\"":\""_ACTIVATION_CONTEXT\""}"" ]],
				 ""Flags"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Previous { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ActivationContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _DIAGNOSTIC_CONTEXT
 
	public class _DIAGNOSTIC_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DIAGNOSTIC_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DIAGNOSTIC_CONTEXT"": [ 32, {
				 ""CallerType"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_REQUESTER_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Process"": [ 8, [ ""Pointer"", ""{\""target\"":\""_EPROCESS\""}"" ]],
				 ""ServiceTag"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""DeviceObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""ReasonSize"": [ 24, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _REQUESTER_TYPE CallerType { get { return (_REQUESTER_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 Process { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32 ServiceTag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ReasonSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _MI_SYSTEM_NODE_INFORMATION
 
	public class _MI_SYSTEM_NODE_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SYSTEM_NODE_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 176; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SYSTEM_NODE_INFORMATION"": [ 176, {
				 ""CachedKernelStacks"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""DynamicBitMapNonPagedPool"": [ 64, [ ""_MI_DYNAMIC_BITMAP"", ""null"" ]],
				 ""CachedNonPagedPoolCount"": [ 136, [ ""UInt64"", ""null"" ]],
				 ""NonPagedPoolSpinLock"": [ 144, [ ""UInt64"", ""null"" ]],
				 ""CachedNonPagedPool"": [ 152, [ ""Pointer"", ""{\""target\"":\""_MMPFN\""}"" ]],
				 ""NonPagedPoolFirstVa"": [ 160, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NonPagedPoolLastVa"": [ 168, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _CACHED_KSTACK_LIST[] CachedKernelStacks
		{
			get
			{
				_CACHED_KSTACK_LIST[] returnValue = new _CACHED_KSTACK_LIST[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _CACHED_KSTACK_LIST(_StructureData, (i * size) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public _MI_DYNAMIC_BITMAP DynamicBitMapNonPagedPool
		{
			get
			{
				_MI_DYNAMIC_BITMAP returnValue = new _MI_DYNAMIC_BITMAP(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt64 CachedNonPagedPoolCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 NonPagedPoolSpinLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 CachedNonPagedPool { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 NonPagedPoolFirstVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 NonPagedPoolLastVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
	}
	#endregion
	#region _PROC_PERF_QOS_CLASS_POLICY
 
	public class _PROC_PERF_QOS_CLASS_POLICY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROC_PERF_QOS_CLASS_POLICY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROC_PERF_QOS_CLASS_POLICY"": [ 28, {
				 ""MaxPolicyPercent"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""MaxEquivalentFrequencyPercent"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""MinPolicyPercent"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""AutonomousActivityWindow"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""EnergyPerfPreference"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ProvideGuidance"": [ 20, [ ""Byte"", ""null"" ]],
				 ""AllowThrottling"": [ 21, [ ""Byte"", ""null"" ]],
				 ""PerfBoostMode"": [ 22, [ ""Byte"", ""null"" ]],
				 ""LatencyHintPerf"": [ 23, [ ""Byte"", ""null"" ]],
				 ""TrackDesiredCrossClass"": [ 24, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 MaxPolicyPercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 MaxEquivalentFrequencyPercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 MinPolicyPercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 AutonomousActivityWindow { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 EnergyPerfPreference { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Byte ProvideGuidance{ get { return _StructureData[_BufferOffset +20]; } }
		public Byte AllowThrottling{ get { return _StructureData[_BufferOffset +21]; } }
		public Byte PerfBoostMode{ get { return _StructureData[_BufferOffset +22]; } }
		public Byte LatencyHintPerf{ get { return _StructureData[_BufferOffset +23]; } }
		public Byte TrackDesiredCrossClass{ get { return _StructureData[_BufferOffset +24]; } }
	}
	#endregion
	#region _POP_FX_WORK_POOL_ITEM
 
	public class _POP_FX_WORK_POOL_ITEM
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_WORK_POOL_ITEM(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_WORK_POOL_ITEM"": [ 40, {
				 ""WorkPool"": [ 0, [ ""Pointer"", ""{\""target\"":\""_POP_FX_WORK_POOL\""}"" ]],
				 ""WorkItem"": [ 8, [ ""_WORK_QUEUE_ITEM"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 WorkPool { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _WORK_QUEUE_ITEM WorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _FAULT_INFORMATION_ARM64
 
	public class _FAULT_INFORMATION_ARM64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FAULT_INFORMATION_ARM64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FAULT_INFORMATION_ARM64"": [ 48, {
				 ""DomainHandle"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FaultAddress"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PhysicalDeviceObject"": [ 16, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""InputMappingId"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 28, [ ""_FAULT_INFORMATION_ARM64_FLAGS"", ""null"" ]],
				 ""Type"": [ 32, [ ""Enumeration"", ""{\""enum_name\"":\""_FAULT_INFORMATION_ARM64_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""IommuBaseAddress"": [ 40, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DomainHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 FaultAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 PhysicalDeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 InputMappingId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _FAULT_INFORMATION_ARM64_FLAGS Flags
		{
			get
			{
				_FAULT_INFORMATION_ARM64_FLAGS returnValue = new _FAULT_INFORMATION_ARM64_FLAGS(_StructureData, _BufferOffset + 28);
				return returnValue;
			}
		}
		public _FAULT_INFORMATION_ARM64_TYPE Type { get { return (_FAULT_INFORMATION_ARM64_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 IommuBaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
	}
	#endregion
	#region _MI_NODE_NUMBER_ZERO_BASED
 
	public class _MI_NODE_NUMBER_ZERO_BASED
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_NODE_NUMBER_ZERO_BASED(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_NODE_NUMBER_ZERO_BASED"": [ 4, {
				 ""ZeroBased"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ZeroBased { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _MI_TRIAGE_DUMP_DATA
 
	public class _MI_TRIAGE_DUMP_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_TRIAGE_DUMP_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_TRIAGE_DUMP_DATA"": [ 56, {
				 ""BadPageCount"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""BadPagesDetected"": [ 8, [ ""Int32"", ""null"" ]],
				 ""ZeroedPageSingleBitErrorsDetected"": [ 12, [ ""Int32"", ""null"" ]],
				 ""ScrubPasses"": [ 16, [ ""Int32"", ""null"" ]],
				 ""ScrubBadPagesFound"": [ 20, [ ""Int32"", ""null"" ]],
				 ""PageHashErrors"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""FeatureBits"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""TimeZoneId"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 44, [ ""_MI_FLAGS"", ""null"" ]],
				 ""VsmConnection"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 BadPageCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Int32 BadPagesDetected { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public Int32 ZeroedPageSingleBitErrorsDetected { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 12); } }
		public Int32 ScrubPasses { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public Int32 ScrubBadPagesFound { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 PageHashErrors { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt64 FeatureBits { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt32 TimeZoneId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public _MI_FLAGS Flags
		{
			get
			{
				_MI_FLAGS returnValue = new _MI_FLAGS(_StructureData, _BufferOffset + 44);
				return returnValue;
			}
		}
		public UInt64 VsmConnection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _MI_FORCED_COMMITS
 
	public class _MI_FORCED_COMMITS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_FORCED_COMMITS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_FORCED_COMMITS"": [ 8, {
				 ""Regular"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Wrap"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Regular { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Wrap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _VERIFIER_SHARED_EXPORT_THUNK
 
	public class _VERIFIER_SHARED_EXPORT_THUNK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VERIFIER_SHARED_EXPORT_THUNK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 0; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VERIFIER_SHARED_EXPORT_THUNK"": [ 0, {
				}]
				 }
				)";
			}
		}
	}
	#endregion
	#region _VF_TARGET_ALL_SHARED_EXPORT_THUNKS
 
	public class _VF_TARGET_ALL_SHARED_EXPORT_THUNKS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VF_TARGET_ALL_SHARED_EXPORT_THUNKS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VF_TARGET_ALL_SHARED_EXPORT_THUNKS"": [ 32, {
				 ""SharedExportThunks"": [ 0, [ ""Pointer"", ""{\""target\"":\""_VERIFIER_SHARED_EXPORT_THUNK\""}"" ]],
				 ""PoolSharedExportThunks"": [ 8, [ ""Pointer"", ""{\""target\"":\""_VERIFIER_SHARED_EXPORT_THUNK\""}"" ]],
				 ""OrderDependentSharedExportThunks"": [ 16, [ ""Pointer"", ""{\""target\"":\""_VERIFIER_SHARED_EXPORT_THUNK\""}"" ]],
				 ""XdvSharedExportThunks"": [ 24, [ ""Pointer"", ""{\""target\"":\""_VERIFIER_SHARED_EXPORT_THUNK\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SharedExportThunks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 PoolSharedExportThunks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 OrderDependentSharedExportThunks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 XdvSharedExportThunks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _FAULT_INFORMATION_X64
 
	public class _FAULT_INFORMATION_X64
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FAULT_INFORMATION_X64(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FAULT_INFORMATION_X64"": [ 40, {
				 ""DomainHandle"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FaultAddress"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Flags"": [ 16, [ ""_FAULT_INFORMATION_X64_FLAGS"", ""null"" ]],
				 ""Type"": [ 20, [ ""Enumeration"", ""{\""enum_name\"":\""_FAULT_INFORMATION_ARM64_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""IommuBaseAddress"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""PciSegment"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DomainHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 FaultAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _FAULT_INFORMATION_X64_FLAGS Flags
		{
			get
			{
				_FAULT_INFORMATION_X64_FLAGS returnValue = new _FAULT_INFORMATION_X64_FLAGS(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _FAULT_INFORMATION_ARM64_TYPE Type { get { return (_FAULT_INFORMATION_ARM64_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 IommuBaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 PciSegment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _PERF_CONTROL_STATE_SELECTION
 
	public class _PERF_CONTROL_STATE_SELECTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PERF_CONTROL_STATE_SELECTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PERF_CONTROL_STATE_SELECTION"": [ 40, {
				 ""SelectedState"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""SelectedPercent"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SelectedFrequency"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""MinPercent"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""MaxPercent"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""TolerancePercent"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""EppPercent"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""AutonomousActivityWindow"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Autonomous"": [ 36, [ ""Byte"", ""null"" ]],
				 ""InheritFromDomain"": [ 37, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 SelectedState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 SelectedPercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 SelectedFrequency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 MinPercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 MaxPercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 TolerancePercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 EppPercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 AutonomousActivityWindow { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public Byte Autonomous{ get { return _StructureData[_BufferOffset +36]; } }
		public Byte InheritFromDomain{ get { return _StructureData[_BufferOffset +37]; } }
	}
	#endregion
	#region _POP_COMPONENT_POWER_PROFILE
 
	public class _POP_COMPONENT_POWER_PROFILE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_COMPONENT_POWER_PROFILE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_COMPONENT_POWER_PROFILE"": [ 40, {
				 ""ComponentGuid"": [ 0, [ ""_GUID"", ""null"" ]],
				 ""Device"": [ 16, [ ""Pointer"", ""{\""target\"":\""_POP_DEVICE_POWER_PROFILE\""}"" ]],
				 ""FxCount"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""FxPower"": [ 32, [ ""Array"", ""{\""count\"":1,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public _GUID ComponentGuid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Device { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 FxCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public _PO_POWER_PLANE_PROFILE[] FxPower
		{
			get
			{
				_PO_POWER_PLANE_PROFILE[] returnValue = new _PO_POWER_PLANE_PROFILE[1];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<1; i++ )
					returnValue[i] = new _PO_POWER_PLANE_PROFILE(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_REBUILD_LARGE_PAGE_TIMER
 
	public class _MI_REBUILD_LARGE_PAGE_TIMER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_REBUILD_LARGE_PAGE_TIMER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_REBUILD_LARGE_PAGE_TIMER"": [ 40, {
				 ""WorkItem"": [ 0, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""SecondsLeft"": [ 32, [ ""Byte"", ""null"" ]],
				 ""RebuildActive"": [ 33, [ ""Byte"", ""null"" ]],
				 ""NextPassDelta"": [ 34, [ ""Byte"", ""null"" ]],
				 ""LargeSubPagesActive"": [ 35, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _WORK_QUEUE_ITEM WorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Byte SecondsLeft{ get { return _StructureData[_BufferOffset +32]; } }
		public Byte RebuildActive{ get { return _StructureData[_BufferOffset +33]; } }
		public Byte NextPassDelta{ get { return _StructureData[_BufferOffset +34]; } }
		public Byte LargeSubPagesActive{ get { return _StructureData[_BufferOffset +35]; } }
	}
	#endregion
	#region _MI_IO_PAGE_STATE
 
	public class _MI_IO_PAGE_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_IO_PAGE_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 104; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_IO_PAGE_STATE"": [ 104, {
				 ""IoPfnLock"": [ 0, [ ""Int32"", ""null"" ]],
				 ""IoPfnRoot"": [ 8, [ ""Array"", ""{\""count\"":3,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""UnusedCachedMaps"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""OldestCacheFlushTimeStamp"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""IoCacheStats"": [ 56, [ ""_MI_IO_CACHE_STATS"", ""null"" ]],
				 ""InvariantIoSpace"": [ 96, [ ""_RTL_AVL_TREE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int32 IoPfnLock { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
		public _RTL_AVL_TREE[] IoPfnRoot
		{
			get
			{
				_RTL_AVL_TREE[] returnValue = new _RTL_AVL_TREE[3];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<3; i++ )
					returnValue[i] = new _RTL_AVL_TREE(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
		public _LIST_ENTRY UnusedCachedMaps
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt32 OldestCacheFlushTimeStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public _MI_IO_CACHE_STATS IoCacheStats
		{
			get
			{
				_MI_IO_CACHE_STATS returnValue = new _MI_IO_CACHE_STATS(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _RTL_AVL_TREE InvariantIoSpace
		{
			get
			{
				_RTL_AVL_TREE returnValue = new _RTL_AVL_TREE(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ETW_REPLY_QUEUE
 
	public class _ETW_REPLY_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_REPLY_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_REPLY_QUEUE"": [ 72, {
				 ""Queue"": [ 0, [ ""_KQUEUE"", ""null"" ]],
				 ""EventsLost"": [ 64, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KQUEUE Queue
		{
			get
			{
				_KQUEUE returnValue = new _KQUEUE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int32 EventsLost { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _LOADER_PARAMETER_EXTENSION
 
	public class _LOADER_PARAMETER_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LOADER_PARAMETER_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 3640; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LOADER_PARAMETER_EXTENSION"": [ 3640, {
				 ""Size"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Profile"": [ 4, [ ""_PROFILE_PARAMETER_BLOCK"", ""null"" ]],
				 ""EmInfFileImage"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EmInfFileSize"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""TriageDumpBlock"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HeadlessLoaderBlock"": [ 48, [ ""Pointer"", ""{\""target\"":\""_HEADLESS_LOADER_BLOCK\""}"" ]],
				 ""SMBiosEPSHeader"": [ 56, [ ""Pointer"", ""{\""target\"":\""_SMBIOS3_TABLE_HEADER\""}"" ]],
				 ""DrvDBImage"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DrvDBSize"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""DrvDBPatchImage"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DrvDBPatchSize"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""NetworkLoaderBlock"": [ 96, [ ""Pointer"", ""{\""target\"":\""_NETWORK_LOADER_BLOCK\""}"" ]],
				 ""FirmwareDescriptorListHead"": [ 104, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""AcpiTable"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AcpiTableSize"": [ 128, [ ""UInt32"", ""null"" ]],
				 ""LastBootSucceeded"": [ 132, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""LastBootShutdown"": [ 132, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""IoPortAccessSupported"": [ 132, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""BootDebuggerActive"": [ 132, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""StrongCodeGuarantees"": [ 132, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""HardStrongCodeGuarantees"": [ 132, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""SidSharingDisabled"": [ 132, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""TpmInitialized"": [ 132, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""VsmConfigured"": [ 132, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""IumEnabled"": [ 132, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]],
				 ""IsSmbboot"": [ 132, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""BootLogEnabled"": [ 132, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt32\""}"" ]],
				 ""DriverVerifierEnabled"": [ 132, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt32\""}"" ]],
				 ""SuppressMonitorX"": [ 132, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt32\""}"" ]],
				 ""KernelCetEnabled"": [ 132, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt32\""}"" ]],
				 ""SuppressSmap"": [ 132, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt32\""}"" ]],
				 ""Unused"": [ 132, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""FeatureSimulations"": [ 132, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":21,\""target\"":\""UInt32\""}"" ]],
				 ""MicrocodeSelfHosting"": [ 132, [ ""BitField"", ""{\""end_bit\"":28,\""start_bit\"":27,\""target\"":\""UInt32\""}"" ]],
				 ""XhciLegacyHandoffSkip"": [ 132, [ ""BitField"", ""{\""end_bit\"":29,\""start_bit\"":28,\""target\"":\""UInt32\""}"" ]],
				 ""DisableInsiderOptInHVCI"": [ 132, [ ""BitField"", ""{\""end_bit\"":30,\""start_bit\"":29,\""target\"":\""UInt32\""}"" ]],
				 ""MicrocodeMinVerSupported"": [ 132, [ ""BitField"", ""{\""end_bit\"":31,\""start_bit\"":30,\""target\"":\""UInt32\""}"" ]],
				 ""GpuIommuEnabled"": [ 132, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":31,\""target\"":\""UInt32\""}"" ]],
				 ""LoaderPerformanceData"": [ 136, [ ""_LOADER_PERFORMANCE_DATA"", ""null"" ]],
				 ""BootApplicationPersistentData"": [ 232, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""WmdTestResult"": [ 248, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BootIdentifier"": [ 256, [ ""_GUID"", ""null"" ]],
				 ""ResumePages"": [ 272, [ ""UInt32"", ""null"" ]],
				 ""DumpHeader"": [ 280, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BgContext"": [ 288, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumaLocalityInfo"": [ 296, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumaGroupAssignment"": [ 304, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AttachedHives"": [ 312, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""MemoryCachingRequirementsCount"": [ 328, [ ""UInt32"", ""null"" ]],
				 ""MemoryCachingRequirements"": [ 336, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""BootEntropyResult"": [ 344, [ ""_BOOT_ENTROPY_LDR_RESULT"", ""null"" ]],
				 ""ProcessorCounterFrequency"": [ 2496, [ ""UInt64"", ""null"" ]],
				 ""HypervisorExtension"": [ 2504, [ ""_LOADER_PARAMETER_HYPERVISOR_EXTENSION"", ""null"" ]],
				 ""HardwareConfigurationId"": [ 2568, [ ""_GUID"", ""null"" ]],
				 ""HalExtensionModuleList"": [ 2584, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""SystemTime"": [ 2600, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""TimeStampAtSystemTimeRead"": [ 2608, [ ""UInt64"", ""null"" ]],
				 ""BootFlags"": [ 2616, [ ""UInt64"", ""null"" ]],
				 ""DbgMenuOsSelection"": [ 2616, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""DbgHiberBoot"": [ 2616, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""DbgSoftRestart"": [ 2616, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""DbgMeasuredLaunch"": [ 2616, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""InternalBootFlags"": [ 2624, [ ""UInt64"", ""null"" ]],
				 ""DbgUtcBootTime"": [ 2624, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""DbgRtcBootTime"": [ 2624, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""DbgNoLegacyServices"": [ 2624, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""WfsFPData"": [ 2632, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WfsFPDataSize"": [ 2640, [ ""UInt32"", ""null"" ]],
				 ""BugcheckParameters"": [ 2648, [ ""_LOADER_BUGCHECK_PARAMETERS"", ""null"" ]],
				 ""ApiSetSchema"": [ 2688, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ApiSetSchemaSize"": [ 2696, [ ""UInt32"", ""null"" ]],
				 ""ApiSetSchemaExtensions"": [ 2704, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""AcpiBiosVersion"": [ 2720, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""SmbiosVersion"": [ 2736, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""EfiVersion"": [ 2752, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""KdDebugDevice"": [ 2768, [ ""Pointer"", ""{\""target\"":\""_DEBUG_DEVICE_DESCRIPTOR\""}"" ]],
				 ""OfflineCrashdumpConfigurationTable"": [ 2776, [ ""_OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2"", ""null"" ]],
				 ""ManufacturingProfile"": [ 2808, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""BbtBuffer"": [ 2824, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""XsaveAllowedFeatures"": [ 2832, [ ""UInt64"", ""null"" ]],
				 ""XsaveFlags"": [ 2840, [ ""UInt32"", ""null"" ]],
				 ""BootOptions"": [ 2848, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IumEnablement"": [ 2856, [ ""UInt32"", ""null"" ]],
				 ""IumPolicy"": [ 2860, [ ""UInt32"", ""null"" ]],
				 ""IumStatus"": [ 2864, [ ""Int32"", ""null"" ]],
				 ""BootId"": [ 2868, [ ""UInt32"", ""null"" ]],
				 ""CodeIntegrityData"": [ 2872, [ ""Pointer"", ""{\""target\"":\""_LOADER_PARAMETER_CI_EXTENSION\""}"" ]],
				 ""CodeIntegrityDataSize"": [ 2880, [ ""UInt32"", ""null"" ]],
				 ""SystemHiveRecoveryInfo"": [ 2884, [ ""_LOADER_HIVE_RECOVERY_INFO"", ""null"" ]],
				 ""SoftRestartCount"": [ 2904, [ ""UInt32"", ""null"" ]],
				 ""SoftRestartTime"": [ 2912, [ ""Int64"", ""null"" ]],
				 ""HypercallCodeVa"": [ 2920, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalVirtualAddress"": [ 2928, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""HalNumberOfBytes"": [ 2936, [ ""UInt64"", ""null"" ]],
				 ""LeapSecondData"": [ 2944, [ ""Pointer"", ""{\""target\"":\""_LEAP_SECOND_DATA\""}"" ]],
				 ""MajorRelease"": [ 2952, [ ""UInt32"", ""null"" ]],
				 ""Reserved1"": [ 2956, [ ""UInt32"", ""null"" ]],
				 ""NtBuildLab"": [ 2960, [ ""Array"", ""{\""count\"":224,\""target\"":\""Char\""}"" ]],
				 ""NtBuildLabEx"": [ 3184, [ ""Array"", ""{\""count\"":224,\""target\"":\""Char\""}"" ]],
				 ""ResetReason"": [ 3408, [ ""_LOADER_RESET_REASON"", ""null"" ]],
				 ""MaxPciBusNumber"": [ 3456, [ ""UInt32"", ""null"" ]],
				 ""FeatureSettings"": [ 3460, [ ""UInt32"", ""null"" ]],
				 ""HotPatchReserveSize"": [ 3464, [ ""UInt32"", ""null"" ]],
				 ""RetpolineReserveSize"": [ 3468, [ ""UInt32"", ""null"" ]],
				 ""MiniExecutive"": [ 3472, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""VsmPerformanceData"": [ 3488, [ ""_VSM_PERFORMANCE_DATA"", ""null"" ]],
				 ""NumaMemoryRanges"": [ 3552, [ ""Pointer"", ""{\""target\"":\""_NUMA_MEMORY_RANGE\""}"" ]],
				 ""NumaMemoryRangeCount"": [ 3560, [ ""UInt32"", ""null"" ]],
				 ""IommuFaultPolicy"": [ 3564, [ ""UInt32"", ""null"" ]],
				 ""FeatureConfigurationInformation"": [ 3568, [ ""_LOADER_FEATURE_CONFIGURATION_INFORMATION"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Size { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _PROFILE_PARAMETER_BLOCK Profile
		{
			get
			{
				_PROFILE_PARAMETER_BLOCK returnValue = new _PROFILE_PARAMETER_BLOCK(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt64 EmInfFileImage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 EmInfFileSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 TriageDumpBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 HeadlessLoaderBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 SMBiosEPSHeader { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 DrvDBImage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt32 DrvDBSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt64 DrvDBPatchImage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt32 DrvDBPatchSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt64 NetworkLoaderBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public _LIST_ENTRY FirmwareDescriptorListHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt64 AcpiTable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt32 AcpiTableSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 128); } }
		public UInt32 LastBootSucceeded
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 LastBootShutdown
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 IoPortAccessSupported
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 BootDebuggerActive
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 StrongCodeGuarantees
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 HardStrongCodeGuarantees
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 SidSharingDisabled
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 TpmInitialized
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 VsmConfigured
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 IumEnabled
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 512) >> 9;
				return (UInt32)value2;
			}
		}
		public UInt32 IsSmbboot
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 1024) >> 10;
				return (UInt32)value2;
			}
		}
		public UInt32 BootLogEnabled
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 2048) >> 11;
				return (UInt32)value2;
			}
		}
		public UInt32 DriverVerifierEnabled
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 4096) >> 12;
				return (UInt32)value2;
			}
		}
		public UInt32 SuppressMonitorX
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 8192) >> 13;
				return (UInt32)value2;
			}
		}
		public UInt32 KernelCetEnabled
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 16384) >> 14;
				return (UInt32)value2;
			}
		}
		public UInt32 SuppressSmap
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 32768) >> 15;
				return (UInt32)value2;
			}
		}
		public UInt32 Unused
		{
			get
			{
				// start: 16  end: 21  Mask: 111110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 2031616) >> 16;
				return (UInt32)value2;
			}
		}
		public UInt32 FeatureSimulations
		{
			get
			{
				// start: 21  end: 27  Mask: 111111000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 132120576) >> 21;
				return (UInt32)value2;
			}
		}
		public UInt32 MicrocodeSelfHosting
		{
			get
			{
				// start: 27  end: 28  Mask: 1000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 134217728) >> 27;
				return (UInt32)value2;
			}
		}
		public UInt32 XhciLegacyHandoffSkip
		{
			get
			{
				// start: 28  end: 29  Mask: 10000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 268435456) >> 28;
				return (UInt32)value2;
			}
		}
		public UInt32 DisableInsiderOptInHVCI
		{
			get
			{
				// start: 29  end: 30  Mask: 100000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 536870912) >> 29;
				return (UInt32)value2;
			}
		}
		public UInt32 MicrocodeMinVerSupported
		{
			get
			{
				// start: 30  end: 31  Mask: 1000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 1073741824) >> 30;
				return (UInt32)value2;
			}
		}
		public UInt32 GpuIommuEnabled
		{
			get
			{
				// start: 31  end: 32  Mask: 10000000000000000000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 132);
				var value2 = (value & 2147483648) >> 31;
				return (UInt32)value2;
			}
		}
		public _LOADER_PERFORMANCE_DATA LoaderPerformanceData
		{
			get
			{
				_LOADER_PERFORMANCE_DATA returnValue = new _LOADER_PERFORMANCE_DATA(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public _LIST_ENTRY BootApplicationPersistentData
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 232);
				return returnValue;
			}
		}
		public UInt64 WmdTestResult { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public _GUID BootIdentifier
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
		public UInt32 ResumePages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 272); } }
		public UInt64 DumpHeader { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 280); } }
		public UInt64 BgContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 288); } }
		public UInt64 NumaLocalityInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 296); } }
		public UInt64 NumaGroupAssignment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 304); } }
		public _LIST_ENTRY AttachedHives
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 312);
				return returnValue;
			}
		}
		public UInt32 MemoryCachingRequirementsCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 328); } }
		public UInt64 MemoryCachingRequirements { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 336); } }
		public _BOOT_ENTROPY_LDR_RESULT BootEntropyResult
		{
			get
			{
				_BOOT_ENTROPY_LDR_RESULT returnValue = new _BOOT_ENTROPY_LDR_RESULT(_StructureData, _BufferOffset + 344);
				return returnValue;
			}
		}
		public UInt64 ProcessorCounterFrequency { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2496); } }
		public _LOADER_PARAMETER_HYPERVISOR_EXTENSION HypervisorExtension
		{
			get
			{
				_LOADER_PARAMETER_HYPERVISOR_EXTENSION returnValue = new _LOADER_PARAMETER_HYPERVISOR_EXTENSION(_StructureData, _BufferOffset + 2504);
				return returnValue;
			}
		}
		public _GUID HardwareConfigurationId
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 2568);
				return returnValue;
			}
		}
		public _LIST_ENTRY HalExtensionModuleList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 2584);
				return returnValue;
			}
		}
		public _LARGE_INTEGER SystemTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 2600);
				return returnValue;
			}
		}
		public UInt64 TimeStampAtSystemTimeRead { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2608); } }
		public UInt64 BootFlags { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2616); } }
		public UInt64 DbgMenuOsSelection
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 2616);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 DbgHiberBoot
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 2616);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 DbgSoftRestart
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 2616);
				var value2 = (value & 4) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 DbgMeasuredLaunch
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 2616);
				var value2 = (value & 8) >> 3;
				return (UInt64)value2;
			}
		}
		public UInt64 InternalBootFlags { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2624); } }
		public UInt64 DbgUtcBootTime
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 2624);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 DbgRtcBootTime
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 2624);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 DbgNoLegacyServices
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 2624);
				var value2 = (value & 4) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 WfsFPData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2632); } }
		public UInt32 WfsFPDataSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2640); } }
		public _LOADER_BUGCHECK_PARAMETERS BugcheckParameters
		{
			get
			{
				_LOADER_BUGCHECK_PARAMETERS returnValue = new _LOADER_BUGCHECK_PARAMETERS(_StructureData, _BufferOffset + 2648);
				return returnValue;
			}
		}
		public UInt64 ApiSetSchema { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2688); } }
		public UInt32 ApiSetSchemaSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2696); } }
		public _LIST_ENTRY ApiSetSchemaExtensions
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 2704);
				return returnValue;
			}
		}
		public _UNICODE_STRING AcpiBiosVersion
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 2720);
				return returnValue;
			}
		}
		public _UNICODE_STRING SmbiosVersion
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 2736);
				return returnValue;
			}
		}
		public _UNICODE_STRING EfiVersion
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 2752);
				return returnValue;
			}
		}
		public UInt64 KdDebugDevice { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2768); } }
		public _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2 OfflineCrashdumpConfigurationTable
		{
			get
			{
				_OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2 returnValue = new _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2(_StructureData, _BufferOffset + 2776);
				return returnValue;
			}
		}
		public _UNICODE_STRING ManufacturingProfile
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 2808);
				return returnValue;
			}
		}
		public UInt64 BbtBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2824); } }
		public UInt64 XsaveAllowedFeatures { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2832); } }
		public UInt32 XsaveFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2840); } }
		public UInt64 BootOptions { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2848); } }
		public UInt32 IumEnablement { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2856); } }
		public UInt32 IumPolicy { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2860); } }
		public Int32 IumStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 2864); } }
		public UInt32 BootId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2868); } }
		public UInt64 CodeIntegrityData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2872); } }
		public UInt32 CodeIntegrityDataSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2880); } }
		public _LOADER_HIVE_RECOVERY_INFO SystemHiveRecoveryInfo
		{
			get
			{
				_LOADER_HIVE_RECOVERY_INFO returnValue = new _LOADER_HIVE_RECOVERY_INFO(_StructureData, _BufferOffset + 2884);
				return returnValue;
			}
		}
		public UInt32 SoftRestartCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2904); } }
		public Int64 SoftRestartTime { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 2912); } }
		public UInt64 HypercallCodeVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2920); } }
		public UInt64 HalVirtualAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2928); } }
		public UInt64 HalNumberOfBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2936); } }
		public UInt64 LeapSecondData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 2944); } }
		public UInt32 MajorRelease { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2952); } }
		public UInt32 Reserved1 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 2956); } }
		public Char[] NtBuildLab
		{
			get
			{
				Char[] returnValue = new Char[224];
				for(int i=0; i<224; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 2960);
				return returnValue;
			}
		}
		public Char[] NtBuildLabEx
		{
			get
			{
				Char[] returnValue = new Char[224];
				for(int i=0; i<224; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 3184);
				return returnValue;
			}
		}
		public _LOADER_RESET_REASON ResetReason
		{
			get
			{
				_LOADER_RESET_REASON returnValue = new _LOADER_RESET_REASON(_StructureData, _BufferOffset + 3408);
				return returnValue;
			}
		}
		public UInt32 MaxPciBusNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3456); } }
		public UInt32 FeatureSettings { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3460); } }
		public UInt32 HotPatchReserveSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3464); } }
		public UInt32 RetpolineReserveSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3468); } }
		public _ANONYMOUS_TAG MiniExecutive
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 3472);
				return returnValue;
			}
		}
		public _VSM_PERFORMANCE_DATA VsmPerformanceData
		{
			get
			{
				_VSM_PERFORMANCE_DATA returnValue = new _VSM_PERFORMANCE_DATA(_StructureData, _BufferOffset + 3488);
				return returnValue;
			}
		}
		public UInt64 NumaMemoryRanges { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 3552); } }
		public UInt32 NumaMemoryRangeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3560); } }
		public UInt32 IommuFaultPolicy { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 3564); } }
		public _LOADER_FEATURE_CONFIGURATION_INFORMATION FeatureConfigurationInformation
		{
			get
			{
				_LOADER_FEATURE_CONFIGURATION_INFORMATION returnValue = new _LOADER_FEATURE_CONFIGURATION_INFORMATION(_StructureData, _BufferOffset + 3568);
				return returnValue;
			}
		}
	}
	#endregion
	#region _NLS_DATA_BLOCK
 
	public class _NLS_DATA_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _NLS_DATA_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_NLS_DATA_BLOCK"": [ 24, {
				 ""AnsiCodePageData"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OemCodePageData"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UnicodeCaseTableData"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 AnsiCodePageData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 OemCodePageData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 UnicodeCaseTableData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _CM_BIG_DATA
 
	public class _CM_BIG_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_BIG_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_BIG_DATA"": [ 8, {
				 ""Signature"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Count"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""List"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Signature { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Count { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 List { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _MI_CROSS_PARTITION_CHARGES
 
	public class _MI_CROSS_PARTITION_CHARGES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_CROSS_PARTITION_CHARGES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_CROSS_PARTITION_CHARGES"": [ 32, {
				 ""CurrentCharges"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""ChargeFailures"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ChargePeak"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""ChargeMinimum"": [ 24, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 CurrentCharges { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ChargeFailures { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ChargePeak { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 ChargeMinimum { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _MI_PER_SESSION_PROTOS
 
	public class _MI_PER_SESSION_PROTOS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PER_SESSION_PROTOS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 88; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PER_SESSION_PROTOS"": [ 88, {
				 ""SessionProtoNode"": [ 0, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""FreeList"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""DriverAddress"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProtosNode"": [ 24, [ ""_MI_PROTOTYPE_PTES_NODE"", ""null"" ]],
				 ""NumberOfPtes"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""SessionId"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""Subsection"": [ 64, [ ""Pointer"", ""{\""target\"":\""_SUBSECTION\""}"" ]],
				 ""SubsectionBase"": [ 72, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]],
				 ""u2"": [ 80, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BALANCED_NODE SessionProtoNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _SINGLE_LIST_ENTRY FreeList
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 DriverAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _MI_PROTOTYPE_PTES_NODE ProtosNode
		{
			get
			{
				_MI_PROTOTYPE_PTES_NODE returnValue = new _MI_PROTOTYPE_PTES_NODE(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 NumberOfPtes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt32 SessionId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt64 Subsection { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 SubsectionBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public _ANONYMOUS_TAG u2
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
	}
	#endregion
	#region _TOKEN_MANDATORY_POLICY
 
	public class _TOKEN_MANDATORY_POLICY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TOKEN_MANDATORY_POLICY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TOKEN_MANDATORY_POLICY"": [ 4, {
				 ""Policy"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Policy { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _PEBS_DS_SAVE_AREA32
 
	public class _PEBS_DS_SAVE_AREA32
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEBS_DS_SAVE_AREA32(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEBS_DS_SAVE_AREA32"": [ 128, {
				 ""BtsBufferBase"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""BtsIndex"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""BtsAbsoluteMaximum"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""BtsInterruptThreshold"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""PebsBufferBase"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""PebsIndex"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""PebsAbsoluteMaximum"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""PebsInterruptThreshold"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""PebsGpCounterReset"": [ 32, [ ""Array"", ""{\""count\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""PebsFixedCounterReset"": [ 96, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BtsBufferBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 BtsIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 BtsAbsoluteMaximum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 BtsInterruptThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 PebsBufferBase { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 PebsIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 PebsAbsoluteMaximum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 PebsInterruptThreshold { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt64[] PebsGpCounterReset
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64[] PebsFixedCounterReset
		{
			get
			{
				UInt64[] returnValue = new UInt64[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 96);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_RESERVATION_CLUSTER_INFO
 
	public class _MI_RESERVATION_CLUSTER_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_RESERVATION_CLUSTER_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_RESERVATION_CLUSTER_INFO"": [ 4, {
				 ""ClusterSize"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""SequenceNumber"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":10,\""target\"":\""UInt32\""}"" ]],
				 ""EntireInfo"": [ 0, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ClusterSize
		{
			get
			{
				// start: 0  end: 10  Mask: 0000001111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1023) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 SequenceNumber
		{
			get
			{
				// start: 10  end: 32  Mask: 11111111111111111111110000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294966272) >> 10;
				return (UInt32)value2;
			}
		}
		public Int32 EntireInfo { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _MI_MODWRITE_DATA
 
	public class _MI_MODWRITE_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_MODWRITE_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_MODWRITE_DATA"": [ 64, {
				 ""PagesLoad"": [ 0, [ ""Int64"", ""null"" ]],
				 ""PagesAverage"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""AverageAvailablePages"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""PagesWritten"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""WritesIssued"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""IgnoredReservationsCount"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""FreedReservationsCount"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""WriteBurstCount"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""IgnoreReservationsStartTime"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""ReservationClusterInfo"": [ 56, [ ""_MI_RESERVATION_CLUSTER_INFO"", ""null"" ]],
				 ""IgnoreReservations"": [ 60, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""Spare"": [ 60, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""Spare1"": [ 62, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Int64 PagesLoad { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 PagesAverage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 AverageAvailablePages { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 PagesWritten { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 WritesIssued { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 IgnoredReservationsCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 FreedReservationsCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 WriteBurstCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt64 IgnoreReservationsStartTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _MI_RESERVATION_CLUSTER_INFO ReservationClusterInfo
		{
			get
			{
				_MI_RESERVATION_CLUSTER_INFO returnValue = new _MI_RESERVATION_CLUSTER_INFO(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public UInt16 IgnoreReservations
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 60);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 Spare
		{
			get
			{
				// start: 1  end: 16  Mask: 1111111111111110
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 60);
				var value2 = (value & 65534) >> 1;
				return (UInt16)value2;
			}
		}
		public UInt16 Spare1 { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 62); } }
	}
	#endregion
	#region _MACHINE_FRAME
 
	public class _MACHINE_FRAME
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MACHINE_FRAME(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MACHINE_FRAME"": [ 40, {
				 ""Rip"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""SegCs"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""Fill1"": [ 10, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt16\""}"" ]],
				 ""EFlags"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Fill2"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Rsp"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""SegSs"": [ 32, [ ""UInt16"", ""null"" ]],
				 ""Fill3"": [ 34, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt16\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Rip { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt16 SegCs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16[] Fill1
		{
			get
			{
				UInt16[] returnValue = new UInt16[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 10);
				return returnValue;
			}
		}
		public UInt32 EFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Fill2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 Rsp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt16 SegSs { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 32); } }
		public UInt16[] Fill3
		{
			get
			{
				UInt16[] returnValue = new UInt16[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt16(_StructureData, (i * sizeof(UInt16)) + _BufferOffset + 34);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PROC_IDLE_POLICY
 
	public class _PROC_IDLE_POLICY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROC_IDLE_POLICY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 6; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROC_IDLE_POLICY"": [ 6, {
				 ""PromotePercent"": [ 0, [ ""Byte"", ""null"" ]],
				 ""DemotePercent"": [ 1, [ ""Byte"", ""null"" ]],
				 ""PromotePercentBase"": [ 2, [ ""Byte"", ""null"" ]],
				 ""DemotePercentBase"": [ 3, [ ""Byte"", ""null"" ]],
				 ""AllowScaling"": [ 4, [ ""Byte"", ""null"" ]],
				 ""ForceLightIdle"": [ 5, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte PromotePercent{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte DemotePercent{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte PromotePercentBase{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte DemotePercentBase{ get { return _StructureData[_BufferOffset +3]; } }
		public Byte AllowScaling{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte ForceLightIdle{ get { return _StructureData[_BufferOffset +5]; } }
	}
	#endregion
	#region _MI_RESAVAIL_FAILURES
 
	public class _MI_RESAVAIL_FAILURES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_RESAVAIL_FAILURES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_RESAVAIL_FAILURES"": [ 8, {
				 ""Wrap"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""NoCharge"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Wrap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 NoCharge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _LOADER_FEATURE_CONFIGURATION_INFORMATION
 
	public class _LOADER_FEATURE_CONFIGURATION_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LOADER_FEATURE_CONFIGURATION_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LOADER_FEATURE_CONFIGURATION_INFORMATION"": [ 72, {
				 ""FeatureConfigurationBuffer"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FeatureConfigurationBufferSize"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""UsageSubscriptionBuffer"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UsageSubscriptionBufferSize"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""DelayedUsageReportBuffer"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DelayedUsageReportBufferSize"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""DiagnosticInformation"": [ 48, [ ""_LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 FeatureConfigurationBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 FeatureConfigurationBufferSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 UsageSubscriptionBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 UsageSubscriptionBufferSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 DelayedUsageReportBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 DelayedUsageReportBufferSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION DiagnosticInformation
		{
			get
			{
				_LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION returnValue = new _LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HAL_UNMASKED_INTERRUPT_INFORMATION
 
	public class _HAL_UNMASKED_INTERRUPT_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HAL_UNMASKED_INTERRUPT_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HAL_UNMASKED_INTERRUPT_INFORMATION"": [ 32, {
				 ""Version"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Size"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Flags"": [ 4, [ ""_HAL_UNMASKED_INTERRUPT_FLAGS"", ""null"" ]],
				 ""Mode"": [ 8, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_MODE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Polarity"": [ 12, [ ""Enumeration"", ""{\""enum_name\"":\""_KINTERRUPT_POLARITY\"",\""target\"":\""UInt32\""}"" ]],
				 ""Gsiv"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""PinNumber"": [ 20, [ ""UInt16"", ""null"" ]],
				 ""DeviceHandle"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public _HAL_UNMASKED_INTERRUPT_FLAGS Flags
		{
			get
			{
				_HAL_UNMASKED_INTERRUPT_FLAGS returnValue = new _HAL_UNMASKED_INTERRUPT_FLAGS(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public _KINTERRUPT_MODE Mode { get { return (_KINTERRUPT_MODE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _KINTERRUPT_POLARITY Polarity { get { return (_KINTERRUPT_POLARITY)BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 Gsiv { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt16 PinNumber { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 20); } }
		public UInt64 DeviceHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _KTRANSACTION
 
	public class _KTRANSACTION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTRANSACTION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 728; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTRANSACTION"": [ 728, {
				 ""OutcomeEvent"": [ 0, [ ""_KEVENT"", ""null"" ]],
				 ""cookie"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""Mutex"": [ 32, [ ""_KMUTANT"", ""null"" ]],
				 ""TreeTx"": [ 88, [ ""Pointer"", ""{\""target\"":\""_KTRANSACTION\""}"" ]],
				 ""GlobalNamespaceLink"": [ 96, [ ""_KTMOBJECT_NAMESPACE_LINK"", ""null"" ]],
				 ""TmNamespaceLink"": [ 136, [ ""_KTMOBJECT_NAMESPACE_LINK"", ""null"" ]],
				 ""UOW"": [ 176, [ ""_GUID"", ""null"" ]],
				 ""State"": [ 192, [ ""Enumeration"", ""{\""enum_name\"":\""_KTRANSACTION_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 196, [ ""UInt32"", ""null"" ]],
				 ""EnlistmentHead"": [ 200, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""EnlistmentCount"": [ 216, [ ""UInt32"", ""null"" ]],
				 ""RecoverableEnlistmentCount"": [ 220, [ ""UInt32"", ""null"" ]],
				 ""PrePrepareRequiredEnlistmentCount"": [ 224, [ ""UInt32"", ""null"" ]],
				 ""PrepareRequiredEnlistmentCount"": [ 228, [ ""UInt32"", ""null"" ]],
				 ""OutcomeRequiredEnlistmentCount"": [ 232, [ ""UInt32"", ""null"" ]],
				 ""PendingResponses"": [ 236, [ ""UInt32"", ""null"" ]],
				 ""SuperiorEnlistment"": [ 240, [ ""Pointer"", ""{\""target\"":\""_KENLISTMENT\""}"" ]],
				 ""LastLsn"": [ 248, [ ""_CLS_LSN"", ""null"" ]],
				 ""PromotedEntry"": [ 256, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""PromoterTransaction"": [ 272, [ ""Pointer"", ""{\""target\"":\""_KTRANSACTION\""}"" ]],
				 ""PromotePropagation"": [ 280, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""IsolationLevel"": [ 288, [ ""UInt32"", ""null"" ]],
				 ""IsolationFlags"": [ 292, [ ""UInt32"", ""null"" ]],
				 ""Timeout"": [ 296, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""Description"": [ 304, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""RollbackThread"": [ 320, [ ""Pointer"", ""{\""target\"":\""_KTHREAD\""}"" ]],
				 ""RollbackWorkItem"": [ 328, [ ""_WORK_QUEUE_ITEM"", ""null"" ]],
				 ""RollbackDpc"": [ 360, [ ""_KDPC"", ""null"" ]],
				 ""RollbackTimer"": [ 424, [ ""_KTIMER"", ""null"" ]],
				 ""LsnOrderedEntry"": [ 488, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Outcome"": [ 504, [ ""Enumeration"", ""{\""enum_name\"":\""_KTRANSACTION_OUTCOME\"",\""target\"":\""UInt32\""}"" ]],
				 ""Tm"": [ 512, [ ""Pointer"", ""{\""target\"":\""_KTM\""}"" ]],
				 ""CommitReservation"": [ 520, [ ""Int64"", ""null"" ]],
				 ""TransactionHistory"": [ 528, [ ""Array"", ""{\""count\"":10,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""TransactionHistoryCount"": [ 608, [ ""UInt32"", ""null"" ]],
				 ""DTCPrivateInformation"": [ 616, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DTCPrivateInformationLength"": [ 624, [ ""UInt32"", ""null"" ]],
				 ""DTCPrivateInformationMutex"": [ 632, [ ""_KMUTANT"", ""null"" ]],
				 ""PromotedTxSelfHandle"": [ 688, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PendingPromotionCount"": [ 696, [ ""UInt32"", ""null"" ]],
				 ""PromotionCompletedEvent"": [ 704, [ ""_KEVENT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KEVENT OutcomeEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 cookie { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _KMUTANT Mutex
		{
			get
			{
				_KMUTANT returnValue = new _KMUTANT(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 TreeTx { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public _KTMOBJECT_NAMESPACE_LINK GlobalNamespaceLink
		{
			get
			{
				_KTMOBJECT_NAMESPACE_LINK returnValue = new _KTMOBJECT_NAMESPACE_LINK(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public _KTMOBJECT_NAMESPACE_LINK TmNamespaceLink
		{
			get
			{
				_KTMOBJECT_NAMESPACE_LINK returnValue = new _KTMOBJECT_NAMESPACE_LINK(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public _GUID UOW
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 176);
				return returnValue;
			}
		}
		public _KTRANSACTION_STATE State { get { return (_KTRANSACTION_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 192); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 196); } }
		public _LIST_ENTRY EnlistmentHead
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 200);
				return returnValue;
			}
		}
		public UInt32 EnlistmentCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 216); } }
		public UInt32 RecoverableEnlistmentCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 220); } }
		public UInt32 PrePrepareRequiredEnlistmentCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 224); } }
		public UInt32 PrepareRequiredEnlistmentCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 228); } }
		public UInt32 OutcomeRequiredEnlistmentCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 232); } }
		public UInt32 PendingResponses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 236); } }
		public UInt64 SuperiorEnlistment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public _CLS_LSN LastLsn
		{
			get
			{
				_CLS_LSN returnValue = new _CLS_LSN(_StructureData, _BufferOffset + 248);
				return returnValue;
			}
		}
		public _LIST_ENTRY PromotedEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 256);
				return returnValue;
			}
		}
		public UInt64 PromoterTransaction { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public UInt64 PromotePropagation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 280); } }
		public UInt32 IsolationLevel { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 288); } }
		public UInt32 IsolationFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 292); } }
		public _LARGE_INTEGER Timeout
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 296);
				return returnValue;
			}
		}
		public _UNICODE_STRING Description
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 304);
				return returnValue;
			}
		}
		public UInt64 RollbackThread { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 320); } }
		public _WORK_QUEUE_ITEM RollbackWorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 328);
				return returnValue;
			}
		}
		public _KDPC RollbackDpc
		{
			get
			{
				_KDPC returnValue = new _KDPC(_StructureData, _BufferOffset + 360);
				return returnValue;
			}
		}
		public _KTIMER RollbackTimer
		{
			get
			{
				_KTIMER returnValue = new _KTIMER(_StructureData, _BufferOffset + 424);
				return returnValue;
			}
		}
		public _LIST_ENTRY LsnOrderedEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 488);
				return returnValue;
			}
		}
		public _KTRANSACTION_OUTCOME Outcome { get { return (_KTRANSACTION_OUTCOME)BitConverter.ToUInt32(_StructureData, _BufferOffset + 504); } }
		public UInt64 Tm { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 512); } }
		public Int64 CommitReservation { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 520); } }
		public _KTRANSACTION_HISTORY[] TransactionHistory
		{
			get
			{
				_KTRANSACTION_HISTORY[] returnValue = new _KTRANSACTION_HISTORY[10];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<10; i++ )
					returnValue[i] = new _KTRANSACTION_HISTORY(_StructureData, (i * size) + _BufferOffset + 528);
				return returnValue;
			}
		}
		public UInt32 TransactionHistoryCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 608); } }
		public UInt64 DTCPrivateInformation { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 616); } }
		public UInt32 DTCPrivateInformationLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 624); } }
		public _KMUTANT DTCPrivateInformationMutex
		{
			get
			{
				_KMUTANT returnValue = new _KMUTANT(_StructureData, _BufferOffset + 632);
				return returnValue;
			}
		}
		public UInt64 PromotedTxSelfHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 688); } }
		public UInt32 PendingPromotionCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 696); } }
		public _KEVENT PromotionCompletedEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 704);
				return returnValue;
			}
		}
	}
	#endregion
	#region _FAKE_HEAP_ENTRY
 
	public class _FAKE_HEAP_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FAKE_HEAP_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FAKE_HEAP_ENTRY"": [ 16, {
				 ""Size"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""PreviousSize"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Size { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 PreviousSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _TOKEN_AUDIT_POLICY
 
	public class _TOKEN_AUDIT_POLICY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TOKEN_AUDIT_POLICY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 30; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TOKEN_AUDIT_POLICY"": [ 30, {
				 ""PerUserPolicy"": [ 0, [ ""Array"", ""{\""count\"":30,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte[] PerUserPolicy
		{
			get
			{
				Byte[] returnValue = new Byte[30];
				for(int i=0; i<30; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 0];
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_PROBE_RAISE_TRACKER
 
	public class _MI_PROBE_RAISE_TRACKER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PROBE_RAISE_TRACKER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 68; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PROBE_RAISE_TRACKER"": [ 68, {
				 ""UserRangeInKernel"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""FaultFailed"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""WriteFaultFailed"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""LargePageFailed"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""UserAccessToKernelPte"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""BadPageLocation"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""InsufficientCharge"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""PageTableCharge"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""NoPhysicalMapping"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""NoIoReference"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""ProbeFailed"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""PteIsZero"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""StrongCodeWrite"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""ReducedCloneCommitChargeFailed"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""CopyOnWriteAtDispatchNoPages"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""NoPageTablesAllowed"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""EnclavePageFailed"": [ 64, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 UserRangeInKernel { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 FaultFailed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 WriteFaultFailed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 LargePageFailed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 UserAccessToKernelPte { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 BadPageLocation { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 InsufficientCharge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 PageTableCharge { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 NoPhysicalMapping { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 NoIoReference { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 ProbeFailed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 PteIsZero { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public UInt32 StrongCodeWrite { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 ReducedCloneCommitChargeFailed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 CopyOnWriteAtDispatchNoPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 NoPageTablesAllowed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 EnclavePageFailed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
	}
	#endregion
	#region _KTMOBJECT_NAMESPACE
 
	public class _KTMOBJECT_NAMESPACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTMOBJECT_NAMESPACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 168; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTMOBJECT_NAMESPACE"": [ 168, {
				 ""Table"": [ 0, [ ""_RTL_AVL_TABLE"", ""null"" ]],
				 ""Mutex"": [ 104, [ ""_KMUTANT"", ""null"" ]],
				 ""LinksOffset"": [ 160, [ ""UInt16"", ""null"" ]],
				 ""GuidOffset"": [ 162, [ ""UInt16"", ""null"" ]],
				 ""Expired"": [ 164, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_AVL_TABLE Table
		{
			get
			{
				_RTL_AVL_TABLE returnValue = new _RTL_AVL_TABLE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _KMUTANT Mutex
		{
			get
			{
				_KMUTANT returnValue = new _KMUTANT(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt16 LinksOffset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 160); } }
		public UInt16 GuidOffset { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 162); } }
		public Byte Expired{ get { return _StructureData[_BufferOffset +164]; } }
	}
	#endregion
	#region _LOADER_BUGCHECK_PARAMETERS
 
	public class _LOADER_BUGCHECK_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LOADER_BUGCHECK_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LOADER_BUGCHECK_PARAMETERS"": [ 40, {
				 ""BugcheckCode"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""BugcheckParameter1"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""BugcheckParameter2"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""BugcheckParameter3"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""BugcheckParameter4"": [ 32, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 BugcheckCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 BugcheckParameter1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 BugcheckParameter2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 BugcheckParameter3 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 BugcheckParameter4 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region PO_MEMORY_IMAGE
 
	public class PO_MEMORY_IMAGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public PO_MEMORY_IMAGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 992; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""PO_MEMORY_IMAGE"": [ 992, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ImageType"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""CheckSum"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""LengthSelf"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""PageSelf"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""PageSize"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""SystemTime"": [ 32, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""InterruptTime"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""FeatureFlags"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""HiberFlags"": [ 56, [ ""Byte"", ""null"" ]],
				 ""HiberSimulateFlags"": [ 57, [ ""Byte"", ""null"" ]],
				 ""spare"": [ 58, [ ""Array"", ""{\""count\"":2,\""target\"":\""Byte\""}"" ]],
				 ""NoHiberPtes"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""HiberVa"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""NoFreePages"": [ 72, [ ""UInt32"", ""null"" ]],
				 ""FreeMapCheck"": [ 76, [ ""UInt32"", ""null"" ]],
				 ""WakeCheck"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""NumPagesForLoader"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""FirstSecureRestorePage"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""FirstBootRestorePage"": [ 104, [ ""UInt64"", ""null"" ]],
				 ""FirstKernelRestorePage"": [ 112, [ ""UInt64"", ""null"" ]],
				 ""FirstChecksumRestorePage"": [ 120, [ ""UInt64"", ""null"" ]],
				 ""NoChecksumEntries"": [ 128, [ ""UInt64"", ""null"" ]],
				 ""PerfInfo"": [ 136, [ ""_PO_HIBER_PERF"", ""null"" ]],
				 ""FirmwareRuntimeInformationPages"": [ 640, [ ""UInt32"", ""null"" ]],
				 ""FirmwareRuntimeInformation"": [ 648, [ ""Array"", ""{\""count\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""SpareUlong"": [ 656, [ ""UInt32"", ""null"" ]],
				 ""NoBootLoaderLogPages"": [ 660, [ ""UInt32"", ""null"" ]],
				 ""BootLoaderLogPages"": [ 664, [ ""Array"", ""{\""count\"":24,\""target\"":\""UInt64\""}"" ]],
				 ""NotUsed"": [ 856, [ ""UInt32"", ""null"" ]],
				 ""ResumeContextCheck"": [ 860, [ ""UInt32"", ""null"" ]],
				 ""ResumeContextPages"": [ 864, [ ""UInt32"", ""null"" ]],
				 ""Hiberboot"": [ 868, [ ""Byte"", ""null"" ]],
				 ""SecureLaunched"": [ 869, [ ""Byte"", ""null"" ]],
				 ""SecureBoot"": [ 870, [ ""Byte"", ""null"" ]],
				 ""HvPageTableRoot"": [ 872, [ ""UInt64"", ""null"" ]],
				 ""HvEntryPoint"": [ 880, [ ""UInt64"", ""null"" ]],
				 ""HvReservedTransitionAddress"": [ 888, [ ""UInt64"", ""null"" ]],
				 ""HvReservedTransitionAddressSize"": [ 896, [ ""UInt64"", ""null"" ]],
				 ""BootFlags"": [ 904, [ ""UInt64"", ""null"" ]],
				 ""RestoreProcessorStateRoutine"": [ 912, [ ""UInt64"", ""null"" ]],
				 ""HighestPhysicalPage"": [ 920, [ ""UInt64"", ""null"" ]],
				 ""BitlockerKeyPfns"": [ 928, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""HardwareSignature"": [ 960, [ ""UInt32"", ""null"" ]],
				 ""SMBiosTablePhysicalAddress"": [ 968, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""SMBiosTableLength"": [ 976, [ ""UInt32"", ""null"" ]],
				 ""SMBiosMajorVersion"": [ 980, [ ""Byte"", ""null"" ]],
				 ""SMBiosMinorVersion"": [ 981, [ ""Byte"", ""null"" ]],
				 ""HiberResumeXhciHandoffSkip"": [ 982, [ ""Byte"", ""null"" ]],
				 ""InitializeUSBCore"": [ 983, [ ""Byte"", ""null"" ]],
				 ""ValidUSBCoreId"": [ 984, [ ""Byte"", ""null"" ]],
				 ""USBCoreId"": [ 985, [ ""Byte"", ""null"" ]],
				 ""SkipMemoryMapValidation"": [ 986, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ImageType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 CheckSum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 LengthSelf { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 PageSelf { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 PageSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _LARGE_INTEGER SystemTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 InterruptTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 FeatureFlags { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public Byte HiberFlags{ get { return _StructureData[_BufferOffset +56]; } }
		public Byte HiberSimulateFlags{ get { return _StructureData[_BufferOffset +57]; } }
		public Byte[] spare
		{
			get
			{
				Byte[] returnValue = new Byte[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 58];
				return returnValue;
			}
		}
		public UInt32 NoHiberPtes { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt64 HiberVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt32 NoFreePages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
		public UInt32 FreeMapCheck { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 76); } }
		public UInt32 WakeCheck { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt64 NumPagesForLoader { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 FirstSecureRestorePage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 FirstBootRestorePage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 FirstKernelRestorePage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 FirstChecksumRestorePage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 NoChecksumEntries { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public _PO_HIBER_PERF PerfInfo
		{
			get
			{
				_PO_HIBER_PERF returnValue = new _PO_HIBER_PERF(_StructureData, _BufferOffset + 136);
				return returnValue;
			}
		}
		public UInt32 FirmwareRuntimeInformationPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 640); } }
		public UInt64[] FirmwareRuntimeInformation
		{
			get
			{
				UInt64[] returnValue = new UInt64[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 648);
				return returnValue;
			}
		}
		public UInt32 SpareUlong { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 656); } }
		public UInt32 NoBootLoaderLogPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 660); } }
		public UInt64[] BootLoaderLogPages
		{
			get
			{
				UInt64[] returnValue = new UInt64[24];
				for(int i=0; i<24; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 664);
				return returnValue;
			}
		}
		public UInt32 NotUsed { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 856); } }
		public UInt32 ResumeContextCheck { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 860); } }
		public UInt32 ResumeContextPages { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 864); } }
		public Byte Hiberboot{ get { return _StructureData[_BufferOffset +868]; } }
		public Byte SecureLaunched{ get { return _StructureData[_BufferOffset +869]; } }
		public Byte SecureBoot{ get { return _StructureData[_BufferOffset +870]; } }
		public UInt64 HvPageTableRoot { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 872); } }
		public UInt64 HvEntryPoint { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 880); } }
		public UInt64 HvReservedTransitionAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 888); } }
		public UInt64 HvReservedTransitionAddressSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 896); } }
		public UInt64 BootFlags { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 904); } }
		public UInt64 RestoreProcessorStateRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 912); } }
		public UInt64 HighestPhysicalPage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 920); } }
		public UInt64[] BitlockerKeyPfns
		{
			get
			{
				UInt64[] returnValue = new UInt64[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 928);
				return returnValue;
			}
		}
		public UInt32 HardwareSignature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 960); } }
		public _LARGE_INTEGER SMBiosTablePhysicalAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 968);
				return returnValue;
			}
		}
		public UInt32 SMBiosTableLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 976); } }
		public Byte SMBiosMajorVersion{ get { return _StructureData[_BufferOffset +980]; } }
		public Byte SMBiosMinorVersion{ get { return _StructureData[_BufferOffset +981]; } }
		public Byte HiberResumeXhciHandoffSkip{ get { return _StructureData[_BufferOffset +982]; } }
		public Byte InitializeUSBCore{ get { return _StructureData[_BufferOffset +983]; } }
		public Byte ValidUSBCoreId{ get { return _StructureData[_BufferOffset +984]; } }
		public Byte USBCoreId{ get { return _StructureData[_BufferOffset +985]; } }
		public Byte SkipMemoryMapValidation{ get { return _StructureData[_BufferOffset +986]; } }
	}
	#endregion
	#region _POP_FX_DRIPS_WATCHDOG_CONTEXT
 
	public class _POP_FX_DRIPS_WATCHDOG_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_DRIPS_WATCHDOG_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_DRIPS_WATCHDOG_CONTEXT"": [ 40, {
				 ""Link"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ComponentIndex"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ChildDevices"": [ 24, [ ""Pointer"", ""{\""target\"":\""_DEVICE_NODE*\""}"" ]],
				 ""ChildDeviceCount"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt32 ComponentIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 ChildDevices { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 ChildDeviceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _SUPPORTED_RANGE
 
	public class _SUPPORTED_RANGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SUPPORTED_RANGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SUPPORTED_RANGE"": [ 40, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SUPPORTED_RANGE\""}"" ]],
				 ""SystemAddressSpace"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SystemBase"": [ 16, [ ""Int64"", ""null"" ]],
				 ""Base"": [ 24, [ ""Int64"", ""null"" ]],
				 ""Limit"": [ 32, [ ""Int64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 SystemAddressSpace { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Int64 SystemBase { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 16); } }
		public Int64 Base { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 24); } }
		public Int64 Limit { get { return BitConverter.ToInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _LDR_DDAG_NODE
 
	public class _LDR_DDAG_NODE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LDR_DDAG_NODE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LDR_DDAG_NODE"": [ 80, {
				 ""Modules"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ServiceTagList"": [ 16, [ ""Pointer"", ""{\""target\"":\""_LDR_SERVICE_TAG_RECORD\""}"" ]],
				 ""LoadCount"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""LoadWhileUnloadingCount"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""LowestLink"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""Dependencies"": [ 40, [ ""_LDRP_CSLIST"", ""null"" ]],
				 ""IncomingDependencies"": [ 48, [ ""_LDRP_CSLIST"", ""null"" ]],
				 ""State"": [ 56, [ ""Enumeration"", ""{\""enum_name\"":\""_LDR_DDAG_STATE\"",\""target\"":\""UInt32\""}"" ]],
				 ""CondenseLink"": [ 64, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""PreorderNumber"": [ 72, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Modules
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 ServiceTagList { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 LoadCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 LoadWhileUnloadingCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 LowestLink { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public _LDRP_CSLIST Dependencies
		{
			get
			{
				_LDRP_CSLIST returnValue = new _LDRP_CSLIST(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _LDRP_CSLIST IncomingDependencies
		{
			get
			{
				_LDRP_CSLIST returnValue = new _LDRP_CSLIST(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
		public _LDR_DDAG_STATE State { get { return (_LDR_DDAG_STATE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public _SINGLE_LIST_ENTRY CondenseLink
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt32 PreorderNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 72); } }
	}
	#endregion
	#region _MI_PAGE_COLORS
 
	public class _MI_PAGE_COLORS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PAGE_COLORS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PAGE_COLORS"": [ 16, {
				 ""PageSize"": [ 0, [ ""Array"", ""{\""count\"":4,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32[] PageSize
		{
			get
			{
				UInt32[] returnValue = new UInt32[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _NUMA_MEMORY_RANGE
 
	public class _NUMA_MEMORY_RANGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _NUMA_MEMORY_RANGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_NUMA_MEMORY_RANGE"": [ 24, {
				 ""ProximityId"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""BasePage"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""EndPage"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ProximityId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 BasePage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 EndPage { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _DUMP_STACK_CONTEXT
 
	public class _DUMP_STACK_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DUMP_STACK_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 376; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DUMP_STACK_CONTEXT"": [ 376, {
				 ""Init"": [ 0, [ ""_DUMP_INITIALIZATION_CONTEXT"", ""null"" ]],
				 ""PartitionOffset"": [ 264, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""DumpPointers"": [ 272, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StorageInfo"": [ 272, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UseStorageInfo"": [ 280, [ ""Byte"", ""null"" ]],
				 ""PointersLength"": [ 284, [ ""UInt32"", ""null"" ]],
				 ""ModulePrefix"": [ 288, [ ""Pointer"", ""{\""target\"":\""wchar_t\""}"" ]],
				 ""DriverList"": [ 296, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""InitMsg"": [ 312, [ ""_STRING"", ""null"" ]],
				 ""ProgMsg"": [ 328, [ ""_STRING"", ""null"" ]],
				 ""DoneMsg"": [ 344, [ ""_STRING"", ""null"" ]],
				 ""FileObject"": [ 360, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UsageType"": [ 368, [ ""Enumeration"", ""{\""enum_name\"":\""_DEVICE_USAGE_NOTIFICATION_TYPE\"",\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public _DUMP_INITIALIZATION_CONTEXT Init
		{
			get
			{
				_DUMP_INITIALIZATION_CONTEXT returnValue = new _DUMP_INITIALIZATION_CONTEXT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LARGE_INTEGER PartitionOffset
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 264);
				return returnValue;
			}
		}
		public UInt64 DumpPointers { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public UInt64 StorageInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public Byte UseStorageInfo{ get { return _StructureData[_BufferOffset +280]; } }
		public UInt32 PointersLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 284); } }
		public UInt64 ModulePrefix { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 288); } }
		public _LIST_ENTRY DriverList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 296);
				return returnValue;
			}
		}
		public _STRING InitMsg
		{
			get
			{
				_STRING returnValue = new _STRING(_StructureData, _BufferOffset + 312);
				return returnValue;
			}
		}
		public _STRING ProgMsg
		{
			get
			{
				_STRING returnValue = new _STRING(_StructureData, _BufferOffset + 328);
				return returnValue;
			}
		}
		public _STRING DoneMsg
		{
			get
			{
				_STRING returnValue = new _STRING(_StructureData, _BufferOffset + 344);
				return returnValue;
			}
		}
		public UInt64 FileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 360); } }
		public _DEVICE_USAGE_NOTIFICATION_TYPE UsageType { get { return (_DEVICE_USAGE_NOTIFICATION_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 368); } }
	}
	#endregion
	#region _PNP_WATCHDOG
 
	public class _PNP_WATCHDOG
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PNP_WATCHDOG(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PNP_WATCHDOG"": [ 40, {
				 ""WatchdogStart"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""WatchdogTimer"": [ 8, [ ""Pointer"", ""{\""target\"":\""_WDT_HANDLE\""}"" ]],
				 ""WatchdogContextType"": [ 16, [ ""Enumeration"", ""{\""enum_name\"":\""_PNP_WATCHDOG_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""WatchdogContext"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""TriggerEventLogged"": [ 32, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 WatchdogStart { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 WatchdogTimer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _PNP_WATCHDOG_TYPE WatchdogContextType { get { return (_PNP_WATCHDOG_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 WatchdogContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public Byte TriggerEventLogged{ get { return _StructureData[_BufferOffset +32]; } }
	}
	#endregion
	#region _ARC_DISK_INFORMATION
 
	public class _ARC_DISK_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARC_DISK_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARC_DISK_INFORMATION"": [ 16, {
				 ""DiskSignatures"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY DiskSignatures
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _POP_FX_DEPENDENT
 
	public class _POP_FX_DEPENDENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_DEPENDENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_DEPENDENT"": [ 8, {
				 ""Index"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ProviderIndex"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Index { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ProviderIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _DEVICE_FAULT_CONFIGURATION
 
	public class _DEVICE_FAULT_CONFIGURATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_FAULT_CONFIGURATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_FAULT_CONFIGURATION"": [ 16, {
				 ""FaultHandler"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FaultContext"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 FaultHandler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 FaultContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _MI_PAGEFILE_BITMAPS_CACHE_ENTRY
 
	public class _MI_PAGEFILE_BITMAPS_CACHE_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PAGEFILE_BITMAPS_CACHE_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PAGEFILE_BITMAPS_CACHE_ENTRY"": [ 56, {
				 ""LengthTreeNode"": [ 0, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""FreeListEntry"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""LocationTreeNode"": [ 24, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""StartingIndex"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""Length"": [ 52, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BALANCED_NODE LengthTreeNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _LIST_ENTRY FreeListEntry
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _RTL_BALANCED_NODE LocationTreeNode
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt32 StartingIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
	}
	#endregion
	#region _RTL_UMS_CONTEXT
 
	public class _RTL_UMS_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_UMS_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1312; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_UMS_CONTEXT"": [ 1312, {
				 ""Link"": [ 0, [ ""_SINGLE_LIST_ENTRY"", ""null"" ]],
				 ""Context"": [ 16, [ ""_CONTEXT"", ""null"" ]],
				 ""Teb"": [ 1248, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""UserContext"": [ 1256, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ScheduledThread"": [ 1264, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Suspended"": [ 1264, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""VolatileContext"": [ 1264, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""Terminated"": [ 1264, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""DebugActive"": [ 1264, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""RunningOnSelfThread"": [ 1264, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""DenyRunningOnSelfThread"": [ 1264, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 1264, [ ""Int32"", ""null"" ]],
				 ""KernelUpdateLock"": [ 1272, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""PrimaryClientID"": [ 1272, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""ContextLock"": [ 1272, [ ""UInt64"", ""null"" ]],
				 ""PrimaryUmsContext"": [ 1280, [ ""Pointer"", ""{\""target\"":\""_RTL_UMS_CONTEXT\""}"" ]],
				 ""SwitchCount"": [ 1288, [ ""UInt32"", ""null"" ]],
				 ""KernelYieldCount"": [ 1292, [ ""UInt32"", ""null"" ]],
				 ""MixedYieldCount"": [ 1296, [ ""UInt32"", ""null"" ]],
				 ""YieldCount"": [ 1300, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SINGLE_LIST_ENTRY Link
		{
			get
			{
				_SINGLE_LIST_ENTRY returnValue = new _SINGLE_LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _CONTEXT Context
		{
			get
			{
				_CONTEXT returnValue = new _CONTEXT(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 Teb { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1248); } }
		public UInt64 UserContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1256); } }
		public UInt32 ScheduledThread
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1264);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Suspended
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1264);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 VolatileContext
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1264);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 Terminated
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1264);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 DebugActive
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1264);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 RunningOnSelfThread
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1264);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 DenyRunningOnSelfThread
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 1264);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public Int32 Flags { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 1264); } }
		public UInt64 KernelUpdateLock
		{
			get
			{
				// start: 0  end: 2  Mask: 0000000000000011
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 1272);
				var value2 = (value & 3) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 PrimaryClientID
		{
			get
			{
				// start: 2  end: 64  Mask: 1111111111111111111111111111111111111111111111111111111111111100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 1272);
				var value2 = (value & 18446744073709551612) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 ContextLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1272); } }
		public UInt64 PrimaryUmsContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1280); } }
		public UInt32 SwitchCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1288); } }
		public UInt32 KernelYieldCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1292); } }
		public UInt32 MixedYieldCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1296); } }
		public UInt32 YieldCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1300); } }
	}
	#endregion
	#region _MI_RESUME_WORKITEM
 
	public class _MI_RESUME_WORKITEM
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_RESUME_WORKITEM(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_RESUME_WORKITEM"": [ 56, {
				 ""ResumeCompleteEvent"": [ 0, [ ""_KEVENT"", ""null"" ]],
				 ""WorkItem"": [ 24, [ ""_WORK_QUEUE_ITEM"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _KEVENT ResumeCompleteEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _WORK_QUEUE_ITEM WorkItem
		{
			get
			{
				_WORK_QUEUE_ITEM returnValue = new _WORK_QUEUE_ITEM(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _INPUT_MAPPING_ELEMENT
 
	public class _INPUT_MAPPING_ELEMENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _INPUT_MAPPING_ELEMENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_INPUT_MAPPING_ELEMENT"": [ 4, {
				 ""InputMappingId"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 InputMappingId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _PLUGPLAY_EVENT_BLOCK
 
	public class _PLUGPLAY_EVENT_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PLUGPLAY_EVENT_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PLUGPLAY_EVENT_BLOCK"": [ 80, {
				 ""EventGuid"": [ 0, [ ""_GUID"", ""null"" ]],
				 ""EventCategory"": [ 16, [ ""Enumeration"", ""{\""enum_name\"":\""_PLUGPLAY_EVENT_CATEGORY\"",\""target\"":\""UInt32\""}"" ]],
				 ""Result"": [ 24, [ ""Pointer"", ""{\""target\"":\""unsigned long\""}"" ]],
				 ""Flags"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""TotalSize"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""DeviceObject"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""u"": [ 48, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _GUID EventGuid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _PLUGPLAY_EVENT_CATEGORY EventCategory { get { return (_PLUGPLAY_EVENT_CATEGORY)BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt64 Result { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 TotalSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 48);
				return returnValue;
			}
		}
	}
	#endregion
	#region _VSM_PERFORMANCE_DATA
 
	public class _VSM_PERFORMANCE_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VSM_PERFORMANCE_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VSM_PERFORMANCE_DATA"": [ 64, {
				 ""LaunchVsmMark"": [ 0, [ ""Array"", ""{\""count\"":8,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64[] LaunchVsmMark
		{
			get
			{
				UInt64[] returnValue = new UInt64[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _WDT_HANDLE
 
	public class _WDT_HANDLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WDT_HANDLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WDT_HANDLE"": [ 1, {
				 ""Reserved"": [ 0, [ ""Char"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Char Reserved { get { return BitConverter.ToChar(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _CACHED_KSTACK_LIST
 
	public class _CACHED_KSTACK_LIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CACHED_KSTACK_LIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CACHED_KSTACK_LIST"": [ 32, {
				 ""SListHead"": [ 0, [ ""_SLIST_HEADER"", ""null"" ]],
				 ""MinimumFree"": [ 16, [ ""Int32"", ""null"" ]],
				 ""Misses"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""MissesLast"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""AllStacksInUse"": [ 28, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SLIST_HEADER SListHead
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int32 MinimumFree { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Misses { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 MissesLast { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 AllStacksInUse { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
	}
	#endregion
	#region _I386_LOADER_BLOCK
 
	public class _I386_LOADER_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _I386_LOADER_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_I386_LOADER_BLOCK"": [ 16, {
				 ""CommonDataArea"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""MachineType"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""VirtualBias"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 CommonDataArea { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 MachineType { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 VirtualBias { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _PROC_IDLE_STATE_BUCKET
 
	public class _PROC_IDLE_STATE_BUCKET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROC_IDLE_STATE_BUCKET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROC_IDLE_STATE_BUCKET"": [ 32, {
				 ""TotalTime"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""MinTime"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""MaxTime"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""Count"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 TotalTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 MinTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 MaxTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 Count { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _ARBITER_ORDERING
 
	public class _ARBITER_ORDERING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_ORDERING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_ORDERING"": [ 16, {
				 ""Start"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""End"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Start { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 End { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _MI_PTE_CHAIN_HEAD
 
	public class _MI_PTE_CHAIN_HEAD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_PTE_CHAIN_HEAD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_PTE_CHAIN_HEAD"": [ 24, {
				 ""Flink"": [ 0, [ ""_MMPTE"", ""null"" ]],
				 ""Blink"": [ 8, [ ""_MMPTE"", ""null"" ]],
				 ""PteBase"": [ 16, [ ""Pointer"", ""{\""target\"":\""_MMPTE\""}"" ]] }]
				 }
				)";
			}
		}
		public _MMPTE Flink
		{
			get
			{
				_MMPTE returnValue = new _MMPTE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _MMPTE Blink
		{
			get
			{
				_MMPTE returnValue = new _MMPTE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 PteBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _LOADER_RESET_REASON
 
	public class _LOADER_RESET_REASON
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LOADER_RESET_REASON(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LOADER_RESET_REASON"": [ 48, {
				 ""Supplied"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Basic"": [ 8, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""AdditionalInfo"": [ 16, [ ""Array"", ""{\""count\"":8,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte Supplied{ get { return _StructureData[_BufferOffset +0]; } }
		public _ANONYMOUS_TAG Basic
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32[] AdditionalInfo
		{
			get
			{
				UInt32[] returnValue = new UInt32[8];
				for(int i=0; i<8; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS
 
	public class _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARBITER_QUERY_ALLOCATED_RESOURCES_PARAMETERS"": [ 8, {
				 ""AllocatedResources"": [ 0, [ ""Pointer"", ""{\""target\"":\""_CM_PARTIAL_RESOURCE_LIST*\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 AllocatedResources { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _HAL_CHANNEL_MEMORY_RANGES
 
	public class _HAL_CHANNEL_MEMORY_RANGES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HAL_CHANNEL_MEMORY_RANGES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HAL_CHANNEL_MEMORY_RANGES"": [ 16, {
				 ""PageFrameIndex"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""MpnId"": [ 8, [ ""UInt16"", ""null"" ]],
				 ""Node"": [ 10, [ ""UInt16"", ""null"" ]],
				 ""Channel"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""IsPowerManageable"": [ 14, [ ""Byte"", ""null"" ]],
				 ""DeepPowerState"": [ 15, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PageFrameIndex { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt16 MpnId { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 8); } }
		public UInt16 Node { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 10); } }
		public UInt16 Channel { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public Byte IsPowerManageable{ get { return _StructureData[_BufferOffset +14]; } }
		public Byte DeepPowerState{ get { return _StructureData[_BufferOffset +15]; } }
	}
	#endregion
	#region _LOADER_HIVE_RECOVERY_INFO
 
	public class _LOADER_HIVE_RECOVERY_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LOADER_HIVE_RECOVERY_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LOADER_HIVE_RECOVERY_INFO"": [ 20, {
				 ""Recovered"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""LegacyRecovery"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""SoftRebootConflict"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""MostRecentLog"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""Spare"": [ 4, [ ""BitField"", ""{\""end_bit\"":27,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""LogNextSequence"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""LogMinimumSequence"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""LogCurrentOffset"": [ 16, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Recovered
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 LegacyRecovery
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 SoftRebootConflict
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 MostRecentLog
		{
			get
			{
				// start: 3  end: 6  Mask: 0000000000111000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 56) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 Spare
		{
			get
			{
				// start: 0  end: 27  Mask: 111111111111111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 134217727) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 LogNextSequence { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 LogMinimumSequence { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 LogCurrentOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _FIRMWARE_INFORMATION_LOADER_BLOCK
 
	public class _FIRMWARE_INFORMATION_LOADER_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FIRMWARE_INFORMATION_LOADER_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FIRMWARE_INFORMATION_LOADER_BLOCK"": [ 64, {
				 ""FirmwareTypeUefi"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""EfiRuntimeUseIum"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""EfiRuntimePageProtectionSupported"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""u"": [ 8, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 FirmwareTypeUefi
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 EfiRuntimeUseIum
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 EfiRuntimePageProtectionSupported
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 3  end: 32  Mask: 11111111111111111111111111111000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967288) >> 3;
				return (UInt32)value2;
			}
		}
		public _ANONYMOUS_TAG u
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _POP_TRIGGER_WAIT
 
	public class _POP_TRIGGER_WAIT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_TRIGGER_WAIT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_TRIGGER_WAIT"": [ 56, {
				 ""Event"": [ 0, [ ""_KEVENT"", ""null"" ]],
				 ""Status"": [ 24, [ ""Int32"", ""null"" ]],
				 ""Link"": [ 32, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Trigger"": [ 48, [ ""Pointer"", ""{\""target\"":\""_POP_ACTION_TRIGGER\""}"" ]] }]
				 }
				)";
			}
		}
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public Int32 Status { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 24); } }
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 Trigger { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _PROC_PERF_CONSTRAINT
 
	public class _PROC_PERF_CONSTRAINT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROC_PERF_CONSTRAINT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 136; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROC_PERF_CONSTRAINT"": [ 136, {
				 ""CheckContext"": [ 0, [ ""Pointer"", ""{\""target\"":\""_PROC_PERF_CHECK_CONTEXT\""}"" ]],
				 ""PerfContext"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Presence"": [ 16, [ ""Enumeration"", ""{\""enum_name\"":\""_PROCESSOR_PRESENCE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ProcessorId"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""PlatformCap"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""ThermalCap"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""LimitReasons"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""PlatformCapStartTime"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""ProcCap"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""ProcFloor"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""TargetPercent"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""EngageResponsivenessOverrides"": [ 60, [ ""Byte"", ""null"" ]],
				 ""ResponsivenessChangeCount"": [ 61, [ ""Byte"", ""null"" ]],
				 ""Selection"": [ 64, [ ""_PERF_CONTROL_STATE_SELECTION"", ""null"" ]],
				 ""DomainSelectionGeneration"": [ 104, [ ""UInt32"", ""null"" ]],
				 ""PreviousFrequency"": [ 108, [ ""UInt32"", ""null"" ]],
				 ""PreviousPercent"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""LatestFrequencyPercent"": [ 116, [ ""UInt32"", ""null"" ]],
				 ""LatestPerformancePercent"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""Force"": [ 124, [ ""Byte"", ""null"" ]],
				 ""UseQosUpdateLock"": [ 125, [ ""Byte"", ""null"" ]],
				 ""QosUpdateLock"": [ 128, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 CheckContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 PerfContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _PROCESSOR_PRESENCE Presence { get { return (_PROCESSOR_PRESENCE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ProcessorId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 PlatformCap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 ThermalCap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 LimitReasons { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 PlatformCapStartTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt32 ProcCap { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 ProcFloor { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 TargetPercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public Byte EngageResponsivenessOverrides{ get { return _StructureData[_BufferOffset +60]; } }
		public Byte ResponsivenessChangeCount{ get { return _StructureData[_BufferOffset +61]; } }
		public _PERF_CONTROL_STATE_SELECTION Selection
		{
			get
			{
				_PERF_CONTROL_STATE_SELECTION returnValue = new _PERF_CONTROL_STATE_SELECTION(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt32 DomainSelectionGeneration { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 104); } }
		public UInt32 PreviousFrequency { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public UInt32 PreviousPercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public UInt32 LatestFrequencyPercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 116); } }
		public UInt32 LatestPerformancePercent { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public Byte Force{ get { return _StructureData[_BufferOffset +124]; } }
		public Byte UseQosUpdateLock{ get { return _StructureData[_BufferOffset +125]; } }
		public UInt64 QosUpdateLock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
	}
	#endregion
	#region _MI_ALIGNED_SLIST
 
	public class _MI_ALIGNED_SLIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_ALIGNED_SLIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_ALIGNED_SLIST"": [ 64, {
				 ""SList"": [ 0, [ ""_SLIST_HEADER"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SLIST_HEADER SList
		{
			get
			{
				_SLIST_HEADER returnValue = new _SLIST_HEADER(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PROC_IDLE_STATE_ACCOUNTING
 
	public class _PROC_IDLE_STATE_ACCOUNTING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROC_IDLE_STATE_ACCOUNTING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1000; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROC_IDLE_STATE_ACCOUNTING"": [ 1000, {
				 ""TotalTime"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""CancelCount"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""FailureCount"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""SuccessCount"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""InvalidBucketIndex"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""MinTime"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""MaxTime"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""SelectionStatistics"": [ 40, [ ""_PPM_SELECTION_STATISTICS"", ""null"" ]],
				 ""IdleTimeBuckets"": [ 168, [ ""Array"", ""{\""count\"":26,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 TotalTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 CancelCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 FailureCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 SuccessCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 InvalidBucketIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 MinTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 MaxTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _PPM_SELECTION_STATISTICS SelectionStatistics
		{
			get
			{
				_PPM_SELECTION_STATISTICS returnValue = new _PPM_SELECTION_STATISTICS(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _PROC_IDLE_STATE_BUCKET[] IdleTimeBuckets
		{
			get
			{
				_PROC_IDLE_STATE_BUCKET[] returnValue = new _PROC_IDLE_STATE_BUCKET[26];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<26; i++ )
					returnValue[i] = new _PROC_IDLE_STATE_BUCKET(_StructureData, (i * size) + _BufferOffset + 168);
				return returnValue;
			}
		}
	}
	#endregion
	#region _HEADLESS_LOADER_BLOCK
 
	public class _HEADLESS_LOADER_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HEADLESS_LOADER_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HEADLESS_LOADER_BLOCK"": [ 64, {
				 ""UsedBiosSettings"": [ 0, [ ""Byte"", ""null"" ]],
				 ""DataBits"": [ 1, [ ""Byte"", ""null"" ]],
				 ""StopBits"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Parity"": [ 3, [ ""Byte"", ""null"" ]],
				 ""BaudRate"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""PortNumber"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""PortAddress"": [ 16, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""PciDeviceId"": [ 24, [ ""UInt16"", ""null"" ]],
				 ""PciVendorId"": [ 26, [ ""UInt16"", ""null"" ]],
				 ""PciBusNumber"": [ 28, [ ""Byte"", ""null"" ]],
				 ""PciBusSegment"": [ 30, [ ""UInt16"", ""null"" ]],
				 ""PciSlotNumber"": [ 32, [ ""Byte"", ""null"" ]],
				 ""PciFunctionNumber"": [ 33, [ ""Byte"", ""null"" ]],
				 ""PciFlags"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""SystemGUID"": [ 40, [ ""_GUID"", ""null"" ]],
				 ""IsMMIODevice"": [ 56, [ ""Byte"", ""null"" ]],
				 ""TerminalType"": [ 57, [ ""Byte"", ""null"" ]],
				 ""InterfaceType"": [ 58, [ ""Byte"", ""null"" ]],
				 ""RegisterBitWidth"": [ 59, [ ""Byte"", ""null"" ]],
				 ""RegisterAccessSize"": [ 60, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte UsedBiosSettings{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte DataBits{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte StopBits{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Parity{ get { return _StructureData[_BufferOffset +3]; } }
		public UInt32 BaudRate { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 PortNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 PortAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt16 PciDeviceId { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 24); } }
		public UInt16 PciVendorId { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 26); } }
		public Byte PciBusNumber{ get { return _StructureData[_BufferOffset +28]; } }
		public UInt16 PciBusSegment { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 30); } }
		public Byte PciSlotNumber{ get { return _StructureData[_BufferOffset +32]; } }
		public Byte PciFunctionNumber{ get { return _StructureData[_BufferOffset +33]; } }
		public UInt32 PciFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public _GUID SystemGUID
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public Byte IsMMIODevice{ get { return _StructureData[_BufferOffset +56]; } }
		public Byte TerminalType{ get { return _StructureData[_BufferOffset +57]; } }
		public Byte InterfaceType{ get { return _StructureData[_BufferOffset +58]; } }
		public Byte RegisterBitWidth{ get { return _StructureData[_BufferOffset +59]; } }
		public Byte RegisterAccessSize{ get { return _StructureData[_BufferOffset +60]; } }
	}
	#endregion
	#region _MI_WRITE_CALIBRATION
 
	public class _MI_WRITE_CALIBRATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_WRITE_CALIBRATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_WRITE_CALIBRATION"": [ 32, {
				 ""MaximumNumberProcessors"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""OptimalWriteType"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_MI_WRITE_TYPES\"",\""target\"":\""UInt32\""}"" ]],
				 ""PerProcessorNumberOfBytes"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""OptimalWriteProcessors"": [ 16, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""RawTimeStamps"": [ 24, [ ""Pointer"", ""{\""target\"":\""_MI_WRITE_MODES\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 MaximumNumberProcessors { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _MI_WRITE_TYPES OptimalWriteType { get { return (_MI_WRITE_TYPES)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 PerProcessorNumberOfBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt32[] OptimalWriteProcessors
		{
			get
			{
				UInt32[] returnValue = new UInt32[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64 RawTimeStamps { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _WHEA_MEMORY_ERROR_SECTION_VALIDBITS
 
	public class _WHEA_MEMORY_ERROR_SECTION_VALIDBITS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _WHEA_MEMORY_ERROR_SECTION_VALIDBITS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_WHEA_MEMORY_ERROR_SECTION_VALIDBITS"": [ 8, {
				 ""ErrorStatus"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""PhysicalAddress"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt64\""}"" ]],
				 ""PhysicalAddressMask"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""Node"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""Card"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt64\""}"" ]],
				 ""Module"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""Bank"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt64\""}"" ]],
				 ""Device"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt64\""}"" ]],
				 ""Row"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt64\""}"" ]],
				 ""Column"": [ 0, [ ""BitField"", ""{\""end_bit\"":10,\""start_bit\"":9,\""target\"":\""UInt64\""}"" ]],
				 ""BitPosition"": [ 0, [ ""BitField"", ""{\""end_bit\"":11,\""start_bit\"":10,\""target\"":\""UInt64\""}"" ]],
				 ""RequesterId"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":11,\""target\"":\""UInt64\""}"" ]],
				 ""ResponderId"": [ 0, [ ""BitField"", ""{\""end_bit\"":13,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]],
				 ""TargetId"": [ 0, [ ""BitField"", ""{\""end_bit\"":14,\""start_bit\"":13,\""target\"":\""UInt64\""}"" ]],
				 ""ErrorType"": [ 0, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":14,\""target\"":\""UInt64\""}"" ]],
				 ""RankNumber"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":15,\""target\"":\""UInt64\""}"" ]],
				 ""CardHandle"": [ 0, [ ""BitField"", ""{\""end_bit\"":17,\""start_bit\"":16,\""target\"":\""UInt64\""}"" ]],
				 ""ModuleHandle"": [ 0, [ ""BitField"", ""{\""end_bit\"":18,\""start_bit\"":17,\""target\"":\""UInt64\""}"" ]],
				 ""ExtendedRow"": [ 0, [ ""BitField"", ""{\""end_bit\"":19,\""start_bit\"":18,\""target\"":\""UInt64\""}"" ]],
				 ""BankGroup"": [ 0, [ ""BitField"", ""{\""end_bit\"":20,\""start_bit\"":19,\""target\"":\""UInt64\""}"" ]],
				 ""BankAddress"": [ 0, [ ""BitField"", ""{\""end_bit\"":21,\""start_bit\"":20,\""target\"":\""UInt64\""}"" ]],
				 ""ChipIdentification"": [ 0, [ ""BitField"", ""{\""end_bit\"":22,\""start_bit\"":21,\""target\"":\""UInt64\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":22,\""target\"":\""UInt64\""}"" ]],
				 ""ValidBits"": [ 0, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 ErrorStatus
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 PhysicalAddress
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt64)value2;
			}
		}
		public UInt64 PhysicalAddressMask
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt64)value2;
			}
		}
		public UInt64 Node
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt64)value2;
			}
		}
		public UInt64 Card
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt64)value2;
			}
		}
		public UInt64 Module
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt64)value2;
			}
		}
		public UInt64 Bank
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt64)value2;
			}
		}
		public UInt64 Device
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt64)value2;
			}
		}
		public UInt64 Row
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt64)value2;
			}
		}
		public UInt64 Column
		{
			get
			{
				// start: 9  end: 10  Mask: 0000001000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 512) >> 9;
				return (UInt64)value2;
			}
		}
		public UInt64 BitPosition
		{
			get
			{
				// start: 10  end: 11  Mask: 0000010000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1024) >> 10;
				return (UInt64)value2;
			}
		}
		public UInt64 RequesterId
		{
			get
			{
				// start: 11  end: 12  Mask: 0000100000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2048) >> 11;
				return (UInt64)value2;
			}
		}
		public UInt64 ResponderId
		{
			get
			{
				// start: 12  end: 13  Mask: 0001000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4096) >> 12;
				return (UInt64)value2;
			}
		}
		public UInt64 TargetId
		{
			get
			{
				// start: 13  end: 14  Mask: 0010000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8192) >> 13;
				return (UInt64)value2;
			}
		}
		public UInt64 ErrorType
		{
			get
			{
				// start: 14  end: 15  Mask: 0100000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16384) >> 14;
				return (UInt64)value2;
			}
		}
		public UInt64 RankNumber
		{
			get
			{
				// start: 15  end: 16  Mask: 1000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32768) >> 15;
				return (UInt64)value2;
			}
		}
		public UInt64 CardHandle
		{
			get
			{
				// start: 16  end: 17  Mask: 10000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65536) >> 16;
				return (UInt64)value2;
			}
		}
		public UInt64 ModuleHandle
		{
			get
			{
				// start: 17  end: 18  Mask: 100000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 131072) >> 17;
				return (UInt64)value2;
			}
		}
		public UInt64 ExtendedRow
		{
			get
			{
				// start: 18  end: 19  Mask: 1000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 262144) >> 18;
				return (UInt64)value2;
			}
		}
		public UInt64 BankGroup
		{
			get
			{
				// start: 19  end: 20  Mask: 10000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 524288) >> 19;
				return (UInt64)value2;
			}
		}
		public UInt64 BankAddress
		{
			get
			{
				// start: 20  end: 21  Mask: 100000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1048576) >> 20;
				return (UInt64)value2;
			}
		}
		public UInt64 ChipIdentification
		{
			get
			{
				// start: 21  end: 22  Mask: 1000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2097152) >> 21;
				return (UInt64)value2;
			}
		}
		public UInt64 Reserved
		{
			get
			{
				// start: 22  end: 64  Mask: 1111111111111111111111111111111111111111110000000000000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744073705357312) >> 22;
				return (UInt64)value2;
			}
		}
		public UInt64 ValidBits { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _IO_REMOVE_LOCK_COMMON_BLOCK
 
	public class _IO_REMOVE_LOCK_COMMON_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_REMOVE_LOCK_COMMON_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_REMOVE_LOCK_COMMON_BLOCK"": [ 32, {
				 ""Removed"": [ 0, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 1, [ ""Array"", ""{\""count\"":3,\""target\"":\""Byte\""}"" ]],
				 ""IoCount"": [ 4, [ ""Int32"", ""null"" ]],
				 ""RemoveEvent"": [ 8, [ ""_KEVENT"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte Removed{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte[] Reserved
		{
			get
			{
				Byte[] returnValue = new Byte[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 1];
				return returnValue;
			}
		}
		public Int32 IoCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 4); } }
		public _KEVENT RemoveEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PEP_CRASHDUMP_INFORMATION
 
	public class _PEP_CRASHDUMP_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_CRASHDUMP_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_CRASHDUMP_INFORMATION"": [ 16, {
				 ""DeviceHandle"": [ 0, [ ""Pointer"", ""{\""target\"":\""PEPHANDLE__\""}"" ]],
				 ""DeviceContext"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DeviceHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 DeviceContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _FAULT_INFORMATION_X64_FLAGS
 
	public class _FAULT_INFORMATION_X64_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FAULT_INFORMATION_X64_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FAULT_INFORMATION_X64_FLAGS"": [ 4, {
				 ""FaultAddressValid"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 FaultAddressValid
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 1  end: 32  Mask: 11111111111111111111111111111110
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967294) >> 1;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _MMSECURE_FLAGS
 
	public class _MMSECURE_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMSECURE_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMSECURE_FLAGS"": [ 4, {
				 ""ReadOnly"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ReadWrite"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""SecNoChange"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""NoDelete"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""RequiresPteReversal"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""ExclusiveSecure"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""UserModeOnly"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]],
				 ""NoInherit"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":7,\""target\"":\""UInt32\""}"" ]],
				 ""CheckVad"": [ 0, [ ""BitField"", ""{\""end_bit\"":9,\""start_bit\"":8,\""target\"":\""UInt32\""}"" ]],
				 ""Spare"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":9,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ReadOnly
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ReadWrite
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 SecNoChange
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 NoDelete
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 RequiresPteReversal
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 ExclusiveSecure
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 UserModeOnly
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
		public UInt32 NoInherit
		{
			get
			{
				// start: 7  end: 8  Mask: 0000000010000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 128) >> 7;
				return (UInt32)value2;
			}
		}
		public UInt32 CheckVad
		{
			get
			{
				// start: 8  end: 9  Mask: 0000000100000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 256) >> 8;
				return (UInt32)value2;
			}
		}
		public UInt32 Spare
		{
			get
			{
				// start: 9  end: 12  Mask: 0000111000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 3584) >> 9;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _RTL_USER_PROCESS_PARAMETERS
 
	public class _RTL_USER_PROCESS_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_USER_PROCESS_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1088; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_USER_PROCESS_PARAMETERS"": [ 1088, {
				 ""MaximumLength"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Length"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""DebugFlags"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""ConsoleHandle"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ConsoleFlags"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""StandardInput"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StandardOutput"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StandardError"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CurrentDirectory"": [ 56, [ ""_CURDIR"", ""null"" ]],
				 ""DllPath"": [ 80, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ImagePathName"": [ 96, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""CommandLine"": [ 112, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""Environment"": [ 128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""StartingX"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""StartingY"": [ 140, [ ""UInt32"", ""null"" ]],
				 ""CountX"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""CountY"": [ 148, [ ""UInt32"", ""null"" ]],
				 ""CountCharsX"": [ 152, [ ""UInt32"", ""null"" ]],
				 ""CountCharsY"": [ 156, [ ""UInt32"", ""null"" ]],
				 ""FillAttribute"": [ 160, [ ""UInt32"", ""null"" ]],
				 ""WindowFlags"": [ 164, [ ""UInt32"", ""null"" ]],
				 ""ShowWindowFlags"": [ 168, [ ""UInt32"", ""null"" ]],
				 ""WindowTitle"": [ 176, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""DesktopInfo"": [ 192, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""ShellInfo"": [ 208, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""RuntimeData"": [ 224, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""CurrentDirectores"": [ 240, [ ""Array"", ""{\""count\"":32,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""EnvironmentSize"": [ 1008, [ ""UInt64"", ""null"" ]],
				 ""EnvironmentVersion"": [ 1016, [ ""UInt64"", ""null"" ]],
				 ""PackageDependencyData"": [ 1024, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ProcessGroupId"": [ 1032, [ ""UInt32"", ""null"" ]],
				 ""LoaderThreads"": [ 1036, [ ""UInt32"", ""null"" ]],
				 ""RedirectionDllName"": [ 1040, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""HeapPartitionName"": [ 1056, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""DefaultThreadpoolCpuSetMasks"": [ 1072, [ ""Pointer"", ""{\""target\"":\""UInt64\""}"" ]],
				 ""DefaultThreadpoolCpuSetMaskCount"": [ 1080, [ ""UInt32"", ""null"" ]],
				 ""DefaultThreadpoolThreadMaximum"": [ 1084, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 MaximumLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 DebugFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 ConsoleHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 ConsoleFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt64 StandardInput { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 StandardOutput { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 StandardError { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public _CURDIR CurrentDirectory
		{
			get
			{
				_CURDIR returnValue = new _CURDIR(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
		public _UNICODE_STRING DllPath
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 80);
				return returnValue;
			}
		}
		public _UNICODE_STRING ImagePathName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 96);
				return returnValue;
			}
		}
		public _UNICODE_STRING CommandLine
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 112);
				return returnValue;
			}
		}
		public UInt64 Environment { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt32 StartingX { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public UInt32 StartingY { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 140); } }
		public UInt32 CountX { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt32 CountY { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 148); } }
		public UInt32 CountCharsX { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 152); } }
		public UInt32 CountCharsY { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 156); } }
		public UInt32 FillAttribute { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 160); } }
		public UInt32 WindowFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 164); } }
		public UInt32 ShowWindowFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 168); } }
		public _UNICODE_STRING WindowTitle
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 176);
				return returnValue;
			}
		}
		public _UNICODE_STRING DesktopInfo
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 192);
				return returnValue;
			}
		}
		public _UNICODE_STRING ShellInfo
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 208);
				return returnValue;
			}
		}
		public _UNICODE_STRING RuntimeData
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 224);
				return returnValue;
			}
		}
		public _RTL_DRIVE_LETTER_CURDIR[] CurrentDirectores
		{
			get
			{
				_RTL_DRIVE_LETTER_CURDIR[] returnValue = new _RTL_DRIVE_LETTER_CURDIR[32];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<32; i++ )
					returnValue[i] = new _RTL_DRIVE_LETTER_CURDIR(_StructureData, (i * size) + _BufferOffset + 240);
				return returnValue;
			}
		}
		public UInt64 EnvironmentSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1008); } }
		public UInt64 EnvironmentVersion { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1016); } }
		public UInt64 PackageDependencyData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1024); } }
		public UInt32 ProcessGroupId { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1032); } }
		public UInt32 LoaderThreads { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1036); } }
		public _UNICODE_STRING RedirectionDllName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 1040);
				return returnValue;
			}
		}
		public _UNICODE_STRING HeapPartitionName
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 1056);
				return returnValue;
			}
		}
		public UInt64 DefaultThreadpoolCpuSetMasks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 1072); } }
		public UInt32 DefaultThreadpoolCpuSetMaskCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1080); } }
		public UInt32 DefaultThreadpoolThreadMaximum { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 1084); } }
	}
	#endregion
	#region _MI_IO_CACHE_STATS
 
	public class _MI_IO_CACHE_STATS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_IO_CACHE_STATS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_IO_CACHE_STATS"": [ 40, {
				 ""UnusedBlocks"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""ActiveCacheMatch"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ActiveCacheOverride"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""UnmappedCacheFlush"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""UnmappedCacheMatch"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""UnmappedCacheConflict"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""PermanentIoAttributeConflict"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""PermanentIoNodeConflict"": [ 32, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 UnusedBlocks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 ActiveCacheMatch { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ActiveCacheOverride { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt32 UnmappedCacheFlush { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 UnmappedCacheMatch { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 UnmappedCacheConflict { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 PermanentIoAttributeConflict { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 PermanentIoNodeConflict { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _IOMMU_SVM_CAPABILITIES
 
	public class _IOMMU_SVM_CAPABILITIES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IOMMU_SVM_CAPABILITIES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 12; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IOMMU_SVM_CAPABILITIES"": [ 12, {
				 ""AtsCapability"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""PriCapability"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""PasidCapability"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""CapReg"": [ 4, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""Rsvd"": [ 8, [ ""BitField"", ""{\""end_bit\"":15,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""AsULONG"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 AtsCapability
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 PriCapability
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 PasidCapability
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public _ANONYMOUS_TAG CapReg
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 Rsvd
		{
			get
			{
				// start: 0  end: 15  Mask: 0111111111111111
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 8);
				var value2 = (value & 32767) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 AsULONG { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _DUMP_INITIALIZATION_CONTEXT
 
	public class _DUMP_INITIALIZATION_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DUMP_INITIALIZATION_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 264; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DUMP_INITIALIZATION_CONTEXT"": [ 264, {
				 ""Length"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""MemoryBlock"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CommonBuffer"": [ 16, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""void\""}}"" ]],
				 ""PhysicalAddress"": [ 32, [ ""Array"", ""{\""count\"":2,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""StallRoutine"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OpenRoutine"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WriteRoutine"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""FinishRoutine"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""AdapterObject"": [ 80, [ ""Pointer"", ""{\""target\"":\""_ADAPTER_OBJECT\""}"" ]],
				 ""MappedRegisterBase"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PortConfiguration"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CrashDump"": [ 104, [ ""Byte"", ""null"" ]],
				 ""MarkMemoryOnly"": [ 105, [ ""Byte"", ""null"" ]],
				 ""HiberResume"": [ 106, [ ""Byte"", ""null"" ]],
				 ""Reserved1"": [ 107, [ ""Byte"", ""null"" ]],
				 ""MaximumTransferSize"": [ 108, [ ""UInt32"", ""null"" ]],
				 ""CommonBufferSize"": [ 112, [ ""UInt32"", ""null"" ]],
				 ""TargetAddress"": [ 120, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WritePendingRoutine"": [ 128, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PartitionStyle"": [ 136, [ ""UInt32"", ""null"" ]],
				 ""DiskInfo"": [ 140, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""ReadRoutine"": [ 160, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""GetDriveTelemetryRoutine"": [ 168, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""LogSectionTruncateSize"": [ 176, [ ""UInt32"", ""null"" ]],
				 ""Parameters"": [ 180, [ ""Array"", ""{\""count\"":16,\""target\"":\""UInt32\""}"" ]],
				 ""GetTransferSizesRoutine"": [ 248, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DumpNotifyRoutine"": [ 256, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Length { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 MemoryBlock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64[] CommonBuffer
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				int size = 8;
				for(int i=0; i<2; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public _LARGE_INTEGER[] PhysicalAddress
		{
			get
			{
				_LARGE_INTEGER[] returnValue = new _LARGE_INTEGER[2];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<2; i++ )
					returnValue[i] = new _LARGE_INTEGER(_StructureData, (i * size) + _BufferOffset + 32);
				return returnValue;
			}
		}
		public UInt64 StallRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 OpenRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 WriteRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 FinishRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 AdapterObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 MappedRegisterBase { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 PortConfiguration { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public Byte CrashDump{ get { return _StructureData[_BufferOffset +104]; } }
		public Byte MarkMemoryOnly{ get { return _StructureData[_BufferOffset +105]; } }
		public Byte HiberResume{ get { return _StructureData[_BufferOffset +106]; } }
		public Byte Reserved1{ get { return _StructureData[_BufferOffset +107]; } }
		public UInt32 MaximumTransferSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 108); } }
		public UInt32 CommonBufferSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 112); } }
		public UInt64 TargetAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 WritePendingRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt32 PartitionStyle { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 136); } }
		public _ANONYMOUS_TAG DiskInfo
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 140);
				return returnValue;
			}
		}
		public UInt64 ReadRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 GetDriveTelemetryRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt32 LogSectionTruncateSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 176); } }
		public UInt32[] Parameters
		{
			get
			{
				UInt32[] returnValue = new UInt32[16];
				for(int i=0; i<16; i++ )
					returnValue[i] = BitConverter.ToUInt32(_StructureData, (i * sizeof(UInt32)) + _BufferOffset + 180);
				return returnValue;
			}
		}
		public UInt64 GetTransferSizesRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public UInt64 DumpNotifyRoutine { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
	}
	#endregion
	#region _CM_FAST_LEAF_HINT
 
	public class _CM_FAST_LEAF_HINT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CM_FAST_LEAF_HINT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CM_FAST_LEAF_HINT"": [ 4, {
				 ""Characters"": [ 0, [ ""Array"", ""{\""count\"":4,\""target\"":\""Byte\""}"" ]],
				 ""FullHint"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte[] Characters
		{
			get
			{
				Byte[] returnValue = new Byte[4];
				for(int i=0; i<4; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 0];
				return returnValue;
			}
		}
		public UInt32 FullHint { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _THERMAL_COOLING_INTERFACE
 
	public class _THERMAL_COOLING_INTERFACE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _THERMAL_COOLING_INTERFACE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_THERMAL_COOLING_INTERFACE"": [ 56, {
				 ""Size"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Version"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Context"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InterfaceReference"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InterfaceDereference"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Flags"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""ActiveCooling"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PassiveCooling"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Size { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 InterfaceReference { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 InterfaceDereference { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt64 ActiveCooling { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 PassiveCooling { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _PEP_WORK_INFORMATION
 
	public class _PEP_WORK_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_WORK_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_WORK_INFORMATION"": [ 64, {
				 ""WorkType"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_PEP_WORK_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ActiveComplete"": [ 8, [ ""_PEP_WORK_ACTIVE_COMPLETE"", ""null"" ]],
				 ""IdleState"": [ 8, [ ""_PEP_WORK_IDLE_STATE"", ""null"" ]],
				 ""DevicePower"": [ 8, [ ""_PEP_WORK_DEVICE_POWER"", ""null"" ]],
				 ""PowerControl"": [ 8, [ ""_PEP_WORK_POWER_CONTROL"", ""null"" ]],
				 ""DeviceIdle"": [ 8, [ ""_PEP_WORK_DEVICE_IDLE"", ""null"" ]],
				 ""CompleteIdleState"": [ 8, [ ""_PEP_WORK_COMPLETE_IDLE_STATE"", ""null"" ]],
				 ""CompletePerfState"": [ 8, [ ""_PEP_WORK_COMPLETE_PERF_STATE"", ""null"" ]],
				 ""AcpiNotify"": [ 8, [ ""_PEP_WORK_ACPI_NOTIFY"", ""null"" ]],
				 ""ControlMethodComplete"": [ 8, [ ""_PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _PEP_WORK_TYPE WorkType { get { return (_PEP_WORK_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _PEP_WORK_ACTIVE_COMPLETE ActiveComplete
		{
			get
			{
				_PEP_WORK_ACTIVE_COMPLETE returnValue = new _PEP_WORK_ACTIVE_COMPLETE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _PEP_WORK_IDLE_STATE IdleState
		{
			get
			{
				_PEP_WORK_IDLE_STATE returnValue = new _PEP_WORK_IDLE_STATE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _PEP_WORK_DEVICE_POWER DevicePower
		{
			get
			{
				_PEP_WORK_DEVICE_POWER returnValue = new _PEP_WORK_DEVICE_POWER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _PEP_WORK_POWER_CONTROL PowerControl
		{
			get
			{
				_PEP_WORK_POWER_CONTROL returnValue = new _PEP_WORK_POWER_CONTROL(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _PEP_WORK_DEVICE_IDLE DeviceIdle
		{
			get
			{
				_PEP_WORK_DEVICE_IDLE returnValue = new _PEP_WORK_DEVICE_IDLE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _PEP_WORK_COMPLETE_IDLE_STATE CompleteIdleState
		{
			get
			{
				_PEP_WORK_COMPLETE_IDLE_STATE returnValue = new _PEP_WORK_COMPLETE_IDLE_STATE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _PEP_WORK_COMPLETE_PERF_STATE CompletePerfState
		{
			get
			{
				_PEP_WORK_COMPLETE_PERF_STATE returnValue = new _PEP_WORK_COMPLETE_PERF_STATE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _PEP_WORK_ACPI_NOTIFY AcpiNotify
		{
			get
			{
				_PEP_WORK_ACPI_NOTIFY returnValue = new _PEP_WORK_ACPI_NOTIFY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE ControlMethodComplete
		{
			get
			{
				_PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE returnValue = new _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _VF_ADDRESS_RANGE
 
	public class _VF_ADDRESS_RANGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VF_ADDRESS_RANGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VF_ADDRESS_RANGE"": [ 16, {
				 ""Start"": [ 0, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""End"": [ 8, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Start { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 End { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _POP_FX_PERF_INFO
 
	public class _POP_FX_PERF_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_PERF_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 160; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_PERF_INFO"": [ 160, {
				 ""Component"": [ 0, [ ""Pointer"", ""{\""target\"":\""_POP_FX_COMPONENT\""}"" ]],
				 ""CompletedEvent"": [ 8, [ ""_KEVENT"", ""null"" ]],
				 ""ComponentPerfState"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""Flags"": [ 40, [ ""_POP_FX_PERF_FLAGS"", ""null"" ]],
				 ""LastChange"": [ 48, [ ""Pointer"", ""{\""target\"":\""_PO_FX_PERF_STATE_CHANGE\""}"" ]],
				 ""LastChangeCount"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""LastChangeStamp"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""LastChangeNominal"": [ 72, [ ""Byte"", ""null"" ]],
				 ""PepRegistered"": [ 73, [ ""Byte"", ""null"" ]],
				 ""QueryOnIdleStates"": [ 74, [ ""Byte"", ""null"" ]],
				 ""RequestDriverContext"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""WorkOrder"": [ 88, [ ""_POP_FX_WORK_ORDER"", ""null"" ]],
				 ""SetsCount"": [ 144, [ ""UInt32"", ""null"" ]],
				 ""Sets"": [ 152, [ ""Pointer"", ""{\""target\"":\""_POP_FX_PERF_SET\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Component { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _KEVENT CompletedEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt64 ComponentPerfState { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public _POP_FX_PERF_FLAGS Flags
		{
			get
			{
				_POP_FX_PERF_FLAGS returnValue = new _POP_FX_PERF_FLAGS(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public UInt64 LastChange { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt32 LastChangeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt64 LastChangeStamp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public Byte LastChangeNominal{ get { return _StructureData[_BufferOffset +72]; } }
		public Byte PepRegistered{ get { return _StructureData[_BufferOffset +73]; } }
		public Byte QueryOnIdleStates{ get { return _StructureData[_BufferOffset +74]; } }
		public UInt64 RequestDriverContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public _POP_FX_WORK_ORDER WorkOrder
		{
			get
			{
				_POP_FX_WORK_ORDER returnValue = new _POP_FX_WORK_ORDER(_StructureData, _BufferOffset + 88);
				return returnValue;
			}
		}
		public UInt32 SetsCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 144); } }
		public UInt64 Sets { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
	}
	#endregion
	#region _CVDD
 
	public class _CVDD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CVDD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CVDD"": [ 28, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""NB10"": [ 0, [ ""_NB10"", ""null"" ]],
				 ""RsDs"": [ 0, [ ""_RSDS"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _NB10 NB10
		{
			get
			{
				_NB10 returnValue = new _NB10(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _RSDS RsDs
		{
			get
			{
				_RSDS returnValue = new _RSDS(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_ACCESS_VIOLATION_RANGE
 
	public class _MI_ACCESS_VIOLATION_RANGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_ACCESS_VIOLATION_RANGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_ACCESS_VIOLATION_RANGE"": [ 40, {
				 ""Node"": [ 0, [ ""_RTL_BALANCED_NODE"", ""null"" ]],
				 ""Va"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EndVaInclusive"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _RTL_BALANCED_NODE Node
		{
			get
			{
				_RTL_BALANCED_NODE returnValue = new _RTL_BALANCED_NODE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Va { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 EndVaInclusive { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _ACPI_METHOD_ARGUMENT_V1
 
	public class _ACPI_METHOD_ARGUMENT_V1
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ACPI_METHOD_ARGUMENT_V1(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ACPI_METHOD_ARGUMENT_V1"": [ 8, {
				 ""Type"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""DataLength"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Argument"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Data"": [ 4, [ ""Array"", ""{\""count\"":1,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Type { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 DataLength { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 Argument { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public Byte[] Data
		{
			get
			{
				Byte[] returnValue = new Byte[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 4];
				return returnValue;
			}
		}
	}
	#endregion
	#region _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE
 
	public class _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_WORK_ACPI_EVALUATE_CONTROL_METHOD_COMPLETE"": [ 40, {
				 ""DeviceHandle"": [ 0, [ ""Pointer"", ""{\""target\"":\""POHANDLE__\""}"" ]],
				 ""CompletionFlags"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""MethodStatus"": [ 12, [ ""Int32"", ""null"" ]],
				 ""CompletionContext"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OutputArgumentSize"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""OutputArguments"": [ 32, [ ""Pointer"", ""{\""target\"":\""_ACPI_METHOD_ARGUMENT_V1\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DeviceHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 CompletionFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Int32 MethodStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 CompletionContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 OutputArgumentSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 OutputArguments { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _MMPAGE_FILE_EXPANSION_FLAGS
 
	public class _MMPAGE_FILE_EXPANSION_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPAGE_FILE_EXPANSION_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPAGE_FILE_EXPANSION_FLAGS"": [ 4, {
				 ""PageFileNumber"": [ 0, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Spare1"": [ 1, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""Spare2"": [ 2, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""IgnoreCurrentCommit"": [ 3, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""Byte\""}"" ]],
				 ""IncreaseMinimumSize"": [ 3, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""Byte\""}"" ]],
				 ""AttemptForCantExtend"": [ 3, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""Byte\""}"" ]],
				 ""UnusedSegmentDeletion"": [ 3, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""Byte\""}"" ]],
				 ""PageFileContract"": [ 3, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""Byte\""}"" ]],
				 ""NoWait"": [ 3, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""Byte\""}"" ]],
				 ""Spare3"": [ 3, [ ""BitField"", ""{\""end_bit\"":8,\""start_bit\"":6,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte PageFileNumber
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				Byte value = _StructureData[_BufferOffset + 0];
				var value2 = (value & 255) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Spare1
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				Byte value = _StructureData[_BufferOffset + 1];
				var value2 = (value & 255) >> 0;
				return (Byte)value2;
			}
		}
		public Byte Spare2
		{
			get
			{
				// start: 0  end: 8  Mask: 0000000011111111
				Byte value = _StructureData[_BufferOffset + 2];
				var value2 = (value & 255) >> 0;
				return (Byte)value2;
			}
		}
		public Byte IgnoreCurrentCommit
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 1) >> 0;
				return (Byte)value2;
			}
		}
		public Byte IncreaseMinimumSize
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 2) >> 1;
				return (Byte)value2;
			}
		}
		public Byte AttemptForCantExtend
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 4) >> 2;
				return (Byte)value2;
			}
		}
		public Byte UnusedSegmentDeletion
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 8) >> 3;
				return (Byte)value2;
			}
		}
		public Byte PageFileContract
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 16) >> 4;
				return (Byte)value2;
			}
		}
		public Byte NoWait
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 32) >> 5;
				return (Byte)value2;
			}
		}
		public Byte Spare3
		{
			get
			{
				// start: 6  end: 8  Mask: 0000000011000000
				Byte value = _StructureData[_BufferOffset + 3];
				var value2 = (value & 192) >> 6;
				return (Byte)value2;
			}
		}
	}
	#endregion
	#region _MMPFNLIST_SHORT
 
	public class _MMPFNLIST_SHORT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MMPFNLIST_SHORT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MMPFNLIST_SHORT"": [ 24, {
				 ""Total"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Flink"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Blink"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Total { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Flink { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Blink { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _MI_WRITE_MODES
 
	public class _MI_WRITE_MODES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_WRITE_MODES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_WRITE_MODES"": [ 16, {
				 ""WriteType"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64[] WriteType
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_RESTRICTED_MODWRITES
 
	public class _MI_RESTRICTED_MODWRITES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_RESTRICTED_MODWRITES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 3; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_RESTRICTED_MODWRITES"": [ 3, {
				 ""MaximumClusterPages"": [ 0, [ ""Byte"", ""null"" ]],
				 ""ReducedClusterWrites"": [ 1, [ ""Byte"", ""null"" ]],
				 ""ImposeDelay"": [ 2, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte MaximumClusterPages{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte ReducedClusterWrites{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte ImposeDelay{ get { return _StructureData[_BufferOffset +2]; } }
	}
	#endregion
	#region _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2
 
	public class _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_OFFLINE_CRASHDUMP_CONFIGURATION_TABLE_V2"": [ 32, {
				 ""Version"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""AbnormalResetOccurred"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""OfflineMemoryDumpCapable"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ResetDataAddress"": [ 16, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""ResetDataSize"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Version { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 AbnormalResetOccurred { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 OfflineMemoryDumpCapable { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public _LARGE_INTEGER ResetDataAddress
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt32 ResetDataSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _MI_VAD_SEQUENTIAL_INFO
 
	public class _MI_VAD_SEQUENTIAL_INFO
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_VAD_SEQUENTIAL_INFO(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_VAD_SEQUENTIAL_INFO"": [ 8, {
				 ""Length"": [ 0, [ ""BitField"", ""{\""end_bit\"":12,\""start_bit\"":0,\""target\"":\""UInt64\""}"" ]],
				 ""Vpn"": [ 0, [ ""BitField"", ""{\""end_bit\"":64,\""start_bit\"":12,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Length
		{
			get
			{
				// start: 0  end: 12  Mask: 0000111111111111
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4095) >> 0;
				return (UInt64)value2;
			}
		}
		public UInt64 Vpn
		{
			get
			{
				// start: 12  end: 64  Mask: 1111111111111111111111111111111111111111111111111111000000000000
				var value = BitConverter.ToUInt64(_StructureData, _BufferOffset + 0);
				var value2 = (value & 18446744073709547520) >> 12;
				return (UInt64)value2;
			}
		}
	}
	#endregion
	#region _POP_FX_ACTIVE_TIME_ACCOUNTING
 
	public class _POP_FX_ACTIVE_TIME_ACCOUNTING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_ACTIVE_TIME_ACCOUNTING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_ACTIVE_TIME_ACCOUNTING"": [ 96, {
				 ""Total"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Unattributed"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Buckets"": [ 16, [ ""Array"", ""{\""count\"":5,\""target\"":\""UInt64\""}"" ]],
				 ""PerBucket"": [ 56, [ ""Array"", ""{\""count\"":5,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Total { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Unattributed { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64[] Buckets
		{
			get
			{
				UInt64[] returnValue = new UInt64[5];
				for(int i=0; i<5; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64[] PerBucket
		{
			get
			{
				UInt64[] returnValue = new UInt64[5];
				for(int i=0; i<5; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 56);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PEP_WORK_ACPI_NOTIFY
 
	public class _PEP_WORK_ACPI_NOTIFY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_WORK_ACPI_NOTIFY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_WORK_ACPI_NOTIFY"": [ 16, {
				 ""DeviceHandle"": [ 0, [ ""Pointer"", ""{\""target\"":\""POHANDLE__\""}"" ]],
				 ""NotifyCode"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DeviceHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 NotifyCode { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _MI_LARGE_PAGE_LISTS_CHANGING
 
	public class _MI_LARGE_PAGE_LISTS_CHANGING
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_LARGE_PAGE_LISTS_CHANGING(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_LARGE_PAGE_LISTS_CHANGING"": [ 32, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_MI_LARGE_PAGE_LISTS_CHANGING\""}"" ]],
				 ""Gate"": [ 8, [ ""_KGATE"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public _KGATE Gate
		{
			get
			{
				_KGATE returnValue = new _KGATE(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _TRIAGE_POP_IRP_DATA
 
	public class _TRIAGE_POP_IRP_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _TRIAGE_POP_IRP_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_TRIAGE_POP_IRP_DATA"": [ 32, {
				 ""Link"": [ 0, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""Irp"": [ 16, [ ""Pointer"", ""{\""target\"":\""_IRP\""}"" ]],
				 ""Pdo"": [ 24, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]] }]
				 }
				)";
			}
		}
		public _LIST_ENTRY Link
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Irp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 Pdo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _MI_SYSTEM_VA_ASSIGNMENT
 
	public class _MI_SYSTEM_VA_ASSIGNMENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_SYSTEM_VA_ASSIGNMENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_SYSTEM_VA_ASSIGNMENT"": [ 16, {
				 ""BaseAddress"": [ 0, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NumberOfBytes"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 BaseAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 NumberOfBytes { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _PROCESSOR_PLATFORM_STATE_RESIDENCY
 
	public class _PROCESSOR_PLATFORM_STATE_RESIDENCY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROCESSOR_PLATFORM_STATE_RESIDENCY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROCESSOR_PLATFORM_STATE_RESIDENCY"": [ 16, {
				 ""Residency"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""TransitionCount"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Residency { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 TransitionCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _POP_PER_PROCESSOR_CONTEXT
 
	public class _POP_PER_PROCESSOR_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_PER_PROCESSOR_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 128; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_PER_PROCESSOR_CONTEXT"": [ 128, {
				 ""UncompressedData"": [ 0, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""MappingVa"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""XpressEncodeWorkspace"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""CompressedDataBuffer"": [ 24, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""CopyTicks"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""CompressTicks"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""BytesCopied"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""PagesProcessed"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""DecompressTicks"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""ResumeCopyTicks"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""SharedBufferTicks"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""DecompressTicksByMethod"": [ 88, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""DecompressSizeByMethod"": [ 104, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""CompressCount"": [ 120, [ ""UInt32"", ""null"" ]],
				 ""HuffCompressCount"": [ 124, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 UncompressedData { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 MappingVa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 XpressEncodeWorkspace { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 CompressedDataBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 CopyTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 CompressTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 BytesCopied { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 PagesProcessed { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 DecompressTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 ResumeCopyTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 SharedBufferTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64[] DecompressTicksByMethod
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 88);
				return returnValue;
			}
		}
		public UInt64[] DecompressSizeByMethod
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 104);
				return returnValue;
			}
		}
		public UInt32 CompressCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 120); } }
		public UInt32 HuffCompressCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 124); } }
	}
	#endregion
	#region _ETW_APC_ENTRY
 
	public class _ETW_APC_ENTRY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETW_APC_ENTRY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETW_APC_ENTRY"": [ 96, {
				 ""SListEntry"": [ 0, [ ""_SLIST_ENTRY"", ""null"" ]],
				 ""Apc"": [ 0, [ ""_KAPC"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _SLIST_ENTRY SListEntry
		{
			get
			{
				_SLIST_ENTRY returnValue = new _SLIST_ENTRY(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _KAPC Apc
		{
			get
			{
				_KAPC returnValue = new _KAPC(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CONFIGURATION_COMPONENT
 
	public class _CONFIGURATION_COMPONENT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CONFIGURATION_COMPONENT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CONFIGURATION_COMPONENT"": [ 40, {
				 ""Class"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_CONFIGURATION_CLASS\"",\""target\"":\""UInt32\""}"" ]],
				 ""Type"": [ 4, [ ""Enumeration"", ""{\""enum_name\"":\""_CONFIGURATION_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Flags"": [ 8, [ ""_DEVICE_FLAGS"", ""null"" ]],
				 ""Version"": [ 12, [ ""UInt16"", ""null"" ]],
				 ""Revision"": [ 14, [ ""UInt16"", ""null"" ]],
				 ""Key"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""AffinityMask"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""Group"": [ 20, [ ""UInt16"", ""null"" ]],
				 ""GroupIndex"": [ 22, [ ""UInt16"", ""null"" ]],
				 ""ConfigurationDataLength"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""IdentifierLength"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""Identifier"": [ 32, [ ""Pointer"", ""{\""target\"":\""char\""}"" ]] }]
				 }
				)";
			}
		}
		public _CONFIGURATION_CLASS Class { get { return (_CONFIGURATION_CLASS)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _CONFIGURATION_TYPE Type { get { return (_CONFIGURATION_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _DEVICE_FLAGS Flags
		{
			get
			{
				_DEVICE_FLAGS returnValue = new _DEVICE_FLAGS(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt16 Version { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 12); } }
		public UInt16 Revision { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 14); } }
		public UInt32 Key { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 AffinityMask { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt16 Group { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 20); } }
		public UInt16 GroupIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 22); } }
		public UInt32 ConfigurationDataLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 IdentifierLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt64 Identifier { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION
 
	public class _LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LOADER_FEATURE_CONFIGURATION_DIAGNOSTIC_INFORMATION"": [ 24, {
				 ""OriginalBootStatus"": [ 0, [ ""Byte"", ""null"" ]],
				 ""NewBootStatus"": [ 1, [ ""Byte"", ""null"" ]],
				 ""ConfigurationLoaded"": [ 2, [ ""Byte"", ""null"" ]],
				 ""Spare"": [ 3, [ ""Byte"", ""null"" ]],
				 ""Flags"": [ 4, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""ConfigurationComparisonStatus"": [ 8, [ ""Int32"", ""null"" ]],
				 ""CurrentConfigurationLoadStatus"": [ 12, [ ""Int32"", ""null"" ]],
				 ""LkgConfigurationLoadStatus"": [ 16, [ ""Int32"", ""null"" ]],
				 ""UsageSubscriptionLoadStatus"": [ 20, [ ""Int32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte OriginalBootStatus{ get { return _StructureData[_BufferOffset +0]; } }
		public Byte NewBootStatus{ get { return _StructureData[_BufferOffset +1]; } }
		public Byte ConfigurationLoaded{ get { return _StructureData[_BufferOffset +2]; } }
		public Byte Spare{ get { return _StructureData[_BufferOffset +3]; } }
		public _ANONYMOUS_TAG Flags
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public Int32 ConfigurationComparisonStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public Int32 CurrentConfigurationLoadStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 12); } }
		public Int32 LkgConfigurationLoadStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public Int32 UsageSubscriptionLoadStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 20); } }
	}
	#endregion
	#region _PROC_PERF_CHECK_SNAP
 
	public class _PROC_PERF_CHECK_SNAP
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROC_PERF_CHECK_SNAP(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROC_PERF_CHECK_SNAP"": [ 96, {
				 ""Time"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Active"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""Stall"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""FrequencyScaledActive"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""PerformanceScaledActive"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""PerformanceScaledKernelActive"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""CyclesActive"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""CyclesAffinitized"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""TaggedThreadCycles"": [ 64, [ ""Array"", ""{\""count\"":3,\""target\"":\""UInt64\""}"" ]],
				 ""ResponsivenessEvents"": [ 88, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Time { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Active { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 Stall { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 FrequencyScaledActive { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 PerformanceScaledActive { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 PerformanceScaledKernelActive { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 CyclesActive { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 CyclesAffinitized { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64[] TaggedThreadCycles
		{
			get
			{
				UInt64[] returnValue = new UInt64[3];
				for(int i=0; i<3; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 64);
				return returnValue;
			}
		}
		public UInt32 ResponsivenessEvents { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
	}
	#endregion
	#region _HAL_UNMASKED_INTERRUPT_FLAGS
 
	public class _HAL_UNMASKED_INTERRUPT_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _HAL_UNMASKED_INTERRUPT_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_HAL_UNMASKED_INTERRUPT_FLAGS"": [ 2, {
				 ""SecondaryInterrupt"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt16\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":1,\""target\"":\""UInt16\""}"" ]],
				 ""AsUSHORT"": [ 0, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 SecondaryInterrupt
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt16)value2;
			}
		}
		public UInt16 Reserved
		{
			get
			{
				// start: 1  end: 16  Mask: 1111111111111110
				var value = BitConverter.ToUInt16(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65534) >> 1;
				return (UInt16)value2;
			}
		}
		public UInt16 AsUSHORT { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _KTRANSACTION_HISTORY
 
	public class _KTRANSACTION_HISTORY
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _KTRANSACTION_HISTORY(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_KTRANSACTION_HISTORY"": [ 8, {
				 ""RecordType"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_UNNAMED_ENUM_KTMOH_COMMITTRANSACTION_RESULT\"",\""target\"":\""UInt32\""}"" ]],
				 ""Payload"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _UNNAMED_ENUM_KTMOH_COMMITTRANSACTION_RESULT RecordType { get { return (_UNNAMED_ENUM_KTMOH_COMMITTRANSACTION_RESULT)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Payload { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _PO_POWER_PLANE_PROFILE
 
	public class _PO_POWER_PLANE_PROFILE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_POWER_PLANE_PROFILE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_POWER_PLANE_PROFILE"": [ 8, {
				 ""ExclusivePowerMw"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""PeakPowerMw"": [ 4, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 ExclusivePowerMw { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 PeakPowerMw { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
	}
	#endregion
	#region _EVENT_PAYLOAD_PREDICATE
 
	public class _EVENT_PAYLOAD_PREDICATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EVENT_PAYLOAD_PREDICATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EVENT_PAYLOAD_PREDICATE"": [ 24, {
				 ""FieldIndex"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""CompareOp"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""Value"": [ 8, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt16 FieldIndex { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 CompareOp { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt64[] Value
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _ARM_LOADER_BLOCK
 
	public class _ARM_LOADER_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ARM_LOADER_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ARM_LOADER_BLOCK"": [ 4, {
				 ""PlaceHolder"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PlaceHolder { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT
 
	public class _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PNP_RESOURCE_CONFLICT_TRACE_CONTEXT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PNP_RESOURCE_CONFLICT_TRACE_CONTEXT"": [ 24, {
				 ""ResourceType"": [ 0, [ ""Byte"", ""null"" ]],
				 ""AlternativeCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""ResourceRequests"": [ 8, [ ""Pointer"", ""{\""target\"":\""_IO_RESOURCE_DESCRIPTOR\""}"" ]],
				 ""ArbiterInstance"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public Byte ResourceType{ get { return _StructureData[_BufferOffset +0]; } }
		public UInt32 AlternativeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 ResourceRequests { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 ArbiterInstance { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _ISRDPCSTATS_SEQUENCE
 
	public class _ISRDPCSTATS_SEQUENCE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ISRDPCSTATS_SEQUENCE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ISRDPCSTATS_SEQUENCE"": [ 40, {
				 ""SequenceNumber"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""IsrTime"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""IsrCount"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""DpcTime"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""DpcCount"": [ 32, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SequenceNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 IsrTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 IsrCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 DpcTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 DpcCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _PEP_WORK_COMPLETE_PERF_STATE
 
	public class _PEP_WORK_COMPLETE_PERF_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_WORK_COMPLETE_PERF_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_WORK_COMPLETE_PERF_STATE"": [ 16, {
				 ""DeviceHandle"": [ 0, [ ""Pointer"", ""{\""target\"":\""POHANDLE__\""}"" ]],
				 ""Component"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Succeeded"": [ 12, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DeviceHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Component { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public Byte Succeeded{ get { return _StructureData[_BufferOffset +12]; } }
	}
	#endregion
	#region _LOADER_PERFORMANCE_DATA
 
	public class _LOADER_PERFORMANCE_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LOADER_PERFORMANCE_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 96; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LOADER_PERFORMANCE_DATA"": [ 96, {
				 ""StartTime"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""EndTime"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""PreloadEndTime"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""TcbLoaderStartTime"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""LoadHypervisorTime"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""LaunchHypervisorTime"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""LoadVsmTime"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""LaunchVsmTime"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""ExecuteTransitionStartTime"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""ExecuteTransitionEndTime"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""LoadDriversTime"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""CleanupVsmTime"": [ 88, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 StartTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 EndTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 PreloadEndTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 TcbLoaderStartTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 LoadHypervisorTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 LaunchHypervisorTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 LoadVsmTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 LaunchVsmTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 ExecuteTransitionStartTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 ExecuteTransitionEndTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 LoadDriversTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 CleanupVsmTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
	}
	#endregion
	#region _MI_FREE_LARGE_PAGES
 
	public class _MI_FREE_LARGE_PAGES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_FREE_LARGE_PAGES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 1072; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_FREE_LARGE_PAGES"": [ 1072, {
				 ""LargePageFreeCount"": [ 0, [ ""Array"", ""{\""count\"":2,\""target\"":\""UInt64\""}"" ]],
				 ""LargePageFreeCountHiLow"": [ 16, [ ""Array"", ""{\""count\"":4,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""UInt64\""}}"" ]],
				 ""LargePagesCount"": [ 48, [ ""Array"", ""{\""count\"":64,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""UInt64\""}}"" ]],
				 ""LargePageEntries"": [ 560, [ ""Array"", ""{\""count\"":64,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""_MI_FREE_LARGE_PAGE_LIST\""}}"" ]] }]
				 }
				)";
			}
		}
		public UInt64[] LargePageFreeCount
		{
			get
			{
				UInt64[] returnValue = new UInt64[2];
				for(int i=0; i<2; i++ )
					returnValue[i] = BitConverter.ToUInt64(_StructureData, (i * sizeof(UInt64)) + _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64[] LargePageFreeCountHiLow
		{
			get
			{
				UInt64[] returnValue = new UInt64[4];
				int size = 8;
				for(int i=0; i<4; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 16);
				return returnValue;
			}
		}
		public UInt64[] LargePagesCount
		{
			get
			{
				UInt64[] returnValue = new UInt64[64];
				int size = 8;
				for(int i=0; i<64; i++ )
					returnValue[i] = (UInt64)BitConverter.ToUInt64(_StructureData, (i * size) + _BufferOffset + 48);
				return returnValue;
			}
		}
		public _MI_FREE_LARGE_PAGE_LIST[] LargePageEntries
		{
			get
			{
				_MI_FREE_LARGE_PAGE_LIST[] returnValue = new _MI_FREE_LARGE_PAGE_LIST[64];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<64; i++ )
					returnValue[i] = new _MI_FREE_LARGE_PAGE_LIST(_StructureData, (i * size) + _BufferOffset + 560);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RTL_DRIVE_LETTER_CURDIR
 
	public class _RTL_DRIVE_LETTER_CURDIR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RTL_DRIVE_LETTER_CURDIR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RTL_DRIVE_LETTER_CURDIR"": [ 24, {
				 ""Flags"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Length"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""TimeStamp"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""DosPath"": [ 8, [ ""_STRING"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Flags { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Length { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt32 TimeStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _STRING DosPath
		{
			get
			{
				_STRING returnValue = new _STRING(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
	}
	#endregion
	#region _EFI_FIRMWARE_INFORMATION
 
	public class _EFI_FIRMWARE_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EFI_FIRMWARE_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EFI_FIRMWARE_INFORMATION"": [ 56, {
				 ""FirmwareVersion"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""VirtualEfiRuntimeServices"": [ 8, [ ""Pointer"", ""{\""target\"":\""_VIRTUAL_EFI_RUNTIME_SERVICES\""}"" ]],
				 ""SetVirtualAddressMapStatus"": [ 16, [ ""Int32"", ""null"" ]],
				 ""MissedMappingsCount"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""FirmwareResourceList"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""EfiMemoryMap"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""EfiMemoryMapSize"": [ 48, [ ""UInt32"", ""null"" ]],
				 ""EfiMemoryMapDescriptorSize"": [ 52, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 FirmwareVersion { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 VirtualEfiRuntimeServices { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public Int32 SetVirtualAddressMapStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 MissedMappingsCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public _LIST_ENTRY FirmwareResourceList
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public UInt64 EfiMemoryMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt32 EfiMemoryMapSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 EfiMemoryMapDescriptorSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
	}
	#endregion
	#region _PEP_WORK_IDLE_STATE
 
	public class _PEP_WORK_IDLE_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_WORK_IDLE_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_WORK_IDLE_STATE"": [ 16, {
				 ""DeviceHandle"": [ 0, [ ""Pointer"", ""{\""target\"":\""POHANDLE__\""}"" ]],
				 ""Component"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""State"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DeviceHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Component { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 State { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _POP_POWER_PLANE
 
	public class _POP_POWER_PLANE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_POWER_PLANE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_POWER_PLANE"": [ 64, {
				 ""PowerPlaneId"": [ 0, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""Lock"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""OldIrql"": [ 24, [ ""Byte"", ""null"" ]],
				 ""DevicePowerMw"": [ 28, [ ""Int32"", ""null"" ]],
				 ""PmaxHandle"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""NotifyDevicePowerDraw"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""DeviceCount"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""Devices"": [ 56, [ ""Pointer"", ""{\""target\"":\""_POP_DEVICE_POWER_PROFILE*\""}"" ]] }]
				 }
				)";
			}
		}
		public _UNICODE_STRING PowerPlaneId
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Lock { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Byte OldIrql{ get { return _StructureData[_BufferOffset +24]; } }
		public Int32 DevicePowerMw { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 28); } }
		public UInt64 PmaxHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 NotifyDevicePowerDraw { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 DeviceCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 Devices { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
	}
	#endregion
	#region _PO_HIBER_PERF
 
	public class _PO_HIBER_PERF
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_HIBER_PERF(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 504; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_HIBER_PERF"": [ 504, {
				 ""HiberIoTicks"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""HiberIoCpuTicks"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""HiberInitTicks"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""HiberHiberFileTicks"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""HiberCompressTicks"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""HiberSharedBufferTicks"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""HiberChecksumTicks"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""HiberChecksumIoTicks"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""TotalHibernateTime"": [ 64, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""HibernateCompleteTimestamp"": [ 72, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""POSTTime"": [ 80, [ ""UInt32"", ""null"" ]],
				 ""ResumeBootMgrTime"": [ 84, [ ""UInt32"", ""null"" ]],
				 ""BootmgrUserInputTime"": [ 88, [ ""UInt32"", ""null"" ]],
				 ""ResumeAppTicks"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""ResumeAppStartTimestamp"": [ 104, [ ""UInt64"", ""null"" ]],
				 ""ResumeLibraryInitTicks"": [ 112, [ ""UInt64"", ""null"" ]],
				 ""ResumeInitTicks"": [ 120, [ ""UInt64"", ""null"" ]],
				 ""ResumeRestoreImageStartTimestamp"": [ 128, [ ""UInt64"", ""null"" ]],
				 ""ResumeHiberFileTicks"": [ 136, [ ""UInt64"", ""null"" ]],
				 ""ResumeIoTicks"": [ 144, [ ""UInt64"", ""null"" ]],
				 ""ResumeDecompressTicks"": [ 152, [ ""UInt64"", ""null"" ]],
				 ""ResumeAllocateTicks"": [ 160, [ ""UInt64"", ""null"" ]],
				 ""ResumeUserInOutTicks"": [ 168, [ ""UInt64"", ""null"" ]],
				 ""ResumeMapTicks"": [ 176, [ ""UInt64"", ""null"" ]],
				 ""ResumeUnmapTicks"": [ 184, [ ""UInt64"", ""null"" ]],
				 ""ResumeChecksumTicks"": [ 192, [ ""UInt64"", ""null"" ]],
				 ""ResumeChecksumIoTicks"": [ 200, [ ""UInt64"", ""null"" ]],
				 ""ResumeKernelSwitchTimestamp"": [ 208, [ ""UInt64"", ""null"" ]],
				 ""CyclesPerMs"": [ 216, [ ""UInt64"", ""null"" ]],
				 ""WriteLogDataTimestamp"": [ 224, [ ""UInt64"", ""null"" ]],
				 ""KernelReturnFromHandler"": [ 232, [ ""UInt64"", ""null"" ]],
				 ""TimeStampCounterAtSwitchTime"": [ 240, [ ""UInt64"", ""null"" ]],
				 ""HalTscOffset"": [ 248, [ ""UInt64"", ""null"" ]],
				 ""HvlTscOffset"": [ 256, [ ""UInt64"", ""null"" ]],
				 ""SleeperThreadEnd"": [ 264, [ ""UInt64"", ""null"" ]],
				 ""PostCmosUpdateTimestamp"": [ 272, [ ""UInt64"", ""null"" ]],
				 ""KernelReturnSystemPowerStateTimestamp"": [ 280, [ ""UInt64"", ""null"" ]],
				 ""IoBoundedness"": [ 288, [ ""UInt64"", ""null"" ]],
				 ""KernelDecompressTicks"": [ 296, [ ""UInt64"", ""null"" ]],
				 ""KernelIoTicks"": [ 304, [ ""UInt64"", ""null"" ]],
				 ""KernelCopyTicks"": [ 312, [ ""UInt64"", ""null"" ]],
				 ""ReadCheckCount"": [ 320, [ ""UInt64"", ""null"" ]],
				 ""KernelInitTicks"": [ 328, [ ""UInt64"", ""null"" ]],
				 ""KernelResumeHiberFileTicks"": [ 336, [ ""UInt64"", ""null"" ]],
				 ""KernelIoCpuTicks"": [ 344, [ ""UInt64"", ""null"" ]],
				 ""KernelSharedBufferTicks"": [ 352, [ ""UInt64"", ""null"" ]],
				 ""KernelAnimationTicks"": [ 360, [ ""UInt64"", ""null"" ]],
				 ""KernelChecksumTicks"": [ 368, [ ""UInt64"", ""null"" ]],
				 ""KernelChecksumIoTicks"": [ 376, [ ""UInt64"", ""null"" ]],
				 ""AnimationStart"": [ 384, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""AnimationStop"": [ 392, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""DeviceResumeTime"": [ 400, [ ""UInt32"", ""null"" ]],
				 ""SecurePagesProcessed"": [ 408, [ ""UInt64"", ""null"" ]],
				 ""BootPagesProcessed"": [ 416, [ ""UInt64"", ""null"" ]],
				 ""KernelPagesProcessed"": [ 424, [ ""UInt64"", ""null"" ]],
				 ""BootBytesWritten"": [ 432, [ ""UInt64"", ""null"" ]],
				 ""KernelBytesWritten"": [ 440, [ ""UInt64"", ""null"" ]],
				 ""BootPagesWritten"": [ 448, [ ""UInt64"", ""null"" ]],
				 ""KernelPagesWritten"": [ 456, [ ""UInt64"", ""null"" ]],
				 ""BytesWritten"": [ 464, [ ""UInt64"", ""null"" ]],
				 ""PagesWritten"": [ 472, [ ""UInt32"", ""null"" ]],
				 ""FileRuns"": [ 476, [ ""UInt32"", ""null"" ]],
				 ""NoMultiStageResumeReason"": [ 480, [ ""UInt32"", ""null"" ]],
				 ""MaxHuffRatio"": [ 484, [ ""UInt32"", ""null"" ]],
				 ""AdjustedTotalResumeTime"": [ 488, [ ""UInt64"", ""null"" ]],
				 ""ResumeCompleteTimestamp"": [ 496, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 HiberIoTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 HiberIoCpuTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 HiberInitTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 HiberHiberFileTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 HiberCompressTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 HiberSharedBufferTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 HiberChecksumTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 HiberChecksumIoTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public _LARGE_INTEGER TotalHibernateTime
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 64);
				return returnValue;
			}
		}
		public _LARGE_INTEGER HibernateCompleteTimestamp
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 72);
				return returnValue;
			}
		}
		public UInt32 POSTTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 80); } }
		public UInt32 ResumeBootMgrTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 84); } }
		public UInt32 BootmgrUserInputTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 88); } }
		public UInt64 ResumeAppTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 ResumeAppStartTimestamp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 ResumeLibraryInitTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
		public UInt64 ResumeInitTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 120); } }
		public UInt64 ResumeRestoreImageStartTimestamp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 128); } }
		public UInt64 ResumeHiberFileTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 136); } }
		public UInt64 ResumeIoTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 144); } }
		public UInt64 ResumeDecompressTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 152); } }
		public UInt64 ResumeAllocateTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 160); } }
		public UInt64 ResumeUserInOutTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 168); } }
		public UInt64 ResumeMapTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 176); } }
		public UInt64 ResumeUnmapTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 184); } }
		public UInt64 ResumeChecksumTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 192); } }
		public UInt64 ResumeChecksumIoTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 200); } }
		public UInt64 ResumeKernelSwitchTimestamp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 208); } }
		public UInt64 CyclesPerMs { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 216); } }
		public UInt64 WriteLogDataTimestamp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 224); } }
		public UInt64 KernelReturnFromHandler { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 232); } }
		public UInt64 TimeStampCounterAtSwitchTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 240); } }
		public UInt64 HalTscOffset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 248); } }
		public UInt64 HvlTscOffset { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 256); } }
		public UInt64 SleeperThreadEnd { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 264); } }
		public UInt64 PostCmosUpdateTimestamp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 272); } }
		public UInt64 KernelReturnSystemPowerStateTimestamp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 280); } }
		public UInt64 IoBoundedness { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 288); } }
		public UInt64 KernelDecompressTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 296); } }
		public UInt64 KernelIoTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 304); } }
		public UInt64 KernelCopyTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 312); } }
		public UInt64 ReadCheckCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 320); } }
		public UInt64 KernelInitTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 328); } }
		public UInt64 KernelResumeHiberFileTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 336); } }
		public UInt64 KernelIoCpuTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 344); } }
		public UInt64 KernelSharedBufferTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 352); } }
		public UInt64 KernelAnimationTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 360); } }
		public UInt64 KernelChecksumTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 368); } }
		public UInt64 KernelChecksumIoTicks { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 376); } }
		public _LARGE_INTEGER AnimationStart
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 384);
				return returnValue;
			}
		}
		public _LARGE_INTEGER AnimationStop
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 392);
				return returnValue;
			}
		}
		public UInt32 DeviceResumeTime { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 400); } }
		public UInt64 SecurePagesProcessed { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 408); } }
		public UInt64 BootPagesProcessed { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 416); } }
		public UInt64 KernelPagesProcessed { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 424); } }
		public UInt64 BootBytesWritten { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 432); } }
		public UInt64 KernelBytesWritten { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 440); } }
		public UInt64 BootPagesWritten { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 448); } }
		public UInt64 KernelPagesWritten { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 456); } }
		public UInt64 BytesWritten { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 464); } }
		public UInt32 PagesWritten { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 472); } }
		public UInt32 FileRuns { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 476); } }
		public UInt32 NoMultiStageResumeReason { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 480); } }
		public UInt32 MaxHuffRatio { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 484); } }
		public UInt64 AdjustedTotalResumeTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 488); } }
		public UInt64 ResumeCompleteTimestamp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 496); } }
	}
	#endregion
	#region _IO_CLIENT_EXTENSION
 
	public class _IO_CLIENT_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _IO_CLIENT_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_IO_CLIENT_EXTENSION"": [ 16, {
				 ""NextExtension"": [ 0, [ ""Pointer"", ""{\""target\"":\""_IO_CLIENT_EXTENSION\""}"" ]],
				 ""ClientIdentificationAddress"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 NextExtension { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 ClientIdentificationAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _SMBIOS3_TABLE_HEADER
 
	public class _SMBIOS3_TABLE_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _SMBIOS3_TABLE_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_SMBIOS3_TABLE_HEADER"": [ 24, {
				 ""Signature"": [ 0, [ ""Array"", ""{\""count\"":5,\""target\"":\""Byte\""}"" ]],
				 ""Checksum"": [ 5, [ ""Byte"", ""null"" ]],
				 ""Length"": [ 6, [ ""Byte"", ""null"" ]],
				 ""MajorVersion"": [ 7, [ ""Byte"", ""null"" ]],
				 ""MinorVersion"": [ 8, [ ""Byte"", ""null"" ]],
				 ""Docrev"": [ 9, [ ""Byte"", ""null"" ]],
				 ""EntryPointRevision"": [ 10, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 11, [ ""Byte"", ""null"" ]],
				 ""StructureTableMaximumSize"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""StructureTableAddress"": [ 16, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public Byte[] Signature
		{
			get
			{
				Byte[] returnValue = new Byte[5];
				for(int i=0; i<5; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 0];
				return returnValue;
			}
		}
		public Byte Checksum{ get { return _StructureData[_BufferOffset +5]; } }
		public Byte Length{ get { return _StructureData[_BufferOffset +6]; } }
		public Byte MajorVersion{ get { return _StructureData[_BufferOffset +7]; } }
		public Byte MinorVersion{ get { return _StructureData[_BufferOffset +8]; } }
		public Byte Docrev{ get { return _StructureData[_BufferOffset +9]; } }
		public Byte EntryPointRevision{ get { return _StructureData[_BufferOffset +10]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +11]; } }
		public UInt32 StructureTableMaximumSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public UInt64 StructureTableAddress { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _LOADER_PARAMETER_CI_EXTENSION
 
	public class _LOADER_PARAMETER_CI_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LOADER_PARAMETER_CI_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 80; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LOADER_PARAMETER_CI_EXTENSION"": [ 80, {
				 ""CodeIntegrityOptions"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""UpgradeInProgress"": [ 4, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""IsWinPE"": [ 4, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""CustomKernelSignersAllowed"": [ 4, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""StateSeparationEnabled"": [ 4, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 4, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""WhqlEnforcementDate"": [ 8, [ ""_LARGE_INTEGER"", ""null"" ]],
				 ""RevocationListOffset"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""RevocationListSize"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""CodeIntegrityPolicyOffset"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""CodeIntegrityPolicySize"": [ 28, [ ""UInt32"", ""null"" ]],
				 ""CodeIntegrityPolicyHashOffset"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""CodeIntegrityPolicyHashSize"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""CodeIntegrityPolicyOriginalHashOffset"": [ 40, [ ""UInt32"", ""null"" ]],
				 ""CodeIntegrityPolicyOriginalHashSize"": [ 44, [ ""UInt32"", ""null"" ]],
				 ""WeakCryptoPolicyLoadStatus"": [ 48, [ ""Int32"", ""null"" ]],
				 ""WeakCryptoPolicyOffset"": [ 52, [ ""UInt32"", ""null"" ]],
				 ""WeakCryptoPolicySize"": [ 56, [ ""UInt32"", ""null"" ]],
				 ""SecureBootPolicyOffset"": [ 60, [ ""UInt32"", ""null"" ]],
				 ""SecureBootPolicySize"": [ 64, [ ""UInt32"", ""null"" ]],
				 ""Reserved2"": [ 68, [ ""UInt32"", ""null"" ]],
				 ""SerializedData"": [ 72, [ ""Array"", ""{\""count\"":1,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 CodeIntegrityOptions { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 UpgradeInProgress
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 IsWinPE
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 CustomKernelSignersAllowed
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 StateSeparationEnabled
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 4  end: 32  Mask: 11111111111111111111111111110000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 4);
				var value2 = (value & 4294967280) >> 4;
				return (UInt32)value2;
			}
		}
		public _LARGE_INTEGER WhqlEnforcementDate
		{
			get
			{
				_LARGE_INTEGER returnValue = new _LARGE_INTEGER(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public UInt32 RevocationListOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 RevocationListSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 CodeIntegrityPolicyOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 CodeIntegrityPolicySize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public UInt32 CodeIntegrityPolicyHashOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 CodeIntegrityPolicyHashSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public UInt32 CodeIntegrityPolicyOriginalHashOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 40); } }
		public UInt32 CodeIntegrityPolicyOriginalHashSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 44); } }
		public Int32 WeakCryptoPolicyLoadStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 48); } }
		public UInt32 WeakCryptoPolicyOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 52); } }
		public UInt32 WeakCryptoPolicySize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 56); } }
		public UInt32 SecureBootPolicyOffset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 60); } }
		public UInt32 SecureBootPolicySize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 64); } }
		public UInt32 Reserved2 { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 68); } }
		public Byte[] SerializedData
		{
			get
			{
				Byte[] returnValue = new Byte[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 72];
				return returnValue;
			}
		}
	}
	#endregion
	#region _PCAT_FIRMWARE_INFORMATION
 
	public class _PCAT_FIRMWARE_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PCAT_FIRMWARE_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PCAT_FIRMWARE_INFORMATION"": [ 4, {
				 ""PlaceHolder"": [ 0, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 PlaceHolder { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _LDRP_CSLIST
 
	public class _LDRP_CSLIST
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LDRP_CSLIST(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 8; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LDRP_CSLIST"": [ 8, {
				 ""Tail"": [ 0, [ ""Pointer"", ""{\""target\"":\""_SINGLE_LIST_ENTRY\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Tail { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
	}
	#endregion
	#region _VIRTUAL_EFI_RUNTIME_SERVICES
 
	public class _VIRTUAL_EFI_RUNTIME_SERVICES
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _VIRTUAL_EFI_RUNTIME_SERVICES(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 112; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_VIRTUAL_EFI_RUNTIME_SERVICES"": [ 112, {
				 ""GetTime"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""SetTime"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""GetWakeupTime"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""SetWakeupTime"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""SetVirtualAddressMap"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""ConvertPointer"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""GetVariable"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""GetNextVariableName"": [ 56, [ ""UInt64"", ""null"" ]],
				 ""SetVariable"": [ 64, [ ""UInt64"", ""null"" ]],
				 ""GetNextHighMonotonicCount"": [ 72, [ ""UInt64"", ""null"" ]],
				 ""ResetSystem"": [ 80, [ ""UInt64"", ""null"" ]],
				 ""UpdateCapsule"": [ 88, [ ""UInt64"", ""null"" ]],
				 ""QueryCapsuleCapabilities"": [ 96, [ ""UInt64"", ""null"" ]],
				 ""QueryVariableInfo"": [ 104, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 GetTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 SetTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 GetWakeupTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 SetWakeupTime { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 SetVirtualAddressMap { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 ConvertPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 GetVariable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 GetNextVariableName { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 SetVariable { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 GetNextHighMonotonicCount { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 ResetSystem { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 UpdateCapsule { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 QueryCapsuleCapabilities { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 QueryVariableInfo { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
	}
	#endregion
	#region _MI_STORE_INPAGE_COMPLETE_FLAGS
 
	public class _MI_STORE_INPAGE_COMPLETE_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_STORE_INPAGE_COMPLETE_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_STORE_INPAGE_COMPLETE_FLAGS"": [ 4, {
				 ""EntireFlags"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""StoreFault"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""LowResourceFailure"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""Spare"": [ 0, [ ""BitField"", ""{\""end_bit\"":16,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""RemainingPageCount"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":16,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 EntireFlags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 StoreFault
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 LowResourceFailure
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 Spare
		{
			get
			{
				// start: 2  end: 16  Mask: 1111111111111100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 65532) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 RemainingPageCount
		{
			get
			{
				// start: 16  end: 32  Mask: 11111111111111110000000000000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294901760) >> 16;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _EX_WORK_QUEUE_MANAGER
 
	public class _EX_WORK_QUEUE_MANAGER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _EX_WORK_QUEUE_MANAGER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 280; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_EX_WORK_QUEUE_MANAGER"": [ 280, {
				 ""Partition"": [ 0, [ ""Pointer"", ""{\""target\"":\""_EX_PARTITION\""}"" ]],
				 ""Node"": [ 8, [ ""Pointer"", ""{\""target\"":\""_ENODE\""}"" ]],
				 ""Event"": [ 16, [ ""_KEVENT"", ""null"" ]],
				 ""DeadlockTimer"": [ 40, [ ""_KTIMER"", ""null"" ]],
				 ""ReaperEvent"": [ 104, [ ""_KEVENT"", ""null"" ]],
				 ""ReaperTimer"": [ 128, [ ""_KTIMER2"", ""null"" ]],
				 ""ThreadHandle"": [ 264, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""ExitThread"": [ 272, [ ""UInt32"", ""null"" ]],
				 ""ThreadSeed"": [ 276, [ ""UInt16"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Partition { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Node { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _KEVENT Event
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 16);
				return returnValue;
			}
		}
		public _KTIMER DeadlockTimer
		{
			get
			{
				_KTIMER returnValue = new _KTIMER(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _KEVENT ReaperEvent
		{
			get
			{
				_KEVENT returnValue = new _KEVENT(_StructureData, _BufferOffset + 104);
				return returnValue;
			}
		}
		public _KTIMER2 ReaperTimer
		{
			get
			{
				_KTIMER2 returnValue = new _KTIMER2(_StructureData, _BufferOffset + 128);
				return returnValue;
			}
		}
		public UInt64 ThreadHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 264); } }
		public UInt32 ExitThread { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 272); } }
		public UInt16 ThreadSeed { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 276); } }
	}
	#endregion
	#region _LOADER_PARAMETER_HYPERVISOR_EXTENSION
 
	public class _LOADER_PARAMETER_HYPERVISOR_EXTENSION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LOADER_PARAMETER_HYPERVISOR_EXTENSION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LOADER_PARAMETER_HYPERVISOR_EXTENSION"": [ 64, {
				 ""InitialHypervisorCrashdumpAreaPageCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""HypervisorCrashdumpAreaPageCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""InitialHypervisorCrashdumpAreaSpa"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""HypervisorCrashdumpAreaSpa"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""HypervisorLaunchStatus"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""HypervisorLaunchStatusArg1"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""HypervisorLaunchStatusArg2"": [ 40, [ ""UInt64"", ""null"" ]],
				 ""HypervisorLaunchStatusArg3"": [ 48, [ ""UInt64"", ""null"" ]],
				 ""HypervisorLaunchStatusArg4"": [ 56, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 InitialHypervisorCrashdumpAreaPageCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 HypervisorCrashdumpAreaPageCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 InitialHypervisorCrashdumpAreaSpa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 HypervisorCrashdumpAreaSpa { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 HypervisorLaunchStatus { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 HypervisorLaunchStatusArg1 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 HypervisorLaunchStatusArg2 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 HypervisorLaunchStatusArg3 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 HypervisorLaunchStatusArg4 { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
	}
	#endregion
	#region _DEVICE_FLAGS
 
	public class _DEVICE_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _DEVICE_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_DEVICE_FLAGS"": [ 4, {
				 ""Failed"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ReadOnly"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""Removable"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ConsoleIn"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""ConsoleOut"": [ 0, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""Input"": [ 0, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""Output"": [ 0, [ ""BitField"", ""{\""end_bit\"":7,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Failed
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ReadOnly
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 Removable
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 ConsoleIn
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 ConsoleOut
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 Input
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 Output
		{
			get
			{
				// start: 6  end: 7  Mask: 0000000001000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 64) >> 6;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _PO_NOTIFY_ORDER_LEVEL
 
	public class _PO_NOTIFY_ORDER_LEVEL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_NOTIFY_ORDER_LEVEL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_NOTIFY_ORDER_LEVEL"": [ 72, {
				 ""DeviceCount"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""ActiveCount"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""WaitSleep"": [ 8, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ReadySleep"": [ 24, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""ReadyS0"": [ 40, [ ""_LIST_ENTRY"", ""null"" ]],
				 ""WaitS0"": [ 56, [ ""_LIST_ENTRY"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 DeviceCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 ActiveCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public _LIST_ENTRY WaitSleep
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 8);
				return returnValue;
			}
		}
		public _LIST_ENTRY ReadySleep
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
		public _LIST_ENTRY ReadyS0
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _LIST_ENTRY WaitS0
		{
			get
			{
				_LIST_ENTRY returnValue = new _LIST_ENTRY(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PROFILE_PARAMETER_BLOCK
 
	public class _PROFILE_PARAMETER_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PROFILE_PARAMETER_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PROFILE_PARAMETER_BLOCK"": [ 16, {
				 ""Status"": [ 0, [ ""UInt16"", ""null"" ]],
				 ""Reserved"": [ 2, [ ""UInt16"", ""null"" ]],
				 ""DockingState"": [ 4, [ ""UInt16"", ""null"" ]],
				 ""Capabilities"": [ 6, [ ""UInt16"", ""null"" ]],
				 ""DockID"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""SerialNumber"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt16 Status { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 0); } }
		public UInt16 Reserved { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 2); } }
		public UInt16 DockingState { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 4); } }
		public UInt16 Capabilities { get { return BitConverter.ToUInt16(_StructureData, _BufferOffset + 6); } }
		public UInt32 DockID { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 SerialNumber { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
	#region _PEP_WORK_POWER_CONTROL
 
	public class _PEP_WORK_POWER_CONTROL
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_WORK_POWER_CONTROL(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 56; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_WORK_POWER_CONTROL"": [ 56, {
				 ""DeviceHandle"": [ 0, [ ""Pointer"", ""{\""target\"":\""POHANDLE__\""}"" ]],
				 ""PowerControlCode"": [ 8, [ ""Pointer"", ""{\""target\"":\""_GUID\""}"" ]],
				 ""RequestContext"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InBuffer"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""InBufferSize"": [ 32, [ ""UInt64"", ""null"" ]],
				 ""OutBuffer"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""OutBufferSize"": [ 48, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DeviceHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 PowerControlCode { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 RequestContext { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 InBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 InBufferSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 OutBuffer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 OutBufferSize { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
	}
	#endregion
	#region _PEP_WORK_DEVICE_POWER
 
	public class _PEP_WORK_DEVICE_POWER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_WORK_DEVICE_POWER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_WORK_DEVICE_POWER"": [ 16, {
				 ""DeviceHandle"": [ 0, [ ""Pointer"", ""{\""target\"":\""POHANDLE__\""}"" ]],
				 ""PowerRequired"": [ 8, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DeviceHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Byte PowerRequired{ get { return _StructureData[_BufferOffset +8]; } }
	}
	#endregion
	#region _FAULT_INFORMATION_ARM64_FLAGS
 
	public class _FAULT_INFORMATION_ARM64_FLAGS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FAULT_INFORMATION_ARM64_FLAGS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 4; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FAULT_INFORMATION_ARM64_FLAGS"": [ 4, {
				 ""WriteNotRead"": [ 0, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""InstructionNotData"": [ 0, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""Privileged"": [ 0, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""FaultAddressValid"": [ 0, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""Reserved"": [ 0, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 WriteNotRead
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 InstructionNotData
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 Privileged
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 FaultAddressValid
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 Reserved
		{
			get
			{
				// start: 4  end: 32  Mask: 11111111111111111111111111110000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 0);
				var value2 = (value & 4294967280) >> 4;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _ETWP_NOTIFICATION_HEADER
 
	public class _ETWP_NOTIFICATION_HEADER
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _ETWP_NOTIFICATION_HEADER(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 72; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_ETWP_NOTIFICATION_HEADER"": [ 72, {
				 ""NotificationType"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_ETW_NOTIFICATION_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""NotificationSize"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""RefCount"": [ 8, [ ""Int32"", ""null"" ]],
				 ""ReplyRequested"": [ 12, [ ""Byte"", ""null"" ]],
				 ""ReplyIndex"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""Timeout"": [ 16, [ ""UInt32"", ""null"" ]],
				 ""ReplyCount"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""NotifyeeCount"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""ReplyHandle"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""ReplyObject"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""RegIndex"": [ 24, [ ""UInt32"", ""null"" ]],
				 ""TargetPID"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""SourcePID"": [ 36, [ ""UInt32"", ""null"" ]],
				 ""DestinationGuid"": [ 40, [ ""_GUID"", ""null"" ]],
				 ""SourceGuid"": [ 56, [ ""_GUID"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ETW_NOTIFICATION_TYPE NotificationType { get { return (_ETW_NOTIFICATION_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 NotificationSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public Int32 RefCount { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 8); } }
		public Byte ReplyRequested{ get { return _StructureData[_BufferOffset +12]; } }
		public UInt32 ReplyIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 Timeout { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public UInt32 ReplyCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt32 NotifyeeCount { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 ReplyHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 ReplyObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 RegIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public UInt32 TargetPID { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public UInt32 SourcePID { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 36); } }
		public _GUID DestinationGuid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 40);
				return returnValue;
			}
		}
		public _GUID SourceGuid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 56);
				return returnValue;
			}
		}
	}
	#endregion
	#region _MI_EXTRA_IMAGE_INFORMATION
 
	public class _MI_EXTRA_IMAGE_INFORMATION
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _MI_EXTRA_IMAGE_INFORMATION(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_MI_EXTRA_IMAGE_INFORMATION"": [ 16, {
				 ""SizeOfHeaders"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SizeOfImage"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""TimeDateStamp"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""ImageCetShadowStacksReady"": [ 12, [ ""BitField"", ""{\""end_bit\"":1,\""start_bit\"":0,\""target\"":\""UInt32\""}"" ]],
				 ""ImageCetShadowStacksStrictMode"": [ 12, [ ""BitField"", ""{\""end_bit\"":2,\""start_bit\"":1,\""target\"":\""UInt32\""}"" ]],
				 ""ImageCetSetContextIpValidationRelaxedMode"": [ 12, [ ""BitField"", ""{\""end_bit\"":3,\""start_bit\"":2,\""target\"":\""UInt32\""}"" ]],
				 ""ImageCetDynamicApisAllowInProc"": [ 12, [ ""BitField"", ""{\""end_bit\"":4,\""start_bit\"":3,\""target\"":\""UInt32\""}"" ]],
				 ""ImageCetDowngradeReserved1"": [ 12, [ ""BitField"", ""{\""end_bit\"":5,\""start_bit\"":4,\""target\"":\""UInt32\""}"" ]],
				 ""ImageCetDowngradeReserved2"": [ 12, [ ""BitField"", ""{\""end_bit\"":6,\""start_bit\"":5,\""target\"":\""UInt32\""}"" ]],
				 ""Spare"": [ 12, [ ""BitField"", ""{\""end_bit\"":32,\""start_bit\"":6,\""target\"":\""UInt32\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SizeOfHeaders { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SizeOfImage { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 TimeDateStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 ImageCetShadowStacksReady
		{
			get
			{
				// start: 0  end: 1  Mask: 0000000000000001
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 1) >> 0;
				return (UInt32)value2;
			}
		}
		public UInt32 ImageCetShadowStacksStrictMode
		{
			get
			{
				// start: 1  end: 2  Mask: 0000000000000010
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 2) >> 1;
				return (UInt32)value2;
			}
		}
		public UInt32 ImageCetSetContextIpValidationRelaxedMode
		{
			get
			{
				// start: 2  end: 3  Mask: 0000000000000100
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 4) >> 2;
				return (UInt32)value2;
			}
		}
		public UInt32 ImageCetDynamicApisAllowInProc
		{
			get
			{
				// start: 3  end: 4  Mask: 0000000000001000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 8) >> 3;
				return (UInt32)value2;
			}
		}
		public UInt32 ImageCetDowngradeReserved1
		{
			get
			{
				// start: 4  end: 5  Mask: 0000000000010000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 16) >> 4;
				return (UInt32)value2;
			}
		}
		public UInt32 ImageCetDowngradeReserved2
		{
			get
			{
				// start: 5  end: 6  Mask: 0000000000100000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 32) >> 5;
				return (UInt32)value2;
			}
		}
		public UInt32 Spare
		{
			get
			{
				// start: 6  end: 32  Mask: 11111111111111111111111111000000
				var value = BitConverter.ToUInt32(_StructureData, _BufferOffset + 12);
				var value2 = (value & 4294967232) >> 6;
				return (UInt32)value2;
			}
		}
	}
	#endregion
	#region _NETWORK_LOADER_BLOCK
 
	public class _NETWORK_LOADER_BLOCK
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _NETWORK_LOADER_BLOCK(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_NETWORK_LOADER_BLOCK"": [ 32, {
				 ""DHCPServerACK"": [ 0, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""DHCPServerACKLength"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""BootServerReplyPacket"": [ 16, [ ""Pointer"", ""{\""target\"":\""Byte\""}"" ]],
				 ""BootServerReplyPacketLength"": [ 24, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DHCPServerACK { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 DHCPServerACKLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 BootServerReplyPacket { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt32 BootServerReplyPacketLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
	}
	#endregion
	#region _BOOT_ENTROPY_LDR_RESULT
 
	public class _BOOT_ENTROPY_LDR_RESULT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _BOOT_ENTROPY_LDR_RESULT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 2152; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_BOOT_ENTROPY_LDR_RESULT"": [ 2152, {
				 ""maxEntropySources"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""EntropySourceResult"": [ 8, [ ""Array"", ""{\""count\"":10,\""target\"":\""Pointer\"",\""target_args\"":{\""target\"":\""\""}}"" ]],
				 ""SeedBytesForCng"": [ 1048, [ ""Array"", ""{\""count\"":48,\""target\"":\""Byte\""}"" ]],
				 ""RngBytesForNtoskrnl"": [ 1096, [ ""Array"", ""{\""count\"":1024,\""target\"":\""Byte\""}"" ]],
				 ""KdEntropy"": [ 2120, [ ""Array"", ""{\""count\"":32,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 maxEntropySources { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _BOOT_ENTROPY_SOURCE_LDR_RESULT[] EntropySourceResult
		{
			get
			{
				_BOOT_ENTROPY_SOURCE_LDR_RESULT[] returnValue = new _BOOT_ENTROPY_SOURCE_LDR_RESULT[10];
				int size = returnValue[0].MxStructureSize;
				for(int i=0; i<10; i++ )
					returnValue[i] = new _BOOT_ENTROPY_SOURCE_LDR_RESULT(_StructureData, (i * size) + _BufferOffset + 8);
				return returnValue;
			}
		}
		public Byte[] SeedBytesForCng
		{
			get
			{
				Byte[] returnValue = new Byte[48];
				for(int i=0; i<48; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 1048];
				return returnValue;
			}
		}
		public Byte[] RngBytesForNtoskrnl
		{
			get
			{
				Byte[] returnValue = new Byte[1024];
				for(int i=0; i<1024; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 1096];
				return returnValue;
			}
		}
		public Byte[] KdEntropy
		{
			get
			{
				Byte[] returnValue = new Byte[32];
				for(int i=0; i<32; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 2120];
				return returnValue;
			}
		}
	}
	#endregion
	#region _FS_FILTER_CALLBACKS
 
	public class _FS_FILTER_CALLBACKS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FS_FILTER_CALLBACKS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 120; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FS_FILTER_CALLBACKS"": [ 120, {
				 ""SizeOfFsFilterCallbacks"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Reserved"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""PreAcquireForSectionSynchronization"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PostAcquireForSectionSynchronization"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PreReleaseForSectionSynchronization"": [ 24, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PostReleaseForSectionSynchronization"": [ 32, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PreAcquireForCcFlush"": [ 40, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PostAcquireForCcFlush"": [ 48, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PreReleaseForCcFlush"": [ 56, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PostReleaseForCcFlush"": [ 64, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PreAcquireForModifiedPageWriter"": [ 72, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PostAcquireForModifiedPageWriter"": [ 80, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PreReleaseForModifiedPageWriter"": [ 88, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PostReleaseForModifiedPageWriter"": [ 96, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PreQueryOpen"": [ 104, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]],
				 ""PostQueryOpen"": [ 112, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SizeOfFsFilterCallbacks { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Reserved { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt64 PreAcquireForSectionSynchronization { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 PostAcquireForSectionSynchronization { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public UInt64 PreReleaseForSectionSynchronization { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt64 PostReleaseForSectionSynchronization { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
		public UInt64 PreAcquireForCcFlush { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 40); } }
		public UInt64 PostAcquireForCcFlush { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 48); } }
		public UInt64 PreReleaseForCcFlush { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 56); } }
		public UInt64 PostReleaseForCcFlush { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 64); } }
		public UInt64 PreAcquireForModifiedPageWriter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 72); } }
		public UInt64 PostAcquireForModifiedPageWriter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 80); } }
		public UInt64 PreReleaseForModifiedPageWriter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 88); } }
		public UInt64 PostReleaseForModifiedPageWriter { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 96); } }
		public UInt64 PreQueryOpen { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 104); } }
		public UInt64 PostQueryOpen { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 112); } }
	}
	#endregion
	#region _LPCP_NONPAGED_PORT_QUEUE
 
	public class _LPCP_NONPAGED_PORT_QUEUE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LPCP_NONPAGED_PORT_QUEUE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LPCP_NONPAGED_PORT_QUEUE"": [ 40, {
				 ""Semaphore"": [ 0, [ ""_KSEMAPHORE"", ""null"" ]],
				 ""BackPointer"": [ 32, [ ""Pointer"", ""{\""target\"":\""_LPCP_PORT_OBJECT\""}"" ]] }]
				 }
				)";
			}
		}
		public _KSEMAPHORE Semaphore
		{
			get
			{
				_KSEMAPHORE returnValue = new _KSEMAPHORE(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 BackPointer { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 32); } }
	}
	#endregion
	#region _POP_FX_PERF_SET
 
	public class _POP_FX_PERF_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _POP_FX_PERF_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 32; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_POP_FX_PERF_SET"": [ 32, {
				 ""PerfSet"": [ 0, [ ""Pointer"", ""{\""target\"":\""_PO_FX_COMPONENT_PERF_SET\""}"" ]],
				 ""CurrentPerf"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""CurrentPerfStamp"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""CurrentPerfNominal"": [ 24, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 PerfSet { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 CurrentPerf { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 CurrentPerfStamp { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public Byte CurrentPerfNominal{ get { return _StructureData[_BufferOffset +24]; } }
	}
	#endregion
	#region _PO_FX_PERF_STATE_CHANGE
 
	public class _PO_FX_PERF_STATE_CHANGE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_FX_PERF_STATE_CHANGE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_FX_PERF_STATE_CHANGE"": [ 16, {
				 ""Set"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""StateIndex"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""StateValue"": [ 8, [ ""UInt64"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Set { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 StateIndex { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt64 StateValue { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _PEP_WORK_COMPLETE_IDLE_STATE
 
	public class _PEP_WORK_COMPLETE_IDLE_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_WORK_COMPLETE_IDLE_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_WORK_COMPLETE_IDLE_STATE"": [ 16, {
				 ""DeviceHandle"": [ 0, [ ""Pointer"", ""{\""target\"":\""POHANDLE__\""}"" ]],
				 ""Component"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DeviceHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Component { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _LDR_SERVICE_TAG_RECORD
 
	public class _LDR_SERVICE_TAG_RECORD
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _LDR_SERVICE_TAG_RECORD(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_LDR_SERVICE_TAG_RECORD"": [ 16, {
				 ""Next"": [ 0, [ ""Pointer"", ""{\""target\"":\""_LDR_SERVICE_TAG_RECORD\""}"" ]],
				 ""ServiceTag"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Next { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 ServiceTag { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _PEP_WORK_ACTIVE_COMPLETE
 
	public class _PEP_WORK_ACTIVE_COMPLETE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_WORK_ACTIVE_COMPLETE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_WORK_ACTIVE_COMPLETE"": [ 16, {
				 ""DeviceHandle"": [ 0, [ ""Pointer"", ""{\""target\"":\""POHANDLE__\""}"" ]],
				 ""Component"": [ 8, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DeviceHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt32 Component { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _FS_FILTER_CALLBACK_DATA
 
	public class _FS_FILTER_CALLBACK_DATA
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FS_FILTER_CALLBACK_DATA(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 64; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FS_FILTER_CALLBACK_DATA"": [ 64, {
				 ""SizeOfFsFilterCallbackData"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Operation"": [ 4, [ ""Byte"", ""null"" ]],
				 ""Reserved"": [ 5, [ ""Byte"", ""null"" ]],
				 ""DeviceObject"": [ 8, [ ""Pointer"", ""{\""target\"":\""_DEVICE_OBJECT\""}"" ]],
				 ""FileObject"": [ 16, [ ""Pointer"", ""{\""target\"":\""_FILE_OBJECT\""}"" ]],
				 ""Parameters"": [ 24, [ ""_FS_FILTER_PARAMETERS"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 SizeOfFsFilterCallbackData { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public Byte Operation{ get { return _StructureData[_BufferOffset +4]; } }
		public Byte Reserved{ get { return _StructureData[_BufferOffset +5]; } }
		public UInt64 DeviceObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public UInt64 FileObject { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _FS_FILTER_PARAMETERS Parameters
		{
			get
			{
				_FS_FILTER_PARAMETERS returnValue = new _FS_FILTER_PARAMETERS(_StructureData, _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PO_FX_COMPONENT_PERF_SET
 
	public class _PO_FX_COMPONENT_PERF_SET
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_FX_COMPONENT_PERF_SET(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 48; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_FX_COMPONENT_PERF_SET"": [ 48, {
				 ""Name"": [ 0, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""Flags"": [ 16, [ ""UInt64"", ""null"" ]],
				 ""Unit"": [ 24, [ ""Enumeration"", ""{\""enum_name\"":\""_PO_FX_PERF_STATE_UNIT\"",\""target\"":\""UInt32\""}"" ]],
				 ""Type"": [ 28, [ ""Enumeration"", ""{\""enum_name\"":\""_PO_FX_PERF_STATE_TYPE\"",\""target\"":\""UInt32\""}"" ]],
				 ""Discrete"": [ 32, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""Range"": [ 32, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _UNICODE_STRING Name
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Flags { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
		public _PO_FX_PERF_STATE_UNIT Unit { get { return (_PO_FX_PERF_STATE_UNIT)BitConverter.ToUInt32(_StructureData, _BufferOffset + 24); } }
		public _PO_FX_PERF_STATE_TYPE Type { get { return (_PO_FX_PERF_STATE_TYPE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 28); } }
		public _ANONYMOUS_TAG Discrete
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG Range
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 32);
				return returnValue;
			}
		}
	}
	#endregion
	#region _NB10
 
	public class _NB10
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _NB10(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 20; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_NB10"": [ 20, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Offset"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""TimeStamp"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""Age"": [ 12, [ ""UInt32"", ""null"" ]],
				 ""PdbName"": [ 16, [ ""Array"", ""{\""count\"":1,\""target\"":\""Char\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 Offset { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 TimeStamp { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 Age { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
		public Char[] PdbName
		{
			get
			{
				Char[] returnValue = new Char[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 16);
				return returnValue;
			}
		}
	}
	#endregion
	#region _CURDIR
 
	public class _CURDIR
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _CURDIR(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 24; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_CURDIR"": [ 24, {
				 ""DosPath"": [ 0, [ ""_UNICODE_STRING"", ""null"" ]],
				 ""Handle"": [ 16, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public _UNICODE_STRING DosPath
		{
			get
			{
				_UNICODE_STRING returnValue = new _UNICODE_STRING(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public UInt64 Handle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 16); } }
	}
	#endregion
	#region _BOOT_ENTROPY_SOURCE_LDR_RESULT
 
	public class _BOOT_ENTROPY_SOURCE_LDR_RESULT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _BOOT_ENTROPY_SOURCE_LDR_RESULT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 104; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_BOOT_ENTROPY_SOURCE_LDR_RESULT"": [ 104, {
				 ""SourceId"": [ 0, [ ""Enumeration"", ""{\""enum_name\"":\""_BOOT_ENTROPY_SOURCE_ID\"",\""target\"":\""UInt32\""}"" ]],
				 ""Policy"": [ 8, [ ""UInt64"", ""null"" ]],
				 ""ResultCode"": [ 16, [ ""Enumeration"", ""{\""enum_name\"":\""_BOOT_ENTROPY_SOURCE_RESULT_CODE\"",\""target\"":\""UInt32\""}"" ]],
				 ""ResultStatus"": [ 20, [ ""Int32"", ""null"" ]],
				 ""Time"": [ 24, [ ""UInt64"", ""null"" ]],
				 ""EntropyLength"": [ 32, [ ""UInt32"", ""null"" ]],
				 ""EntropyData"": [ 36, [ ""Array"", ""{\""count\"":64,\""target\"":\""Byte\""}"" ]] }]
				 }
				)";
			}
		}
		public _BOOT_ENTROPY_SOURCE_ID SourceId { get { return (_BOOT_ENTROPY_SOURCE_ID)BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt64 Policy { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
		public _BOOT_ENTROPY_SOURCE_RESULT_CODE ResultCode { get { return (_BOOT_ENTROPY_SOURCE_RESULT_CODE)BitConverter.ToUInt32(_StructureData, _BufferOffset + 16); } }
		public Int32 ResultStatus { get { return BitConverter.ToInt32(_StructureData, _BufferOffset + 20); } }
		public UInt64 Time { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 24); } }
		public UInt32 EntropyLength { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 32); } }
		public Byte[] EntropyData
		{
			get
			{
				Byte[] returnValue = new Byte[64];
				for(int i=0; i<64; i++ )
					returnValue[i] = _StructureData[i + _BufferOffset + 36];
				return returnValue;
			}
		}
	}
	#endregion
	#region _PO_FX_PERF_STATE
 
	public class _PO_FX_PERF_STATE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PO_FX_PERF_STATE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PO_FX_PERF_STATE"": [ 16, {
				 ""Value"": [ 0, [ ""UInt64"", ""null"" ]],
				 ""Context"": [ 8, [ ""Pointer"", ""{\""target\"":\""void\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt64 Value { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public UInt64 Context { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 8); } }
	}
	#endregion
	#region _FS_FILTER_PARAMETERS
 
	public class _FS_FILTER_PARAMETERS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FS_FILTER_PARAMETERS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 40; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FS_FILTER_PARAMETERS"": [ 40, {
				 ""AcquireForModifiedPageWriter"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""ReleaseForModifiedPageWriter"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""AcquireForSectionSynchronization"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""QueryOpen"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]],
				 ""Others"": [ 0, [ ""_ANONYMOUS_TAG"", ""null"" ]] }]
				 }
				)";
			}
		}
		public _ANONYMOUS_TAG AcquireForModifiedPageWriter
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG ReleaseForModifiedPageWriter
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG AcquireForSectionSynchronization
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG QueryOpen
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
		public _ANONYMOUS_TAG Others
		{
			get
			{
				_ANONYMOUS_TAG returnValue = new _ANONYMOUS_TAG(_StructureData, _BufferOffset + 0);
				return returnValue;
			}
		}
	}
	#endregion
	#region _RSDS
 
	public class _RSDS
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _RSDS(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 28; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_RSDS"": [ 28, {
				 ""Signature"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""Guid"": [ 4, [ ""_GUID"", ""null"" ]],
				 ""Age"": [ 20, [ ""UInt32"", ""null"" ]],
				 ""PdbName"": [ 24, [ ""Array"", ""{\""count\"":1,\""target\"":\""Char\""}"" ]] }]
				 }
				)";
			}
		}
		public UInt32 Signature { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public _GUID Guid
		{
			get
			{
				_GUID returnValue = new _GUID(_StructureData, _BufferOffset + 4);
				return returnValue;
			}
		}
		public UInt32 Age { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 20); } }
		public Char[] PdbName
		{
			get
			{
				Char[] returnValue = new Char[1];
				for(int i=0; i<1; i++ )
					returnValue[i] = BitConverter.ToChar(_StructureData, (i * sizeof(Char)) + _BufferOffset + 24);
				return returnValue;
			}
		}
	}
	#endregion
	#region _PEP_WORK_DEVICE_IDLE
 
	public class _PEP_WORK_DEVICE_IDLE
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _PEP_WORK_DEVICE_IDLE(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_PEP_WORK_DEVICE_IDLE"": [ 16, {
				 ""DeviceHandle"": [ 0, [ ""Pointer"", ""{\""target\"":\""POHANDLE__\""}"" ]],
				 ""IgnoreIdleTimeout"": [ 8, [ ""Byte"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt64 DeviceHandle { get { return BitConverter.ToUInt64(_StructureData, _BufferOffset + 0); } }
		public Byte IgnoreIdleTimeout{ get { return _StructureData[_BufferOffset +8]; } }
	}
	#endregion
	#region _FS_FILTER_SECTION_SYNC_OUTPUT
 
	public class _FS_FILTER_SECTION_SYNC_OUTPUT
	{
		private Byte[] _StructureData;
		private int _BufferOffset;
		public _FS_FILTER_SECTION_SYNC_OUTPUT(Byte[] Buffer, int PartitionOffset)
		{
			_StructureData = Buffer;
			_BufferOffset = PartitionOffset;
		}
		public int MxStructureSize { get { return 16; } }
		public string manifest
		{
			get
			{
				return @"(
				{
				 ""_FS_FILTER_SECTION_SYNC_OUTPUT"": [ 16, {
				 ""StructureSize"": [ 0, [ ""UInt32"", ""null"" ]],
				 ""SizeReturned"": [ 4, [ ""UInt32"", ""null"" ]],
				 ""Flags"": [ 8, [ ""UInt32"", ""null"" ]],
				 ""DesiredReadAlignment"": [ 12, [ ""UInt32"", ""null"" ]] }]
				 }
				)";
			}
		}
		public UInt32 StructureSize { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 0); } }
		public UInt32 SizeReturned { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 4); } }
		public UInt32 Flags { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 8); } }
		public UInt32 DesiredReadAlignment { get { return BitConverter.ToUInt32(_StructureData, _BufferOffset + 12); } }
	}
	#endregion
}
